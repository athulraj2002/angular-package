import { FormControl, Validators } from '@angular/forms';
import { EventPromiseCallback, FieldItemPatchInterface } from '../../../../pop-common.model';
import { SetControl } from '../../../../pop-common-dom.models';
export interface InputConfigInterface {
    autofocus?: boolean;
    autoselect?: boolean;
    bubble?: boolean;
    conceal?: boolean;
    control?: FormControl;
    dropSpecial?: boolean;
    disabled?: boolean;
    displayErrors?: boolean;
    empty?: 'ConvertEmptyToNull' | 'ConvertEmptyToZero';
    facade?: boolean;
    helpText?: string;
    hintText?: string;
    hidden?: boolean;
    hint?: boolean;
    id?: string | number;
    label?: string;
    minimal?: boolean;
    mask?: string;
    maxlength?: number;
    metadata?: object;
    name?: string;
    noInitialValue?: boolean;
    onEnter?: EventPromiseCallback;
    patch?: FieldItemPatchInterface;
    pattern?: string;
    prefix?: string;
    prevent?: any[];
    readonly?: boolean;
    required?: boolean;
    session?: boolean;
    sessionPath?: string;
    showMask?: boolean;
    specialChars?: string[];
    suffix?: string;
    selectMode?: boolean;
    selectModeOptionsDirection?: 'up' | 'down';
    tooltip?: string;
    tabOnEnter?: boolean;
    type?: 'text' | 'password' | 'email';
    transformation?: any;
    validators?: Array<Validators>;
    value?: boolean | string | number;
}
export declare class InputConfig implements SetControl {
    autofocus: boolean;
    autoselect: boolean;
    bubble: boolean;
    conceal: boolean;
    displayErrors: boolean;
    disabled: boolean;
    dropSpecial: boolean;
    empty: any;
    facade?: boolean;
    helpText: string;
    hintText: string;
    hidden: boolean;
    hint: boolean;
    id: string;
    label: string;
    maxlength: number;
    mask: any;
    minimal: boolean;
    message: string;
    name: string;
    noInitialValue: boolean;
    onEnter?: EventPromiseCallback;
    patch: FieldItemPatchInterface;
    prefix: string;
    prevent?: any[];
    readonly: boolean;
    required?: boolean;
    showMask: boolean;
    showTooltip: boolean;
    suffix: string;
    selectMode: boolean;
    selectModeOptionsDirection: string;
    session?: boolean;
    sessionPath?: string;
    specialChars: string[];
    tooltip: string;
    type: string;
    tabOnEnter: boolean;
    value?: boolean | string | number;
    control: any;
    clearMessage: any;
    metadata: any;
    pattern: any;
    setType: any;
    transformation: any;
    triggerOnChange: any;
    triggerDirectPatch: any;
    validators: any;
    constructor(params?: InputConfigInterface);
    setControl(): void;
}
