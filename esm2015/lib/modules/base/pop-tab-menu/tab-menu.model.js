export class TabConfig {
    constructor(params) {
        this.hidden = false;
        this.path = '';
        this.scheme = false;
        this.overhead = 0;
        this.sections = null;
        this.syncPositions = false;
        this.requireRefresh = false;
        this.when = null;
        this.wrap = true;
        this.columnWrap = true;
        this.groups = {};
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (!this.name)
            this.name = this.id.replace(/_/g, ' ').replace(/(?:^|\s)\S/g, function (a) {
                return a.toUpperCase();
            });
        if (!this.path)
            this.path = this.id.replace(/_/g, '-').toLowerCase();
        if (!this.metadata)
            this.metadata = {};
        if (!this.syncPositionMap)
            this.syncPositionMap = {};
        if (!this.positions)
            this.positions = { 1: { flex: 1 } };
        Object.keys(this.positions).map((position) => {
            if (!this.positions[position].min)
                this.positions[position].multiple_min = null;
            if (!this.positions[position].max)
                this.positions[position].multiple_max = null;
            if (!this.positions[position].flex && this.positions[position].cols)
                this.positions[position].flex = this.positions[position].cols;
            delete this.positions[position].cols;
        });
    }
}
export class TabMenuConfig {
    constructor(params) {
        this.name = '';
        this.goBack = true;
        this.tabs = [];
        this.buttons = [];
        this.portal = false;
        this.metadata = {};
        this.loaded = false;
        this.loading = false;
        if (params)
            for (const i in params)
                this[i] = params[i];
    }
}
//# sourceMappingURL=data:application/json;base64,