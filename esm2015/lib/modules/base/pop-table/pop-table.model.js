import { MatTableDataSource } from '@angular/material/table';
export class TableOptionsConfig {
    constructor(params) {
        this.columns = [];
        this.allowColumnDisplayToggle = true;
        this.allowColumnStickyToggle = true;
        this.allowColumnSearchToggle = true;
        this.allowColumnSortToggle = true;
        this.allowHeaderStickyToggle = true;
        this.allowHeaderDisplayToggle = true;
        this.allowPaginatorToggle = true;
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (this.defaultOptions.headerDisplay !== false)
            this.defaultOptions.headerDisplay = true;
        if (this.defaultOptions.headerSticky !== false)
            this.defaultOptions.headerSticky = true;
        if (!this.defaultOptions.paginator)
            this.defaultOptions.paginator = 0;
        if (this.defaultOptions.search !== false)
            this.defaultOptions.search = true;
        if (this.defaultOptions.searchColumns !== true)
            this.defaultOptions.searchColumns = false;
        if (this.defaultOptions.sort !== true)
            this.defaultOptions.sort = false;
    }
}
export class TableConfig {
    constructor(params) {
        // General Params
        this.buttons = [];
        this.columnDefinitions = {};
        this.dealWithAngularChangeDetectionFailure = false;
        this.data = [];
        this.height = 500; // static height px
        this.initialSort = null;
        this.initialSortDirection = 'asc';
        this.loading = false;
        this.metadata = null;
        this.options = null;
        this.sort = false;
        this.route = '';
        this.linkBehavior = 'route';
        // Optionable Params
        //  - These can be toggled in options so if any default are changed here make sure to also subject them in TableOptionsConfig
        this.headerDisplay = true;
        this.headerSticky = false;
        this.paginator = false;
        this.search = true;
        this.searchValue = '';
        this.searchColumns = false;
        this.advanced_search = false;
        // Built through updates.
        this.matData = new MatTableDataSource();
        this.columnConfig = { visible: [], templates: {} };
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (!(['route', 'portal'].includes(this.linkBehavior)))
            this.linkBehavior = 'route';
        // Run these in case params had conflicting info.
        if (this.paginator) {
            this.headerSticky = false;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wLXRhYmxlLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcG9wLWNvbW1vbi9zcmMvbGliL21vZHVsZXMvYmFzZS9wb3AtdGFibGUvcG9wLXRhYmxlLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBK0Q3RCxNQUFNLE9BQU8sa0JBQWtCO0lBZTdCLFlBQVksTUFBNkI7UUFiekMsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUliLDZCQUF3QixHQUFHLElBQUksQ0FBQztRQUNoQyw0QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFDL0IsNEJBQXVCLEdBQUcsSUFBSSxDQUFDO1FBQy9CLDBCQUFxQixHQUFHLElBQUksQ0FBQztRQUM3Qiw0QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFDL0IsNkJBQXdCLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLHlCQUFvQixHQUFHLElBQUksQ0FBQztRQUkxQixJQUFJLE1BQU07WUFBRyxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU07Z0JBQUcsSUFBSSxDQUFFLENBQUMsQ0FBRSxHQUFHLE1BQU0sQ0FBRSxDQUFDLENBQUUsQ0FBQztRQUU5RCxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLEtBQUs7WUFBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDM0YsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksS0FBSyxLQUFLO1lBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pGLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVM7WUFBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDdkUsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sS0FBSyxLQUFLO1lBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQzdFLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEtBQUssSUFBSTtZQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMzRixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxLQUFLLElBQUk7WUFBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7SUFDM0UsQ0FBQztDQUNGO0FBNkJELE1BQU0sT0FBTyxXQUFXO0lBNkN0QixZQUFZLE1BQXVCO1FBekNuQyxpQkFBaUI7UUFDakIsWUFBTyxHQUEyQixFQUFFLENBQUM7UUFDckMsc0JBQWlCLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLDBDQUFxQyxHQUFHLEtBQUssQ0FBQztRQUM5QyxTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsV0FBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQjtRQUVqQyxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUNuQix5QkFBb0IsR0FBa0IsS0FBSyxDQUFDO1FBRTVDLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsYUFBUSxHQUFHLElBQUksQ0FBQztRQUNoQixZQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2YsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUNiLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxpQkFBWSxHQUFHLE9BQU8sQ0FBQztRQUV2QixvQkFBb0I7UUFDcEIsNkhBQTZIO1FBQzdILGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsV0FBTSxHQUFHLElBQUksQ0FBQztRQUNkLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBSXhCLHlCQUF5QjtRQUN6QixZQUFPLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO1FBQ25DLGlCQUFZLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQVc1QyxJQUFJLE1BQU07WUFBRyxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU07Z0JBQUcsSUFBSSxDQUFFLENBQUMsQ0FBRSxHQUFHLE1BQU0sQ0FBRSxDQUFDLENBQUUsQ0FBQztRQUM5RCxJQUFJLENBQUMsQ0FBRSxDQUFFLE9BQU8sRUFBRSxRQUFRLENBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFFO1lBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7UUFDekYsaURBQWlEO1FBQ2pELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztTQUMzQjtJQUNILENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdFRhYmxlRGF0YVNvdXJjZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3RhYmxlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBvcEJhc2VFdmVudEludGVyZmFjZSB9IGZyb20gJy4uLy4uLy4uL3BvcC1jb21tb24ubW9kZWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtbkRlZmluaXRpb25JbnRlcmZhY2Uge1xuICBjaGVja2JveD86IGJvb2xlYW4gfCB7IG9yZGVyPzogbnVtYmVyLCBzdGlja3k/OiBib29sZWFuLCB2aXNpYmxlPzogYm9vbGVhbiB9O1xuICBkaXNwbGF5Pzogc3RyaW5nOyAgLy8gVGhlIGFjdHVhbCBuYW1lIGRpc3BsYXkgdG8gYmUgc2hvd24uIElmIG5vdCBwYXNzZWQgdGhlbiB3aWxsIG1hcCBuYW1lIHRocm91Z2ggZmllbGRNYXAuXG4gIGhlbHBlcj86IHN0cmluZyB8IHsgdGV4dD86IHN0cmluZywgcG9zaXRpb24/OiBzdHJpbmcgfTsgLy8gQW55IGhlbHBlciB0ZXh0IChvbiBob3ZlcikgdGhpcyBuYW1lIHNob3VsZCBoYXZlXG4gIGljb24/OiB7IHR5cGU6IHN0cmluZywgbmFtZTogc3RyaW5nIH07IC8vIElmIHRoaXMgbmFtZSBzaG91bGQgZGlzcGxheSBhbiBpY29uIGluc3RlYWQgb2YgdGhlIHZhbHVlLlxuICBsaW5rPzogYm9vbGVhbiB8IHN0cmluZzsgICAgICAvLyBIaWdobGlnaHQgbmFtZSB0ZXh0LCBhbmQgZmlyZSByb3V0ZSBldmVudFxuICBvcmRlcj86IG51bWJlcjsgICAgIC8vIFRoZSBvcmRlciB0aGlzIG5hbWUgc2hvdWxkIGJlIGluLlxuICByb3V0ZT86IHN0cmluZzsgICAgIC8vIFRoZSBwYXRoIHRoYXQgd2lsbCBqdW1wIHRvIGlmIHNldC4gSUU6IC9hZG1pbi91c2Vycy86dXNlcl9ma1xuICBpbnRlcm5hbF9uYW1lPzogc3RyaW5nOyAvLyBwb3J0YWwgcGFyYW1cbiAgc3RpY2t5PzogYm9vbGVhbjsgICAvLyBJZiB0aGlzIG5hbWUgc2hvdWxkIGJlIHN0aWNreSBvbiBob3Jpem9udGFsIHNjcm9sbGluZy5cbiAgdmlzaWJsZT86IGJvb2xlYW47ICAvLyBJZiB0aGlzIG5hbWUgc2hvdWxkIGJlIHZpc2libGUuXG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBUYWJsZUJ1dHRvbkludGVyZmFjZSB7XG4gIGlkPzogc3RyaW5nIHwgbnVtYmVyOyAgICAgICAgICAgLy8gRm9yIHNldHRpbmcgdGhlICd0eXBlJyBpbiB0YWJsZSBldmVudHMuIElmIG5vdCBwYXNzZWQsIG5hbWUgd2lsbCBiZSB1c2VkLlxuICBuYW1lOiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgIC8vIFRoZSBuYW1lIG9mIHRoZSBidXR0b24uXG4gIGFjY2Vzc1R5cGU/OiBzdHJpbmc7ICAgICAgICAgICAgIC8vIFJlcXVpcmVzIHVzZXIgdG8gaGF2ZSBsZXZlbCBvZiBwZXJtaXNzb25zIHRvIHNlZSBidXR0b25cbiAgcmVxdWlyZVNlbGVjdGVkPzogYm9vbGVhbjsgICAgICAvLyBNYWtlcyBidXR0b24gYXZhaWxhYmxlIHdoZW4gYXQgbGVhc3Qgb25lIGl0ZW0gaW4gdGFibGUgaXMgc2VsZWN0ZWQuXG4gIHJlcXVpcmVPbmVTZWxlY3RlZD86IGJvb2xlYW47ICAgLy8gTWFrZXMgYnV0dG9uIGF2YWlsYWJsZSB3aGVuIG9ubHkgb25lIGl0ZW0gaXMgc2VsZWN0ZWQuXG4gIHJlcXVpcmVOb25lU2VsZWN0ZWQ/OiBib29sZWFuOyAgLy8gTWFrZXMgYnV0dG9uIGF2YWlsYWJsZSB3aGVuIG5vIGl0ZW1zIGFyZSBzZWxlY3RlZC5cbiAgaGlkZGVuPzogYm9vbGVhbjtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlT3B0aW9uc0ludGVyZmFjZSB7XG4gIGNvbHVtbnM/OiBBcnJheTxzdHJpbmc+OyAvLyBBcnJheSBvZiBhbGwgbmFtZSBuYW1lcy5cbiAgY3VycmVudE9wdGlvbnM/OiB7XG4gICAgY29sdW1uRGVmaW5pdGlvbnM6IHsgWyBrZXk6IHN0cmluZyBdOiBDb2x1bW5EZWZpbml0aW9uSW50ZXJmYWNlIH07XG4gICAgaGVhZGVyRGlzcGxheTogYm9vbGVhbixcbiAgICBoZWFkZXJTdGlja3k6IGJvb2xlYW4sXG4gICAgcGFnaW5hdG9yOiBib29sZWFuLFxuICAgIHNlYXJjaDogYm9vbGVhbixcbiAgICBzZWFyY2hDb2x1bW5zOiBib29sZWFuLFxuICAgIHNvcnQ6IGJvb2xlYW4sXG4gIH07XG4gIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgY29sdW1uRGVmaW5pdGlvbnM6IHsgWyBrZXk6IHN0cmluZyBdOiBDb2x1bW5EZWZpbml0aW9uSW50ZXJmYWNlIH07XG4gICAgaGVhZGVyRGlzcGxheT86IGJvb2xlYW4sXG4gICAgaGVhZGVyU3RpY2t5PzogYm9vbGVhbixcbiAgICBwYWdpbmF0b3I/OiBudW1iZXIsXG4gICAgc2VhcmNoPzogYm9vbGVhbixcbiAgICBzZWFyY2hDb2x1bW5zPzogYm9vbGVhbixcbiAgICBzb3J0PzogYm9vbGVhbixcbiAgfTtcblxuICBhbGxvd0NvbHVtbkRpc3BsYXlUb2dnbGU/OiBib29sZWFuOyAvLyBVc2VyIGlzIGFsbG93ZWQgdG8gdG9nZ2xlIHdoaWNoIGNvbHVtbnMgY2FuIGJlIGRpc3BsYXllZC5cbiAgYWxsb3dDb2x1bW5TdGlja3lUb2dnbGU/OiBib29sZWFuOyAgLy8gVXNlciBpcyBhbGxvd2VkIHRvIHRvZ2dsZSB3aGljaCBjb2x1bW5zIGFyZSBzdGlja3kuXG4gIGFsbG93Q29sdW1uU2VhcmNoVG9nZ2xlPzogYm9vbGVhbjsgIC8vIFVzZXIgaXMgYWxsb3dlZCB0byB0b2dnbGUgbmFtZSBzZWFyY2ggb24vb2ZmLlxuICBhbGxvd0NvbHVtblNvcnRUb2dnbGU/OiBib29sZWFuOyAgICAvLyBVc2VyIGlzIGFsbG93ZWQgdG8gdG9nZ2xlIG5hbWUgc29ydCBvbi9vZmYuXG4gIGFsbG93SGVhZGVyU3RpY2t5VG9nZ2xlPzogYm9vbGVhbjsgIC8vIFVzZXIgaXMgYWxsb3dlZCB0byB0b2dnbGUgc3RpY2t5IGhlYWRlci5cbiAgYWxsb3dIZWFkZXJEaXNwbGF5VG9nZ2xlPzogYm9vbGVhbjsgLy8gVXNlciBpcyBhbGxvd2VkIHRvIHRvZ2dsZSBkaXNwbGF5IG9mIGhlYWRlci5cbiAgYWxsb3dQYWdpbmF0b3JUb2dnbGU/OiBib29sZWFuOyAgICAgLy8gVXNlciBpcyBhbGxvd2VkIHRvIHRvZ2dsZSBwYWdpbmF0aW9uIHNpemVzL29uL29mZi5cbn1cblxuXG5leHBvcnQgY2xhc3MgVGFibGVPcHRpb25zQ29uZmlnIHtcblxuICBjb2x1bW5zID0gW107XG4gIGN1cnJlbnRPcHRpb25zO1xuICBkZWZhdWx0T3B0aW9ucztcblxuICBhbGxvd0NvbHVtbkRpc3BsYXlUb2dnbGUgPSB0cnVlO1xuICBhbGxvd0NvbHVtblN0aWNreVRvZ2dsZSA9IHRydWU7XG4gIGFsbG93Q29sdW1uU2VhcmNoVG9nZ2xlID0gdHJ1ZTtcbiAgYWxsb3dDb2x1bW5Tb3J0VG9nZ2xlID0gdHJ1ZTtcbiAgYWxsb3dIZWFkZXJTdGlja3lUb2dnbGUgPSB0cnVlO1xuICBhbGxvd0hlYWRlckRpc3BsYXlUb2dnbGUgPSB0cnVlO1xuICBhbGxvd1BhZ2luYXRvclRvZ2dsZSA9IHRydWU7XG5cblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFRhYmxlT3B0aW9uc0ludGVyZmFjZSl7XG4gICAgaWYoIHBhcmFtcyApIGZvciggY29uc3QgaSBpbiBwYXJhbXMgKSB0aGlzWyBpIF0gPSBwYXJhbXNbIGkgXTtcblxuICAgIGlmKCB0aGlzLmRlZmF1bHRPcHRpb25zLmhlYWRlckRpc3BsYXkgIT09IGZhbHNlICkgdGhpcy5kZWZhdWx0T3B0aW9ucy5oZWFkZXJEaXNwbGF5ID0gdHJ1ZTtcbiAgICBpZiggdGhpcy5kZWZhdWx0T3B0aW9ucy5oZWFkZXJTdGlja3kgIT09IGZhbHNlICkgdGhpcy5kZWZhdWx0T3B0aW9ucy5oZWFkZXJTdGlja3kgPSB0cnVlO1xuICAgIGlmKCAhdGhpcy5kZWZhdWx0T3B0aW9ucy5wYWdpbmF0b3IgKSB0aGlzLmRlZmF1bHRPcHRpb25zLnBhZ2luYXRvciA9IDA7XG4gICAgaWYoIHRoaXMuZGVmYXVsdE9wdGlvbnMuc2VhcmNoICE9PSBmYWxzZSApIHRoaXMuZGVmYXVsdE9wdGlvbnMuc2VhcmNoID0gdHJ1ZTtcbiAgICBpZiggdGhpcy5kZWZhdWx0T3B0aW9ucy5zZWFyY2hDb2x1bW5zICE9PSB0cnVlICkgdGhpcy5kZWZhdWx0T3B0aW9ucy5zZWFyY2hDb2x1bW5zID0gZmFsc2U7XG4gICAgaWYoIHRoaXMuZGVmYXVsdE9wdGlvbnMuc29ydCAhPT0gdHJ1ZSApIHRoaXMuZGVmYXVsdE9wdGlvbnMuc29ydCA9IGZhbHNlO1xuICB9XG59XG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlSW50ZXJmYWNlIHtcbiAgaWQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGNvbHVtbkRlZmluaXRpb25zPzogeyBbIGtleTogc3RyaW5nIF06IENvbHVtbkRlZmluaXRpb25JbnRlcmZhY2UgfTsgLy8gb2JqZWN0IG9mIG5hbWUgbmFtZXMgYW5kIHRoZWlyIGRlZmluaXRpb25zLlxuICBidXR0b25zPzogQXJyYXk8VGFibGVCdXR0b25JbnRlcmZhY2U+OyAgLy8gQXJyYXkgb2YgdGFibGUgYnV0dG9ucy5cbiAgZGF0YT86IEFycmF5PG9iamVjdD47ICAgICAgICAgICAgICAgICAgIC8vIERhdGEgc2V0IC0gYXJyYXkgb2Ygb2JqZWN0cy5cbiAgaGVpZ2h0PzogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXRpYyBoZWlnaHRcbiAgcGFyZW50SGVpZ2h0Pzogc3RyaW5nOyAgICAgICAgICAgICAgICAgIC8vIHRoZSBoZWlnaHQgdGhhdCB0aGUgdGFibGUgc2hvdWxkIG1hdGNoXG4gIGhlYWRlckRpc3BsYXk/OiBib29sZWFuOyAgICAgICAgICAgICAgICAvLyBJZiBoZWFkZXIgc2hvdWxkIGJlIGRpc3BsYXllZC5cbiAgaGVhZGVyU3RpY2t5PzogYm9vbGVhbjsgICAgICAgICAgICAgICAgIC8vIElmIGhlYWRlciBzaG91bGQgYmUgc3RpY2t5LiBDYW4gbm90IGJlIG9uIGlmIHBhZ2luYXRpb24gaXMgb24uXG4gIGludGVybmFsX25hbWU/OiBzdHJpbmc7XG4gIGluaXRpYWxTb3J0Pzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAvLyBJbml0aWFsIG5hbWUgdG8gc29ydCBvbiBhbnkgdGltZSB0aGUgZGF0YXNldCBpcyB1cGRhdGVkLlxuICBpbml0aWFsU29ydERpcmVjdGlvbj86ICdhc2MnIHwgJ2Rlc2MnO1xuICBsaW5rQmVoYXZpb3I/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIGNsaWNraW5nIG9uIGxpbmtzLCByb3V0ZSwgbW9kYWwsIGN1c3RvbVxuICBtZXRhZGF0YT86IG9iamVjdDsgICAgICAgICAgICAgICAgICAgICAgLy8gQW55IG1ldGFkYXRhIG9iamVjdCB0byBiZSByZXR1cm5lZCBvbiBhbGwgZXZlbnRzLlxuICBhZHZhbmNlZF9zZWFyY2g/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgIC8vIFNldCB0cnVlIGlmIHlvdSB3YW50IHRvIG92ZXJyaWRlIGRlZmF1bHQgc2VhcmNoIGZ1bmN0aW9uYWxpdHkuIFNlYXJjaCBldmVudCB3aWxsIGJlIHRyaWdnZXJlZCBpbnN0ZWFkO1xuICBvcHRpb25zPzogVGFibGVPcHRpb25zQ29uZmlnO1xuICBwYWdpbmF0b3I/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgIC8vIEl0ZW1zIHBlciBwYWdlIGluIHBhZ2luYXRpb24uIGZhbHNlID0gb2ZmLiBDYW4gbm90IGJlIG9uIHdpdGggc3RpY2t5IGhlYWRlci5cbiAgc2VhcmNoPzogYm9vbGVhbjsgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG1haW4gc2VhcmNoIHNob3VsZCBiZSB0dXJuZWQgb24uIElmIG9uLCB3aWxsIG92ZXItcmlkZSBuYW1lIHNlYXJjaC5cbiAgc2VhcmNoVmFsdWU/OnN0cmluZzsgICAgICAgICAgICAgICAgICAgIC8vIEluaXQgdGhlIHNlYXJjaCB2YWx1ZVxuICBzZWFyY2hDb2x1bW5zPzogYm9vbGVhbjsgICAgICAgICAgICAgICAgLy8gSW5kaXZpZHVhbCBuYW1lIHNlYXJjaC4gT3ZlcnJpZGRlbiBieSBzZWFyY2hNYWluXG4gIHNvcnQ/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb2x1bW4gU29ydCBvcHRpb25cbiAgcm91dGU/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZW5lcmFsIHJvdXRlIHRvIHJlZGlyZWN0IG9uIGEgbmFtZSBjbGljayBpZiB0aGUgcm91dGUgcGFyYW1ldGVyIG9uIHRoZSBuYW1lIGRlZmluaXRpb24gaGFzbid0IGJlZW4gc2V0LlxufVxuXG5cbmV4cG9ydCBjbGFzcyBUYWJsZUNvbmZpZyB7XG4gIGlkO1xuICBtYXREYXRhUGFnaW5hdG9yO1xuICBzZWxlY3Rpb247XG4gIC8vIEdlbmVyYWwgUGFyYW1zXG4gIGJ1dHRvbnM6IFRhYmxlQnV0dG9uSW50ZXJmYWNlW10gPSBbXTtcbiAgY29sdW1uRGVmaW5pdGlvbnMgPSB7fTtcbiAgZGVhbFdpdGhBbmd1bGFyQ2hhbmdlRGV0ZWN0aW9uRmFpbHVyZSA9IGZhbHNlO1xuICBkYXRhID0gW107XG4gIGhlaWdodCA9IDUwMDsgLy8gc3RhdGljIGhlaWdodCBweFxuICBwYXJlbnRIZWlnaHQ/OiBzdHJpbmc7IC8vIGNsYXNzIG5hbWUgb2YgdGhlIG91dGVyIGRpdiB0aGF0IHRhYmxlIHNob3VsZCBtYXRjaFxuICBpbml0aWFsU29ydCA9IG51bGw7XG4gIGluaXRpYWxTb3J0RGlyZWN0aW9uOidhc2MnIHwgJ2Rlc2MnID0gJ2FzYyc7XG4gIGludGVybmFsX25hbWU/OiBzdHJpbmc7XG4gIGxvYWRpbmcgPSBmYWxzZTtcbiAgbWV0YWRhdGEgPSBudWxsO1xuICBvcHRpb25zID0gbnVsbDtcbiAgc29ydCA9IGZhbHNlO1xuICByb3V0ZSA9ICcnO1xuICBsaW5rQmVoYXZpb3IgPSAncm91dGUnO1xuXG4gIC8vIE9wdGlvbmFibGUgUGFyYW1zXG4gIC8vICAtIFRoZXNlIGNhbiBiZSB0b2dnbGVkIGluIG9wdGlvbnMgc28gaWYgYW55IGRlZmF1bHQgYXJlIGNoYW5nZWQgaGVyZSBtYWtlIHN1cmUgdG8gYWxzbyBzdWJqZWN0IHRoZW0gaW4gVGFibGVPcHRpb25zQ29uZmlnXG4gIGhlYWRlckRpc3BsYXkgPSB0cnVlO1xuICBoZWFkZXJTdGlja3kgPSBmYWxzZTtcbiAgcGFnaW5hdG9yID0gZmFsc2U7XG4gIHNlYXJjaCA9IHRydWU7XG4gIHNlYXJjaFZhbHVlID0gJyc7XG4gIHNlYXJjaENvbHVtbnMgPSBmYWxzZTtcbiAgYWR2YW5jZWRfc2VhcmNoID0gZmFsc2U7XG5cbiAgb25FdmVudDogU3ViamVjdDxQb3BCYXNlRXZlbnRJbnRlcmZhY2U+O1xuXG4gIC8vIEJ1aWx0IHRocm91Z2ggdXBkYXRlcy5cbiAgbWF0RGF0YSA9IG5ldyBNYXRUYWJsZURhdGFTb3VyY2UoKTtcbiAgY29sdW1uQ29uZmlnID0geyB2aXNpYmxlOiBbXSwgdGVtcGxhdGVzOiB7fSB9O1xuICB1cGRhdGVDb2x1bW5EZWZpbml0aW9ucztcbiAgdXBkYXRlRGF0YTtcbiAgYXBwbHlGaWx0ZXI7XG4gIGNsZWFyU2VsZWN0ZWQ7XG4gIHJlc2V0O1xuICBzZXRMYXlvdXQ7XG4gIHNldEhlaWdodDtcblxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtcz86IFRhYmxlSW50ZXJmYWNlKXtcbiAgICBpZiggcGFyYW1zICkgZm9yKCBjb25zdCBpIGluIHBhcmFtcyApIHRoaXNbIGkgXSA9IHBhcmFtc1sgaSBdO1xuICAgIGlmKCAhKCBbICdyb3V0ZScsICdwb3J0YWwnIF0uaW5jbHVkZXModGhpcy5saW5rQmVoYXZpb3IpICkgKSB0aGlzLmxpbmtCZWhhdmlvciA9ICdyb3V0ZSc7XG4gICAgLy8gUnVuIHRoZXNlIGluIGNhc2UgcGFyYW1zIGhhZCBjb25mbGljdGluZyBpbmZvLlxuICAgIGlmKCB0aGlzLnBhZ2luYXRvciApe1xuICAgICAgdGhpcy5oZWFkZXJTdGlja3kgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxufVxuIl19