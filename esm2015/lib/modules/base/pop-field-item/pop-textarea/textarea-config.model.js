import { FormControl } from '@angular/forms';
export class TextareaConfig {
    constructor(params) {
        this.autoSize = false;
        this.bubble = false;
        this._disabled = false;
        this.displayErrors = true;
        this.facade = false;
        this.helpText = '';
        this.height = 0;
        this.maxHeight = null;
        this.hint = false;
        this.message = '';
        this.maxlength = 1024;
        this.name = 'name';
        this.noInitialValue = false;
        this.readonly = false;
        this.showTooltip = false;
        this.tabOnEnter = false;
        this.tooltip = '';
        this.value = '';
        if (params)
            for (const i in params)
                this[i] = params[i];
        // if( this.height && !isNaN(Number(this.height)) ) this.height = this.height + 'px';
        if (!this.patch)
            this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (this.noInitialValue)
            this.value = '';
        if (!this.control)
            this.setControl();
    }
    setControl() {
        this.control = (this.disabled ? new FormControl({
            value: this.value,
            disabled: true
        }) : new FormControl(this.value, (this.validators ? this.validators : [])));
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
        if (value === true) {
            this.control.disable();
        }
        else if (value === false) {
            this.control.enable();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWEtY29uZmlnLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcG9wLWNvbW1vbi9zcmMvbGliL21vZHVsZXMvYmFzZS9wb3AtZmllbGQtaXRlbS9wb3AtdGV4dGFyZWEvdGV4dGFyZWEtY29uZmlnLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQWMsTUFBTSxnQkFBZ0IsQ0FBQztBQWlDekQsTUFBTSxPQUFPLGNBQWM7SUE2QnpCLFlBQVksTUFBZ0M7UUE1QjVDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUVmLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFDckIsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUNmLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNqQixTQUFJLEdBQUcsS0FBSyxDQUFDO1FBR2IsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUViLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsU0FBSSxHQUFHLE1BQU0sQ0FBQztRQUNkLG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBRXZCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFHakIsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFDcEIsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBRWIsVUFBSyxHQUE2QixFQUFFLENBQUM7UUFJbkMsSUFBSSxNQUFNO1lBQUcsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNO2dCQUFHLElBQUksQ0FBRSxDQUFDLENBQUUsR0FBRyxNQUFNLENBQUUsQ0FBQyxDQUFFLENBQUM7UUFDOUQscUZBQXFGO1FBQ3JGLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFHLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN2RyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEtBQUssS0FBSztZQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQy9FLElBQUksSUFBSSxDQUFDLGNBQWM7WUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87WUFBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUM7WUFDL0MsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBRSxDQUFDO0lBQ2pGLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksUUFBUSxDQUFDLEtBQUs7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBRyxLQUFLLEtBQUssSUFBSSxFQUFDO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDeEI7YUFBSyxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUM7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN2QjtJQUNILENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1Db250cm9sLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRmllbGRJdGVtUGF0Y2hJbnRlcmZhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9wb3AtY29tbW9uLm1vZGVsJztcbmltcG9ydCB7IFNldENvbnRyb2wgfSBmcm9tICcuLi8uLi8uLi8uLi9wb3AtY29tbW9uLWRvbS5tb2RlbHMnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dGFyZWFDb25maWdJbnRlcmZhY2Uge1xuICBhdXRvU2l6ZT86IGJvb2xlYW47ICAgICAgICAgICAvLyBBdXRvIEFkanVzdCB0aGUgaGVpZ2h0IHRvIGZpdCBjb250ZW50XG4gIGJ1YmJsZT86IGJvb2xlYW47ICAgICAgICAgICAgICAgLy8gZmlyZSBldmVudHNcbiAgY29sdW1uPzogc3RyaW5nOyAgICAgICAgICAgICAgLy8gdGhlIGVudGl0eUlkIGZpZWxkIG5hbWVcbiAgY29udHJvbD86IEZvcm1Db250cm9sOyAgICAgICAgICAvLyBUaGUgZm9ybSBjb250cm9sLiBJZiBub3QgcGFzc2VkIG9uZSB3aWxsIGJlIGNyZWF0ZWQuXG4gIGRpc3BsYXlFcnJvcnM/OiBib29sZWFuOyAgICAgICAgLy8gSWYgRXJyb3IgbWVzc2FnZXMgc2hvdWxkIGJlIGRpc3BsYXllZC5cbiAgZGlzYWJsZWQ/OiBib29sZWFuOyAgICAgICAgICAgICAvLyBNYXJrIGFzIGRpc2FibGVkLlxuICBmYWNhZGU/OiBib29sZWFuOyAgICAgICAgICAgICAgIC8vIFNldHMgYSBmbGFnIHRoYXQgc2F5cyB0aGlzIGZpZWxkSXRlbXMgcmVhbGx5IGRvZXMgbm90IGV4aXN0IGluIHRoZSBiYWNrZW5kLCBhbmQgc2hvdWxkIG5vdCBwYXRjaCB0byB0aGUgYXBpXG4gIGhlbHBUZXh0Pzogc3RyaW5nOyAgICAgICAgICAgIC8vIE9uIGhvdmVyIGhlbHBlciB0ZXh0LlxuICBoZWlnaHQ/OiBudW1iZXI7ICAgICAgICAgICAgICAgIC8vIFNldCBhIGZpeGVkIGhlaWdodCBmb3IgdGhlIHRleHQgYXJlYSBvdGhlcndpc2UgY29udGFpbmVyIHdpbGwgYXV0byBleHBhbmRcbiAgaGludD86IGJvb2xlYW47ICAgICAgICAgICAgICAgICAvLyBJZiByZW1haW5pbmcgb2YgYXZhaWxhYmxlIGNoYXJhY3RlcnMgc2hvdWxkIGJlIGRpc3BsYXllZFxuICBpZD86IHN0cmluZyB8IG51bWJlcjsgICAgICAgICAgIC8vIEEgbnVtYmVyIHRoYXQgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgZXZlbnRzIHNvIHlvdSBrbm93IHdoaWNoIGZpZWxkIGl0IGNhbWUgZnJvbS5cbiAgbGFiZWw/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAvLyBJbnB1dCBsYWJlbC5cbiAgbWF4SGVpZ2h0PzogbnVtYmVyOyAgICAgICAgICAgICAgICAvLyBTZXQgYSBmaXhlZCBoZWlnaHQgZm9yIHRoZSB0ZXh0IGFyZWEgb3RoZXJ3aXNlIGNvbnRhaW5lciB3aWxsIGF1dG8gZXhwYW5kXG4gIG1heGxlbmd0aD86IG51bWJlcjsgICAgICAgICAgICAgLy8gRmllbGQgbXVsdGlwbGVfbWF4IGxlbmd0aC5cbiAgbWV0YWRhdGE/OiBvYmplY3Q7ICAgICAgICAgICAgICAvLyBBcnJheSBvZiBvYmplY3RzLiBUbyBiZSBwYXNzZWQgYmFjayBvbiB0aGUgZXZlbnQgZW1pdHRlciBhbmQgaW5jbHVkZWQgaW4gYSBwYXRjaCBpZiBkZXNpcmVkLlxuICBuYW1lPzogc3RyaW5nO1xuICBub0luaXRpYWxWYWx1ZT86Ym9vbGVhbjsgICAgICAgIC8vIFNldCB0byB0cnVlIHRvIGFsd2F5cyBoYXZlIGFuIGVtcHR5IHZhbHVlIG9uIGxvYWRcbiAgcGF0Y2g/OiBGaWVsZEl0ZW1QYXRjaEludGVyZmFjZTsgICAgICAgICAvLyBJZiBmaWVsZCBzaG91bGQgYmUgYXV0by1wYXRjaGVkLlxuICByZWFkb25seT86IGJvb2xlYW47ICAgICAgICAgICAgIC8vIE1hcmsgYXMgcmVhZG9ubHkuXG4gIHNlc3Npb24/OiBib29sZWFuOyAgICAgICAgICAgICAgICAvLyBJZiBmaWVsZCB2YWx1ZSBjaGFuZ2Ugc2hvdWxkIGJlIHN0b3JlZCB0byBjb3JlIGVudGl0eVxuICBzZXNzaW9uUGF0aD86IHN0cmluZzsgICAgICAgICAgICAgICAgLy8gSWYgc2Vzc2lvbiBwYXRoIGlmIG5vdCBzdG9yZWQgb24gcm9vdCBlbnRpdHlcbiAgdG9vbHRpcD86IHN0cmluZzsgICAgICAgICAgICAgICAvLyBUb29sdGlwIGZvciBpbmZvcm1hdGlvbiB0byBzaG93IHdoZW4gaW5wdXQgaXMgZm9jdXNlZFxuICB2YWxpZGF0b3JzPzogQXJyYXk8VmFsaWRhdG9ycz47IC8vIEFycmF5IG9mIFZhbGlkYXRvcnMuXG4gIHZhbHVlPzogYm9vbGVhbiB8IHN0cmluZyB8IG51bWJlcjsgICAgICAgIC8vIEluaXRpYWwgdmFsdWUuXG59XG5cblxuZXhwb3J0IGNsYXNzIFRleHRhcmVhQ29uZmlnIGltcGxlbWVudHMgU2V0Q29udHJvbHtcbiAgYXV0b1NpemUgPSBmYWxzZTtcbiAgYnViYmxlID0gZmFsc2U7XG4gIGNvbnRyb2w6IEZvcm1Db250cm9sO1xuICBfZGlzYWJsZWQgPSBmYWxzZTtcbiAgZGlzcGxheUVycm9ycyA9IHRydWU7XG4gIGZhY2FkZSA9IGZhbHNlO1xuICBoZWxwVGV4dCA9ICcnO1xuICBoZWlnaHQgPSAwO1xuICBtYXhIZWlnaHQgPSBudWxsO1xuICBoaW50ID0gZmFsc2U7XG4gIGlkOiBudW1iZXIgfCBzdHJpbmc7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIG1lc3NhZ2UgPSAnJztcbiAgbWV0YWRhdGE7XG4gIG1heGxlbmd0aCA9IDEwMjQ7XG4gIG5hbWUgPSAnbmFtZSc7XG4gIG5vSW5pdGlhbFZhbHVlID0gZmFsc2U7XG4gIHBhdGNoOkZpZWxkSXRlbVBhdGNoSW50ZXJmYWNlO1xuICByZWFkb25seSA9IGZhbHNlO1xuICBzZXNzaW9uPzogYm9vbGVhbjtcbiAgc2Vzc2lvblBhdGg/OiBzdHJpbmc7XG4gIHNob3dUb29sdGlwID0gZmFsc2U7XG4gIHRhYk9uRW50ZXIgPSBmYWxzZTtcbiAgdG9vbHRpcCA9ICcnO1xuICB2YWxpZGF0b3JzO1xuICB2YWx1ZTpib29sZWFuIHwgc3RyaW5nIHwgbnVtYmVyID0gJyc7XG5cblxuICBjb25zdHJ1Y3RvcihwYXJhbXM/OiBUZXh0YXJlYUNvbmZpZ0ludGVyZmFjZSl7XG4gICAgaWYoIHBhcmFtcyApIGZvciggY29uc3QgaSBpbiBwYXJhbXMgKSB0aGlzWyBpIF0gPSBwYXJhbXNbIGkgXTtcbiAgICAvLyBpZiggdGhpcy5oZWlnaHQgJiYgIWlzTmFOKE51bWJlcih0aGlzLmhlaWdodCkpICkgdGhpcy5oZWlnaHQgPSB0aGlzLmhlaWdodCArICdweCc7XG4gICAgaWYoICF0aGlzLnBhdGNoICkgdGhpcy5wYXRjaCA9IHsgZmllbGQ6ICcnLCBkdXJhdGlvbjogNzUwLCBwYXRoOiAnJywgZGlzYWJsZWQ6IGZhbHNlICwgYnVzaW5lc3NJZDogMCB9O1xuICAgIGlmKCB0aGlzLnBhdGNoLmRpc3BsYXlJbmRpY2F0b3IgIT09IGZhbHNlICkgdGhpcy5wYXRjaC5kaXNwbGF5SW5kaWNhdG9yID0gdHJ1ZTtcbiAgICBpZiggdGhpcy5ub0luaXRpYWxWYWx1ZSkgdGhpcy52YWx1ZSA9ICcnO1xuICAgIGlmKCAhdGhpcy5jb250cm9sICkgdGhpcy5zZXRDb250cm9sKCk7XG4gIH1cblxuICBzZXRDb250cm9sKCl7XG4gICAgdGhpcy5jb250cm9sID0gKCB0aGlzLmRpc2FibGVkID8gbmV3IEZvcm1Db250cm9sKHtcbiAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgZGlzYWJsZWQ6IHRydWVcbiAgICB9KSA6IG5ldyBGb3JtQ29udHJvbCh0aGlzLnZhbHVlLCAoIHRoaXMudmFsaWRhdG9ycyA/IHRoaXMudmFsaWRhdG9ycyA6IFtdICkpICk7XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTpib29sZWFue1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIHNldCBkaXNhYmxlZCh2YWx1ZSl7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICBpZih2YWx1ZSA9PT0gdHJ1ZSl7XG4gICAgICB0aGlzLmNvbnRyb2wuZGlzYWJsZSgpO1xuICAgIH1lbHNlIGlmICh2YWx1ZSA9PT0gZmFsc2Upe1xuICAgICAgdGhpcy5jb250cm9sLmVuYWJsZSgpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=