import { FormControl } from '@angular/forms';
export class NumberConfig {
    // No Defaults
    constructor(params) {
        // Defaults
        this.bubble = false;
        this.dropSpecial = true;
        this.displayErrors = true;
        this.disabled = false;
        this.facade = false;
        this.helpText = '';
        this.hidden = false;
        this.id = '';
        this.label = '';
        this.message = '';
        this.min = 1;
        this.max = 100;
        this.minimal = false;
        this.mask = '0*';
        this.name = 'name';
        this.noInitialValue = false;
        this.pattern = 'Numeric';
        this.prefix = '';
        this.readonly = false;
        this.showTooltip = false;
        this.specialChars = ['$', ' ', ',', '%'];
        this.showMask = false;
        this.suffix = '';
        this.step = 1;
        this.tooltip = '';
        this.value = '';
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (!this.patch)
            this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (!this.readonly)
            this.readonly = false;
        if (this.min > this.max)
            this.min = this.max;
        if (this.max < this.min)
            this.max = this.min;
        this.maxlength = String(this.max).length;
        if (this.value) {
            if (this.value < this.min)
                this.value = this.min;
            if (this.value > this.max)
                this.value = this.max;
        }
        if (this.noInitialValue)
            this.value = '';
        if (!this.control)
            this.setControl();
    }
    setControl() {
        this.control = (this.disabled ? new FormControl({
            value: this.value,
            disabled: true
        }) : new FormControl(this.value, (this.validators ? this.validators : [])));
    }
}
//# sourceMappingURL=data:application/json;base64,