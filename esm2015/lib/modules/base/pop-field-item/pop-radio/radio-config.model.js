import { FormControl } from '@angular/forms';
export class RadioConfig {
    constructor(params) {
        this.bubble = false;
        this.disabled = false;
        this.displayErrors = true;
        this.facade = false;
        this.helpText = '';
        this.label = '';
        this.labelPosition = 'above';
        this.layout = 'row';
        this.message = '';
        this.noInitialValue = false;
        this.name = 'name';
        this.reset = false;
        this.sort = false;
        this.value = '';
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (this.sort && this.options.values.length > 1) {
            if (typeof this.options.values[0].sort_order !== 'undefined') {
                this.options.values.sort((a, b) => {
                    if (a.sort_order < b.sort_order)
                        return -1;
                    if (a.sort_order > b.sort_order)
                        return 1;
                    return 0;
                });
            }
            else {
                this.options.values.sort((a, b) => {
                    if (a.name < b.name)
                        return -1;
                    if (a.name > b.name)
                        return 1;
                    return 0;
                });
            }
        }
        if (this.layout !== 'column')
            this.layout = 'row';
        if (!this.patch)
            this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
        if (!this.disabled)
            this.disabled = false;
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (this.noInitialValue)
            this.value = '';
        if (!this.control)
            this.setControl();
    }
    setControl() {
        if (!this.control) {
            this.control = (this.disabled === true
                ? new FormControl({
                    value: this.value,
                    disabled: this.disabled
                })
                : new FormControl(this.value, (this.validators ? this.validators : [])));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,