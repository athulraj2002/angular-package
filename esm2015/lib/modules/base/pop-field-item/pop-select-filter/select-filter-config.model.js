import { FormControl } from '@angular/forms';
import { IsArray } from '../../../../pop-common-utility';
export class SelectFilterConfig {
    constructor(params) {
        this.allLabel = 'All';
        this.all = false;
        this.allowAll = true;
        this.bubble = false;
        this.displayErrors = true;
        this.collapsed = false;
        this.checkboxPosition = 'before';
        this.defaultMinHeight = 1;
        this.facade = false;
        this.float = false;
        this.filter = true;
        this.helpText = '';
        this.height = 200;
        this.levelGap = 35;
        this.minHeight = 50;
        this.multiple = false;
        this.name = 'name';
        this.noInitialValue = false;
        this.offset = null;
        this.offsetSession = null;
        this.patchGroupFk = false;
        this.strVal = '';
        this.setDefaultValues();
        if (params)
            for (const i in params)
                this[i] = params[i];
        this.value = this.multiple ? (Array.isArray(this.value) ? this.value : []) : (+this.value ? this.value : null);
        if (this.options.values.length > 1) {
            if (this.sort) {
                if (typeof this.options.values[0].sort_order !== 'undefined') {
                    this.options.values.sort((a, b) => {
                        if (a.sort_order < b.sort_order)
                            return -1;
                        if (a.sort_order > b.sort_order)
                            return 1;
                        return 0;
                    });
                }
                else {
                    this.options.values.sort((a, b) => {
                        if (a.name < b.name)
                            return -1;
                        if (a.name > b.name)
                            return 1;
                        return 0;
                    });
                }
            }
            if (this.options.values[0].group) {
                this.groups = this.getOptionGroups();
                if (this.groups.length < 2) {
                    this.allowAll = false;
                }
            }
            else {
                const str = [];
                this.selectedOptions = [];
                this.options.values.map((option) => {
                    if (this.all) {
                        option.selected = true;
                        this.selectedOptions.push(option.value);
                    }
                    else {
                        option.selected = IsArray(this.value) ? (this.value.includes(option.value) ? true : false) : false;
                        if (option.selected) {
                            this.selectedOptions.push(option.value);
                            str.push(option.name);
                        }
                    }
                    option.level = this.levelGap * option.level;
                });
                const defaultGroup = {
                    label: '',
                    options: this.options,
                    groupFk: 0,
                    open: true,
                };
                this.groups = [defaultGroup];
            }
        }
        if (!this.levelGap)
            this.levelGap = 35;
        this.defaultHeight = this.height;
        this.all = IsArray(this.value) ? (this.options.values.length === this.value.length) : false;
        if (!this.position)
            this.position = 'below';
        if (!this.patch)
            this.patch = { field: '', duration: 750, path: '', disabled: false };
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (this.groups.length === 1)
            this.collapsed = false;
        if (this.noInitialValue)
            this.value = this.multiple ? [] : '';
        if (!this.control)
            this.setControl();
    }
    setControl() {
        this.control = (this.disabled ? new FormControl({
            value: this.value,
            disabled: true
        }) : new FormControl(this.value, (this.validators ? this.validators : [])));
    }
    setDefaultValues() {
        // this.helpText = '';
        this.label = '';
        this.message = '';
        this.options = { values: [] };
        this.disabled = false;
        this.sort = false;
        // this.showTooltip = false;
        // this.tooltip = '';
    }
    getOptionGroups() {
        this.selectedOptions = [];
        const groups = {};
        const list = [];
        let defaultGroup = this.options.values[0].group;
        this.options.values.map((option, index) => {
            if (typeof option.level === 'undefined')
                option.level = 0;
            option.level = this.levelGap * option.level;
            if (!option.group)
                option.group = defaultGroup;
            if (option.group in groups === false) {
                groups[option.group] = {
                    label: option.group,
                    groupFk: option.groupFk,
                    options: {
                        values: [],
                        filtered: []
                    },
                    all: false,
                    open: true,
                    indeterminate: false,
                };
                defaultGroup = option.group;
            }
            if (this.all) {
                option.selected = true;
                this.selectedOptions.push(option.value);
            }
            else {
                option.selected = IsArray(this.value) ? this.value.includes(option.value) : false;
                if (option.selected) {
                    this.selectedOptions.push(option.value);
                }
            }
            groups[option.group].options.values.push(option);
        });
        const count = Object.keys(groups).length;
        Object.keys(groups).map((key) => {
            const group = groups[key];
            // if(IsArray(group.options.values)){
            //   // ToDo:: allow ordering by a sort order property
            //   group.options.values = group.options.values.sort(DynamicSort('name'));
            // }
            if (count > 1 && this.collapsed)
                group.open = false;
            list.push(groups[key]);
        });
        return list;
    }
    resetSelection() {
        this.selectedOptions = [];
    }
    addSelectedOption(option) {
        this.selectedOptions.push(option);
    }
}
//# sourceMappingURL=data:application/json;base64,