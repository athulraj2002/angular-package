import { FormControl } from '@angular/forms';
import { IsArray, IsDefined, IsUndefined } from '../../../../pop-common-utility';
export class SelectListConfig {
    constructor(params) {
        this.allLabel = 'All';
        this.allowAll = true;
        this.allowGroupAll = true;
        this.allOverlay = false;
        this.allOverlayEnabled = false;
        this.allOverlayLabel = '';
        this.allOverlayMessage = '';
        this.all = false;
        this.bubble = false;
        this.checkboxPosition = 'before';
        this.collapsed = false;
        this.column = 'column';
        this.displayErrors = true;
        this.defaultHeight = null;
        this.disabledIds = [];
        this.facade = false;
        this.filter = true;
        this.helpText = '';
        this.height = null;
        this.levelGap = 35;
        this.label = '';
        this.multiple = false;
        this.minHeight = null;
        this.noInitialValue = false;
        this.outline = true;
        this.patchGroupFk = false;
        this.strVal = '';
        this.setDefaultValues();
        if (params)
            for (const i in params)
                this[i] = params[i];
        const mode = this.mode;
        const hasMode = IsArray(this.mode, true) ? true : false;
        this.defaultMode = hasMode ? this.mode[0].value : 0;
        this.value = Array.isArray(this.value) ? this.value : [];
        if (this.options.values.length > 1) {
            if (this.sort) {
                if (typeof this.options.values[0].sort_order !== 'undefined') {
                    this.options.values.sort((a, b) => {
                        if (a.sort_order < b.sort_order)
                            return -1;
                        if (a.sort_order > b.sort_order)
                            return 1;
                        return 0;
                    });
                }
                else {
                    this.options.values.sort((a, b) => {
                        if (a.name < b.name)
                            return -1;
                        if (a.name > b.name)
                            return 1;
                        return 0;
                    });
                }
            }
            if (this.options.values[0].group) {
                this.groups = this.getOptionGroups();
            }
            else if (this.options.values.length) {
                let str = [];
                this.selectedOptions = [];
                this.options.values.map((option) => {
                    if (hasMode && IsUndefined(option.mode))
                        option.mode = this.defaultMode;
                    option.selected = this.value.includes(option.value) ? true : false;
                    if (option.selected) {
                        this.selectedOptions.push(option.value);
                        str.push(option.name);
                    }
                    option.indentation = (+this.levelGap) * (option.level + 1);
                    str = str.sort();
                    this.strVal = str.join(', ');
                });
                if (this.options.empty)
                    this.options.values.unshift({ value: this.options.empty.value, name: this.options.empty.name });
                const defaultGroup = {
                    label: '',
                    options: this.options,
                    open: true
                };
                this.groups = [defaultGroup];
            }
            else {
                this.groups = [];
            }
        }
        if (!this.groups)
            this.groups = [];
        if (!this.levelGap)
            this.levelGap = 35;
        this.defaultHeight = this.height;
        let allGroupsSelected = true;
        const selected = this.selectedOptions;
        let groupSelected;
        if (this.all) {
            this.selectedOptions = [];
            this.groups.map((group) => {
                group.all = true;
                this.selectedOptions = group.options.values.map((option) => {
                    option.selected = true;
                    this.selectedOptions.push(option.value);
                });
            });
            this.strVal = this.allLabel;
        }
        else {
            let str = [];
            this.selectedOptions = [];
            const isGroups = this.groups.length > 1;
            this.groups.map((group) => {
                if (group.all) {
                    if (isGroups) {
                        str.push(group.label + ' (All)');
                    }
                    else {
                        str.push('All');
                    }
                    group.options.values.filter(option => {
                        this.selectedOptions.push(option.value);
                    });
                }
                else {
                    groupSelected = group.options.values.filter((option) => {
                        return option.selected;
                    });
                    if (groupSelected && groupSelected.length) {
                        if (groupSelected.length === group.options.values.length)
                            group.all = true;
                        if (group.all) {
                            if (isGroups) {
                                str.push(group.label + ' (All)');
                            }
                            else {
                                str.push('All');
                            }
                            group.options.values.filter(option => {
                                this.selectedOptions.push(option.value);
                            });
                        }
                        else {
                            allGroupsSelected = false;
                            if (isGroups && groupSelected.length) {
                                str.push(group.label + ` (${groupSelected.length} of ${group.options.values.length})`);
                                groupSelected.map((option) => {
                                    this.selectedOptions.push(option.value);
                                });
                            }
                            else {
                                groupSelected.map((option) => {
                                    this.selectedOptions.push(option.value);
                                    str.push(option.name);
                                });
                            }
                        }
                    }
                    else {
                        group.all = false;
                        allGroupsSelected = false;
                    }
                }
            });
            if (!this.selectedOptions.length) {
                allGroupsSelected = false;
                if (this.emptyLabel) {
                    str = [this.emptyLabel];
                }
            }
            else if (!this.all && allGroupsSelected) {
                str = ['All'];
            }
            this.all = allGroupsSelected;
            str = str.sort();
            this.strVal = str.join(', ');
        }
        delete this.options;
        delete this.value;
        if (!this.patch)
            this.patch = { field: '', duration: 750, path: '', disabled: false };
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (this.groups.length === 1)
            this.collapsed = false;
        if (this.noInitialValue)
            this.value = this.multiple ? [] : '';
        if (!this.control)
            this.setControl();
        if (!(IsDefined(this.value, false)))
            this.value = this.multiple ? [] : '';
        if (this.allOverlay && !this.allOverlayLabel) {
            this.allOverlayLabel = 'All Access';
        }
    }
    setControl() {
        this.control = (this.disabled ? new FormControl({
            value: this.value,
            disabled: false
        }) : new FormControl(this.value, (this.validators ? this.validators : [])));
    }
    setDefaultValues() {
        // this.helpText = '';
        this.label = '';
        this.message = '';
        this.options = { values: [] };
        this.disabled = false;
        this.sort = false;
        // this.showTooltip = false;
        // this.tooltip = '';
    }
    getOptionGroups() {
        this.selectedOptions = [];
        const groups = {};
        const list = [];
        let defaultGroup = this.options.values[0].group;
        let defaultGroupFk = this.options.values[0].groupFk;
        this.options.values.map((option, index) => {
            if (typeof option.level === 'undefined')
                option.level = 0;
            if (this.mode && IsUndefined(option.mode))
                option.mode = this.defaultMode;
            option.indentation = (+this.levelGap) * (option.level + 1);
            if (!option.group)
                option.group = defaultGroup;
            if (option.group in groups === false) {
                groups[option.group] = {
                    label: option.group,
                    options: { values: [] },
                    all: false,
                    indeterminate: false,
                    open: true,
                    groupFk: option.groupFk,
                };
                defaultGroup = option.group;
                defaultGroupFk = option.groupFk;
            }
            option.selected = this.value.includes(option.value);
            if (option.selected) {
                this.selectedOptions.push(option.value);
            }
            groups[option.group].options.values.push(option);
        });
        const count = Object.keys(groups).length;
        Object.keys(groups).map((key) => {
            let indeterminate = false;
            let all = true;
            groups[key].options.values.some(option => {
                if (!option.selected) {
                    all = false;
                    indeterminate = true;
                    return true;
                }
            });
            groups[key].all = all;
            groups[key].indeterminate = indeterminate;
            if (count > 1 && this.collapsed)
                groups[key].open = false;
            list.push(groups[key]);
        });
        const countLabel = this.selectedOptions.length > 1 ? `[${this.selectedOptions.length}] ` : '';
        return list;
    }
    resetSelection() {
        this.selectedOptions = [];
    }
    addSelectedOption(option) {
        this.selectedOptions.push(option);
    }
}
//# sourceMappingURL=data:application/json;base64,