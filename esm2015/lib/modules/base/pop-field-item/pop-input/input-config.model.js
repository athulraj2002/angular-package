import { FormControl } from '@angular/forms';
export class InputConfig {
    constructor(params) {
        // Defaults
        this.autofocus = false;
        this.autoselect = false;
        this.bubble = false;
        this.conceal = false;
        this.displayErrors = true;
        this.disabled = false;
        this.dropSpecial = true;
        this.facade = false;
        this.helpText = '';
        this.hintText = '';
        this.hidden = false;
        this.hint = false;
        this.id = '';
        this.label = '';
        this.maxlength = 129;
        this.mask = null;
        this.minimal = false;
        this.message = '';
        this.name = 'name';
        this.noInitialValue = false;
        this.prefix = '';
        this.readonly = false;
        this.showMask = false;
        this.showTooltip = false;
        this.suffix = '';
        this.selectMode = false;
        this.selectModeOptionsDirection = 'down';
        this.specialChars = ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']'];
        this.tooltip = '';
        this.type = 'text';
        this.tabOnEnter = false;
        this.value = '';
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (!this.patch)
            this.patch = { field: '', path: '', duration: 750, disabled: false, businessId: 0 };
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (!this.readonly)
            this.readonly = false;
        if (this.selectMode)
            this.readonly = true; // input is mimicking a select box to a trigger  modal functionality
        if (this.noInitialValue)
            this.value = '';
        if (!this.control)
            this.setControl();
        if (this.mask) {
            this.maxlength = null;
            this.hint = false;
            this.pattern = null;
        }
    }
    setControl() {
        this.control = (this.disabled ? new FormControl({
            value: this.value,
            disabled: true
        }) : new FormControl(this.value, (this.validators ? this.validators : [])));
    }
}
//# sourceMappingURL=data:application/json;base64,