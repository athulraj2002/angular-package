import { FormControl } from '@angular/forms';
export class ButtonConfig {
    constructor(params) {
        this.color = 'default';
        this.bubble = false;
        this.displayErrors = true;
        this.disabled = false;
        this.event = 'click';
        this.helpText = '';
        this.hidden = false;
        this.icon = 'help_outline';
        this.iconColor = 'accent';
        this.id = '';
        this.label = '';
        this.message = '';
        this.name = 'name';
        this.radius = 2;
        this.size = 35;
        this.showTooltip = false;
        this.text = 26;
        this.tooltip = '';
        this.type = 'mat-button';
        this.value = 'Button';
        this.width = null;
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (!this.patch)
            this.patch = { field: '', path: '', disabled: false };
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (this.size < 10)
            this.size = 10;
        if (!this.control)
            this.setControl();
    }
    setControl() {
        this.control = (this.disabled ? new FormControl({
            value: this.value,
            disabled: true
        }) : new FormControl(this.value, (this.validators ? this.validators : [])));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWNvbmZpZy5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BvcC1jb21tb24vc3JjL2xpYi9tb2R1bGVzL2Jhc2UvcG9wLWZpZWxkLWl0ZW0vcG9wLWJ1dHRvbi9idXR0b24tY29uZmlnLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQWMsTUFBTSxnQkFBZ0IsQ0FBQztBQWlDekQsTUFBTSxPQUFPLFlBQVk7SUFtQ3ZCLFlBQVksTUFBOEI7UUFoQzFDLFVBQUssR0FBcUMsU0FBUyxDQUFDO1FBQ3BELFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDZixrQkFBYSxHQUFHLElBQUksQ0FBQztRQUNyQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLFVBQUssR0FBSSxPQUFPLENBQUM7UUFDakIsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDZixTQUFJLEdBQUcsY0FBYyxDQUFDO1FBQ3RCLGNBQVMsR0FBcUMsUUFBUSxDQUFDO1FBQ3ZELE9BQUUsR0FBRyxFQUFFLENBQUM7UUFDUixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUViLFNBQUksR0FBRyxNQUFNLENBQUM7UUFFZCxXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsU0FBSSxHQUFHLFlBQVksQ0FBQztRQVFwQixVQUFLLEdBQUcsUUFBUSxDQUFDO1FBQ2pCLFVBQUssR0FBRyxJQUFJLENBQUM7UUFJWCxJQUFJLE1BQU07WUFBRyxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU07Z0JBQUcsSUFBSSxDQUFFLENBQUMsQ0FBRSxHQUFHLE1BQU0sQ0FBRSxDQUFDLENBQUUsQ0FBQztRQUM5RCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN4RSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEtBQUssS0FBSztZQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQy9FLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO1lBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFHRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDO1lBQy9DLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQUUsQ0FBQztJQUNqRixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtQ29udHJvbCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZpZWxkSXRlbVBhdGNoSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vcG9wLWNvbW1vbi5tb2RlbCc7XG5pbXBvcnQgeyBTZXRDb250cm9sIH0gZnJvbSAnLi4vLi4vLi4vLi4vcG9wLWNvbW1vbi1kb20ubW9kZWxzJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1dHRvbkNvbmZpZ0ludGVyZmFjZSB7XG4gIGJ1YmJsZT86IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpcmUgZXZlbnRzXG4gIGNvbG9yPzogJ2FjY2VudCcgfCAncHJpbWFyeScgfCAnZGVmYXVsdCc7IC8vIENvbG9yIG9mIEljb25cbiAgY29uY2VhbD86IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFzayB0aGUgYnV0dG9uIGFzIGRvdHNcbiAgY29udHJvbD86IEZvcm1Db250cm9sOyAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGZvcm0gY29udHJvbC4gSWYgbm90IHBhc3NlZCBvbmUgd2lsbCBiZSBjcmVhdGVkLlxuICBkaXNhYmxlZD86IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIGFzIGRpc2FibGVkLlxuICBkaXNwbGF5RXJyb3JzPzogYm9vbGVhbjsgICAgICAgICAgICAgICAgICAvLyBJZiBFcnJvciBtZXNzYWdlcyBzaG91bGQgYmUgZGlzcGxheWVkLlxuICBldmVudD86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBuYW1lIHlvdSB3YW50IHRvIGdpdmUgdGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgb24gY2xpY2tcbiAgaGVscFRleHQ/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgLy8gT24gaG92ZXIgaGVscGVyIHRleHQuXG4gIGhpZGRlbj86IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgYnV0dG9uLlxuICBpY29uPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW5ndWxhciBtYXRlcmlhbCBpY29uXG4gIGljb25Db2xvcj86ICdhY2NlbnQnIHwgJ3ByaW1hcnknIHwgJ2RlZmF1bHQnOyAvLyBDb2xvciBvZiBJY29uXG4gIGlkPzogc3RyaW5nIHwgbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgIC8vIEEgbnVtYmVyIHRoYXQgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgZXZlbnRzIHNvIHlvdSBrbm93IHdoaWNoIGZpZWxkIGl0IGNhbWUgZnJvbS5cbiAgbGFiZWw/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5wdXQgbGFiZWwuXG4gIG1ldGFkYXRhPzogb2JqZWN0OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFycmF5IG9mIG9iamVjdHMuIFRvIGJlIHBhc3NlZCBiYWNrIG9uIHRoZSBldmVudCBlbWl0dGVyIGFuZCBpbmNsdWRlZCBpbiBhIHBhdGNoIGlmIGRlc2lyZWQuXG4gIG5hbWU/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGVudGl0eUlkIGZpZWxkIG5hbWVcbiAgcGF0Y2g/OiBGaWVsZEl0ZW1QYXRjaEludGVyZmFjZTsgICAgICAgICAgLy8gSWYgZmllbGQgc2hvdWxkIGJlIGF1dG8tcGF0Y2hlZC5cbiAgcmFkaXVzPzogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmFkaXVzIG9mIGJ1dHRvblxuICBzaXplPzogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2lkdGggYW5kIGhlaWdodCBvZiBib3hcbiAgdGV4dD86IG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpZHRoIGFuZCBoZWlnaHQgb2YgYm94XG4gIHRvb2x0aXA/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvb2x0aXAgZm9yIGluZm9ybWF0aW9uIHRvIHNob3cgd2hlbiBpbnB1dCBpcyBmb2N1c2VkXG4gIHR5cGU/OiAnbWF0LWJ1dHRvbicgfCAnbWF0LXJhaXNlZC1idXR0b24nIHwgJ21hdC1mbGF0LWJ1dHRvbic7IC8vIEhUTUwgaW5wdXQgdHlwZS5cbiAgdmFsaWRhdG9ycz86IEFycmF5PFZhbGlkYXRvcnM+OyAgICAgICAgICAgLy8gQXJyYXkgb2YgVmFsaWRhdG9ycy5cbiAgdmFsdWU/OiBzdHJpbmcgfCBudW1iZXI7ICAgICAgICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZS5cbiAgd2lkdGg/OiBudW1iZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2lkdGggb2YgdGhlIHZhbHVlIGFuZCBpY29uXG59XG5cblxuZXhwb3J0IGNsYXNzIEJ1dHRvbkNvbmZpZyBpbXBsZW1lbnRzIFNldENvbnRyb2wge1xuICAvLyBEZWZhdWx0c1xuICBjb250cm9sO1xuICBjb2xvcjogJ2FjY2VudCcgfCAncHJpbWFyeScgfCAnZGVmYXVsdCcgPSAnZGVmYXVsdCc7XG4gIGJ1YmJsZSA9IGZhbHNlO1xuICBkaXNwbGF5RXJyb3JzID0gdHJ1ZTtcbiAgZGlzYWJsZWQgPSBmYWxzZTtcbiAgZXZlbnQ/ID0gJ2NsaWNrJztcbiAgaGVscFRleHQgPSAnJztcbiAgaGlkZGVuID0gZmFsc2U7XG4gIGljb24gPSAnaGVscF9vdXRsaW5lJztcbiAgaWNvbkNvbG9yOiAnYWNjZW50JyB8ICdwcmltYXJ5JyB8ICdkZWZhdWx0JyA9ICdhY2NlbnQnO1xuICBpZCA9ICcnO1xuICBsYWJlbCA9ICcnO1xuICBtZXNzYWdlID0gJyc7XG4gIG1ldGFkYXRhO1xuICBuYW1lID0gJ25hbWUnO1xuICBwYXRjaDtcbiAgcmFkaXVzID0gMjtcbiAgc2l6ZSA9IDM1O1xuICBzaG93VG9vbHRpcCA9IGZhbHNlO1xuICB0ZXh0ID0gMjY7XG4gIHRvb2x0aXAgPSAnJztcbiAgdHlwZSA9ICdtYXQtYnV0dG9uJztcblxuICAvLyBObyBEZWZhdWx0c1xuXG4gIHRyYW5zZm9ybWF0aW9uO1xuICB2YWxpZGF0b3JzO1xuXG4gIHRyaWdnZXJPbkNoYW5nZTtcbiAgdmFsdWUgPSAnQnV0dG9uJztcbiAgd2lkdGggPSBudWxsO1xuXG5cbiAgY29uc3RydWN0b3IocGFyYW1zPzogQnV0dG9uQ29uZmlnSW50ZXJmYWNlKXtcbiAgICBpZiggcGFyYW1zICkgZm9yKCBjb25zdCBpIGluIHBhcmFtcyApIHRoaXNbIGkgXSA9IHBhcmFtc1sgaSBdO1xuICAgIGlmKCAhdGhpcy5wYXRjaCApIHRoaXMucGF0Y2ggPSB7IGZpZWxkOiAnJywgcGF0aDogJycsIGRpc2FibGVkOiBmYWxzZSB9O1xuICAgIGlmKCB0aGlzLnBhdGNoLmRpc3BsYXlJbmRpY2F0b3IgIT09IGZhbHNlICkgdGhpcy5wYXRjaC5kaXNwbGF5SW5kaWNhdG9yID0gdHJ1ZTtcbiAgICBpZiggdGhpcy5zaXplIDwgMTAgKSB0aGlzLnNpemUgPSAxMDtcbiAgICBpZiggIXRoaXMuY29udHJvbCApIHRoaXMuc2V0Q29udHJvbCgpO1xuICB9XG5cblxuICBzZXRDb250cm9sKCl7XG4gICAgdGhpcy5jb250cm9sID0gKCB0aGlzLmRpc2FibGVkID8gbmV3IEZvcm1Db250cm9sKHtcbiAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgZGlzYWJsZWQ6IHRydWVcbiAgICB9KSA6IG5ldyBGb3JtQ29udHJvbCh0aGlzLnZhbHVlLCAoIHRoaXMudmFsaWRhdG9ycyA/IHRoaXMudmFsaWRhdG9ycyA6IFtdICkpICk7XG4gIH1cbn1cbiJdfQ==