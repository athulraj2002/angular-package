import { FormControl } from '@angular/forms';
export class DateConfig {
    constructor(params) {
        // Defaults
        this.type = 'Expanded';
        this.bubble = false;
        this.displayErrors = true;
        this.disabled = false;
        this.filterPredicate = null;
        this.helpText = '';
        this.id = '';
        this.label = '';
        this.min = null;
        this.max = null;
        this.message = '';
        this.name = 'name';
        this.noInitialValue = false;
        this.showTooltip = false;
        this.tooltip = '';
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (this.value)
            this.value = new Date(this.value);
        if (typeof this.min === 'string') {
            this.min = new Date(this.min);
        }
        if (typeof this.max === 'string') {
            this.max = new Date(this.max);
        }
        // if( isNaN( this.max ) === false ){
        //   const maxDate = new Date();
        //   // maxDate.setDate(maxDate.getDate() - 1);
        //   maxDate.setDate( maxDate.getDate() + parseInt( this.max, 10 ) );
        //   this.max = new Date( maxDate );
        // }
        if (!this.patch)
            this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (this.noInitialValue)
            this.value = '';
        if (!this.control)
            this.setControl();
    }
    setControl() {
        this.control = (this.disabled ? new FormControl({
            value: this.value,
            disabled: true
        }) : new FormControl(this.value, (this.validators ? this.validators : [])));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1jb25maWcubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wb3AtY29tbW9uL3NyYy9saWIvbW9kdWxlcy9iYXNlL3BvcC1maWVsZC1pdGVtL3BvcC1kYXRlL2RhdGUtY29uZmlnLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQWMsTUFBTSxnQkFBZ0IsQ0FBQztBQW9DekQsTUFBTSxPQUFPLFVBQVU7SUFvQ3JCLFlBQWEsTUFBNEI7UUFqQ3pDLFdBQVc7UUFDWCxTQUFJLEdBQUcsVUFBVSxDQUFDO1FBQ2xCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFFZixrQkFBYSxHQUFHLElBQUksQ0FBQztRQUNyQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLG9CQUFlLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxPQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ1IsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLFFBQUcsR0FBRyxJQUFJLENBQUM7UUFDWCxRQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ1gsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUViLFNBQUksR0FBRyxNQUFNLENBQUM7UUFDZCxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUt2QixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVwQixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBV1gsSUFBSSxNQUFNO1lBQUcsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNO2dCQUFHLElBQUksQ0FBRSxDQUFDLENBQUUsR0FBRyxNQUFNLENBQUUsQ0FBQyxDQUFFLENBQUM7UUFDOUQsSUFBSSxJQUFJLENBQUMsS0FBSztZQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDO1FBQ3JELElBQUksT0FBTyxJQUFJLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBQztZQUMvQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FBQztTQUNqQztRQUNELElBQUksT0FBTyxJQUFJLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBQztZQUMvQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FBQztTQUNqQztRQUNELHFDQUFxQztRQUNyQyxnQ0FBZ0M7UUFDaEMsK0NBQStDO1FBQy9DLHFFQUFxRTtRQUNyRSxvQ0FBb0M7UUFDcEMsSUFBSTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN0RyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEtBQUssS0FBSztZQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQy9FLElBQUksSUFBSSxDQUFDLGNBQWM7WUFBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87WUFBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUdELFVBQVU7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFpQixDQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFFO1lBQzlELEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBRSxDQUFFLENBQUUsQ0FBQztJQUNwRixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtQ29udHJvbCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZpZWxkSXRlbVBhdGNoSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vcG9wLWNvbW1vbi5tb2RlbCc7XG5pbXBvcnQgeyBTZXRDb250cm9sIH0gZnJvbSAnLi4vLi4vLi4vLi4vcG9wLWNvbW1vbi1kb20ubW9kZWxzJztcblxuZXhwb3J0IHR5cGUgRGF0ZUZpbHRlclByZWRpY2F0ZSA9ICggZDogRGF0ZSApID0+IGJvb2xlYW47XG5cblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0ZUNvbmZpZ0ludGVyZmFjZSB7XG4gIHR5cGU/OiAnQmFzaWMnIHwgJ0V4cGFuZGVkJztcbiAgYnViYmxlPzogYm9vbGVhbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXJlIGV2ZW50c1xuICBkaXNhYmxlZD86IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgYXMgZGlzYWJsZWQuXG4gIGRpc3BsYXlFcnJvcnM/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgRXJyb3IgbWVzc2FnZXMgc2hvdWxkIGJlIGRpc3BsYXllZC5cbiAgbmFtZT86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBlbnRpdHlJZCBmaWVsZCBuYW1lXG4gIGZhY2FkZT86IGJvb2xlYW47XG4gIGZpbHRlclByZWRpY2F0ZT86IHN0cmluZyB8IERhdGVGaWx0ZXJQcmVkaWNhdGU7ICAgLy8gQSBmdW5jdGlvbiB0byByZW1vdmUgY2VydGFpbiBkYXRlc1xuICBoZWxwVGV4dD86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9uIGhvdmVyIGhlbHBlciB0ZXh0LlxuICBpZD86IHN0cmluZyB8IG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgbnVtYmVyIHRoYXQgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgZXZlbnRzIHNvIHlvdSBrbm93IHdoaWNoIGZpZWxkIGl0IGNhbWUgZnJvbS5cbiAgbGFiZWw/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEYXRlIGxhYmVsLlxuICBtaW4/OiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaWVsZCBtdWx0aXBsZV9taW4gZGF0ZS5cbiAgbWF4Pzogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmllbGQgbXVsdGlwbGVfbWF4IGRhdGUuXG4gIG1ldGFkYXRhPzogb2JqZWN0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyYXkgb2Ygb2JqZWN0cy4gVG8gYmUgcGFzc2VkIGJhY2sgb24gdGhlIGV2ZW50IGVtaXR0ZXIgYW5kIGluY2x1ZGVkIGluIGEgcGF0Y2ggaWYgZGVzaXJlZC5cbiAgbm9Jbml0aWFsVmFsdWU/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRvIHRydWUgdG8gYWx3YXlzIGhhdmUgYW4gZW1wdHkgdmFsdWUgb24gbG9hZFxuICByZXF1aXJlZD86IGJvb2xlYW47XG4gIHNlc3Npb24/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgZmllbGQgdmFsdWUgY2hhbmdlIHNob3VsZCBiZSBzdG9yZWQgdG8gY29yZSBlbnRpdHlcbiAgc2Vzc2lvblBhdGg/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHNlc3Npb24gcGF0aCBpZiBub3Qgc3RvcmVkIG9uIHJvb3QgZW50aXR5XG4gIHBhdGNoPzogRmllbGRJdGVtUGF0Y2hJbnRlcmZhY2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgZmllbGQgc2hvdWxkIGJlIGF1dG8tcGF0Y2hlZC5cbiAgdG9vbHRpcD86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb29sdGlwIGZvciBpbmZvcm1hdGlvbiB0byBzaG93IHdoZW4gaW5wdXQgaXMgZm9jdXNlZFxuICB0cmFuc2Zvcm1hdGlvbj86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYW5zZm9ybSB0aGUgaW5wdXQgdG8gbWF0Y2ggYSBzcGVjaWZpYyBjYXNlIG9mIGZvcm1hdFxuICB2YWxpZGF0b3JzPzogQXJyYXk8VmFsaWRhdG9ycz47ICAgICAgICAgICAgICAgICAgIC8vIEFycmF5IG9mIFZhbGlkYXRvcnMuXG4gIHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZVxuICBvcHRpb25zPzogb2JqZWN0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG59XG5cblxuZXhwb3J0IGNsYXNzIERhdGVDb25maWcgaW1wbGVtZW50cyBTZXRDb250cm9sIHtcblxuXG4gIC8vIERlZmF1bHRzXG4gIHR5cGUgPSAnRXhwYW5kZWQnO1xuICBidWJibGUgPSBmYWxzZTtcbiAgY29udHJvbDogRm9ybUNvbnRyb2w7XG4gIGRpc3BsYXlFcnJvcnMgPSB0cnVlO1xuICBkaXNhYmxlZCA9IGZhbHNlO1xuICBmYWNhZGU/OiBib29sZWFuO1xuICBmaWx0ZXJQcmVkaWNhdGUgPSBudWxsO1xuICBoZWxwVGV4dCA9ICcnO1xuICBpZCA9ICcnO1xuICBsYWJlbCA9ICcnO1xuICBtaW4gPSBudWxsO1xuICBtYXggPSBudWxsO1xuICBtZXNzYWdlID0gJyc7XG4gIG1ldGFkYXRhO1xuICBuYW1lID0gJ25hbWUnO1xuICBub0luaXRpYWxWYWx1ZSA9IGZhbHNlO1xuICBwYXRjaDogRmllbGRJdGVtUGF0Y2hJbnRlcmZhY2U7XG4gIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgc2Vzc2lvbj86IGJvb2xlYW47XG4gIHNlc3Npb25QYXRoPzogc3RyaW5nO1xuICBzaG93VG9vbHRpcCA9IGZhbHNlO1xuICB0cmFuc2Zvcm1hdGlvbjtcbiAgdG9vbHRpcCA9ICcnO1xuICB2YWx1ZTtcbiAgY2xlYXJNZXNzYWdlO1xuICB0cmlnZ2VyT25DaGFuZ2U7XG5cbiAgLy8gTm8gRGVmYXVsdHNcblxuICB2YWxpZGF0b3JzO1xuXG5cbiAgY29uc3RydWN0b3IoIHBhcmFtcz86IERhdGVDb25maWdJbnRlcmZhY2UgKXtcbiAgICBpZiggcGFyYW1zICkgZm9yKCBjb25zdCBpIGluIHBhcmFtcyApIHRoaXNbIGkgXSA9IHBhcmFtc1sgaSBdO1xuICAgIGlmKCB0aGlzLnZhbHVlICkgdGhpcy52YWx1ZSA9IG5ldyBEYXRlKCB0aGlzLnZhbHVlICk7XG4gICAgaWYoIHR5cGVvZiB0aGlzLm1pbiA9PT0gJ3N0cmluZycpe1xuICAgICAgdGhpcy5taW4gPSBuZXcgRGF0ZSggdGhpcy5taW4gKTtcbiAgICB9XG4gICAgaWYoIHR5cGVvZiB0aGlzLm1heCA9PT0gJ3N0cmluZycpe1xuICAgICAgdGhpcy5tYXggPSBuZXcgRGF0ZSggdGhpcy5tYXggKTtcbiAgICB9XG4gICAgLy8gaWYoIGlzTmFOKCB0aGlzLm1heCApID09PSBmYWxzZSApe1xuICAgIC8vICAgY29uc3QgbWF4RGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgLy8gICAvLyBtYXhEYXRlLnNldERhdGUobWF4RGF0ZS5nZXREYXRlKCkgLSAxKTtcbiAgICAvLyAgIG1heERhdGUuc2V0RGF0ZSggbWF4RGF0ZS5nZXREYXRlKCkgKyBwYXJzZUludCggdGhpcy5tYXgsIDEwICkgKTtcbiAgICAvLyAgIHRoaXMubWF4ID0gbmV3IERhdGUoIG1heERhdGUgKTtcbiAgICAvLyB9XG4gICAgaWYoICF0aGlzLnBhdGNoICkgdGhpcy5wYXRjaCA9IHsgZmllbGQ6ICcnLCBkdXJhdGlvbjogNzUwLCBwYXRoOiAnJywgZGlzYWJsZWQ6IGZhbHNlLCBidXNpbmVzc0lkOiAwIH07XG4gICAgaWYoIHRoaXMucGF0Y2guZGlzcGxheUluZGljYXRvciAhPT0gZmFsc2UgKSB0aGlzLnBhdGNoLmRpc3BsYXlJbmRpY2F0b3IgPSB0cnVlO1xuICAgIGlmKCB0aGlzLm5vSW5pdGlhbFZhbHVlICkgdGhpcy52YWx1ZSA9ICcnO1xuICAgIGlmKCAhdGhpcy5jb250cm9sICkgdGhpcy5zZXRDb250cm9sKCk7XG4gIH1cblxuXG4gIHNldENvbnRyb2woKXtcbiAgICB0aGlzLmNvbnRyb2wgPSA8Rm9ybUNvbnRyb2w+ICggdGhpcy5kaXNhYmxlZCA/IG5ldyBGb3JtQ29udHJvbCgge1xuICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICBkaXNhYmxlZDogdHJ1ZVxuICAgIH0gKSA6IG5ldyBGb3JtQ29udHJvbCggdGhpcy52YWx1ZSwgKCB0aGlzLnZhbGlkYXRvcnMgPyB0aGlzLnZhbGlkYXRvcnMgOiBbXSApICkgKTtcbiAgfVxufVxuIl19