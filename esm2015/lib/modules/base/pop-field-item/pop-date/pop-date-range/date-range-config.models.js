import { FormControl, FormGroup } from '@angular/forms';
export class DateRangeConfig {
    constructor(params) {
        // Defaults
        this.type = 'Expanded';
        this.bubble = false;
        this.displayErrors = true;
        this.disabled = false;
        this.filterPredicate = null;
        this.helpText = '';
        this.id = '';
        this.label = '';
        this.min = null;
        this.max = null;
        this.message = '';
        this.name = 'name';
        this.noInitialValue = false;
        this.showTooltip = false;
        this.tooltip = '';
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (this.valueStart)
            this.valueStart = new Date(this.valueStart);
        if (this.valueEnd)
            this.valueEnd = new Date(this.valueEnd);
        if (typeof this.min === 'string') {
            this.min = new Date(this.min);
        }
        if (typeof this.max === 'string') {
            this.max = new Date(this.max);
        }
        // if( isNaN( this.max ) === false ){
        //   const maxDate = new Date();
        //   // maxDate.setDate(maxDate.getDate() - 1);
        //   maxDate.setDate( maxDate.getDate() + parseInt( this.max, 10 ) );
        //   this.max = new Date( maxDate );
        // }
        if (!this.patch)
            this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (this.noInitialValue)
            this.valueStart = '';
        if (this.noInitialValue)
            this.valueEnd = '';
        if (!this.formGroup)
            this.setControl();
    }
    setControl() {
        if (this.disabled) {
            this.formGroup =
                new FormGroup({
                    start: new FormControl({ value: this.valueStart, disabled: true }),
                    end: new FormControl({ value: this.valueEnd, disabled: true }),
                });
        }
        else {
            this.formGroup =
                new FormGroup({
                    start: new FormControl(this.valueStart, (this.validators ? this.validators : [])),
                    end: new FormControl(this.valueEnd, (this.validators ? this.validators : []))
                });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,