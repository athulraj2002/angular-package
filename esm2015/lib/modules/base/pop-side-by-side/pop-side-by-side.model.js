export class SideBySideConfig {
    constructor(config) {
        this.name = 'name';
        this.bubble = false;
        this.hasLabelRow = false;
        this.hasFilterRow = false;
        this.hasHeader = false;
        this.assigned = []; // List of item ids of assigned items
        this.assignAll = false;
        this.assignedLabel = '';
        this.bucketLimit = 0;
        this.disabled = false;
        this.displayCircleID = true;
        this.displayHelper = true;
        this.displayTitle = true;
        this.facade = false;
        this.facadeEvent = false;
        this.optionsLabel = '';
        this.optionHtml = 'label';
        this.filter = true;
        this.filterBoth = false;
        this.route = '';
        this.metadata = null;
        this.options = { values: [] }; // List of all available items
        this.removeAll = false;
        this.display = '';
        this.patch = null;
        for (const i in config)
            this[i] = config[i];
        if (!this.patch)
            this.patch = {};
        if (this.patch.displayIndicator !== false)
            this.patch.displayIndicator = true;
        if (!this.patch.field)
            this.patch.field = 'option';
        if (!this.patch.assignMethod)
            this.patch.assignMethod = 'POST';
        if (!this.patch.removeMethod)
            this.patch.removeMethod = 'DELETE';
        if (!this.patch.businessId)
            this.patch.businessId = 0;
        if (!this.metadata)
            this.metadata = {};
        this.hasHeader = this.display && this.displayTitle;
        this.hasLabelRow = this.assignAll || this.removeAll || this.optionsLabel || this.assignedLabel ? true : false;
        this.hasFilterRow = this.filter || this.filterBoth ? true : false;
        if (this.route)
            this.optionHtml = 'route';
        if (this.displayHelper && !this.helpText)
            this.helpText = 'You have no ' + (this.display ? this.display.toLowerCase() : 'options');
        this.options = JSON.parse(JSON.stringify(this.options)); // make as deep copy of options so that options reference can be used elsewhere
        if (this.displayHelper && !this.helpTextRight)
            this.helpTextRight = ' No ' + (this.display ? this.display.toLowerCase() + ' available ' : 'data available ');
        this.options = JSON.parse(JSON.stringify(this.options)); // make as deep copy of options so that options reference can be used elsewhere
        if (this.sort && this.options.values.length > 1) {
            if (typeof this.options[0].sort_order !== 'undefined') {
                this.options.values.sort((a, b) => {
                    if (a.sort_order < b.sort_order)
                        return -1;
                    if (a.sort_order > b.sort_order)
                        return 1;
                    return 0;
                });
            }
            else {
                this.options.values.sort((a, b) => {
                    if (a.name < b.name)
                        return -1;
                    if (a.name > b.name)
                        return 1;
                    return 0;
                });
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,