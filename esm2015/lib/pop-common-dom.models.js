export function GetServiceDom() {
    return {
        subscriber: {},
        delay: {},
        interval: {},
        handler: {},
        session: {},
        state: {},
    };
}
export function DestroyServiceDom(dom) {
    if (typeof (dom.interval) === 'object') {
        Object.keys(dom.interval).map((name) => {
            if (dom.interval[name]) {
                clearInterval(dom.interval[name]);
            }
            if (dom.interval[name]) {
                clearInterval(dom.interval[name]);
            }
        });
    }
    if (typeof (dom.delay) === 'object') {
        Object.keys(dom.delay).map((name) => {
            if (dom.delay[name]) {
                clearTimeout(dom.delay[name]);
            }
            if (dom.delay[name]) {
                clearTimeout(dom.delay[name]);
            }
        });
    }
    if (typeof (dom.subscriber) === 'object') {
        Object.keys(dom.subscriber).map((name) => {
            if (dom.subscriber[name] && typeof dom.subscriber[name].unsubscribe === 'function') {
                dom.subscriber[name].unsubscribe();
            }
        });
    }
}
export function GetServiceAssetContainer() {
    return {
        map: {}
    };
}
export function GetServiceUiContainer() {
    return {
        state: { loaded: false, loading: true, refreshing: false },
        active: {},
        session: {},
        asset: {
            map: {},
        }
    };
}
/************************************************************************************************
 *                                                                                              *
 *                                          Service                                             *
 *                                      ( Handles Services )                                    *
 *                                                                                              *
 ************************************************************************************************/
export function GetServiceContainer() {
    return {};
}
export function GetComponentUiContainer() {
    return {
        error: {
            code: 0,
            message: ''
        },
        overhead: 0,
        height: {
            outer: null,
            inner: null,
            default: 0
        },
        width: {},
        state: {},
        resource: {
            map: {},
        },
        active: {
            map: {},
        },
        session: {},
        asset: {
            map: {},
        },
        contextMenu: {
            config: undefined,
            configure: undefined,
        }
    };
}
export function AbstractUiMixin(Base = class {
}) {
    return class extends Base {
        constructor() {
            super(...arguments);
            this.ui = GetComponentUiContainer();
        }
    };
}
export function GetComponentTraitContainer() {
    return {
        bubble: false
    };
}
export function GetComponentAssetContainer() {
    return {
        map: {}
    };
}
export function GetComponentDomContainer() {
    const dom = {
        /**
         * Service will preserve session, state, etc and allow all components on the core to communicate and share assets`
         */
        active: {},
        error: {
            code: 0,
            message: ''
        },
        overhead: 0,
        height: {
            outer: null,
            inner: null,
            default: 0
        },
        width: {},
        state: {},
        session: {},
        contextMenu: {
            config: undefined,
            configure: undefined,
        },
        repo: undefined,
        /**
         * Store all subscribers here
         */
        subscriber: {},
        /**
         * Store all time intervals here
         */
        interval: {},
        /**
         * Store all timeouts here
         */
        delay: {},
        handler: {},
    };
    return dom;
}
export function AbstractDomMixin(Base = class {
}) {
    return class extends Base {
        constructor() {
            super(...arguments);
            this.dom = GetComponentDomContainer();
        }
    };
}
export function DestroyComponentDom(dom) {
    if (typeof (dom.interval) === 'object') {
        Object.keys(dom.interval).map((name) => {
            if (dom.interval[name]) {
                clearInterval(dom.interval[name]);
            }
            if (dom.interval[name]) {
                clearInterval(dom.interval[name]);
            }
        });
    }
    if (typeof (dom.delay) === 'object') {
        Object.keys(dom.delay).map((name) => {
            if (dom.delay[name]) {
                clearTimeout(dom.delay[name]);
            }
            if (dom.delay[name]) {
                clearTimeout(dom.delay[name]);
            }
        });
    }
    if (typeof (dom.subscriber) === 'object') {
        Object.keys(dom.subscriber).map((name) => {
            if (dom.subscriber[name] && typeof dom.subscriber[name].unsubscribe === 'function') {
                dom.subscriber[name].unsubscribe();
            }
        });
    }
}
export function GetComponentTemplateContainer() {
    const template = {
        container: undefined,
        refs: [],
        ref_events: []
    };
    return template;
}
export function AbstractTemplateMixin(Base = class {
}) {
    return class extends Base {
        constructor() {
            super(...arguments);
            this.template = GetComponentTemplateContainer();
        }
    };
}
export function DestroyComponentTemplate(template) {
    if (typeof template === 'object') {
        template.ref_events.map((subscription) => {
            if (subscription && typeof subscription.unsubscribe === 'function') {
                subscription.unsubscribe();
            }
        });
        template.refs = template.refs.map(function (componentRef) {
            if (componentRef && typeof componentRef.destroy === 'function') {
                componentRef.destroy();
            }
            componentRef = null;
            return null;
        });
        if (template.container)
            template.container.clear();
        template = null;
    }
}
//# sourceMappingURL=data:application/json;base64,