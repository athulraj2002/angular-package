import { InjectionToken } from '@angular/core';
import { Router } from '@angular/router';
export let ServiceInjector;
export function SetServiceInjector(injector) {
    if (!ServiceInjector)
        ServiceInjector = injector;
}
export let PopEntity;
export function SetPopEntity(entity) {
    if (!PopEntity)
        PopEntity = entity;
}
export let PopHistory;
export function SetPopHistory(history) {
    if (!PopHistory)
        PopHistory = history;
}
export let PopPipe;
export function SetPopPipe(pipe) {
    if (!PopPipe)
        PopPipe = pipe;
}
export let PopDate;
export function SetPopDate(date) {
    if (!PopDate)
        PopDate = date;
}
export let PopLog;
export function SetPopLogger(log) {
    if (!PopLog)
        PopLog = log;
}
export let PopEnv;
export function SetPopEnv(env) {
    if (!PopEnv)
        PopEnv = env;
}
export let PopComponentResolver;
export function SetPopComponentResolver(cfr) {
    if (!PopComponentResolver)
        PopComponentResolver = cfr;
}
export let PopRequest;
export function SetPopRequest(request) {
    if (!PopRequest)
        PopRequest = request;
}
export let PopExternalApi;
export function SetPopExternalApi(api) {
    if (!PopExternalApi)
        PopExternalApi = api;
}
export let PopPortal;
export function SetPopPortal(portal) {
    if (!PopPortal)
        PopPortal = portal;
}
export let PopHref;
export function SetPopHref(href) {
    if (href && typeof href === 'string') {
        PopHref = href;
    }
}
export let PopMessage;
export function SetPopMessage(message) {
    if (message && typeof message === 'string') {
        PopMessage = message;
    }
    else {
        PopMessage = undefined;
    }
}
export let PopCacheRedirectUrl;
export function SetPopCacheRedirectUrl(router = null, url = null) {
    if (router instanceof Router) {
        if (!url)
            url = router.url;
        PopCacheRedirectUrl = url;
        router.navigateByUrl('system/cache/clear', { skipLocationChange: true }).catch((e) => {
            console.log('e', e);
        });
    }
    else {
        PopCacheRedirectUrl = undefined;
    }
}
export let PopAuth;
export function SetPopAuth(auth) {
    if (auth && typeof auth === 'object' && auth !== null && Object.keys(auth).length) {
        PopAuth = JSON.parse(JSON.stringify(auth));
    }
}
export let PopBusiness;
export function SetPopBusiness(business) {
    if (business && typeof business === 'object' && business !== null && Object.keys(business).length) {
        PopBusiness = JSON.parse(JSON.stringify(business));
    }
}
export let PopApp;
export function SetPopApp(app) {
    if (app && typeof app === 'object' && app !== null && Object.keys(app).length) {
        PopApp = JSON.parse(JSON.stringify(app));
    }
}
export let PopUser;
export function SetPopUser(user) {
    if (user && typeof user === 'object' && user !== null && Object.keys(user).length) {
        PopUser = JSON.parse(JSON.stringify(user));
    }
}
export let PopFilter = {};
export function SetPopFilter(filter) {
    if (typeof filter === 'object' && filter !== null) {
        PopFilter = filter;
    }
}
export let PopSchemeComponent;
export function SetPopSchemeComponent(schemeComponent) {
    if (!PopSchemeComponent)
        PopSchemeComponent = schemeComponent;
}
export let PopRouteAliasMap;
export function SetPopRouteAliasMap(aliasMap) {
    if (aliasMap && typeof aliasMap === 'object')
        PopRouteAliasMap = aliasMap;
}
export let PopAliasRouteMap = {};
export function SetPopAliasRouteMap(routeMap) {
    if (routeMap && typeof routeMap === 'object')
        PopAliasRouteMap = routeMap;
}
export let PopTemplate;
export function SetPopTemplate(srv) {
    if (!PopTemplate)
        PopTemplate = srv;
}
export const FIELD_CUSTOM_SETTING = new InjectionToken('Field Custom Setting', {
    providedIn: 'root',
    factory: () => ({})
});
export class CoreConfig {
    constructor(params) {
        this.flag = {};
        this.resource = {};
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (!this.metadata)
            this.metadata = {};
    }
}
export class EntityParams {
    constructor(params) {
        this.api = ''; // the api path of this entityId http:server/app/<api>
        this.can_extend = false;
        this.path = '';
        this.param = '';
        this.refresh = false;
        this.blockAssets = false;
        if (params)
            for (const i in params)
                this[i] = params[i];
    }
}
export class EntityExtendInterface {
}
export class SchemeComponentParams {
    constructor(params) {
        if (params)
            for (const i in params)
                this[i] = params[i];
    }
}
export class SchemeComponentConfig {
    constructor(params) {
        if (params)
            for (const i in params)
                this[i] = params[i];
    }
}
export class ResourceConfig {
    constructor(params) {
        this.defaultValue = null;
        this.api_cache = false;
        this.api_version = 1;
        this.api_path = '';
        this.api_path_vars = null;
        this.data_values = [];
        this.data_filter = null;
        this.data_when = null;
        if (params)
            for (const i in params)
                this[i] = params[i];
    }
}
// ********************* Fields *************************************************
export class FieldItemInterface {
}
export class FieldItemConfig {
    constructor(config) {
        this.custom_setting = {};
        this.setting = {};
        for (const i in config)
            this[i] = config[i];
    }
}
export class FieldConfig {
    // onEvent: Subject<PopBaseEventInterface>;
    constructor(params) {
        this.canAdd = false;
        this.canRemove = false;
        this.custom_setting = {};
        this.data = {};
        this.data_keys = [];
        this.facade = false;
        this.entries = [];
        this.metadata = {};
        this.multiple = false;
        this.multiple_min = 1;
        this.multiple_max = 1;
        this.multiple_max_limit = 10;
        this.id = null;
        this.name = '';
        this.show_name = true;
        this.options = {};
        this.setting = {};
        this.sort = 99;
        this.state = 'template_edit';
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (!this.options)
            this.options = {};
    }
}
export class FieldGroupConfig {
    constructor(params) {
        this.header = '';
        this.border = false;
        this.position = 'left';
        this.debug = false;
        this.layout = 'column';
        this.metadata = {}; // Any metadata desired.
        this.fields = [];
        if (params)
            for (const i in params)
                this[i] = params[i];
    }
}
export class SectionConfig {
    constructor(params) {
        this.path = '';
        this.inputs = {};
        this.visible = true;
        this.require_refresh = false;
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (!this.name)
            this.name = this.id.replace(/_/g, ' ').replace(/(?:^|\s)\S/g, function (a) {
                return a.toUpperCase();
            });
        if (!this.path)
            this.path = this.id.replace(/_/g, '-').toLowerCase();
        if (!this.metadata)
            this.metadata = {};
    }
}
export class TabSectionBarConfig {
    constructor(params) {
        this.access = {
            can_create: false,
            can_read: false,
            can_update: false,
            can_delete: false,
            can_destroy: false,
        };
        this.name = '';
        this.sections = [];
        if (params)
            for (const i in params)
                this[i] = params[i];
        if (!this.metadata)
            this.metadata = {};
    }
}
/**
 * Method to travel up dom of element until a height is found
 * @param el
 */
export function ParentHeightSetter(el, className = null) {
    let height = 0;
    let maxHeight = 0;
    let attempts = 20;
    if (el && el.nativeElement && el.nativeElement.parentElement) {
        let parent = el.nativeElement.parentElement;
        while (!height && attempts) {
            if (parent.clientHeight) {
                if (parent.clientHeight > maxHeight) {
                    maxHeight = parent.clientHeight;
                }
                if (className) {
                    if (parent.classList && parent.classList.contains(className)) {
                        height = parent.clientHeight;
                    }
                }
                else {
                    height = parent.clientHeight;
                }
            }
            if (!height && parent.parentElement) {
                parent = parent.parentElement;
            }
            attempts--;
        }
    }
    if (!height && maxHeight)
        height = maxHeight;
    return height;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wLWNvbW1vbi5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3BvcC1jb21tb24vc3JjL2xpYi9wb3AtY29tbW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBMEQsY0FBYyxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBK0JoSCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFrQnZDLE1BQU0sQ0FBQyxJQUFJLGVBQXlCLENBQUM7QUFFckMsTUFBTSxVQUFVLGtCQUFrQixDQUFDLFFBQWtCO0lBQ25ELElBQUksQ0FBQyxlQUFlO1FBQUUsZUFBZSxHQUFHLFFBQVEsQ0FBQztBQUNuRCxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQUksU0FBMkIsQ0FBQztBQUV2QyxNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQXdCO0lBQ25ELElBQUksQ0FBQyxTQUFTO1FBQUUsU0FBUyxHQUFHLE1BQU0sQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQUksVUFBbUMsQ0FBQztBQUUvQyxNQUFNLFVBQVUsYUFBYSxDQUFDLE9BQWdDO0lBQzVELElBQUksQ0FBQyxVQUFVO1FBQUUsVUFBVSxHQUFHLE9BQU8sQ0FBQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQUksT0FBdUIsQ0FBQztBQUVuQyxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQW9CO0lBQzdDLElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTyxHQUFHLElBQUksQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxDQUFDLElBQUksT0FBMkIsQ0FBQztBQUV2QyxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQXdCO0lBQ2pELElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTyxHQUFHLElBQUksQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxDQUFDLElBQUksTUFBcUIsQ0FBQztBQUVqQyxNQUFNLFVBQVUsWUFBWSxDQUFD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QUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUU7UUFDNUQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUM7UUFDNUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxRQUFRLEVBQUU7WUFDMUIsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFO2dCQUN2QixJQUFJLE1BQU0sQ0FBQyxZQUFZLEdBQUcsU0FBUyxFQUFFO29CQUNuQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztpQkFDakM7Z0JBQ0QsSUFBSSxTQUFTLEVBQUU7b0JBQ2IsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO3dCQUM1RCxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztxQkFDOUI7aUJBQ0Y7cUJBQU07b0JBQ0wsTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7aUJBQzlCO2FBQ0Y7WUFDRCxJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxhQUFhLEVBQUU7Z0JBQ25DLE1BQU0sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO2FBRS9CO1lBQ0QsUUFBUSxFQUFFLENBQUM7U0FDWjtLQUNGO0lBQ0QsSUFBSSxDQUFDLE1BQU0sSUFBSSxTQUFTO1FBQUUsTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUU3QyxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3J9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb21wb25lbnRUeXBlfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7Rm9ybUdyb3VwLCBWYWxpZGF0b3JzfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7RmllbGRJdGVtR3JvdXBDb25maWd9IGZyb20gJy4vbW9kdWxlcy9iYXNlL3BvcC1maWVsZC1pdGVtLWdyb3VwL3BvcC1maWVsZC1pdGVtLWdyb3VwLm1vZGVsJztcbmltcG9ydCB7VGFiQnV0dG9uSW50ZXJmYWNlLCBUYWJDb21wb25lbnRJbnRlcmZhY2UsIFRhYkNvbmZpZ30gZnJvbSAnLi9tb2R1bGVzL2Jhc2UvcG9wLXRhYi1tZW51L3RhYi1tZW51Lm1vZGVsJztcbmltcG9ydCB7UG9wRW50aXR5UmVwb1NlcnZpY2V9IGZyb20gJy4vbW9kdWxlcy9lbnRpdHkvc2VydmljZXMvcG9wLWVudGl0eS1yZXBvLnNlcnZpY2UnO1xuaW1wb3J0IHtMYWJlbENvbmZpZywgTWV0YWRhdGFDb25maWd9IGZyb20gJy4vbW9kdWxlcy9iYXNlL3BvcC1maWVsZC1pdGVtL3BvcC1sYWJlbC9sYWJlbC1jb25maWcubW9kZWwnO1xuaW1wb3J0IHtDaGVja2JveENvbmZpZ30gZnJvbSAnLi9tb2R1bGVzL2Jhc2UvcG9wLWZpZWxkLWl0ZW0vcG9wLWNoZWNrYm94L2NoZWNrYm94LWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQge0lucHV0Q29uZmlnfSBmcm9tICcuL21vZHVsZXMvYmFzZS9wb3AtZmllbGQtaXRlbS9wb3AtaW5wdXQvaW5wdXQtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7U2VsZWN0Q29uZmlnfSBmcm9tICcuL21vZHVsZXMvYmFzZS9wb3AtZmllbGQtaXRlbS9wb3Atc2VsZWN0L3NlbGVjdC1jb25maWcubW9kZWwnO1xuaW1wb3J0IHtTZWxlY3RNdWx0aUNvbmZpZ30gZnJvbSAnLi9tb2R1bGVzL2Jhc2UvcG9wLWZpZWxkLWl0ZW0vcG9wLXNlbGVjdC1tdWx0aS9zZWxlY3QtbXVsaXQtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7UmFkaW9Db25maWd9IGZyb20gJy4vbW9kdWxlcy9iYXNlL3BvcC1maWVsZC1pdGVtL3BvcC1yYWRpby9yYWRpby1jb25maWcubW9kZWwnO1xuaW1wb3J0IHtUZXh0YXJlYUNvbmZpZ30gZnJvbSAnLi9tb2R1bGVzL2Jhc2UvcG9wLWZpZWxkLWl0ZW0vcG9wLXRleHRhcmVhL3RleHRhcmVhLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQge1N3aXRjaENvbmZpZ30gZnJvbSAnLi9tb2R1bGVzL2Jhc2UvcG9wLWZpZWxkLWl0ZW0vcG9wLXN3aXRjaC9zd2l0Y2gtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7U2lkZUJ5U2lkZUNvbmZpZ30gZnJvbSAnLi9tb2R1bGVzL2Jhc2UvcG9wLXNpZGUtYnktc2lkZS9wb3Atc2lkZS1ieS1zaWRlLm1vZGVsJztcbmltcG9ydCB7TWluTWF4Q29uZmlnfSBmcm9tICcuL21vZHVsZXMvYmFzZS9wb3AtZmllbGQtaXRlbS9wb3AtbWluLW1heC9taW4tbWF4Lm1vZGVscyc7XG5pbXBvcnQge1BvcExvZ1NlcnZpY2V9IGZyb20gJy4vc2VydmljZXMvcG9wLWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7TnVtYmVyQ29uZmlnfSBmcm9tICcuL21vZHVsZXMvYmFzZS9wb3AtZmllbGQtaXRlbS9wb3AtbnVtYmVyL251bWJlci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHtQb3BUZW1wbGF0ZVNlcnZpY2V9IGZyb20gJy4vbW9kdWxlcy9hcHAvcG9wLXRlbXBsYXRlLnNlcnZpY2UnO1xuaW1wb3J0IHtBcHAsIEF1dGhEZXRhaWxzLCBCdXNpbmVzcywgQnVzaW5lc3NVc2VyfSBmcm9tICcuL3BvcC1jb21tb24tdG9rZW4ubW9kZWwnO1xuaW1wb3J0IHtDYWNGaWx0ZXJ9IGZyb20gJy4vbW9kdWxlcy9hcHAvcG9wLWNhYy1maWx0ZXIvcG9wLWNhYy1maWx0ZXIubW9kZWwnO1xuaW1wb3J0IHtQb3BQaXBlU2VydmljZX0gZnJvbSAnLi9zZXJ2aWNlcy9wb3AtcGlwZS5zZXJ2aWNlJztcbmltcG9ydCB7UG9wRGF0ZXRpbWVTZXJ2aWNlfSBmcm9tICcuL3NlcnZpY2VzL3BvcC1kYXRldGltZS5zZXJ2aWNlJztcbmltcG9ydCB7UG9wUmVxdWVzdFNlcnZpY2V9IGZyb20gJy4vc2VydmljZXMvcG9wLXJlcXVlc3Quc2VydmljZSc7XG5pbXBvcnQge1BvcEVudGl0eVNlcnZpY2V9IGZyb20gJy4vbW9kdWxlcy9lbnRpdHkvc2VydmljZXMvcG9wLWVudGl0eS5zZXJ2aWNlJztcbmltcG9ydCB7UG9wUm91dGVIaXN0b3J5UmVzb2x2ZXJ9IGZyb20gJy4vc2VydmljZXMvcG9wLXJvdXRlLWhpc3RvcnkucmVzb2x2ZXInO1xuaW1wb3J0IHtQb3BFbnRpdHlVdGlsUG9ydGFsU2VydmljZX0gZnJvbSAnLi9tb2R1bGVzL2VudGl0eS9zZXJ2aWNlcy9wb3AtZW50aXR5LXV0aWwtcG9ydGFsLnNlcnZpY2UnO1xuaW1wb3J0IHtFbnRpdHlNZW51fSBmcm9tICcuL21vZHVsZXMvYXBwL3BvcC1sZWZ0LW1lbnUvZW50aXR5LW1lbnUubW9kZWwnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtSb3V0ZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge0NvbXBvbmVudERvbUludGVyZmFjZX0gZnJvbSAnLi9wb3AtY29tbW9uLWRvbS5tb2RlbHMnO1xuaW1wb3J0IHtQb3BSZXF1ZXN0RXh0ZXJuYWxTZXJ2aWNlfSBmcm9tICcuL3NlcnZpY2VzL3BvcC1yZXF1ZXN0LWV4dGVybmFsLnNlcnZpY2UnO1xuaW1wb3J0IHtQb3BEb21TZXJ2aWNlfSBmcm9tICcuL3NlcnZpY2VzL3BvcC1kb20uc2VydmljZSc7XG5pbXBvcnQge0RhdGVGaWx0ZXJQcmVkaWNhdGV9IGZyb20gJy4vbW9kdWxlcy9iYXNlL3BvcC1maWVsZC1pdGVtL3BvcC1kYXRlL2RhdGUtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7UG9wRW50aXR5U2NoZW1lQ29tcG9uZW50U2VydmljZX0gZnJvbSBcIi4vbW9kdWxlcy9lbnRpdHkvc2VydmljZXMvcG9wLWVudGl0eS1zY2hlbWUtY29tcG9uZW50LnNlcnZpY2VcIjtcblxuZXhwb3J0IHR5cGUgRXZlbnRDYWxsYmFjayA9IChjb3JlOiBDb3JlQ29uZmlnLCBldmVudDogUG9wQmFzZUV2ZW50SW50ZXJmYWNlLCBkb20/OiBDb21wb25lbnREb21JbnRlcmZhY2UpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBFdmVudFByb21pc2VDYWxsYmFjayA9IChjb3JlOiBDb3JlQ29uZmlnLCBldmVudDogUG9wQmFzZUV2ZW50SW50ZXJmYWNlLCBkb20/OiBDb21wb25lbnREb21JbnRlcmZhY2UpID0+IFByb21pc2U8YW55PjtcbmV4cG9ydCB0eXBlIE91dGxldFJlc2V0ID0gKHBvc2l0aW9uPzogbnVtYmVyKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgUG9wVGFzayA9ICgpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIERhdGFGYWN0b3J5ID0gKGlkPzogbnVtYmVyLCBhcmNoaXZlZD86IGJvb2xlYW4gfCBudW1iZXIpID0+IFByb21pc2U8YW55W10+O1xuZXhwb3J0IHR5cGUgRGF0YURlY29yYXRvciA9IChjb3JlOiBDb3JlQ29uZmlnLCBlbnRpdHk6IEVudGl0eSkgPT4gRW50aXR5O1xuZXhwb3J0IHR5cGUgRGF0YUZpbHRlciA9IChlbnRpdHk6IEVudGl0eSkgPT4gYm9vbGVhbjtcbmV4cG9ydCB0eXBlIERhdGFTZXR0ZXIgPSAoY29yZTogQ29yZUNvbmZpZywgZGF0YTogYW55LCBkb21SZXBvPzogUG9wRG9tU2VydmljZSkgPT4gYW55O1xuXG5cbmV4cG9ydCBsZXQgU2VydmljZUluamVjdG9yOiBJbmplY3RvcjtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFNlcnZpY2VJbmplY3RvcihpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgaWYgKCFTZXJ2aWNlSW5qZWN0b3IpIFNlcnZpY2VJbmplY3RvciA9IGluamVjdG9yO1xufVxuXG5leHBvcnQgbGV0IFBvcEVudGl0eTogUG9wRW50aXR5U2VydmljZTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcEVudGl0eShlbnRpdHk6IFBvcEVudGl0eVNlcnZpY2UpIHtcbiAgaWYgKCFQb3BFbnRpdHkpIFBvcEVudGl0eSA9IGVudGl0eTtcbn1cblxuZXhwb3J0IGxldCBQb3BIaXN0b3J5OiBQb3BSb3V0ZUhpc3RvcnlSZXNvbHZlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcEhpc3RvcnkoaGlzdG9yeTogUG9wUm91dGVIaXN0b3J5UmVzb2x2ZXIpIHtcbiAgaWYgKCFQb3BIaXN0b3J5KSBQb3BIaXN0b3J5ID0gaGlzdG9yeTtcbn1cblxuZXhwb3J0IGxldCBQb3BQaXBlOiBQb3BQaXBlU2VydmljZTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcFBpcGUocGlwZTogUG9wUGlwZVNlcnZpY2UpIHtcbiAgaWYgKCFQb3BQaXBlKSBQb3BQaXBlID0gcGlwZTtcbn1cblxuZXhwb3J0IGxldCBQb3BEYXRlOiBQb3BEYXRldGltZVNlcnZpY2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXRQb3BEYXRlKGRhdGU6IFBvcERhdGV0aW1lU2VydmljZSkge1xuICBpZiAoIVBvcERhdGUpIFBvcERhdGUgPSBkYXRlO1xufVxuXG5leHBvcnQgbGV0IFBvcExvZzogUG9wTG9nU2VydmljZTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcExvZ2dlcihsb2c6IFBvcExvZ1NlcnZpY2UpIHtcbiAgaWYgKCFQb3BMb2cpIFBvcExvZyA9IGxvZztcbn1cblxuZXhwb3J0IGxldCBQb3BFbnY6IERpY3Rpb25hcnk8YW55PjtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcEVudihlbnY6IERpY3Rpb25hcnk8YW55Pikge1xuICBpZiAoIVBvcEVudikgUG9wRW52ID0gZW52O1xufVxuXG5cbmV4cG9ydCBsZXQgUG9wQ29tcG9uZW50UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcENvbXBvbmVudFJlc29sdmVyKGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKSB7XG4gIGlmICghUG9wQ29tcG9uZW50UmVzb2x2ZXIpIFBvcENvbXBvbmVudFJlc29sdmVyID0gY2ZyO1xufVxuXG5leHBvcnQgbGV0IFBvcFJlcXVlc3Q6IFBvcFJlcXVlc3RTZXJ2aWNlO1xuXG5leHBvcnQgZnVuY3Rpb24gU2V0UG9wUmVxdWVzdChyZXF1ZXN0OiBQb3BSZXF1ZXN0U2VydmljZSkge1xuICBpZiAoIVBvcFJlcXVlc3QpIFBvcFJlcXVlc3QgPSByZXF1ZXN0O1xufVxuXG5leHBvcnQgbGV0IFBvcEV4dGVybmFsQXBpOiBQb3BSZXF1ZXN0RXh0ZXJuYWxTZXJ2aWNlO1xuXG5leHBvcnQgZnVuY3Rpb24gU2V0UG9wRXh0ZXJuYWxBcGkoYXBpOiBQb3BSZXF1ZXN0RXh0ZXJuYWxTZXJ2aWNlKSB7XG4gIGlmICghUG9wRXh0ZXJuYWxBcGkpIFBvcEV4dGVybmFsQXBpID0gYXBpO1xufVxuXG5cbmV4cG9ydCBsZXQgUG9wUG9ydGFsOiBQb3BFbnRpdHlVdGlsUG9ydGFsU2VydmljZTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcFBvcnRhbChwb3J0YWw6IFBvcEVudGl0eVV0aWxQb3J0YWxTZXJ2aWNlKSB7XG4gIGlmICghUG9wUG9ydGFsKSBQb3BQb3J0YWwgPSBwb3J0YWw7XG59XG5cbmV4cG9ydCBsZXQgUG9wSHJlZjogc3RyaW5nO1xuXG5leHBvcnQgZnVuY3Rpb24gU2V0UG9wSHJlZihocmVmOiBzdHJpbmcpIHtcbiAgaWYgKGhyZWYgJiYgdHlwZW9mIGhyZWYgPT09ICdzdHJpbmcnKSB7XG4gICAgUG9wSHJlZiA9IGhyZWY7XG4gIH1cbn1cblxuZXhwb3J0IGxldCBQb3BNZXNzYWdlOiBzdHJpbmc7XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXRQb3BNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZykge1xuICBpZiAobWVzc2FnZSAmJiB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICBQb3BNZXNzYWdlID0gbWVzc2FnZTtcbiAgfSBlbHNlIHtcbiAgICBQb3BNZXNzYWdlID0gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydCBsZXQgUG9wQ2FjaGVSZWRpcmVjdFVybDogc3RyaW5nO1xuXG5leHBvcnQgZnVuY3Rpb24gU2V0UG9wQ2FjaGVSZWRpcmVjdFVybChyb3V0ZXI6IFJvdXRlciA9IG51bGwsIHVybDogc3RyaW5nID0gbnVsbCk6IHZvaWQge1xuICBpZiAocm91dGVyIGluc3RhbmNlb2YgUm91dGVyKSB7XG4gICAgaWYgKCF1cmwpIHVybCA9IHJvdXRlci51cmw7XG4gICAgUG9wQ2FjaGVSZWRpcmVjdFVybCA9IHVybDtcbiAgICByb3V0ZXIubmF2aWdhdGVCeVVybCgnc3lzdGVtL2NhY2hlL2NsZWFyJywge3NraXBMb2NhdGlvbkNoYW5nZTogdHJ1ZX0pLmNhdGNoKChlKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnZScsIGUpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIFBvcENhY2hlUmVkaXJlY3RVcmwgPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuXG5leHBvcnQgbGV0IFBvcEF1dGg6IEF1dGhEZXRhaWxzO1xuXG5leHBvcnQgZnVuY3Rpb24gU2V0UG9wQXV0aChhdXRoOiBBdXRoRGV0YWlscykge1xuICBpZiAoYXV0aCAmJiB0eXBlb2YgYXV0aCA9PT0gJ29iamVjdCcgJiYgYXV0aCAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyhhdXRoKS5sZW5ndGgpIHtcbiAgICBQb3BBdXRoID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhdXRoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGxldCBQb3BCdXNpbmVzczogQnVzaW5lc3M7XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXRQb3BCdXNpbmVzcyhidXNpbmVzczogQnVzaW5lc3MpIHtcbiAgaWYgKGJ1c2luZXNzICYmIHR5cGVvZiBidXNpbmVzcyA9PT0gJ29iamVjdCcgJiYgYnVzaW5lc3MgIT09IG51bGwgJiYgT2JqZWN0LmtleXMoYnVzaW5lc3MpLmxlbmd0aCkge1xuICAgIFBvcEJ1c2luZXNzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShidXNpbmVzcykpO1xuICB9XG59XG5cbmV4cG9ydCBsZXQgUG9wQXBwOiBBcHA7XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXRQb3BBcHAoYXBwOiBBcHApIHtcbiAgaWYgKGFwcCAmJiB0eXBlb2YgYXBwID09PSAnb2JqZWN0JyAmJiBhcHAgIT09IG51bGwgJiYgT2JqZWN0LmtleXMoYXBwKS5sZW5ndGgpIHtcbiAgICBQb3BBcHAgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFwcCkpO1xuICB9XG59XG5cbmV4cG9ydCBsZXQgUG9wVXNlcjogQnVzaW5lc3NVc2VyO1xuXG5leHBvcnQgZnVuY3Rpb24gU2V0UG9wVXNlcih1c2VyOiBCdXNpbmVzc1VzZXIpIHtcbiAgaWYgKHVzZXIgJiYgdHlwZW9mIHVzZXIgPT09ICdvYmplY3QnICYmIHVzZXIgIT09IG51bGwgJiYgT2JqZWN0LmtleXModXNlcikubGVuZ3RoKSB7XG4gICAgUG9wVXNlciA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodXNlcikpO1xuICB9XG59XG5cbmV4cG9ydCBsZXQgUG9wRmlsdGVyOiBDYWNGaWx0ZXIgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcEZpbHRlcihmaWx0ZXI6IENhY0ZpbHRlcikge1xuICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ29iamVjdCcgJiYgZmlsdGVyICE9PSBudWxsKSB7XG4gICAgUG9wRmlsdGVyID0gZmlsdGVyO1xuICB9XG59XG5cbmV4cG9ydCBsZXQgUG9wU2NoZW1lQ29tcG9uZW50OiBQb3BFbnRpdHlTY2hlbWVDb21wb25lbnRTZXJ2aWNlO1xuXG5leHBvcnQgZnVuY3Rpb24gU2V0UG9wU2NoZW1lQ29tcG9uZW50KHNjaGVtZUNvbXBvbmVudDogUG9wRW50aXR5U2NoZW1lQ29tcG9uZW50U2VydmljZSkge1xuICBpZiAoIVBvcFNjaGVtZUNvbXBvbmVudCkgUG9wU2NoZW1lQ29tcG9uZW50ID0gc2NoZW1lQ29tcG9uZW50O1xufVxuXG5leHBvcnQgbGV0IFBvcFJvdXRlQWxpYXNNYXA6IHsgY2xpZW50Pzogc3RyaW5nOyBhY2NvdW50Pzogc3RyaW5nLCBjYW1wYWlnbj86IHN0cmluZywgcHJvZmlsZT86IHN0cmluZyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gU2V0UG9wUm91dGVBbGlhc01hcChhbGlhc01hcDogeyBjbGllbnQ/OiBzdHJpbmc7IGFjY291bnQ/OiBzdHJpbmcsIGNhbXBhaWduPzogc3RyaW5nLCBwcm9maWxlPzogc3RyaW5nIH0pIHtcbiAgaWYgKGFsaWFzTWFwICYmIHR5cGVvZiBhbGlhc01hcCA9PT0gJ29iamVjdCcpIFBvcFJvdXRlQWxpYXNNYXAgPSBhbGlhc01hcDtcbn1cblxuZXhwb3J0IGxldCBQb3BBbGlhc1JvdXRlTWFwOiBEaWN0aW9uYXJ5PHN0cmluZz4gPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcEFsaWFzUm91dGVNYXAocm91dGVNYXA6IERpY3Rpb25hcnk8c3RyaW5nPikge1xuICBpZiAocm91dGVNYXAgJiYgdHlwZW9mIHJvdXRlTWFwID09PSAnb2JqZWN0JykgUG9wQWxpYXNSb3V0ZU1hcCA9IHJvdXRlTWFwO1xufVxuXG5cbmV4cG9ydCBsZXQgUG9wVGVtcGxhdGU6IFBvcFRlbXBsYXRlU2VydmljZTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBvcFRlbXBsYXRlKHNydjogUG9wVGVtcGxhdGVTZXJ2aWNlKSB7XG4gIGlmICghUG9wVGVtcGxhdGUpIFBvcFRlbXBsYXRlID0gc3J2O1xufVxuXG5leHBvcnQgY29uc3QgRklFTERfQ1VTVE9NX1NFVFRJTkcgPSBuZXcgSW5qZWN0aW9uVG9rZW48RGljdGlvbmFyeTxGaWVsZEN1c3RvbVNldHRpbmdJbnRlcmZhY2U+PignRmllbGQgQ3VzdG9tIFNldHRpbmcnLCB7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgZmFjdG9yeTogKCkgPT4gPERpY3Rpb25hcnk8RmllbGRDdXN0b21TZXR0aW5nSW50ZXJmYWNlPj57fVxufSk7XG5cbi8vIGV4cG9ydCBjb25zdCBBUFBfTUVOVVMgPSBuZXcgSW5qZWN0aW9uVG9rZW48RGljdGlvbmFyeTxGaWVsZEN1c3RvbVNldHRpbmdJbnRlcmZhY2U+PignQVBQX01FTlVTJywge1xuLy8gICBwcm92aWRlZEluOiAncm9vdCcsXG4vLyAgIGZhY3Rvcnk6ICgpID0+IDxEaWN0aW9uYXJ5PEZpZWxkQ3VzdG9tU2V0dGluZ0ludGVyZmFjZT4+e31cbi8vIH0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFwcE1lbnVzSW50ZXJmYWNlIHtcbiAgZ2V0OiAoKSA9PiBFbnRpdHlNZW51W107XG4gIHNldDogKG1lbnVzOiBFbnRpdHlNZW51W10pID0+IHZvaWQ7XG4gIGluaXQ6IChtZW51czogRW50aXR5TWVudVtdKSA9PiBFbnRpdHlNZW51W107XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBBcHBXaWRnZXRzSW50ZXJmYWNlIHtcbiAgZ2V0OiAoKSA9PiBFbnRpdHlNZW51W107XG4gIHNldDogKG1lbnVzOiBFbnRpdHlNZW51W10pID0+IHZvaWQ7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBBcHBUaGVtZUludGVyZmFjZSB7XG4gIGluaXQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPjtcbiAgZ2V0OiAoKSA9PiBzdHJpbmc7XG4gIHNldDogKHRoZW1lOiBzdHJpbmcsIGNvbnRyYXN0OiBzdHJpbmcpID0+IHZvaWQ7XG4gIGlzTG9hZGVkOiAoKSA9PiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwR2xvYmFsSW50ZXJmYWNlIHtcbiAgaXNWZXJpZmllZDogKCkgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgc2V0VmVyaWZpZWQ6ICgpID0+IHZvaWQ7XG4gIHNldE1vZGFsOiAoKSA9PiB2b2lkO1xuICBpc01vZGFsOiAoKSA9PiBudW1iZXI7XG4gIHJlbW92ZU1vZGFsOiAoKSA9PiB2b2lkO1xuICBpc0VudGl0aWVzOiAoKSA9PiBib29sZWFuO1xuICBzZXRFbnRpdGllczogKHZhbHVlOiBib29sZWFuKSA9PiB2b2lkO1xuICBpc0ZpbHRlckJhcjogKCkgPT4gYm9vbGVhbjtcbiAgc2V0RmlsdGVyQmFyOiAodmFsdWU6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGlzUGlwZXM6ICgpID0+IGJvb2xlYW47XG4gIHNldFBpcGVzOiAodmFsdWU6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGlzQWxpYXNlczogKCkgPT4gYm9vbGVhbjtcbiAgc2V0QWxpYXNlczogKHZhbHVlOiBib29sZWFuKSA9PiB2b2lkO1xuICBpc09wZW46ICgpID0+IGJvb2xlYW47XG4gIHNldE9wZW46ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgaXNTZWN1cml0eTogKCkgPT4gYm9vbGVhbjtcbiAgc2V0U2VjdXJpdHk6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgaXNQZXJtaXNzaW9uczogKCkgPT4gYm9vbGVhbjtcbiAgc2V0UGVybWlzc2lvbnM6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgaW5pdDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xuICB2ZXJpZmljYXRpb246IFN1YmplY3Q8Ym9vbGVhbj47XG4gIF91bmxvYWQ6IFN1YmplY3Q8Ym9vbGVhbj47XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBBcHBHbG9iYWxQYXJhbUludGVyZmFjZSB7XG4gIGZpbHRlcj86IGJvb2xlYW47IC8vIHdpbGwgdGhlIGFwcCB1c2UgdGhlIGZpbHRlciBiYXJcbiAgcGlwZXM/OiBib29sZWFuOyAvLyB3aWxsIHRoZSBhcHAgaGVhdmlseSB1c2UgdGhlIHBpcGUgc2VydmljZSwgbWVhbmluZyBhIGxvdCB0aGluZyB3aWxsIGF1dG8gaW1wb3J0IGludG8gdGhhdFxuICBhbGlhc2VzPzogYm9vbGVhbjsgLy8gd2lsbCB0aGUgYXBwIHVzZSBhbGlhc2VzXG4gIGVudGl0aWVzPzogYm9vbGVhbjsgLy8gd2lsbCB0aGUgYXBwIHVzZSBlbnRpdGllcyBtZW51cyBmcm9tIHRoZSBkYXRhYmFzZVxuICBvcGVuPzogYm9vbGVhbjsgLy8gd2lsbCB0aGUgYXBwIGJlIGEgcHVibGljIGZhY2luZyBhcHBcbiAgc2VjdXJpdHk/OiBib29sZWFuOyAvLyB3aWxsIHRoZSBhcHAgZW5mb3JjZSBzZWN1cml0eSBwcm9maWxlc1xuICBwZXJtaXNzaW9ucz86IGJvb2xlYW47IC8vIHdpbGwgdGhlIGFwcCBlbmZvcmNlIHNlY3VyaXR5IHByb2ZpbGVzXG59XG5cblxuLy8gZXhwb3J0IGNvbnN0IEFQUF9JTklUSUFMSVpFUl9UQVNLUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxQcm9taXNlPGJvb2xlYW4+W10+KCdBcHAgSW5pdGlhbGl6ZXIgVGFza3MnLCB7XG4vLyAgIHByb3ZpZGVkSW46ICdyb290Jyxcbi8vICAgZmFjdG9yeTogKCkgPT4gPFByb21pc2U8Ym9vbGVhbj5bXT5bXVxuLy8gfSk7XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKiBDb3JlICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cblxuZXhwb3J0IGludGVyZmFjZSBDb3JlSW50ZXJmYWNlIHtcbiAgcGFyYW1zOiBFbnRpdHlQYXJhbXM7ICAgLy8gdGhlIGJhc2UgZW50aXR5SWQgZGVmaW5pdGlvbnNcbiAgZmxhZz86IEVudGl0eUZsYWdJbnRlcmZhY2U7XG4gIHJlcG8/OiBQb3BFbnRpdHlSZXBvU2VydmljZTsgIC8vIGhhbmRsZXMgYXJlIHNlcnZlciBjYWxsc1xuICBlbnRpdHk/OiBFbnRpdHkgfCB1bmRlZmluZWQ7IC8vIHRoZSBhY3RpdmUgcmVjb3JkXG4gIG1ldGFkYXRhPzogRGljdGlvbmFyeTxhbnk+OyAvLyBhZGRpdGlvbmFsIGlucHV0XG4gIHJlc291cmNlPzogRGljdGlvbmFyeTxhbnk+O1xuICBwcmVmZXJlbmNlPzogRW50aXR5UHJlZmVyZW5jZTsgLy8gdGhlIGJsdWVwcmludCBmb3IgZmllbGQgZ3JvdXBzXG59XG5cblxuZXhwb3J0IGNsYXNzIENvcmVDb25maWcge1xuICBmbGFnOiBFbnRpdHlGbGFnSW50ZXJmYWNlID0ge307XG4gIHBhcmFtczogRW50aXR5UGFyYW1zO1xuICByZXBvOiBQb3BFbnRpdHlSZXBvU2VydmljZTtcbiAgZW50aXR5OiBFbnRpdHk7XG4gIHJlc291cmNlOiBEaWN0aW9uYXJ5PGFueT4gPSB7fTtcbiAgbWV0YWRhdGE6IG9iamVjdDtcbiAgcHJlZmVyZW5jZTogRW50aXR5UHJlZmVyZW5jZTtcbiAgYWNjZXNzOiBFbnRpdHlBY2Nlc3NJbnRlcmZhY2U7XG4gIGNoYW5uZWw/OiBFdmVudEVtaXR0ZXI8UG9wQmFzZUV2ZW50SW50ZXJmYWNlPjtcblxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtcz86IENvcmVJbnRlcmZhY2UpIHtcbiAgICBpZiAocGFyYW1zKSBmb3IgKGNvbnN0IGkgaW4gcGFyYW1zKSB0aGlzW2ldID0gcGFyYW1zW2ldO1xuICAgIGlmICghdGhpcy5tZXRhZGF0YSkgdGhpcy5tZXRhZGF0YSA9IHt9O1xuICB9XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlGaWx0ZXJJbnRlcmZhY2Uge1xuICBlbnRpdHk6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBvcHRpb25zOiBPcHRpb25JdGVtW107XG4gIHBhdGg6IHN0cmluZztcbiAgcGFyZW50X2xpbms6IHN0cmluZyB8IG51bGw7XG4gIGNoaWxkX2xpbms6IHN0cmluZyB8IG51bGw7XG4gIHNpbmdsZTogYm9vbGVhbjtcbiAgc29ydF9vcmRlcjogbnVtYmVyO1xufVxuXG5cbi8vICoqKioqKioqKioqKioqKioqKioqKiBFbnRpdHkgKioqKioqKioqKioqKioqKioqKioqXG5cblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHkge1xuICBpZDogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG4gIGNsaWVudF9pZD86IG51bWJlcjtcbiAgY2xpZW50X25hbWU/OiBzdHJpbmc7XG4gIGFjY291bnRfaWQ/OiBudW1iZXI7XG4gIGFjY291bnRfbmFtZT86IHN0cmluZztcbiAgY2FtcGFpZ25faWQ/OiBudW1iZXI7XG4gIGNhbXBhaWduX25hbWU/OiBzdHJpbmc7XG4gIGNyZWF0ZWRfYXQ/OiBzdHJpbmc7XG4gIGNyZWF0ZWRfYnlfdXNlcl9pZD86IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIGFkZGVkX2J5X3VzZXJfaWQ/OiBudW1iZXI7XG4gIGFkZGVkX2J5X3VzZXI/OiBzdHJpbmc7XG4gIGFkZGVkX2F0Pzogc3RyaW5nO1xuICB1cGRhdGVkX2J5X3VzZXJfaWQ/OiBzdHJpbmc7XG4gIHVwZGF0ZWRfYXQ/OiBzdHJpbmc7XG4gIGRlbGV0ZWRfYnlfdXNlcl9pZD86IHN0cmluZztcbiAgZGVsZXRlZF9hdD86IHN0cmluZztcbiAgaW50ZXJuYWxfbmFtZT86IHN0cmluZztcbiAgc2NoZW1lX2lkPzogbnVtYmVyO1xuICBzY2hlbWVfYXNzZXRzPzogRGljdGlvbmFyeTxhbnk+O1xuICB1aT86IERpY3Rpb25hcnk8YW55PjtcbiAgYXNzaWdubWVudHM/OiBEaWN0aW9uYXJ5PGFueT47XG5cbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5QWNjZXNzSW50ZXJmYWNlIHtcbiAgY2FuX2NyZWF0ZTogYm9vbGVhbiB8IG51bWJlcjtcbiAgY2FuX3JlYWQ6IGJvb2xlYW4gfCBudW1iZXI7XG4gIGNhbl91cGRhdGU6IGJvb2xlYW4gfCBudW1iZXI7XG4gIGNhbl9kZWxldGU6IGJvb2xlYW4gfCBudW1iZXI7XG4gIGNhbl9kZXN0cm95OiBib29sZWFuIHwgbnVtYmVyO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5UGFyYW1zSW50ZXJmYWNlIHtcbiAgYWxpYXM/OiB7IG5hbWU6IHN0cmluZywgcGx1cmFsOiBzdHJpbmcgfTtcbiAgYWNjZXNzPzogRW50aXR5QWNjZXNzSW50ZXJmYWNlO1xuICBlbnRpdHlJZD86IG51bWJlcjsgLy8gdGhlIGVudGl0eUlkIG9mIHRoZSBlbnRpdHlJZCxcbiAgY2FuX2V4dGVuZD86IGJvb2xlYW47XG4gIGFwaT86IHN0cmluZztcbiAgYXBwPzogc3RyaW5nO1xuICBpZD86IG51bWJlcjtcbiAgaW50ZXJuYWxfbmFtZTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHBhcmFtPzogc3RyaW5nO1xuICBwYXRoPzogc3RyaW5nOyAvLyB0aGUgYXBpIHBhdGggZm9yIHRoZSBlbnRpdHlJZFxuICBjYWNoZT86IGJvb2xlYW4gfCBudW1iZXI7XG4gIHJlZnJlc2g/OiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlQYXJhbXMge1xuICAvLyBpZCA9IDA7IC8vIHRoZSBlbnRpdHlJZCBvZiB0aGUgZW50aXR5SWRcbiAgYWxpYXM/OiB7IG5hbWU6IHN0cmluZywgcGx1cmFsOiBzdHJpbmcgfTtcbiAgYWNjZXNzPzogRW50aXR5QWNjZXNzSW50ZXJmYWNlO1xuICBhcGkgPSAnJzsgLy8gdGhlIGFwaSBwYXRoIG9mIHRoaXMgZW50aXR5SWQgaHR0cDpzZXJ2ZXIvYXBwLzxhcGk+XG4gIGFwcD86IHN0cmluZzsgLy8gdGhlIG5hbWUgb2YgdGhlIGFwcCB0aGlzIGVudGl0eUlkIGJlbG9uZ3MgdG8gdXNlZCBvbiBib3RoIGxvY2FsIGFuZCBzZXJ2ZXIgdXJsc1xuICBlbnRpdHlJZD86IG51bWJlcjtcbiAgY2FuX2V4dGVuZCA9IGZhbHNlO1xuICBpZDogbnVtYmVyO1xuICBpbnRlcm5hbF9uYW1lOiBzdHJpbmc7IC8vIHRoZSBpbnRlcm5hbCBuYW1lIG9mIHRoaXMgZW50aXR5SWQgLi4uIGNsaWVudCBtYXliZSBhbGlhc2VkIHNvIHdlIG5lZWQgdG8gaGF2ZSBhIGhhcmQgcmVmZXJlbmNlIGJhY2sgdG8gaXRcbiAgbmFtZTogc3RyaW5nO1xuICBwYXRoPyA9ICcnO1xuICBwYXJhbT8gPSAnJztcbiAgcmVmcmVzaD8gPSBmYWxzZTtcbiAgYmxvY2tBc3NldHM/ID0gZmFsc2U7XG5cblxuICBjb25zdHJ1Y3RvcihwYXJhbXM/OiBFbnRpdHlQYXJhbXNJbnRlcmZhY2UpIHtcbiAgICBpZiAocGFyYW1zKSBmb3IgKGNvbnN0IGkgaW4gcGFyYW1zKSB0aGlzW2ldID0gcGFyYW1zW2ldO1xuICB9XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlGbGFnSW50ZXJmYWNlIHtcbiAgcm91dGVDaGVjaz86IGJvb2xlYW47XG4gIGFzc2V0Q2hlY2s/OiBib29sZWFuO1xuICBtb2RhbENoZWNrPzogYm9vbGVhbjtcbiAgcmVmcmVzaENoZWNrPzogYm9vbGVhbjtcblxuICBba2V5OiBzdHJpbmddOiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5UHJlZmVyZW5jZSB7XG4gIHRhYmxlOiBhbnk7XG4gIGZpZWxkczogYW55O1xuICBmaWx0ZXJzOiBib29sZWFuO1xuICBvcHRpb25zOiBhbnk7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlGaWVsZEl0ZW1JbnRlcmZhY2Uge1xuICBuYW1lPzogc3RyaW5nOyAvLyB1c2VyIGFzc2lnbmVkIGxhYmVsIGZvciBmaWVsZCB1c2UgZm9yIGhlYWRlclxuICBkYXRhPzogRGljdGlvbmFyeTxhbnk+OyAvL1xuICBpdGVtcz86IEZpZWxkSXRlbUludGVyZmFjZVtdO1xuXG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eU1vZGVsSW50ZXJmYWNlIHtcbiAgYWN0aW9uPzogRGljdGlvbmFyeTxhbnk+O1xuICBkYXRhU2V0dGVyPzogRGF0YVNldHRlcjtcbiAgbGFzdERhdGFTZXR0ZXI/OiBEYXRhU2V0dGVyO1xuICBkZWNvcmF0b3I/OiBEYXRhRGVjb3JhdG9yO1xuICBlbnRyeUFjY2Vzcz86IHN0cmluZ1tdO1xuICBmaWx0ZXI/OiBEYXRhRmlsdGVyO1xuICB0YWI/OiBUYWJDb25maWdbXTtcbiAgdGFibGU/OiBFbnRpdHlNb2RlbFRhYmxlSW50ZXJmYWNlO1xuICBtZW51PzogRW50aXR5TW9kZWxNZW51SW50ZXJmYWNlO1xuICBzY2hlbWU/OiBEaWN0aW9uYXJ5PGFueT47XG4gIGZpZWxkPzogRGljdGlvbmFyeTxGaWVsZEludGVyZmFjZT47XG4gIHJlc291cmNlPzogRGljdGlvbmFyeTxSZXNvdXJjZUludGVyZmFjZT47XG4gIHJvdXRlPzogU2VydmljZVJvdXRlc0ludGVyZmFjZTtcbn1cblxuXG5leHBvcnQgY2xhc3MgRW50aXR5RXh0ZW5kSW50ZXJmYWNlIHtcbiAgYnV0dG9ucz86IFRhYkJ1dHRvbkludGVyZmFjZVtdO1xuICBjYW5fcmVhZD86IGJvb2xlYW4gfCBzdHJpbmc7XG4gIGNhbl91cGRhdGU/OiBib29sZWFuO1xuICBkZWJ1Zz86IGJvb2xlYW47XG4gIGdvVG9Vcmw/OiBzdHJpbmc7XG4gIHBvc3RVcmw/OiBzdHJpbmc7XG4gIGludGVybmFsX25hbWU/OiBzdHJpbmc7XG4gIGxpbmtCZWhhdmlvcj86ICdwb3J0YWwnO1xuICBwYXJlbnQ/OiBzdHJpbmc7XG4gIHBhcmVudElkPzogc3RyaW5nIHwgbnVtYmVyO1xuICBwb3J0YWw/OiBib29sZWFuO1xuICBzeW5jVGFicz86IGJvb2xlYW47XG4gIHdpZHRoPzogc3RyaW5nIHwgbnVtYmVyO1xuICB0YWJsZT86IEVudGl0eU1vZGVsVGFibGVJbnRlcmZhY2U7XG4gIHRhYnM/OiBUYWJDb25maWdbXTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eU1vZGVsVGFibGVJbnRlcmZhY2Uge1xuICBhZHZhbmNlZF9zZWFyY2g/OiBib29sZWFuO1xuICBwcmVmZXJlbmNlPzogRGljdGlvbmFyeTxhbnk+O1xuICBidXR0b24/OiBFbnRpdHlNb2RlbFRhYmxlQnV0dG9uSW50ZXJmYWNlO1xuICBmaWx0ZXI/OiBFbnRpdHlNb2RlbFRhYmxlRmlsdGVySW50ZXJmYWNlO1xuICBsaW5rQmVoYXZpb3I/OiAncG9ydGFsJztcbiAgZXh0ZW5zaW9uPzogRW50aXR5RXh0ZW5kSW50ZXJmYWNlO1xuICBwZXJtaXNzaW9uPzogRGljdGlvbmFyeTxib29sZWFuPjtcbiAgd2hpdGVsaXN0PzogRGljdGlvbmFyeTwxPjsgLy8gZmllbGRzIHRvIGFsd2F5cyBzaG93XG4gIGJsYWNrbGlzdD86IERpY3Rpb25hcnk8MT47IC8vIGZpZWxkcyB0byBuZXZlciBzaG93XG4gIGFwcGVuZGxpc3Q/OiBEaWN0aW9uYXJ5PG51bWJlciB8IHN0cmluZyB8IGJvb2xlYW4+OyAvLyBmaWVsZHMgdG8gbmV2ZXIgc2hvd1xuICByb3V0ZT86IHN0cmluZztcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eU1vZGVsVGFibGVGaWx0ZXJJbnRlcmZhY2Uge1xuICBhY3RpdmU/OiBib29sZWFuO1xuICBkaXNwbGF5Pzogc3RyaW5nO1xuICBxdWVyeT86IERpY3Rpb25hcnk8c3RyaW5nPjtcbiAgdmlldz86IHN0cmluZ1tdO1xuICBhcGk/OiBFbnRpdHlGaWx0ZXJJbnRlcmZhY2VbXTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eU1vZGVsVGFibGVCdXR0b25JbnRlcmZhY2Uge1xuICBhZHZhbmNlZF9zZWFyY2g/OiBib29sZWFuO1xuICBhcmNoaXZlZD86IGJvb2xlYW47XG4gIGN1c3RvbT86IGFueVtdO1xuICBuZXc/OiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5TW9kZWxNZW51SW50ZXJmYWNlIHtcbiAgYnV0dG9uPzoge1xuICAgIGFyY2hpdmU/OiBib29sZWFuO1xuICAgIGNsb25lPzogYm9vbGVhbjtcbiAgICBjdXN0b20/OiBhbnlbXTtcbiAgICBkZWxldGU/OiBib29sZWFuO1xuICAgIGdvQmFjaz86IGJvb2xlYW47XG4gIH07XG4gIGFyY2hpdmVLZXk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZW1lQ29tcG9uZW50TW9kZWxJbnRlcmZhY2Uge1xuICBhY3Rpb24/OiBEaWN0aW9uYXJ5PGFueT47XG4gIHRhYj86IFRhYkNvbmZpZ1tdO1xuICBjb21wb25lbnQ/OiBEeW5hbWljQ29tcG9uZW50SW50ZXJmYWNlO1xuICByZXNvdXJjZT86IERpY3Rpb25hcnk8UmVzb3VyY2VJbnRlcmZhY2U+O1xuICBzZXR0aW5nPzogU2NoZW1lQ29tcG9uZW50U2V0dGluZ0ludGVyZmFjZTtcbiAgb3B0aW9uPzogRGljdGlvbmFyeTxhbnk+O1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZW1lQ29tcG9uZW50U2V0dGluZ0ludGVyZmFjZSB7XG4gIGNvbXBvbmVudD86IER5bmFtaWNDb21wb25lbnRJbnRlcmZhY2U7XG4gIGNsaWVudF9pZD86IG51bWJlcltdO1xuICBhY2NvdW50X2lkPzogbnVtYmVyW107XG4gIGNhbXBhaWduX2lkPzogbnVtYmVyW107XG4gIHJlYWRvbmx5PzogYm9vbGVhbjtcblxuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBTY2hlbWVDb21wb25lbnRPcHRpb25JbnRlcmZhY2Uge1xuICBjb21wb25lbnQ/OiBEeW5hbWljQ29tcG9uZW50SW50ZXJmYWNlO1xuICBjbGllbnRfaWQ/OiBudW1iZXJbXTtcbiAgYWNjb3VudF9pZD86IG51bWJlcltdO1xuICBjYW1wYWlnbl9pZD86IG51bWJlcltdO1xuICBzdGFydERhdGU/OiBzdHJpbmc7XG4gIGVuZERhdGU/OiBzdHJpbmc7XG5cbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZW1lQ29tcG9uZW50UGFyYW1JbnRlcmZhY2Uge1xuICBpZD86IHN0cmluZztcbiAgaW50ZXJuYWxfbmFtZT86IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgU2NoZW1lQ29tcG9uZW50UGFyYW1zIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIGludGVybmFsX25hbWU/OiBzdHJpbmc7IC8vIHRoZSBpbnRlcm5hbCBuYW1lIG9mIHRoaXMgZW50aXR5SWQgLi4uIGNsaWVudCBtYXliZSBhbGlhc2VkIHNvIHdlIG5lZWQgdG8gaGF2ZSBhIGhhcmQgcmVmZXJlbmNlIGJhY2sgdG8gaXRcbiAgbmFtZT86IHN0cmluZztcblxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtcz86IFNjaGVtZUNvbXBvbmVudFBhcmFtSW50ZXJmYWNlKSB7XG4gICAgaWYgKHBhcmFtcykgZm9yIChjb25zdCBpIGluIHBhcmFtcykgdGhpc1tpXSA9IHBhcmFtc1tpXTtcbiAgfVxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZW1lQ29tcG9uZW50Q29uZmlnSW50ZXJmYWNlIHtcbiAgY29scz86IG51bWJlcjtcbiAgY29tcG9uZW50PzogRHluYW1pY0NvbXBvbmVudEludGVyZmFjZTtcbiAgY29uZmlnPzogRGljdGlvbmFyeTxhbnk+O1xuICBmYXV4Pzogc3RyaW5nO1xuICBncm91cD86IHN0cmluZztcbiAgaWNvbj86IHN0cmluZztcbiAgaWQ/OiBzdHJpbmc7XG4gIGludGVybmFsX25hbWU/OiBzdHJpbmc7XG4gIG1pbkl0ZW1Sb3dzPzogbnVtYmVyO1xuICBtaW5JdGVtQ29scz86IG51bWJlcjtcbiAgbmFtZT86IHN0cmluZztcbiAgb3B0aW9uPzogU2NoZW1lQ29tcG9uZW50T3B0aW9uSW50ZXJmYWNlO1xuICBwYXJhbTogU2NoZW1lQ29tcG9uZW50UGFyYW1JbnRlcmZhY2U7XG4gIHByZWZlcmVuY2VzPzogRGljdGlvbmFyeTxhbnk+O1xuICByZXNvdXJjZT86IERpY3Rpb25hcnk8UmVzb3VyY2VJbnRlcmZhY2U+O1xuICByb3dzPzogbnVtYmVyO1xuICBzZXR0aW5nPzogU2NoZW1lQ29tcG9uZW50U2V0dGluZ0ludGVyZmFjZTtcbiAgdHlwZT86IHN0cmluZztcbiAgeD86IG51bWJlcjtcbiAgeT86IG51bWJlcjtcbiAgY29tcG9uZW50X2lkPzogbnVtYmVyO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBTY2hlbWVDb21wb25lbnRDb25maWcge1xuICBjb2xzPzogbnVtYmVyO1xuICBjb21wb25lbnQ/OiBEeW5hbWljQ29tcG9uZW50SW50ZXJmYWNlO1xuICBjb25maWc/OiBEaWN0aW9uYXJ5PGFueT47XG4gIGZhdXg/OiBzdHJpbmc7XG4gIGdyb3VwPzogc3RyaW5nO1xuICBpY29uPzogc3RyaW5nO1xuICBpZD86IHN0cmluZztcbiAgaW50ZXJuYWxfbmFtZT86IHN0cmluZztcbiAgbWluSXRlbVJvd3M/OiBudW1iZXI7XG4gIG1pbkl0ZW1Db2xzPzogbnVtYmVyO1xuICBuYW1lPzogc3RyaW5nO1xuICBvcHRpb24/OiBTY2hlbWVDb21wb25lbnRPcHRpb25JbnRlcmZhY2U7XG4gIHBhcmFtOiBTY2hlbWVDb21wb25lbnRQYXJhbUludGVyZmFjZTtcbiAgcHJlZmVyZW5jZXM/OiBEaWN0aW9uYXJ5PGFueT47XG4gIHJlc291cmNlPzogRGljdGlvbmFyeTxSZXNvdXJjZUludGVyZmFjZT47XG4gIHJvd3M/OiBudW1iZXI7XG4gIHNldHRpbmc/OiBTY2hlbWVDb21wb25lbnRTZXR0aW5nSW50ZXJmYWNlO1xuICB0eXBlPzogc3RyaW5nO1xuICB4PzogbnVtYmVyO1xuICB5PzogbnVtYmVyO1xuICB3aWRnZXRfaWQ/OiBudW1iZXI7XG5cblxuICBjb25zdHJ1Y3RvcihwYXJhbXM/OiBTY2hlbWVDb21wb25lbnRDb25maWdJbnRlcmZhY2UpIHtcbiAgICBpZiAocGFyYW1zKSBmb3IgKGNvbnN0IGkgaW4gcGFyYW1zKSB0aGlzW2ldID0gcGFyYW1zW2ldO1xuICB9XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBTY2hlbWVDb21wb25lbnRHcm91cEludGVyZmFjZSB7XG4gIGlkPzogbnVtYmVyIHwgc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xuICB3aWRnZXRzPzogU2NoZW1lQ29tcG9uZW50Q29uZmlnSW50ZXJmYWNlW107XG59XG5cblxuLy8gKioqKioqKioqKioqKioqKioqKioqIFJlc291cmNlICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZUludGVyZmFjZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVmYXVsdFZhbHVlPzogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcbiAgYXBpX2NhY2hlPzogYm9vbGVhbiB8IG51bWJlcjtcbiAgYXBpX3BhdGg/OiBzdHJpbmc7XG4gIGFwaV93aGVuPzogYW55W107XG5cbiAgYXBpX3BhdGhfdmFycz86IERpY3Rpb25hcnk8c3RyaW5nPjtcbiAgYXBpX3BhcmFtcz86IFF1ZXJ5UGFyYW1zSW50ZXJmYWNlO1xuICBhcGlfdmVyc2lvbj86IG51bWJlcjtcbiAgY2FuX3JlYWQ/OiBzdHJpbmc7XG4gIGRhdGE/OiBhbnk7XG4gIGRhdGFfdmFsdWVzPzogT3B0aW9uSXRlbVtdO1xuICBkYXRhX2RlY29yYXRvcj86IERhdGFEZWNvcmF0b3I7XG4gIGRhdGFfZmlsdGVyPzogRGljdGlvbmFyeTxzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPjtcbiAgZGF0YV9zZXR0ZXI/OiBEYXRhU2V0dGVyO1xuICBkYXRhX3doZW4/OiBhbnlbXTtcbiAgZGF0YV9zdG9yYWdlPzogJ2RhdGFfdmFsdWVzJyB8ICdkYXRhJztcbn1cblxuXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VDb25maWcge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlZmF1bHRWYWx1ZT86IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gPSBudWxsO1xuICBhcGlfY2FjaGU/OiBib29sZWFuIHwgbnVtYmVyID0gZmFsc2U7XG4gIGFwaV92ZXJzaW9uPyA9IDE7XG4gIGFwaV9wYXRoPyA9ICcnO1xuICBhcGlfd2hlbj86IGFueVtdO1xuICBhcGlfcGF0aF92YXJzPzogRGljdGlvbmFyeTxzdHJpbmc+ID0gbnVsbDtcbiAgYXBpX3BhcmFtcz86IFF1ZXJ5UGFyYW1zSW50ZXJmYWNlO1xuICBjYW5fcmVhZD86IHN0cmluZztcbiAgZGF0YT86IGFueTtcbiAgZGF0YV92YWx1ZXM/OiBPcHRpb25JdGVtW10gPSBbXTtcbiAgZGF0YV9maWx0ZXI/OiBEaWN0aW9uYXJ5PHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4+ID0gbnVsbDtcbiAgZGF0YV9zZXR0ZXI/OiBEYXRhU2V0dGVyO1xuICBkYXRhX2RlY29yYXRvcj86IERhdGFEZWNvcmF0b3I7XG4gIGRhdGFfd2hlbj86IGFueVtdID0gbnVsbDtcbiAgZGF0YV9zdG9yYWdlPzogJ2RhdGFfdmFsdWVzJyB8ICdkYXRhJztcblxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtcz86IFJlc291cmNlSW50ZXJmYWNlKSB7XG4gICAgaWYgKHBhcmFtcykgZm9yIChjb25zdCBpIGluIHBhcmFtcykgdGhpc1tpXSA9IHBhcmFtc1tpXTtcbiAgfVxufVxuXG5cbi8vICoqKioqKioqKioqKioqKioqKioqKiBGaWVsZHMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG5cbmV4cG9ydCBjbGFzcyBGaWVsZEl0ZW1JbnRlcmZhY2Uge1xuICBpZD86IG51bWJlcjtcbiAgYWN0aXZlPzogYm9vbGVhbiB8IG51bWJlcjtcbiAgbmFtZT86IHN0cmluZztcbiAgY29tcG9uZW50PzogQ29tcG9uZW50VHlwZTxhbnk+O1xuICBjb25maWc/OiBTaWRlQnlTaWRlQ29uZmlnIHwgTGFiZWxDb25maWcgfCBDaGVja2JveENvbmZpZyB8IElucHV0Q29uZmlnIHwgTnVtYmVyQ29uZmlnIHwgU2VsZWN0Q29uZmlnIHwgU2VsZWN0TXVsdGlDb25maWcgfCBSYWRpb0NvbmZpZyB8IFRleHRhcmVhQ29uZmlnIHwgU3dpdGNoQ29uZmlnIHwgTWluTWF4Q29uZmlnIHwgTWV0YWRhdGFDb25maWc7XG4gIGN1c3RvbV9zZXR0aW5nPzogRGljdGlvbmFyeTxGaWVsZEN1c3RvbVNldHRpbmdJbnRlcmZhY2U+O1xuICBlbnRyeT86IEZpZWxkRW50cnk7XG4gIGZpZWxkX2lkPzogbnVtYmVyO1xuICBmaWVsZF9pdGVtX2lkPzogbnVtYmVyO1xuICBtb2RlbD86IEZpZWxkSXRlbU1vZGVsSW50ZXJmYWNlO1xuICB2aWV3PzogRGljdGlvbmFyeTxhbnk+O1xuICBydWxlPzogRGljdGlvbmFyeTxzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgYW55W10+O1xuICBydWxlcz86IEZpZWxkSXRlbVJ1bGVbXTtcbiAgdGFibGU/OiBGaWVsZEl0ZW1UYWJsZUludGVyYWNlO1xuICB0cmFpdD86IEZpZWxkSXRlbVRyYWl0O1xuICBmaWVsZD86IERpY3Rpb25hcnk8c3RyaW5nPjtcbiAgc291cmNlPzogRmllbGRJdGVtT3B0aW9uW107XG4gIHNvdXJjZU1hcD86IEtleU1hcDxudW1iZXI+O1xuICBzZXR0aW5nPzogRGljdGlvbmFyeTxib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nIHwgYW55W10gfCBEaWN0aW9uYXJ5PGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmc+PjtcbiAgc29ydD86IG51bWJlcjtcbn1cblxuXG5leHBvcnQgY2xhc3MgRmllbGRJdGVtQ29uZmlnIHtcbiAgaWQ/OiBudW1iZXI7XG4gIGFjdGl2ZT86IGJvb2xlYW4gfCBudW1iZXI7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGN1c3RvbV9zZXR0aW5nPzogRGljdGlvbmFyeTxGaWVsZEN1c3RvbVNldHRpbmdJbnRlcmZhY2U+ID0ge307XG4gIGNvbXBvbmVudDogQ29tcG9uZW50VHlwZTxhbnk+O1xuICBjb25maWc/OiBMYWJlbENvbmZpZyB8IENoZWNrYm94Q29uZmlnIHwgSW5wdXRDb25maWcgfCBOdW1iZXJDb25maWcgfCBTZWxlY3RDb25maWcgfCBTZWxlY3RNdWx0aUNvbmZpZyB8IFJhZGlvQ29uZmlnIHwgVGV4dGFyZWFDb25maWcgfCBTd2l0Y2hDb25maWcgfCBNZXRhZGF0YUNvbmZpZztcbiAgZW50cnk/OiBGaWVsZEVudHJ5O1xuICBmaWVsZD86IERpY3Rpb25hcnk8c3RyaW5nPjtcbiAgaW50ZXJuYWxfbmFtZT86IHN0cmluZztcbiAgbW9kZWw/OiBGaWVsZEl0ZW1Nb2RlbEludGVyZmFjZTtcbiAgdGFibGU/OiBGaWVsZEl0ZW1UYWJsZUludGVyYWNlO1xuICBzZXR0aW5nPzogRGljdGlvbmFyeTxib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nIHwgYW55W10gfCBEaWN0aW9uYXJ5PGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmc+PiA9IHt9O1xuICBzb3J0PzogbnVtYmVyO1xuXG5cbiAgY29uc3RydWN0b3IoY29uZmlnPzogRmllbGRJdGVtSW50ZXJmYWNlKSB7XG4gICAgZm9yIChjb25zdCBpIGluIGNvbmZpZykgdGhpc1tpXSA9IGNvbmZpZ1tpXTtcbiAgfVxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRDdXN0b21TZXR0aW5nSW50ZXJmYWNlIHtcbiAgaWQ/OiBudW1iZXI7XG4gIGNvbXBvbmVudD86IENvbXBvbmVudFR5cGU8YW55PjtcbiAgZGVmYXVsdFZhbHVlPzogYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZyB8IGFueVtdIHwgRGljdGlvbmFyeTxib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nPjtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBmaWVsZF9pZD86IG51bWJlcjtcblxuICBncm91cD86IHN0cmluZztcbiAgaGVscFRleHQ/OiBzdHJpbmc7XG4gIGljb24/OiBzdHJpbmc7XG4gIGl0ZW0/OiBzdHJpbmc7XG4gIGl0ZW1zPzogYW55O1xuICBsYWJlbD86IHN0cmluZztcbiAgbW9kYWw/OiBDb21wb25lbnRUeXBlPGFueT47XG4gIG1vZGVsPzogc3RyaW5nO1xuICBtdWx0aXBsZT86IGJvb2xlYW47XG4gIG5hbWU6IHN0cmluZztcbiAgb3B0aW9ucz86IEZpZWxkSXRlbU9wdGlvbnM7XG4gIHNlbGVjdGVkPzogYm9vbGVhbjtcbiAgdHlwZTogJ2Jvb2xlYW4nIHwgJ2V4cHJlc3Npb24nIHwgJ3ZhbGlkYXRpb24nIHwgJ3RyYW5zZm9ybWF0aW9uJyB8ICdtb2RlbCcgfCAncHJpbWFyeScgfCAnZml4ZWQnIHwgJ3RyYWl0JzsgLy8ganVzdCBndWVzc2VzIGF0IHRoaXMgcG9pbnRcbiAgdmFsdWU/OiBib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nIHwgYW55W10gfCBEaWN0aW9uYXJ5PGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmc+O1xuICB3aGVuPzogYW55W107XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEVudHJ5IHtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBpZDogbnVtYmVyO1xuICBmaWVsZF9pZDogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG4gIG9ycGhhbmVkPzogYm9vbGVhbjtcbiAgb3JwaGFuZWRfYXQ/OiBib29sZWFuIHwgc3RyaW5nO1xuICBzb3J0X29yZGVyOiBudW1iZXI7XG4gIHR5cGU6IHN0cmluZztcbiAgdHJhaXRzOiBGaWVsZEN1c3RvbVNldHRpbmdJbnRlcmZhY2VbXTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkSXRlbVBhdGNoSW50ZXJmYWNlIHtcbiAgZmllbGQ6IHN0cmluZztcbiAgcGF0aDogc3RyaW5nO1xuICBtZXRob2Q/OiAnUE9TVCcgfCAnUEFUQ0gnO1xuICBidXNpbmVzc0lkPzogbnVtYmVyOyAvLyBzcGVjaWZ5IHRoZSBidXNpbmVzc1xuICBjYWxsYmFjaz86IEV2ZW50Q2FsbGJhY2s7XG4gIGRpc2FibGVkPzogYm9vbGVhbjsgIC8vIGFsbG93IGZvciBhdXRvLXBhdGNoIHRvIGJlIGRpc2FibGVkIGFuZCBidXQgc3RpbGwgYWxsb3cgdG8gYmUgY2FsbGVkIG1hbnVhbGx5XG4gIGRpc3BsYXlJbmRpY2F0b3I/OiBib29sZWFuO1xuICBkdXJhdGlvbj86IG51bWJlcjtcbiAgaWdub3JlNDAxPzogYm9vbGVhbjtcbiAgbWV0YWRhdGE/OiB7fTtcbiAgdHJpZ2dlcj86ICdhdXRvJyB8ICdtYW51YWwnO1xuICB2ZXJzaW9uPzogbnVtYmVyO1xuICBydW5uaW5nPzogYm9vbGVhbjtcbiAgc3VjY2Vzcz86IGJvb2xlYW47XG4gIHJhdz86IGJvb2xlYW47ICAgICAgICAgIC8vIFNldCB0byBUcnVlIHRvIHBhdGNoIHJhdyB2YWx1ZSwgYWthIG5vdCBqc29uX2VuY29kZVxuICBqc29uPzogYm9vbGVhbjsgICAgICAgICAgLy8gU2V0IHRvIFRydWUgdG8gcGF0Y2ggcmF3IHZhbHVlLCBha2Egbm90IGpzb25fZW5jb2RlXG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEl0ZW1SdWxlIHtcbiAgaWQ6IG51bWJlcjtcbiAgZmllbGRfaWQ6IG51bWJlciB8IG51bGw7XG4gIGZpZWxkX2l0ZW1faWQ6IG51bWJlciB8IG51bGw7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVmYXVsdFZhbHVlPzogc3RyaW5nIHwgYm9vbGVhbiB8IG51bWJlciB8IGFueVtdO1xuICB2YWx1ZT86IHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXIgfCBhbnlbXTtcbiAgc291cmNlPzogYW55W10gfCBudWxsO1xuICBvcHRpb25zPzogYW55W10gfCBudWxsO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRJdGVtT3B0aW9ucyB7XG4gIGFzc2lnbmVkPzogYW55O1xuICBjaGlsZD86IHN0cmluZztcbiAgY29udmVydGVkPzogYm9vbGVhbjsgICAgICAgICAgICAgICAgICAgICAgLy8gSW5kaWNhdGVzIHRoYXQgb3B0aW9uIGxpc3QgaGFzIGFscmVhZHkgYmVlbiBwYXJzZWQgaW50byBhbiBvcHRpb25zIHNldFxuICBkZWZhdWx0VmFsdWU/OiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgYW55W107XG4gIGVtcHR5PzogT3B0aW9uSXRlbTsgICAgICAgICAgICAgICAgICAgICAgIC8vIFBhc3MgaW4gYW4gT3B0aW9uIEl0ZW0gdGhhdCB5b3Ugd2FudCB0byByZXByZXNlbnQgYW4gdW5hc3NpZ25lZCB2YWx1ZVxuICBlbnN1cmU/OiBPcHRpb25JdGVtO1xuICBuYW1lS2V5PzogJ3N0cmluZyc7XG4gIHBhcmVudD86IHN0cmluZztcbiAgcHJlc2VydmVLZXlzPzogc3RyaW5nW107XG4gIHJhd1ZhbHVlcz86IEZpZWxkSXRlbU9wdGlvbltdO1xuICB2YWx1ZXM/OiBGaWVsZEl0ZW1PcHRpb25bXTtcbiAgcmVzb3VyY2U/OiBzdHJpbmc7XG4gIHNvcnQ/OiBib29sZWFuO1xuICBwcmV2ZW50PzogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPjsgICAgICAgICAvLyBwYXNzIGluIGlkcyBvZiBhbiBPcHRpb24gSXRlbXMgdGhhdCB5b3UgZG9uJ3Qgd2FudCBpbiBsaXN0XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEl0ZW1PcHRpb24ge1xuICB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGdyb3VwPzogc3RyaW5nO1xuICBncm91cEZrPzogbnVtYmVyO1xuICBsZXZlbD86IG51bWJlcjtcbiAgaW5kZW50YXRpb24/OiBudW1iZXI7XG4gIG1vZGU/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHNvcnRfb3JkZXI/OiBudW1iZXI7XG4gIHNlbGVjdGVkPzogYm9vbGVhbjtcbiAgaGlkZGVuPzogYm9vbGVhbjtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkSXRlbVRhYmxlSW50ZXJhY2Uge1xuICBzb3J0PzogbnVtYmVyO1xuICB2aXNpYmxlPzogYm9vbGVhbjtcbiAgdHJhbnNmb3JtYXRpb24/OiBhbnk7XG4gIGhpZGRlbj86IGJvb2xlYW47XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEl0ZW1UcmFpdCB7XG4gIG1ldGFkYXRhPzogYm9vbGVhbjtcbiAgcHJpbWFyeT86IGJvb2xlYW47XG4gIGJ1YmJsZT86IGJvb2xlYW47XG4gIHJlYWRvbmx5PzogYm9vbGVhbjtcbiAgdW5pcXVlPzogYm9vbGVhbjtcbiAgc2VjdXJlPzogYm9vbGVhbjtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkT3B0aW9uc0ludGVyZmFjZSB7XG4gIGxheW91dD86IHN0cmluZztcbiAgbGVnZW5kPzogYm9vbGVhbjtcbiAgYnViYmxlPzogYm9vbGVhbjtcblxuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEl0ZW1Nb2RlbEludGVyZmFjZSB7XG4gIGFjdGl2ZT86IGJvb2xlYW47XG4gIGFsbD86IGJvb2xlYW47XG4gIGFsbG93QWxsPzogYm9vbGVhbjtcbiAgYWxsb3dHcm91cEFsbD86IGJvb2xlYW47XG4gIGFsbE92ZXJsYXk/OiBib29sZWFuO1xuICBhbGxPdmVybGF5RW5hYmxlZD86IGJvb2xlYW47XG4gIGFsbE92ZXJsYXlMYWJlbD86IHN0cmluZztcbiAgYWxsT3ZlcmxheU1lc3NhZ2U/OiBzdHJpbmc7XG4gIGFsbE92ZXJsYXlDYWxsYmFjaz86IEV2ZW50Q2FsbGJhY2s7XG4gIGFwaV9wYXRoPzogc3RyaW5nO1xuICBhcGlfY29sdW1uPzogc3RyaW5nO1xuICBhcGlfbWV0YWRhdGE/OiBvYmplY3QgfCBhbnlbXTtcbiAgYXNzaWduX2FsbD86IGJvb2xlYW47XG4gIGF1dG9GaWxsPzogYm9vbGVhbjtcbiAgYXV0b1NpemU/OiBib29sZWFuO1xuICBhdXRvZm9jdXM/OiBib29sZWFuO1xuICBhdXRvc2VsZWN0PzogYm9vbGVhbjtcbiAgYXNzaWduZWRMYWJlbD86IHN0cmluZztcbiAgYnViYmxlPzogYm9vbGVhbjtcbiAgYnV0dG9uPzogYm9vbGVhbjtcblxuICBib3JkZXI/OiBib29sZWFuO1xuICBjaGVja2JveD86IHsgdmlzaWJsZT86IGJvb2xlYW4sIHNvcnQ/OiBudW1iZXIgfTsgICAgICAvLyBbVGFibGU6ICdEaXNwbGF5IGEgc2VsZWN0YWJsZSBjaGVja2JveDpleHRyYWN0aW9uOiBhIGxpdHRsZSBtdWRkeSddXG4gIG5hbWU/OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgY29weUxhYmVsPzogYm9vbGVhbjsgICAgICAgICAvLyBbTGFiZWw6IFRoZSBsYWJlbCB0ZXh0IGhhcyBhIGNsaWNrIHRvIGNvcHldXG4gIGNvcHlMYWJlbERpc3BsYXk/OiBzdHJpbmc7ICAvLyBbTGFiZWw6IFRoZSBsYWJlbCB0aGF0IHNob3VsZCBnbyB3aXRoIHRoZSBsYWJlbCBjb3B5IGJ1dHRvbl1cbiAgY29weUxhYmVsQm9keT86IHN0cmluZyB8IG51bWJlcjsgICAgLy8gW0xhYmVsOiBUaGUgdmFsdWUgdGhhdCBiZSBjb3BpZWQgd2hlbiB0aGUgbGFiZWwgY29weSBidXR0b24gaXMgY2xpY2tlZF1cbiAgY29weUxhYmVsRGlzcGxheVRyYW5zZm9ybWF0aW9uPzogYW55OyAvLyBUaGUgdHJhbnNmb3JtYXRpb24gdGhhdCBzaG91bGQgaGFwcGVuIHRvIHRoZSBjb3B5TGFiZWxEaXNwbGF5XG4gIGNvcHlMYWJlbEJvZHlUcmFuc2Zvcm1hdGlvbj86IGFueTsgLy8gVGhlIHRyYW5zZm9ybWF0aW9uIHRoYXQgc2hvdWxkIGhhcHBlbiB0byB0aGUgY29weUxhYmVsQm9keVxuXG4gIGNvcHlWYWx1ZT86IGJvb2xlYW47ICAgICAgICAgLy8gW0xhYmVsOiBUaGUgdmFsdWUgdGV4dCBoYXMgYSBjbGljayB0byBjb3B5XVxuICBjb3B5VmFsdWVEaXNwbGF5Pzogc3RyaW5nOyAgLy8gW0xhYmVsOiBUaGUgdmFsdWUgdGhhdCBzaG91bGQgZ28gd2l0aCB0aGUgdmFsdWUgY29weSBidXR0b25dXG4gIGNvcHlWYWx1ZUJvZHk/OiBzdHJpbmcgfCBudW1iZXI7ICAgIC8vIFtMYWJlbDogVGhlIHZhbHVlIHRoYXQgYmUgY29waWVkIHdoZW4gdGhlIGxhYmVsIHZhbHVlIGJ1dHRvbiBpcyBjbGlja2VkXVxuICBjb3B5VmFsdWVEaXNwbGF5VHJhbnNmb3JtYXRpb24/OiBhbnk7IC8vIFRoZSB0cmFuc2Zvcm1hdGlvbiB0aGF0IHNob3VsZCBoYXBwZW4gdG8gdGhlIGNvcHlMYWJlbERpc3BsYXlcbiAgY29weVZhbHVlQm9keVRyYW5zZm9ybWF0aW9uPzogYW55OyAvLyBUaGUgdHJhbnNmb3JtYXRpb24gdGhhdCBzaG91bGQgaGFwcGVuIHRvIHRoZSBjb3B5TGFiZWxCb2R5XG5cbiAgZGlzcGxheT86IHN0cmluZzsgICAgIC8vIFtVbml2cjogJ3RoZSBsYWJlbCBvZiB0aGUgZmllbGQvbmFtZSddXG4gIGRpc3BsYXlUaXRsZT86IGJvb2xlYW47XG4gIGRpc3BsYXlIZWxwZXI/OiBib29sZWFuO1xuICBlbnRyeT86IEZpZWxkRW50cnk7XG4gIGVtcHR5PzogJ0NvbnZlcnRFbXB0eVRvTnVsbCcgfCAnQ29udmVydEVtcHR5VG9aZXJvJztcbiAgZmlsdGVyPzogYm9vbGVhbjtcbiAgZmlsdGVyUHJlZGljYXRlPzogc3RyaW5nIHwgRGF0ZUZpbHRlclByZWRpY2F0ZTtcbiAgaGVscFRleHQ/OiBzdHJpbmc7ICAvLyBbVW5pdnI6ICdDcmVhdGVzIGEgdG9vbHRpcCB0aGF0IGRpc3BsYXlzIHRoaXMgdmFsdWUgOnVzYWdlOiA8J1RoZSBpcyBzb21lIGhlbHBmdWwgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBmaWVsZCc+J11cbiAgaGVscGVyPzogc3RyaW5nOyAgICAgICAvLyBbVW5pdnI6ICdBIG5hdmlnYXRpb24gbWVjaGFuaXNtOiBhIGNvbWJvIG9mIHRvb2x0aXAsIHJvdXRlLCBhbmQgaGVscFRleHQ6IHVzYWdlIDwgJ0dvIHRvIDxjbGllbnQ+JyA6IGV4dHJhY3Rpb24gOiBXaWxsIGxvb2sgb24gdGhlIGFjdGl2ZSByZWNvcmQgdG8gZmluZCB0aGUgYWN0dWFsIHZhbHVlIG9mIGNsaWVudCB0byBkaXNwbGF5IGlubiB0b29sdGlwIGFuZCBhbHNvIGxvb2sgZm9yICdjbGllbnQnICsgJ19maycgdG8gY3JlYXRlIGEgcm91dGVcbiAgaGlkZGVuPzogYm9vbGVhbjtcbiAgaHRtbD86IHN0cmluZztcbiAgcm91dGU/OiBzdHJpbmc7ICAgICAgICAvLyBbVW5pdnI6ICdOYXZpZ2F0ZSBvbiBjbGljayB0YXJnZXQnOmV4dHJhY3Rpb246IElmIGEgZmllbGQgb3IgbmFtZSBuYXZpZ2F0ZXMsIHRoaXMgdmFsdWUgbmVlZHMgdG8gdGlsbCBpdCB3aGVyZSB0byBnb11cbiAgc3ViTGFiZWw/OiBzdHJpbmc7XG4gIHN1YlZhbHVlPzogc3RyaW5nO1xuICBpZD86IHN0cmluZyB8IG51bWJlcjtcbiAgaWNvbj86IHN0cmluZzsgICAgICAgIC8vIE1hdGVyaWFsIGljb25cbiAgaWNvblR5cGU/OiBzdHJpbmc7XG4gIGxpbms/OiBib29sZWFuOyAgICAgICAvLyBbVW5pdnI6ICdJbmRpY2F0ZSA8aHlwZS1yb3V0ZT4gdGV4dCc6ZXh0cmFjdGlvbjpEaXNwbGF5cyB0aGUgdmFsdWUgYXMgYSBoeXBlcmxpbmssIGZpcmVzIGEgZXZlbnQgd2hlbiBjbGlja2VkXVxuICBvcmRlcj86IG51bWJlcjsgICAgICAvLyBbVW5pdnI6ICdsZWZ0IHRvIHJpZ2h0IChob3Jpem9udGFsKSBwb3NpdGlvbiddXG4gIHNvcnQ/OiBudW1iZXI7ICAgICAgIC8vIFtVbml2cjogJ3RvcCB0byBib3R0b20gKHZlcnRpY2FsKSBwb3NpdGlvbiddXG4gIHZpc2libGU/OiBib29sZWFuOyAgICAvLyBbVGFibGU6ICdTZXQgdG8gdHJ1ZSB0byBzZWUgaW4gdGFibGUgdmlldyddXG4gIC8vIHNob3cgbmFtZSdcblxuICBmb3JtPzogc3RyaW5nOyAgICAgICAvLyBbRmllbGQ6ICdodG1sIGlucHV0IHR5cGUgPCdpbnB1dCcgfCAnc2VsZWN0JyB8ICd0ZXh0YXJlYScgfCAncmFkaW8nIHwgJ2NoZWNrYm94JyB8ICdzd2l0Y2gnIHwgJ21ldGFkYXRhJz4gICdtZXRhZGF0YScgd2lsbCBub3QgZGlzcGxheSBhbiBodG1sIGNhcHR1cmUgYnV0IHdpbGwgYXBwZW5kIGZpZWxkPT52YWx1ZSB0byBtZXRhZGF0YSddXG4gIHZhbHVlPzogYW55OyAgICAgICAgIC8vIFtGaWVsZDogJ0EgZGVmYXVsdC9leGlzdGluZyB2YWx1ZSBvbiB0aGUgaHRtbCBjYXB0dXJlJ1xuICBoZWFkZXI/OiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuO1xuICBoZWlnaHQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGhpbnQ/OiBib29sZWFuO1xuICBoaW50VGV4dD86IHN0cmluZztcbiAgbWF4SGVpZ2h0PzogbnVtYmVyO1xuICBpbnRlcnZhbD86IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuOyAgIC8vIFtGaWVsZDogJ0Rpc2FibGVkJ11cbiAgZmFjYWRlPzogYm9vbGVhbjsgICAgLy8gW0ZpZWxkOiAnU2V0IHRvIHRydWUgdG8gc2lnbmFsIHRoYXQgdGhpcyBmaWVsZCBpcyBhIGNsaWVudCBzaWRlIG1lY2hhbmlzbSAoZmlsdGVyLCBoZWxwZXIsIHRvZ2dsZSksZWZmZWN0cyBubyBhY3R1YWwgdmFsdWUgb24gdGhlIHNlcnZlciBzaWRlKG5vIHBhdGNoKV1cbiAgbGFiZWw/OiBzdHJpbmc7ICAgICAvLyBbVW5pdnI6ICd0aGUgbGFiZWwgb2YgdGhlIGZpZWxkL25hbWUnXVxuICBsYWJlbEJ1dHRvbj86IGJvb2xlYW47ICAvLyBEaXNwbGF5IHRoZSBsYWJlbCB3aXRoIGEgYnV0dG9uXG4gIGxhYmVsUG9zaXRpb24/OiBzdHJpbmc7XG4gIGxheW91dD86IHN0cmluZztcbiAgbGlzdD86IGFueTtcbiAgbWluPzogbnVtYmVyOyAgICAgICAgIC8vIFtGaWVsZDogJ21pbiB2YWx1ZSddXG4gIG1heD86IG51bWJlcjsgICAgICAgICAvLyBbRmllbGQ6ICdtYXggdmFsdWUnXVxuICBtb2RlPzogYW55O1xuICBtYXhDb2x1bW4/OiBzdHJpbmc7XG4gIG1heGxlbmd0aD86IG51bWJlcjsgICAvLyBbRmllbGQ6ICdtYXhsZW5ndGg6ZGVmYXVsdDo2NF1cbiAgbWluSGVpZ2h0PzogbnVtYmVyOyAgIC8vIFtGaWVsZDogJ21heGxlbmd0aDpkZWZhdWx0OjY0XVxuICBtaW5sZW5ndGg/OiBudW1iZXI7ICAgLy8gW0ZpZWxkOiAnbWF4bGVuZ3RoOmRlZmF1bHQ6NjRdXG4gIG1pblZhbHVlPzogbnVtYmVyO1xuICBtYXhWYWx1ZT86IG51bWJlcjtcbiAgbWluQ29sdW1uPzogc3RyaW5nO1xuICBtZXRhZGF0YT86IG9iamVjdDsgICAvLyBbRmllbGQ6ICdtYXhsZW5ndGg6ZGVmYXVsdDo2NF1cbiAgbm9Jbml0aWFsVmFsdWU/OiBib29sZWFuO1xuICBtdWx0aXBsZT86IGJvb2xlYW47XG4gIG9wdGlvbnM/OiBGaWVsZEl0ZW1PcHRpb25zOyAgIC8vIFtGaWVsZDogJ21heGxlbmd0aDpkZWZhdWx0OjY0XVxuICBvcHRpb25zTGFiZWw/OiBzdHJpbmc7XG4gIHBhdGNoPzogRmllbGRJdGVtUGF0Y2hJbnRlcmZhY2U7XG4gIHByZXZlbnQ/OiBhbnlbXTtcbiAgcGF0dGVybj86IHN0cmluZzsgICAgIC8vIFtGaWVsZDogJ3JlZ2V4IHBhdHRlcm46ZGVmYXVsdDonQWxwaGFOdW1lcmljJ11cbiAgcHJlc2VydmU/OiBib29sZWFuO1xuICByZXF1aXJlZD86IGJvb2xlYW4gfCBudW1iZXI7ICAgLy8gW0ZpZWxkOiAnc2V0IHRvIGZhbHNlIHRvIGJ5cGFzcyByZXF1aXJlZCB2YWxpZGF0b3I6ZGVmYXVsdDp0cnVlJ11cblxuXG4gIHJlbW92ZUFsbD86IGJvb2xlYW47XG4gIHJlYWRvbmx5PzogYm9vbGVhbjsgICAvLyBbRmllbGQ6ICdIdG1sIGF0dHJpYnV0ZSddXG4gIHJlc2V0PzogYm9vbGVhbjsgICAgICAgLy8gRmxhZ3Mgd2hldGhlciB0aGUgdmlldyBzaG91bGQgYmUgcmVzZXQgaWYgdGhpcyBmaWVsZCBjaGFuZ2VzXG4gIHN0ZXA/OiBudW1iZXI7XG4gIG1hc2s/OiBzdHJpbmc7ICAgICAgICAvLyBbRmllbGQ6ICdJbnB1dCBNYXNrJ11cbiAgcHJlZml4Pzogc3RyaW5nOyAgICAgIC8vIFtGaWVsZDogJ1NldCBhIHByZWZpeCBvbiB0aGUgaHRtbCBjYXB0dXJlIC4uICQsIGRvZXMgbm90IGdldCBzdG9yZWQgb24gY2FwdHVyZWQgdmFsdWUnXVxuICBzZXNzaW9uPzogYm9vbGVhbjtcbiAgc2Vzc2lvblBhdGg/OiBzdHJpbmc7XG4gIHNpemU/OiBudW1iZXI7XG4gIHN1ZmZpeD86IHN0cmluZzsgICAgICAvLyBbRmllbGQ6ICdTZXQgYSBwcmVmaXggb24gdGhlIGh0bWwgY2FwdHVyZSAuLiAnJScsIGRvZXMgbm90IGdldCBzdG9yZWQgb24gY2FwdHVyZWQgdmFsdWUnXVxuICB0cmFuc2Zvcm1hdGlvbj86IGFueTtcbiAgdGFiT25FbnRlcj86IGJvb2xlYW47ICAgICAgICAgICAvLyBDb252ZXJ0IGVudGVyIHRvIGEgdGFiIHdoZW4gY29udHJvbCBpcyB2YWxpZCwgZGVmYXVsdCBpcyBmYWxzZSBpZSAuLiBzZXQgdG8gdHJ1ZSB3aGVuIHlvdSB3YW50IHRvIG1vdmVkIGRvd24gYSBmb3JtIGxpc3RcbiAgdGltZT86IHN0cmluZztcbiAgdHJ1bmNhdGU/OiBudW1iZXI7XG4gIHRleHRPdmVyZmxvdz86ICdlbGxpcHNpcycgfCAnd3JhcCc7IC8vIFRleHQgb3ZlcmZsb3cgYmVoYXZpb3IsXG4gIHR5cGU/OiBzdHJpbmc7XG4gIHZhbGlkYXRvcnM/OiBBcnJheTxWYWxpZGF0b3JzPjsgLy8gQXJyYXkgb2YgVmFsaWRhdG9ycy5cbiAgdmFsdWVCdXR0b24/OiBib29sZWFuOyAgLy8gRGlzcGxheSB0aGUgdmFsdWUgd2l0aCBhIGJ1dHRvblxuICB2YWx1ZUJ1dHRvbkRpc2FibGVkPzogYm9vbGVhbjsgIC8vIERpc3BsYXkgdGhlIHZhbHVlIHdpdGggYSBidXR0b25cbiAgdmFsdWVCdXR0b25EaXNwbGF5Pzogc3RyaW5nOyAgLy8gVGhlIGxhYmVsIHRoYXQgc2hvdWxkIGdvIHdpdGggdGhlIGxhYmVsIHZhbHVlIGJ1dHRvblxuICB2YWx1ZUJ1dHRvbkRpc3BsYXlUcmFuc2Zvcm1hdGlvbj86IGFueTsgIC8vIFRoZSB0cmFuc2Zvcm1hdGlvbiB0aGF0IHNob3VsZCBoYXBwZW4gdG8gdGhlIHZhbHVlQnV0dG9uRGlzcGxheVxuICB3YXJuaW5nPzogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcbiAgd2hlbj86IGFueVtdOyAgICAgICAgIC8vIFtGaWVsZDogJ1Bhc3MgYW4gYXJyYXkgb2Ygc3RyaW5ncyA8WyduYW1lWzp2YWx1ZV0nXT4gdGhhdCBzaG91bGQgYmUgdHJ1dGhmdWwgZm9yIHRoaXMgZmllbGQgdG8gc2hvdy4vLyBbJ2FjY291bnRfZmsnXSAuLmllICA8WydhY2NvdW50X2ZrJ10+IGFjY291bnRfZmsganVzdCBuZWVkcyB0byBiZSBkZWZpbmVkIG9yIDxbJ2NsaWVudF9maycsICdhY2NvdW50X2ZrOjg4J10+IGNsaWVudCBqdXN0IG5lZWRzIHRvIGJlIGRlZmluZWQsIGFjY291bnRfZmsgaGFzIHRvIGJlIDg4J11cbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkSW50ZXJmYWNlIHtcbiAgY2FuQWRkPzogYm9vbGVhbjtcbiAgY2FuUmVtb3ZlPzogYm9vbGVhbjtcbiAgY29uZmlncz86IHsgZmllbGRfY29uZmlnczogRmllbGRDdXN0b21TZXR0aW5nSW50ZXJmYWNlWyBdLCBpdGVtX2NvbmZpZ3M6IEtleU1hcDxGaWVsZEN1c3RvbVNldHRpbmdJbnRlcmZhY2VbXT4gfTtcbiAgY3VzdG9tX3J1bGU/OiBEaWN0aW9uYXJ5PGFueT47XG4gIGN1c3RvbV9zZXR0aW5nPzogRGljdGlvbmFyeTxGaWVsZEN1c3RvbVNldHRpbmdJbnRlcmZhY2U+O1xuICBjdXN0b20/OiBib29sZWFuO1xuICBjb21wb25lbnQ/OiBDb21wb25lbnRUeXBlPGFueT47XG4gIGFuY2lsbGFyeT86IGJvb2xlYW4gfCBudW1iZXI7XG4gIGNoaWxkcmVuPzogRGljdGlvbmFyeTxGaWVsZEl0ZW1JbnRlcmZhY2U+O1xuICBkYXRhPzogYW55O1xuICBkYXRhX2tleXM/OiBhbnlbXTtcbiAgZW50cmllcz86IEZpZWxkRW50cnlbXTtcbiAgbWV0YWRhdGE/OiBEaWN0aW9uYXJ5PGFueT47XG4gIG11bHRpcGxlPzogYm9vbGVhbjtcbiAgbXVsdGlwbGVfbWluPzogbnVtYmVyO1xuICBtdWx0aXBsZV9tYXg/OiBudW1iZXI7XG4gIG11bHRpcGxlX21heF9saW1pdD86IG51bWJlcjtcbiAgZmFjYWRlPzogYm9vbGVhbjtcbiAgZmllbGRncm91cD86IEVudGl0eTtcbiAgaGlkZGVuPzogYm9vbGVhbjtcbiAgaWQ/OiBudW1iZXIgfCBzdHJpbmc7XG4gIGludGVybmFsX25hbWU/OiBzdHJpbmc7XG4gIG1vZGVsPzogRmllbGRJdGVtTW9kZWxJbnRlcmZhY2U7XG4gIGl0ZW1zPzogS2V5TWFwPEZpZWxkSXRlbUludGVyZmFjZT47XG4gIGl0ZW1NYXA/OiBhbnk7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGxhYmVsPzogc3RyaW5nO1xuICBvcHRpb25zPzogRGljdGlvbmFyeTxhbnk+O1xuICBwb3NpdGlvbj86IG51bWJlcjtcbiAgcHJpbWFyeT86IGJvb2xlYW47XG4gIHNldHRpbmc/OiBEaWN0aW9uYXJ5PGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmcgfCBhbnlbXSB8IERpY3Rpb25hcnk8Ym9vbGVhbiB8IG51bWJlciB8IHN0cmluZz4+O1xuICBzaG93X25hbWU/OiBib29sZWFuO1xuICBzb3J0PzogbnVtYmVyO1xuICBzdGF0ZT86ICd0ZW1wbGF0ZV9lZGl0JyB8ICd0ZW1wbGF0ZV9yZWFkb25seScgfCAndGV4dF9zaW5nbGUnIHwgJ3RleHRfZm9ybWF0JztcbiAgdGFibGU/OiBEaWN0aW9uYXJ5PGFueT47XG4gIHRyYWl0PzogRGljdGlvbmFyeTxhbnk+O1xuICB2YWx1ZT86IGFueTtcbiAgdmlldz86IERpY3Rpb25hcnk8YW55PjtcbiAgd2hlbj86IGFueTtcbn1cblxuXG5leHBvcnQgY2xhc3MgRmllbGRDb25maWcge1xuICBjYW5BZGQgPSBmYWxzZTtcbiAgY2FuUmVtb3ZlID0gZmFsc2U7XG4gIGNoaWxkcmVuPzogRGljdGlvbmFyeTxGaWVsZEl0ZW1JbnRlcmZhY2U+O1xuICBjb21wb25lbnQ6IENvbXBvbmVudFR5cGU8YW55PjtcbiAgY29uZmlncz86IHsgZmllbGRfY29uZmlnczogRmllbGRDdXN0b21TZXR0aW5nSW50ZXJmYWNlWyBdLCBpdGVtX2NvbmZpZ3M6IEtleU1hcDxGaWVsZEN1c3RvbVNldHRpbmdJbnRlcmZhY2VbXT4gfTtcbiAgY3VzdG9tX3J1bGU/OiBEaWN0aW9uYXJ5PGFueT47XG4gIGN1c3RvbV9zZXR0aW5nPzogRGljdGlvbmFyeTxGaWVsZEN1c3RvbVNldHRpbmdJbnRlcmZhY2U+ID0ge307XG4gIGRhdGE/OiBhbnkgPSB7fTtcbiAgZGF0YV9rZXlzOiBhbnlbXSA9IFtdO1xuICBmYWNhZGU/ID0gZmFsc2U7XG4gIGZpZWxkZ3JvdXA/OiBFbnRpdHk7XG4gIGVudHJ5PzogRmllbGRFbnRyeTtcbiAgZW50cmllcz86IEZpZWxkRW50cnlbXSA9IFtdO1xuICBtZXRhZGF0YT8gPSB7fTtcbiAgbXVsdGlwbGUgPSBmYWxzZTtcbiAgbXVsdGlwbGVfbWluPyA9IDE7XG4gIG11bHRpcGxlX21heD8gPSAxO1xuICBtdWx0aXBsZV9tYXhfbGltaXQ/ID0gMTA7XG5cbiAgaWQgPSBudWxsO1xuICBpbnRlcm5hbF9uYW1lPzogc3RyaW5nO1xuXG4gIGl0ZW1zPzogYW55O1xuICBpdGVtTWFwOiBhbnk7XG4gIG5hbWUgPSAnJztcbiAgbGFiZWw6IHN0cmluZztcbiAgbW9kYWw/OiBDb21wb25lbnRUeXBlPGFueT47XG4gIHNob3dfbmFtZSA9IHRydWU7XG4gIG9wdGlvbnMgPSA8RmllbGRPcHRpb25zSW50ZXJmYWNlPnt9O1xuICBwcmltYXJ5PzogYm9vbGVhbjtcbiAgc2V0dGluZz86IERpY3Rpb25hcnk8Ym9vbGVhbiB8IG51bWJlciB8IHN0cmluZyB8IGFueVtdIHwgRGljdGlvbmFyeTxib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nPj4gPSB7fTtcbiAgc29ydD8gPSA5OTtcbiAgc3RhdGU6ICd0ZW1wbGF0ZV9lZGl0JyB8ICd0ZW1wbGF0ZV9yZWFkb25seScgfCAndGV4dF9zaW5nbGUnIHwgJ3RleHRfZm9ybWF0JyA9ICd0ZW1wbGF0ZV9lZGl0JztcbiAgdmlldz86IERpY3Rpb25hcnk8YW55PjtcblxuXG4gIC8vIG9uRXZlbnQ6IFN1YmplY3Q8UG9wQmFzZUV2ZW50SW50ZXJmYWNlPjtcblxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtcz86IEZpZWxkSW50ZXJmYWNlKSB7XG4gICAgaWYgKHBhcmFtcykgZm9yIChjb25zdCBpIGluIHBhcmFtcykgdGhpc1tpXSA9IHBhcmFtc1tpXTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucykgdGhpcy5vcHRpb25zID0ge307XG4gIH1cbn1cblxuXG4vLyAqKioqKioqKioqKioqKioqKioqKiogRklFTEQgR1JPVVBTICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkR3JvdXBJbnRlcmZhY2Uge1xuICBpZD86IHN0cmluZyB8IG51bWJlcjtcbiAgaGVhZGVyPzogc3RyaW5nO1xuICBib3JkZXI/OiBib29sZWFuO1xuICBwb3NpdGlvbj86IHN0cmluZztcbiAgZGVidWc/OiBib29sZWFuO1xuICBsYXlvdXQ/OiAncm93JyB8ICdjb2x1bW4nO1xuICBtZXRhZGF0YT86IG9iamVjdDsgICAvLyBBbnkgbWV0YWRhdGEgZGVzaXJlZC5cbiAgZmllbGRzPzogRmllbGRJbnRlcmZhY2VbXTtcbiAgZmllbGRNYXA/OiBvYmplY3Q7XG59XG5cblxuZXhwb3J0IGNsYXNzIEZpZWxkR3JvdXBDb25maWcge1xuICBpZD86IHN0cmluZyB8IG51bWJlcjtcbiAgaGVhZGVyPyA9ICcnO1xuICBib3JkZXI/ID0gZmFsc2U7XG4gIHBvc2l0aW9uPyA9ICdsZWZ0JztcbiAgZGVidWc/ID0gZmFsc2U7XG4gIGxheW91dD86ICdyb3cnIHwgJ2NvbHVtbicgPSAnY29sdW1uJztcbiAgbWV0YWRhdGE/OiBvYmplY3QgPSB7fTsgICAvLyBBbnkgbWV0YWRhdGEgZGVzaXJlZC5cbiAgZmllbGRzPzogRmllbGRJbnRlcmZhY2VbXSA9IFtdO1xuICBmaWVsZE1hcD86IG9iamVjdDtcblxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtcz86IEZpZWxkR3JvdXBJbnRlcmZhY2UpIHtcbiAgICBpZiAocGFyYW1zKSBmb3IgKGNvbnN0IGkgaW4gcGFyYW1zKSB0aGlzW2ldID0gcGFyYW1zW2ldO1xuICB9XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBTZWN0aW9uSW50ZXJmYWNlIHtcbiAgaWQ6IHN0cmluZztcbiAgYWN0aXZlPzogYm9vbGVhbjtcbiAgbmFtZT86IHN0cmluZztcbiAgcGF0aD86IHN0cmluZztcbiAgaW5wdXRzPzogb2JqZWN0O1xuICBjb21wb25lbnQ6IENvbXBvbmVudFR5cGU8YW55PjtcbiAgbWV0YWRhdGE/OiBvYmplY3Q7XG4gIHJlcXVpcmVSZWZyZXNoPzogYm9vbGVhbjsgICAgICAgIC8vIHJlcXVpcmUgYW4gYXBpIGNhbGwgdG8gcmVmcmVzaCB0aGUgZW50aXR5SWQgb24gZXZlcnkgbG9hZFxufVxuXG5cbmV4cG9ydCBjbGFzcyBTZWN0aW9uQ29uZmlnIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgcGF0aD8gPSAnJztcbiAgbWV0YWRhdGE/OiBvYmplY3Q7XG4gIGlucHV0cyA9IHt9O1xuICBjb21wb25lbnQ6IENvbXBvbmVudFR5cGU8YW55PjtcbiAgdmlzaWJsZSA9IHRydWU7XG4gIHJlcXVpcmVfcmVmcmVzaD8gPSBmYWxzZTtcblxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogU2VjdGlvbkludGVyZmFjZSkge1xuICAgIGlmIChwYXJhbXMpIGZvciAoY29uc3QgaSBpbiBwYXJhbXMpIHRoaXNbaV0gPSBwYXJhbXNbaV07XG4gICAgaWYgKCF0aGlzLm5hbWUpIHRoaXMubmFtZSA9IHRoaXMuaWQucmVwbGFjZSgvXy9nLCAnICcpLnJlcGxhY2UoLyg/Ol58XFxzKVxcUy9nLCBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGEudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIGlmICghdGhpcy5wYXRoKSB0aGlzLnBhdGggPSB0aGlzLmlkLnJlcGxhY2UoL18vZywgJy0nKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5tZXRhZGF0YSkgdGhpcy5tZXRhZGF0YSA9IHt9O1xuICB9XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBUYWJTZWN0aW9uQmFySW50ZXJmYWNlIHtcbiAgbmFtZTogc3RyaW5nO1xuICBwYXJhbXM6IEVudGl0eVBhcmFtcztcbiAgYWNjZXNzPzogRW50aXR5QWNjZXNzSW50ZXJmYWNlO1xuICBmaWVsZD86IERpY3Rpb25hcnk8YW55PjtcbiAgYWN0aW9uPzogRGljdGlvbmFyeTxhbnk+O1xuICByZXBvPzogUG9wRW50aXR5UmVwb1NlcnZpY2U7XG4gIGVudGl0eT86IEVudGl0eTtcbiAgcHJlZmVyZW5jZT86IEVudGl0eVByZWZlcmVuY2U7XG4gIHNlY3Rpb25zPzogQXJyYXk8U2VjdGlvbkNvbmZpZz47XG4gIG1ldGFkYXRhPzogYW55O1xufVxuXG5cbmV4cG9ydCBjbGFzcyBUYWJTZWN0aW9uQmFyQ29uZmlnIHtcbiAgYWNjZXNzOiBFbnRpdHlBY2Nlc3NJbnRlcmZhY2UgPSB7XG4gICAgY2FuX2NyZWF0ZTogZmFsc2UsXG4gICAgY2FuX3JlYWQ6IGZhbHNlLFxuICAgIGNhbl91cGRhdGU6IGZhbHNlLFxuICAgIGNhbl9kZWxldGU6IGZhbHNlLFxuICAgIGNhbl9kZXN0cm95OiBmYWxzZSxcbiAgfTtcbiAgcGFyYW1zOiBFbnRpdHlQYXJhbXM7XG4gIHJlcG86IFBvcEVudGl0eVJlcG9TZXJ2aWNlO1xuICBlbnRpdHk6IEVudGl0eTtcbiAgZmllbGQ/OiBEaWN0aW9uYXJ5PGFueT47XG4gIGFjdGlvbj86IERpY3Rpb25hcnk8YW55PjtcbiAgcHJlZmVyZW5jZTogRW50aXR5UHJlZmVyZW5jZTtcbiAgbWV0YWRhdGE/OiBhbnk7XG4gIG5hbWUgPSAnJztcbiAgc2VjdGlvbnM6IEFycmF5PFNlY3Rpb25Db25maWc+ID0gW107XG5cblxuICBjb25zdHJ1Y3RvcihwYXJhbXM/OiBUYWJTZWN0aW9uQmFySW50ZXJmYWNlKSB7XG4gICAgaWYgKHBhcmFtcykgZm9yIChjb25zdCBpIGluIHBhcmFtcykgdGhpc1tpXSA9IHBhcmFtc1tpXTtcbiAgICBpZiAoIXRoaXMubWV0YWRhdGEpIHRoaXMubWV0YWRhdGEgPSB7fTtcbiAgfVxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRQYXJhbUludGVyZmFjZSB7XG4gIGNvbHVtbjogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7ICAgLy8gdGhlIGJhc2UgZW50aXR5SWQgZGVmaW5pdGlvbnNcbiAgbGFiZWw6IHN0cmluZztcbiAgdmFsdWU6IG51bWJlciB8IHN0cmluZyB8IGJvb2xlYW47XG4gIGRlZmF1bHRWYWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgYm9vbGVhbjtcbiAgZGVmYXVsdF92YWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgYm9vbGVhbjtcbiAgbWV0YWRhdGE6IERpY3Rpb25hcnk8YW55PjtcbiAgcGFyYW1zOiBhbnk7XG4gIG9wdGlvbnM/OiBGaWVsZEl0ZW1PcHRpb25zO1xuICBoZWxwVGV4dD86IHN0cmluZztcbiAgcGF0Y2g/OiBGaWVsZEl0ZW1QYXRjaEludGVyZmFjZTtcbiAgZmFjYWRlPzogYm9vbGVhbjtcbiAgcmVhZG9ubHk6IGJvb2xlYW47XG4gIHJlcXVpcmVkOiBib29sZWFuO1xuICBtaW4/OiBudW1iZXI7XG4gIG1heD86IG51bWJlcjtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Rpb25hcnk8VD4ge1xuICBba2V5OiBzdHJpbmddOiBUO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5TWFwPFQ+IHtcbiAgW2tleTogbnVtYmVyXTogVDtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNDb21wb25lbnRJbnRlcmZhY2Uge1xuICB0eXBlOiBDb21wb25lbnRUeXBlPGFueT47XG4gIGlucHV0cz86IERpY3Rpb25hcnk8bnVtYmVyIHwgc3RyaW5nIHwgYm9vbGVhbiB8IG9iamVjdCB8IGFueVtdPjtcbiAgcG9zaXRpb24/OiBudW1iZXI7XG4gIHdoZW4/OiBhbnk7XG4gIGFuY2lsbGFyeT86IGJvb2xlYW4gfCBudW1iZXI7XG4gIGhpZGRlbj86IGJvb2xlYW47XG4gIHNvcnQ/OiBudW1iZXI7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBRdWVyeVBhcmFtc0ludGVyZmFjZSB7XG4gIGFyY2hpdmVkPzogLTEgfCAwIHwgMTtcbiAgcmVsYXRlZD86IGJvb2xlYW47XG4gIGJ5cGFzc0ZpbHRlcnM/OiBib29sZWFuO1xuICBieXBhc3NQYXJhbXM/OiBib29sZWFuO1xuICBzZWxlY3Q/OiBzdHJpbmc7XG4gIHdpdGg/OiBzdHJpbmc7XG4gIGJ5cGFzc0NhY2hlPzogYm9vbGVhbjtcbiAgY2FjaGU/OiBib29sZWFuO1xuICBjYWNoZUtleT86IHN0cmluZztcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFBvcEJhc2VFdmVudEludGVyZmFjZSB7XG4gIHR5cGU6IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICgqcmVxdWlyZWQpICB0aGlzIHNob3VsZCBiZSBhIGdlbmVyaWMgbmFtZSBvZiB0aGUgc291cmNlIGNvbXBvbmVudCAgLi5pZSBmaWVsZCwgdGFibGUsIHRhYiwgYnV0dG9uXG4gIHNvdXJjZTogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBuYW1lIG9mIHRoZSBDb21wb25lbnQgdGhhdCB0aGUgZXZlbnQgY2FtZSBmcm9tXG4gIG5hbWU6IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICgqcmVxdWlyZWQpICB0aGlzIHNob3VsZCBiZSBzcGVjaWZpYyB0byB0aGUgZXZlbnQgaWUgLi4uIGJsdXIsIHBhdGNoLCBmb2N1cywgb25WYWx1ZUNoYW5nZVxuXG4gIGNoYW5uZWw/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIChvcHRpb25hbCkgICBUaGlzIHNldHMgYSBmbGFnIHRoYXQgdGhpcyBldmVudCBoYXMgYWxyZWFkeSBiZSBzZW50IGFjcm9zcyB0aGUgY2hhbm5lbCwgYW5kIHNob3VsZCBOT1QgYmUgc2VudCBhY3Jvc3MgdGhlIGNoYW5uZWwgYWdhaW5cbiAgc2Vzc2lvbj86IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9wdGlvbmFsKSAgIFRoaXMgc2V0cyBhIGZsYWcgdGhhdCB0aGlzIGV2ZW50IGNyZWF0ZWQgYSBvblNlc3Npb24gZXZlbnRcblxuICBhY2Nlc3M/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAob3B0aW9uYWwpICAgVGhpcyBzaG91bGQgYmUgYSBjcnVkIGFjY2Vzc1xuICBjb25maWc/OiBhbnk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAob3B0aW9uYWwpICAgVGhpcyBzaG91bGQgYmUgdGhlIHNvdXJjZSBjb21wb25lbnQncyBjb25maWd1cmF0aW9uXG4gIGNvcmU/OiBDb3JlQ29uZmlnOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIChvcHRpb25hbCkgICBUaGlzIHNob3VsZCBiZSBhbiBjb3JlXG5cbiAgZGF0YT86IGFueTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9wdGlvbmFsKSAgIFVzZWQgZm9yIHRyYWNraW5nIGEgY2hhbmdlZCB2YWx1ZVxuICBkYXRhX2tleT86IG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAgICAvLyAob3B0aW9uYWwpICAgZGF0YSBpbmRleFxuICBpZD86IHN0cmluZyB8IG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAvLyAob3B0aW9uYWwpICAgTWlzYywgdXNlZCB0byB0cmFjayBiZXR3ZWVuIGV2ZW50cyBvZiBtb2R1bGVzIHRoYXQgYXJlIHNpbWlsYXJcbiAgaWRzPzogYW55W107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9wdGlvbmFsKSAgIE1pc2MsIHVzZWQgdG8gdHJhY2sgYmV0d2VlbiBldmVudHMgb2YgbW9kdWxlcyB0aGF0IGFyZSBzaW1pbGFyXG4gIGVudGl0eT86IEVudGl0eTtcbiAgZm9ybT86IEZvcm1Hcm91cDsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9wdGlvbmFsKSAgIEZvcm0gR3JvdXAgb2YgZmllbGRJdGVtc1xuICBncm91cD86IEZpZWxkSXRlbUdyb3VwQ29uZmlnOyAgICAgICAgICAgICAvLyAob3B0aW9uYWwpICAgVGhlIEZpZWxkIEdyb3VwIENvbmZpZyB0aGF0IHRoaXMgZXZlbnQgc291cmNlIGJlbG9uZ3MgdG8gLi4gaWUgd2lsbCBnaXZlIHlvdSBwZXJtaXNzb25zIHRvIHRoZSBjb25maWcgb2Ygb3RoZXIgZmllbGRJdGVtcyBpbiB0aGUgZ3JvdXBcbiAgZmllbGQ/OiBGaWVsZEludGVyZmFjZTsgICAgICAgICAgICAgICAgICAgLy8gKG9wdGlvbmFsKSAgIENvcmUgRmllbGQgSW50ZXJmYWNlXG4gIGZpZWxkcz86IERpY3Rpb25hcnk8RmllbGRJbnRlcmZhY2U+OyAgICAgICAgICAgICAgICAgICAvLyAob3B0aW9uYWwpICAgQ29yZSBGaWVsZCBJbnRlcmZhY2VcbiAgY29sdW1uPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9wdGlvbmFsKSAgIFRoZSBmaWVsZCBpdGVtIGVudGl0eUlkXG4gIGZpZWxkZ3JvdXA/OiBGaWVsZEdyb3VwQ29uZmlnOyAgICAgICAgICAgIC8vIChvcHRpb25hbCkgICBUaGUgRmllbGQgR3JvdXAgQ29uZmlnIHRoYXQgdGhpcyBldmVudCBzb3VyY2UgYmVsb25ncyB0byAuLiBpZSB3aWxsIGdpdmUgeW91IHBlcm1pc3NvbnMgdG8gdGhlIGNvbmZpZyBvZiBvdGhlciBmaWVsZEl0ZW1zIGluIHRoZSBncm91cFxuICBpbnRlcm5hbF9uYW1lPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAvLyAob3B0aW9uYWwpXG4gIG1lc3NhZ2U/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChvcHRpb25hbCkgICBIZWxwZnVsIGxhbmd1YWdlXG4gIG1ldGFkYXRhPzogYW55OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChvcHRpb25hbCkgICBBZGRpdGlvbmFsIGluZm9cbiAgbWV0aG9kPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9wdGlvbmFsKSAgIFRoaXMgc2hvdWxkIGJlIGEgZW50aXR5SWQgbmFtZSBjcmVhdGUsIHJlYWQsIHN0b3JlLCBkZWxldGVcbiAgbW9kZWw/OiBhbnk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9wdGlvbmFsKSAgIFRoaXMgc2hvdWxkIGJlIHRoZSBmaWVsZCBjb25maWd1cmF0aW9uIG1vZGVsIHRoYXQgYSBmaWVsZCBjb25maWcgaXMgYnVpbHQgb2ZmXG4gIG9wZW4/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICBvcHRpb24/OiBhbnk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cblxuICB0YWI/OiBUYWJDb25maWc7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAob3B0aW9uYWwpICAgVGhlIHRhYiBjb25maWcgdGhhdCB0aGlzIGV2ZW50IG9jY3VycmVkIGZyb20sIGllIC4uLiB3aWxsIGNvbnRhaW4gYSBtYXBwaW5nIG9mIHRoZSB2aWV3LCBpZSAuLi4gYWxsb3cgeW91IHRvIHJlbG9hZCBhbGwvcG9ydGlvbiBvZiB0aGUgdmlld1xuICB0YXJnZXQ/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG5hbWUgb2YgdGhlIENvbXBvbmVudCB0aGF0IHRoZSBldmVudCBzaG91bGQgZ28gdG9cbiAgY29tcG9uZW50PzogVGFiQ29tcG9uZW50SW50ZXJmYWNlOyAgICAgICAgLy8gKG9wdGlvbmFsKSAgIFRoZSB0YWIgY29tcG9uZW50IGNvbmZpZyB0aGF0IHRoaXMgZXZlbnQgb2NjdXJyZWQgZnJvbSwgaWUgLi4uIHdpbGwgY29udGFpbiBhIG1hcHBpbmcgb2YgdGhlIHNwZWNpZmljIHRhYiBzZWN0aW9uIG9mIHRoZSB2aWV3XG4gIG9wdGlvbnM/OiBhbnlbXTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChvcHRpb25hbCkgICBVc2VkIHRvIHRyYWNrIG9wdGlvbnMgb2Ygc2VsZWN0cyBmaWVsZEl0ZW1zLCBzaWRlYnlzaWRlLCByYWRpb3NcbiAgcG9zaXRpb24/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9wdGlvbmFsKSAgIFRoaXMgc2hvdWxkIHJlZmVyZW5jZSBhIHRlbXBsYXRlIHBvc2l0aW9uIGllIC4uLiBsZWZ0LCBjZW50ZXIsIHJpZ2h0XG4gIHN1Y2Nlc3M/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIChvcHRpb25hbCkgICBTcGVjaWZ5IGlmIGEgZXZlbnQgd2FzIHN1Y2Nlc3NmdWwgaWUuLiBwYXRjaFxuICByZWZyZXNoPzogYm9vbGVhbjsgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICByZXNwb25zZT86IGFueTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAob3B0aW9uYWwpICAgVGhlIHNlcnZlciByZXNwb25zZSBvbiBhIHBhdGNoXG4gIHZhbHVlPzogYm9vbGVhbjsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChvcHRpb25hbCkgICBTcGVjaWZ5IGEgY2VydGFpbiB2YWx1ZSBpZS4uIHBhdGNoXG4gIGNkcj86IENoYW5nZURldGVjdG9yUmVmOyAgICAgICAgICAgICAgICAgIC8vIChvcHRpb25hbCkgICBSZWxvYWQgVGFiIFBvc2l0aW9uXG5cbn1cblxuXG4vKipcbiAqIE1ldGhvZCB0byB0cmF2ZWwgdXAgZG9tIG9mIGVsZW1lbnQgdW50aWwgYSBoZWlnaHQgaXMgZm91bmRcbiAqIEBwYXJhbSBlbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBQYXJlbnRIZWlnaHRTZXR0ZXIoZWw6IEVsZW1lbnRSZWYsIGNsYXNzTmFtZTogc3RyaW5nID0gbnVsbCkge1xuICBsZXQgaGVpZ2h0ID0gMDtcbiAgbGV0IG1heEhlaWdodCA9IDA7XG4gIGxldCBhdHRlbXB0cyA9IDIwO1xuICBpZiAoZWwgJiYgZWwubmF0aXZlRWxlbWVudCAmJiBlbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICBsZXQgcGFyZW50ID0gZWwubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIHdoaWxlICghaGVpZ2h0ICYmIGF0dGVtcHRzKSB7XG4gICAgICBpZiAocGFyZW50LmNsaWVudEhlaWdodCkge1xuICAgICAgICBpZiAocGFyZW50LmNsaWVudEhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgICAgIG1heEhlaWdodCA9IHBhcmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgIGlmIChwYXJlbnQuY2xhc3NMaXN0ICYmIHBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgaGVpZ2h0ID0gcGFyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGVpZ2h0ID0gcGFyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFoZWlnaHQgJiYgcGFyZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG5cbiAgICAgIH1cbiAgICAgIGF0dGVtcHRzLS07XG4gICAgfVxuICB9XG4gIGlmICghaGVpZ2h0ICYmIG1heEhlaWdodCkgaGVpZ2h0ID0gbWF4SGVpZ2h0O1xuXG4gIHJldHVybiBoZWlnaHQ7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25JdGVtIHtcbiAgaWQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbDtcbiAgbmFtZTogc3RyaW5nO1xuICBsYWJlbD86IHN0cmluZztcbiAgc29ydD86IG51bWJlcjtcbiAgYWN0aXZlPzogbnVtYmVyIHwgYm9vbGVhbjtcbiAgY29tcGFjdD86IGJvb2xlYW47XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25QYXJhbXNJbnRlcmZhY2Uge1xuICBrZXk/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZGVmYXVsdCBrZXkgaXMgJ2VudGl0eUlkJyBpZS4uIGl0IGlzIGdvaW5nIHRvIGxvb2sgZm9yIHRoZSBlbnRpdHlJZCBvZiB0aGUgcGFzc2luZyBpbiBvcHRpb25zIGFuZCBjb252ZXJ0IGl0IHRvIHNldEtleSB3aGljaCBzaG91bGQgYmUgJ3ZhbHVlJ1xuICBzZXRLZXk/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZGVmYXVsdCBrZXkgaXMgJ3ZhbHVlJywgbm90IHJlYWxseSBhbiByZWFzb24gdG8gc3ViamVjdCAuLi4geWV0XG4gIG5hbWVLZXk/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZGVmYXVsdCBrZXkgaXMgJ25hbWUnLCB0aGlzIGlzIHRoZSBjb2x1bW4gdGhhdCBzaG91bGQgYmUgdXNlZCB0byBwcmVzZW50IHRoZSBcIm5hbWVcIiBvZiB0aGUgaXRlbVxuICB0YWdzPzogc3RyaW5nW107ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW50IHJlbWVtYmVyXG4gIHNvcnQ/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHNldCB0byB0cnVlLCB3aWxsIHNvcnQgYmFzZWQgb2ZmIG9mIGtleVxuICBncm91cD86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgYSBkZWZhdWx0IGdyb3VwIG9uIHRoZSBvcHRpb25zXG4gIGFjdGl2ZUtleT86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBrZXkgc2hvdWxkIGJlIHVzZWQgZm9yIGFjdGl2ZVxuICBncm91cEtleT86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBrZXkgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBncm91cGluZ1xuICBncm91cEZrS2V5Pzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBrZXkgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBncm91cEZrXG4gIHBhcmVudD86IHsgZmllbGQ6IHN0cmluZywgdmFsdWU6IG51bWJlciB9Oy8vIElmIFNldCwgYWxsIG9wdGlvbnMgdGhhdCBkbyBub3QgaGF2ZSBmaWVsZDp2YWx1ZSBtYXRjaCB3aWxsIGJlIHJlbW92ZWRcbiAgbGV2ZWw/OiBudW1iZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGFuIGluZGVudGF0aW9uIGxldmVsXG4gIGVtcHR5PzogT3B0aW9uSXRlbTsgICAgICAgICAgICAgICAgICAgICAgIC8vIFBhc3MgaW4gYW4gT3B0aW9uIEl0ZW0gdGhhdCB5b3Ugd2FudCB0byByZXByZXNlbnQgYW4gdW5hc3NpZ25lZCB2YWx1ZVxuICBwcmVzZXJ2ZUtleXM/OiBBcnJheTxzdHJpbmc+OyAgICAgICAgICAgICAvLyBwYXNzIGluIGtleXMgdGhhdCBzaG91bGQgcmVtYWluIGluIHRoZSBsaXN0XG4gIHByZXZlbnQ/OiBBcnJheTxzdHJpbmcgfCBudW1iZXI+OyAgICAgICAgIC8vIHBhc3MgaW4gaWRzIG9mIGFuIE9wdGlvbiBJdGVtcyB0aGF0IHlvdSBkb24ndCB3YW50IGluIGxpc3RcbiAgZW5zdXJlPzogT3B0aW9uSXRlbTsgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzcyBpbiBhbiBPcHRpb24gaXRlbSB0aGF0IGhhcyB0byBiZSBpbiB0aGUgbGlzdCAuLi4gaWUgbWF5YmUgdGhlIGFzc2lnbmVkIHZhbHVlIGlzIGFyY2hpdmVkIGFuZCBkb2VzIG5vdCBjb21lIHRocm91Z2hcbiAgY29udmVydGVkPzogYm9vbGVhbjtcbiAgaGFzRW1wdHk/OiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5QWN0aW9uSW50ZXJmYWNlIHtcbiAgbmFtZTogc3RyaW5nO1xuICBidWJibGVBbGw/OiBib29sZWFuO1xuICBjb21wb25lbnQ/OiBEeW5hbWljQ29tcG9uZW50SW50ZXJmYWNlO1xuICBibG9ja0VudGl0eT86IGJvb2xlYW47XG4gIGZhY2FkZT86IGJvb2xlYW47XG4gIGZhY2FkZUR1cmF0aW9uPzogbnVtYmVyO1xuICBmaWVsZHM/OiBEaWN0aW9uYXJ5PGFueT47XG4gIGhlYWRlcj86IHN0cmluZztcbiAgd2lkdGg/OiBzdHJpbmc7XG4gIHN1Ym1pdFRleHQ/OiBzdHJpbmc7XG4gIGNhbmNlbFRleHQ/OiBzdHJpbmc7XG4gIGxhYmVsPzogc3RyaW5nO1xuICBwb3N0VXJsPzogc3RyaW5nO1xuICBnb1RvVXJsPzogc3RyaW5nO1xuICBodHRwPzogJ1BPU1QnIHwgJ1BBVENIJyB8ICdERUxFVEUnIHwgJ0dFVCc7XG4gIHJlc3BvbnNlVHlwZT86ICdmb3JtJyB8ICdib29sZWFuJyB8ICdzdG9yZSc7XG4gIHN0b3JlPzogRGljdGlvbmFyeTxhbnk+O1xuICBhY3RpdmU/OiBib29sZWFuIHwgbnVtYmVyO1xuICBjYWxsYmFjaz86IEV2ZW50Q2FsbGJhY2s7XG4gIG9uRXZlbnQ/OiBFdmVudFByb21pc2VDYWxsYmFjaztcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eUFjdGlvbkRhdGFJbnRlcmZhY2Uge1xuICBjb3JlOiBDb3JlQ29uZmlnO1xuICBhY3Rpb24/OiBFbnRpdHlBY3Rpb25JbnRlcmZhY2U7XG4gIGFjdGlvbk5hbWU/OiBzdHJpbmc7XG4gIGV4dGVuc2lvbj86IEVudGl0eUV4dGVuZEludGVyZmFjZTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eVN1Y2Nlc3NEYXRhSW50ZXJmYWNlIHtcbiAgaGVhZGVyOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgc3VibWl0VGV4dD86IHN0cmluZztcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VSb3V0ZXNJbnRlcmZhY2Uge1xuICBnZXQ/OiB7XG4gICAgZW50aXR5PzogU2VydmljZVJvdXRlSW50ZXJmYWNlO1xuICAgIGVudGl0aWVzPzogU2VydmljZVJvdXRlSW50ZXJmYWNlO1xuICAgIGNvbmZpZz86IFNlcnZpY2VSb3V0ZUludGVyZmFjZTtcbiAgICBwcmVmZXJlbmNlPzogU2VydmljZVJvdXRlSW50ZXJmYWNlO1xuICB9O1xuICBwYXRjaD86IHtcbiAgICBlbnRpdHk6IFNlcnZpY2VSb3V0ZUludGVyZmFjZTtcbiAgICBlbnRpdGllcz86IFNlcnZpY2VSb3V0ZUludGVyZmFjZTtcbiAgfTtcbiAgYXJjaGl2ZT86IHtcbiAgICBlbnRpdHk/OiBTZXJ2aWNlUm91dGVJbnRlcmZhY2U7XG4gIH07XG4gIHJlc3RvcmU/OiB7XG4gICAgZW50aXR5PzogU2VydmljZVJvdXRlSW50ZXJmYWNlO1xuICB9O1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmljZVJvdXRlSW50ZXJmYWNlIHtcbiAgcGF0aDogc3RyaW5nO1xuICBwYXJhbXM/OiBTZXJ2aWNlUm91dGVQYXJhbUludGVyZmFjZTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VSb3V0ZVBhcmFtSW50ZXJmYWNlIHtcbiAgd2l0aD86IHN0cmluZztcbiAgc2VsZWN0Pzogc3RyaW5nO1xuXG4gIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXIgfCBudW1iZXJbXTtcbn1cblxuXG5cblxuIl19