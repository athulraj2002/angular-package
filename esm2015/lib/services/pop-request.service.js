import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Inject, Injectable, isDevMode } from '@angular/core';
import { IsArray, IsString } from '../pop-common-utility';
import { PopBusiness } from '../pop-common.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PopRequestService {
    constructor(http, env) {
        this.http = http;
        this.env = env;
        this.offsetLimit = 2000;
        // if( +this.env.offsetLimit ) this.offsetLimit = this.env.offsetLimit;
        if (!this.baseUrl) {
            const envUrl = isDevMode() && this.env && this.env.apiBaseUrl ? this.env.apiBaseUrl : null;
            this.baseUrl = (envUrl ? envUrl : `${window.location.protocol}//api.${window.location.host}`);
        }
    }
    getHeaders(version, businessId = 0) {
        return {
            'X-Popcx-Business': +businessId ? String(businessId) : PopBusiness ? String(PopBusiness.id) : String(0),
            'Content-Type': 'application/json',
            'Api-Version': (typeof version !== 'undefined' ? version : 1).toString()
        };
    }
    getBaseUrl() {
        return this.baseUrl.slice();
    }
    setBaseUrl(baseUrl) {
        if (IsString(baseUrl, true)) {
            this.baseUrl = baseUrl;
        }
    }
    getOffsetLimit() {
        return this.offsetLimit;
    }
    doGet(url, params = {}, version = 1, ignore401 = false, businessId = 0) {
        const options = {
            headers: new HttpHeaders(this.getHeaders(version, businessId)),
            params: this._setParams(params)
        };
        if (ignore401)
            options.headers.set('SkipResponse401Interceptor', '1');
        if (url[0] !== '/')
            url = `/${url}`;
        return this.http.get(`${this.getBaseUrl()}${url}`, options);
    }
    doDelete(url, body = null, version = 1, ignore401 = null, businessId = 0) {
        const options = {
            headers: new HttpHeaders(this.getHeaders(version, businessId)),
            body: body,
        };
        if (ignore401)
            options.headers.set('SkipResponse401Interceptor', '1');
        if (url[0] !== '/')
            url = `/${url}`;
        // if( data ) options.params = new HttpParams(data);
        return this.http.delete(`${this.getBaseUrl()}${url}`, options);
    }
    doPatch(url, data, version = 1, ignore401 = false, businessId = 0) {
        const headers = new HttpHeaders(this.getHeaders(version, businessId));
        if (ignore401)
            headers.set('SkipResponse401Interceptor', '1');
        if (url[0] !== '/')
            url = `/${url}`;
        return this.http.patch(this.getBaseUrl() + url, JSON.stringify(data), { headers: headers });
    }
    doPost(url, data, version = 1, ignore401 = false, businessId = 0) {
        const headers = new HttpHeaders(this.getHeaders(version, businessId));
        if (ignore401)
            headers.set('SkipResponse401Interceptor', '1');
        if (url[0] !== '/')
            url = `/${url}`;
        return this.http.post(`${this.getBaseUrl()}${url}`, JSON.stringify(data), { headers: headers });
    }
    transform(value, transformation) {
        if (IsArray(transformation, true)) {
            transformation.map((transKey) => {
                // value = this.commonRepo.transform(value, transKey);
            });
        }
        else if (IsString(transformation, true)) {
            // value = this.commonRepo.transform(value, transformation);
        }
        return value;
    }
    _setParams(body) {
        let params = new HttpParams();
        for (const key of Object.keys(body)) {
            if (body[key]) {
                if (body[key] instanceof Array) {
                    body[key].forEach((item) => {
                        params = params.append(`${key.toString()}[]`, item);
                    });
                }
                else {
                    params = params.append(key.toString(), body[key]);
                }
            }
        }
        return params;
    }
}
PopRequestService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PopRequestService_Factory() { return new PopRequestService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject("env")); }, token: PopRequestService, providedIn: "root" });
PopRequestService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PopRequestService.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: ['env',] }] }
];
//# sourceMappingURL=data:application/json;base64,