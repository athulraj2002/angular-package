(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@angular/common'), require('@angular/common/http'), require('@angular/material/menu'), require('@angular/material/icon'), require('@angular/material/button'), require('rxjs/operators'), require('rxjs'), require('@angular/forms'), require('@angular/material/tooltip'), require('@angular/material/form-field'), require('@angular/material/input'), require('@angular/material/snack-bar'), require('@angular/material/core'), require('@angular/material/list'), require('@angular/material/button-toggle'), require('@angular/material/checkbox'), require('@angular/material/card'), require('@angular/material/datepicker'), require('@angular/material/expansion'), require('@angular/material/grid-list'), require('@angular/material/paginator'), require('@angular/material/progress-bar'), require('@angular/material/progress-spinner'), require('@angular/material/radio'), require('@angular/material/select'), require('@angular/material/sidenav'), require('@angular/material/slide-toggle'), require('@angular/material/sort'), require('@angular/material/dialog'), require('@angular/material/table'), require('@angular/material/tabs'), require('@angular/material/toolbar'), require('@angular/material/autocomplete'), require('@angular/material/slider'), require('@angular/cdk/overlay'), require('ngx-mask'), require('@angular/animations'), require('@angular/cdk/collections'), require('@angular/cdk/scrolling'), require('@angular/material/divider'), require('spacetime/builds/spacetime.min'), require('@angular/cdk/portal'), require('@angular/cdk/drag-drop'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('pop-common', ['exports', '@angular/core', '@angular/router', '@angular/common', '@angular/common/http', '@angular/material/menu', '@angular/material/icon', '@angular/material/button', 'rxjs/operators', 'rxjs', '@angular/forms', '@angular/material/tooltip', '@angular/material/form-field', '@angular/material/input', '@angular/material/snack-bar', '@angular/material/core', '@angular/material/list', '@angular/material/button-toggle', '@angular/material/checkbox', '@angular/material/card', '@angular/material/datepicker', '@angular/material/expansion', '@angular/material/grid-list', '@angular/material/paginator', '@angular/material/progress-bar', '@angular/material/progress-spinner', '@angular/material/radio', '@angular/material/select', '@angular/material/sidenav', '@angular/material/slide-toggle', '@angular/material/sort', '@angular/material/dialog', '@angular/material/table', '@angular/material/tabs', '@angular/material/toolbar', '@angular/material/autocomplete', '@angular/material/slider', '@angular/cdk/overlay', 'ngx-mask', '@angular/animations', '@angular/cdk/collections', '@angular/cdk/scrolling', '@angular/material/divider', 'spacetime/builds/spacetime.min', '@angular/cdk/portal', '@angular/cdk/drag-drop', '@angular/platform-browser'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['pop-common'] = {}, global.ng.core, global.ng.router, global.ng.common, global.ng.common.http, global.ng.material.menu, global.ng.material.icon, global.ng.material.button, global.rxjs.operators, global.rxjs, global.ng.forms, global.ng.material.tooltip, global.ng.material.formField, global.ng.material.input, global.ng.material.snackBar, global.ng.material.core, global.ng.material.list, global.ng.material.buttonToggle, global.ng.material.checkbox, global.ng.material.card, global.ng.material.datepicker, global.ng.material.expansion, global.ng.material.gridList, global.ng.material.paginator, global.ng.material.progressBar, global.ng.material.progressSpinner, global.ng.material.radio, global.ng.material.select, global.ng.material.sidenav, global.ng.material.slideToggle, global.ng.material.sort, global.ng.material.dialog, global.ng.material.table, global.ng.material.tabs, global.ng.material.toolbar, global.ng.material.autocomplete, global.ng.material.slider, global.ng.cdk.overlay, global['ngx-mask'], global.ng.animations, global.ng.cdk.collections, global.ng.cdk.scrolling, global.ng.material.divider, global.spacetime, global.ng.cdk.portal, global.ng.cdk.dragDrop, global.ng.platformBrowser));
}(this, (function (exports, i0, i1, common, i1$1, menu, icon, button, operators, rxjs, forms, tooltip, formField, input, i2, core, list, buttonToggle, checkbox, card, datepicker, expansion, gridList, paginator, progressBar, progressSpinner, radio, select, sidenav, slideToggle, sort, i1$2, table, tabs, toolbar, autocomplete, slider, overlay, ngxMask, animations, collections, scrolling, divider, spacetime, portal, dragDrop, platformBrowser) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var spacetime__namespace = /*#__PURE__*/_interopNamespace(spacetime);

    var PhonePipe = /** @class */ (function () {
        function PhonePipe() {
        }
        PhonePipe.prototype.transform = function (val, args) {
            if (args === void 0) { args = null; }
            if (!args)
                args = '(XXX) XXX-XXXX';
            if (typeof val === 'string' && String(val).length) {
                var viewVal = String(val).trim();
                viewVal = viewVal.replace(/^\+/, '');
                viewVal = viewVal.replace(/[^0-9]/g, '');
                viewVal = viewVal.slice(0, (args.match(/X/g) || []).length);
                var number_1 = args;
                var digits = viewVal.split('');
                var index_1 = 0;
                digits.forEach(function (digit) {
                    index_1 = number_1.indexOf('X');
                    if (index_1 >= 0) {
                        number_1 = number_1.substr(0, index_1) + digit + number_1.substr(index_1 + 1);
                    }
                });
                var limit = args.length;
                if (index_1 != -1)
                    limit = index_1 + 1;
                return number_1.substr(0, limit);
            }
            return val;
        };
        return PhonePipe;
    }());
    PhonePipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'phone'
                },] }
    ];

    var ToYesNoPipe = /** @class */ (function () {
        function ToYesNoPipe() {
        }
        ToYesNoPipe.prototype.transform = function (value) {
            return value ? 'Yes' : 'No';
        };
        return ToYesNoPipe;
    }());
    ToYesNoPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'toYesNo', pure: true },] }
    ];

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    exports.ServiceInjector = void 0;
    function SetServiceInjector(injector) {
        if (!exports.ServiceInjector)
            exports.ServiceInjector = injector;
    }
    exports.PopEntity = void 0;
    function SetPopEntity(entity) {
        if (!exports.PopEntity)
            exports.PopEntity = entity;
    }
    exports.PopHistory = void 0;
    function SetPopHistory(history) {
        if (!exports.PopHistory)
            exports.PopHistory = history;
    }
    exports.PopPipe = void 0;
    function SetPopPipe(pipe) {
        if (!exports.PopPipe)
            exports.PopPipe = pipe;
    }
    exports.PopDate = void 0;
    function SetPopDate(date) {
        if (!exports.PopDate)
            exports.PopDate = date;
    }
    exports.PopLog = void 0;
    function SetPopLogger(log) {
        if (!exports.PopLog)
            exports.PopLog = log;
    }
    exports.PopEnv = void 0;
    function SetPopEnv(env) {
        if (!exports.PopEnv)
            exports.PopEnv = env;
    }
    exports.PopComponentResolver = void 0;
    function SetPopComponentResolver(cfr) {
        if (!exports.PopComponentResolver)
            exports.PopComponentResolver = cfr;
    }
    exports.PopRequest = void 0;
    function SetPopRequest(request) {
        if (!exports.PopRequest)
            exports.PopRequest = request;
    }
    exports.PopExternalApi = void 0;
    function SetPopExternalApi(api) {
        if (!exports.PopExternalApi)
            exports.PopExternalApi = api;
    }
    exports.PopPortal = void 0;
    function SetPopPortal(portal) {
        if (!exports.PopPortal)
            exports.PopPortal = portal;
    }
    exports.PopHref = void 0;
    function SetPopHref(href) {
        if (href && typeof href === 'string') {
            exports.PopHref = href;
        }
    }
    exports.PopMessage = void 0;
    function SetPopMessage(message) {
        if (message && typeof message === 'string') {
            exports.PopMessage = message;
        }
        else {
            exports.PopMessage = undefined;
        }
    }
    exports.PopCacheRedirectUrl = void 0;
    function SetPopCacheRedirectUrl(router, url) {
        if (router === void 0) { router = null; }
        if (url === void 0) { url = null; }
        if (router instanceof i1.Router) {
            if (!url)
                url = router.url;
            exports.PopCacheRedirectUrl = url;
            router.navigateByUrl('system/cache/clear', { skipLocationChange: true }).catch(function (e) {
                console.log('e', e);
            });
        }
        else {
            exports.PopCacheRedirectUrl = undefined;
        }
    }
    exports.PopAuth = void 0;
    function SetPopAuth(auth) {
        if (auth && typeof auth === 'object' && auth !== null && Object.keys(auth).length) {
            exports.PopAuth = JSON.parse(JSON.stringify(auth));
        }
    }
    exports.PopBusiness = void 0;
    function SetPopBusiness(business) {
        if (business && typeof business === 'object' && business !== null && Object.keys(business).length) {
            exports.PopBusiness = JSON.parse(JSON.stringify(business));
        }
    }
    exports.PopApp = void 0;
    function SetPopApp(app) {
        if (app && typeof app === 'object' && app !== null && Object.keys(app).length) {
            exports.PopApp = JSON.parse(JSON.stringify(app));
        }
    }
    exports.PopUser = void 0;
    function SetPopUser(user) {
        if (user && typeof user === 'object' && user !== null && Object.keys(user).length) {
            exports.PopUser = JSON.parse(JSON.stringify(user));
        }
    }
    exports.PopFilter = {};
    function SetPopFilter(filter) {
        if (typeof filter === 'object' && filter !== null) {
            exports.PopFilter = filter;
        }
    }
    exports.PopSchemeComponent = void 0;
    function SetPopSchemeComponent(schemeComponent) {
        if (!exports.PopSchemeComponent)
            exports.PopSchemeComponent = schemeComponent;
    }
    exports.PopRouteAliasMap = void 0;
    function SetPopRouteAliasMap(aliasMap) {
        if (aliasMap && typeof aliasMap === 'object')
            exports.PopRouteAliasMap = aliasMap;
    }
    exports.PopAliasRouteMap = {};
    function SetPopAliasRouteMap(routeMap) {
        if (routeMap && typeof routeMap === 'object')
            exports.PopAliasRouteMap = routeMap;
    }
    exports.PopTemplate = void 0;
    function SetPopTemplate(srv) {
        if (!exports.PopTemplate)
            exports.PopTemplate = srv;
    }
    var FIELD_CUSTOM_SETTING = new i0.InjectionToken('Field Custom Setting', {
        providedIn: 'root',
        factory: function () { return ({}); }
    });
    var CoreConfig = /** @class */ (function () {
        function CoreConfig(params) {
            this.flag = {};
            this.resource = {};
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.metadata)
                this.metadata = {};
        }
        return CoreConfig;
    }());
    var EntityParams = /** @class */ (function () {
        function EntityParams(params) {
            this.api = ''; // the api path of this entityId http:server/app/<api>
            this.can_extend = false;
            this.path = '';
            this.param = '';
            this.refresh = false;
            this.blockAssets = false;
            if (params)
                for (var i in params)
                    this[i] = params[i];
        }
        return EntityParams;
    }());
    var EntityExtendInterface = /** @class */ (function () {
        function EntityExtendInterface() {
        }
        return EntityExtendInterface;
    }());
    var SchemeComponentParams = /** @class */ (function () {
        function SchemeComponentParams(params) {
            if (params)
                for (var i in params)
                    this[i] = params[i];
        }
        return SchemeComponentParams;
    }());
    var SchemeComponentConfig = /** @class */ (function () {
        function SchemeComponentConfig(params) {
            if (params)
                for (var i in params)
                    this[i] = params[i];
        }
        return SchemeComponentConfig;
    }());
    var ResourceConfig = /** @class */ (function () {
        function ResourceConfig(params) {
            this.defaultValue = null;
            this.api_cache = false;
            this.api_version = 1;
            this.api_path = '';
            this.api_path_vars = null;
            this.data_values = [];
            this.data_filter = null;
            this.data_when = null;
            if (params)
                for (var i in params)
                    this[i] = params[i];
        }
        return ResourceConfig;
    }());
    // ********************* Fields *************************************************
    var FieldItemInterface = /** @class */ (function () {
        function FieldItemInterface() {
        }
        return FieldItemInterface;
    }());
    var FieldItemConfig = /** @class */ (function () {
        function FieldItemConfig(config) {
            this.custom_setting = {};
            this.setting = {};
            for (var i in config)
                this[i] = config[i];
        }
        return FieldItemConfig;
    }());
    var FieldConfig = /** @class */ (function () {
        // onEvent: Subject<PopBaseEventInterface>;
        function FieldConfig(params) {
            this.canAdd = false;
            this.canRemove = false;
            this.custom_setting = {};
            this.data = {};
            this.data_keys = [];
            this.facade = false;
            this.entries = [];
            this.metadata = {};
            this.multiple = false;
            this.multiple_min = 1;
            this.multiple_max = 1;
            this.multiple_max_limit = 10;
            this.id = null;
            this.name = '';
            this.show_name = true;
            this.options = {};
            this.setting = {};
            this.sort = 99;
            this.state = 'template_edit';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.options)
                this.options = {};
        }
        return FieldConfig;
    }());
    var FieldGroupConfig = /** @class */ (function () {
        function FieldGroupConfig(params) {
            this.header = '';
            this.border = false;
            this.position = 'left';
            this.debug = false;
            this.layout = 'column';
            this.metadata = {}; // Any metadata desired.
            this.fields = [];
            if (params)
                for (var i in params)
                    this[i] = params[i];
        }
        return FieldGroupConfig;
    }());
    var SectionConfig = /** @class */ (function () {
        function SectionConfig(params) {
            this.path = '';
            this.inputs = {};
            this.visible = true;
            this.require_refresh = false;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.name)
                this.name = this.id.replace(/_/g, ' ').replace(/(?:^|\s)\S/g, function (a) {
                    return a.toUpperCase();
                });
            if (!this.path)
                this.path = this.id.replace(/_/g, '-').toLowerCase();
            if (!this.metadata)
                this.metadata = {};
        }
        return SectionConfig;
    }());
    var TabSectionBarConfig = /** @class */ (function () {
        function TabSectionBarConfig(params) {
            this.access = {
                can_create: false,
                can_read: false,
                can_update: false,
                can_delete: false,
                can_destroy: false,
            };
            this.name = '';
            this.sections = [];
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.metadata)
                this.metadata = {};
        }
        return TabSectionBarConfig;
    }());
    /**
     * Method to travel up dom of element until a height is found
     * @param el
     */
    function ParentHeightSetter(el, className) {
        if (className === void 0) { className = null; }
        var height = 0;
        var maxHeight = 0;
        var attempts = 20;
        if (el && el.nativeElement && el.nativeElement.parentElement) {
            var parent = el.nativeElement.parentElement;
            while (!height && attempts) {
                if (parent.clientHeight) {
                    if (parent.clientHeight > maxHeight) {
                        maxHeight = parent.clientHeight;
                    }
                    if (className) {
                        if (parent.classList && parent.classList.contains(className)) {
                            height = parent.clientHeight;
                        }
                    }
                    else {
                        height = parent.clientHeight;
                    }
                }
                if (!height && parent.parentElement) {
                    parent = parent.parentElement;
                }
                attempts--;
            }
        }
        if (!height && maxHeight)
            height = maxHeight;
        return height;
    }

    var ToActiveOrArchivedPipe = /** @class */ (function () {
        function ToActiveOrArchivedPipe() {
        }
        /**
         * If value is true, then that would indicate that is archived
         * @param value
         */
        ToActiveOrArchivedPipe.prototype.transform = function (value) {
            if (value === 'true' || value === '1')
                value = true;
            if (value === 'false' || value === '0')
                value = false;
            return value && value !== null ? 'Archived' : 'Active';
        };
        return ToActiveOrArchivedPipe;
    }());
    ToActiveOrArchivedPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'toActiveOrArchived', pure: true },] }
    ];

    var LabelPipe = /** @class */ (function () {
        function LabelPipe() {
            this.aliases = [];
        }
        /**
         * Provides the actual name we want displayed to the user.
         * text - The field name coming from the DB.
         * displayInfo - Either a string or object. If object then will look for property display or label. Takes aliases into account. IE: account:ID
         * set - If passed will look in the displayInfo object for this field before falling back to the display or label field.
         * returns {string}
         */
        LabelPipe.prototype.transform = function (text, displayInfo, displayField) {
            var e_1, _a;
            if (displayInfo === void 0) { displayInfo = ''; }
            if (displayField === void 0) { displayField = ''; }
            var displayString = '';
            if (displayInfo && typeof displayInfo === 'string') {
                displayString = displayInfo;
            }
            else if (displayInfo && displayField && displayInfo[displayField]) {
                displayString = displayInfo[displayField];
            }
            else if (displayInfo && displayInfo.display) {
                displayString = displayInfo.display;
            }
            else if (displayInfo && displayInfo.label) {
                displayString = displayInfo.label;
            }
            // Check for aliases.
            if (displayString) {
                if (displayString.includes('alias:')) {
                    var aliasArray = displayString.split(':');
                    aliasArray.shift();
                    var alias = this.getAlias(aliasArray.shift()).toLocaleLowerCase();
                    displayString = alias.charAt(0).toUpperCase() + alias.slice(1) + ' ';
                    var tempString = '';
                    while (tempString = aliasArray.shift())
                        displayString += ' ' + tempString;
                }
            }
            else {
                // Format the string base on the field name.
                var words = text.split('_');
                try {
                    for (var words_1 = __values(words), words_1_1 = words_1.next(); !words_1_1.done; words_1_1 = words_1.next()) {
                        var word = words_1_1.value;
                        if (word === 'id' || word === 'fk') {
                            displayString += 'ID ';
                        }
                        else {
                            displayString += word.charAt(0).toUpperCase() + word.slice(1) + ' ';
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (words_1_1 && !words_1_1.done && (_a = words_1.return)) _a.call(words_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return displayString.trim();
        };
        LabelPipe.prototype.getAlias = function (entity) {
            return (this.aliases[entity] ? this.aliases[entity] : entity);
        };
        return LabelPipe;
    }());
    LabelPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'label', pure: true },] }
    ];

    /************************************************************************************************
     *                                                                                              *
     *                                      Local Storage                                           *
     *                                                                                              *
     ************************************************************************************************/
    /**
     * Store a value in localStorage for the site
     * @param siteVarPath - This should always follow a dot notation that represents the structure of an object App.Setting.value
     * @param siteVal
     */
    function SetSiteVar(siteVarPath, siteVal) {
        if (IsString(siteVarPath, true) && siteVarPath.includes('.') && IsDefined(siteVal)) {
            // if( IsObject(siteVal) || IsArray(siteVal) ) siteVal = JSON.stringify(siteVal);
            var steps = siteVarPath.split('.');
            var basePath = steps.shift();
            if (basePath) {
                var baseStorage = JSON.parse(localStorage.getItem(basePath) || '{}');
                var key = steps.length ? steps.pop() : basePath;
                var pathStorage = steps.length ? StorageSetter(baseStorage, steps) : baseStorage;
                if (pathStorage && key) {
                    if (siteVal === null) {
                        delete pathStorage[key];
                    }
                    else {
                        pathStorage[key] = siteVal;
                    }
                    localStorage.setItem(basePath, JSON.stringify(baseStorage));
                }
            }
        }
    }
    /**
     * Get stored value in localStorage for the site
     * @param siteVarPath - This should always follow a dot notation that represents the structure of an object App.Setting.value
     * @param defaultValue
     * @constructor
     */
    function GetSiteVar(siteVarPath, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        if (IsString(siteVarPath, true) && siteVarPath.includes('.')) {
            var steps = siteVarPath.split('.');
            var basePath = steps.shift();
            if (basePath) {
                var key = steps.length ? steps.pop() : basePath;
                // console.log('basePath ', basePath, ' key', key);
                var baseStorage = JSON.parse(localStorage.getItem(basePath) || '{}');
                // console.log('baseStorage', basePath, baseStorage);
                var pathStorage = steps.length ? StorageSetter(baseStorage, steps) : baseStorage;
                // console.log('pathStorage', pathStorage);
                if (pathStorage && key) {
                    var value = typeof pathStorage[key] !== 'undefined' ? pathStorage[key] : defaultValue;
                    // console.log('GetSiteVar', siteVarPath, value, typeof value);
                    return value;
                }
                else {
                    return defaultValue;
                }
            }
        }
        return defaultValue;
    }
    function GetRouteAlias(internal_name, type) {
        if (type === void 0) { type = 'plural'; }
        if (IsString(internal_name, true)) {
            if (IsObject(exports.PopRouteAliasMap, [internal_name])) {
                return exports.PopRouteAliasMap[internal_name][type];
            }
            else {
                var alias = SnakeToPascal(internal_name);
                alias = SpaceToHyphenLower(alias);
                if (type === 'plural') {
                    if (alias.slice(-1) !== 's')
                        alias = alias + "s";
                }
                return alias;
            }
        }
        return internal_name;
    }
    /************************************************************************************************
     *                                                                                              *
     *                                      Session Storage                                         *
     *                                                                                              *
     ************************************************************************************************/
    /**
     * Set a session variable for the site
     * @param siteVarPath - This should always follow a dot notation that represents the structure of an object App.Setting.value
     * @param siteVal
     * @constructor
     */
    function SetSessionSiteVar(siteVarPath, siteVal) {
        if (IsString(siteVarPath, true) && siteVarPath.includes('.') && IsDefined(siteVal)) {
            // if( IsObject(siteVal) || IsArray(siteVal) ) siteVal = JSON.stringify(siteVal);
            var steps = siteVarPath.split('.');
            var basePath = steps.shift();
            if (basePath) {
                var key = steps.length ? steps.pop() : basePath;
                var baseStorage = JSON.parse(sessionStorage.getItem(basePath) || '{}');
                var pathStorage = steps.length ? StorageSetter(baseStorage, steps) : baseStorage;
                if (pathStorage && key) {
                    if (siteVal === null) {
                        delete pathStorage[key];
                    }
                    else {
                        pathStorage[key] = siteVal;
                    }
                    sessionStorage.setItem(basePath, JSON.stringify(baseStorage));
                    // console.log('SetSessionSiteVar', basePath, baseStorage);
                }
            }
        }
    }
    /**
     * Get a stored session variable for the site
     * @param siteVarPath - This should always follow a dot notation that represents the structure of an object App.Setting.value
     * @param defaultValue - Return this value if a stored value is not found
     * @constructor
     */
    function GetSessionSiteVar(siteVarPath, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        if (IsString(siteVarPath, true) && siteVarPath.includes('.')) {
            var steps = siteVarPath.split('.');
            var basePath = steps.shift();
            if (basePath) {
                var key = steps.length ? steps.pop() : basePath;
                var baseStorage = JSON.parse(sessionStorage.getItem(basePath) || '{}');
                var pathStorage = steps.length ? StorageSetter(baseStorage, steps) : baseStorage;
                if (pathStorage && key) {
                    var value = typeof pathStorage[key] !== 'undefined' ? pathStorage[key] : defaultValue;
                    // console.log('GetSessionSiteVar', siteVarPath, value, typeof value);
                    return value;
                }
                else {
                    return defaultValue;
                }
            }
        }
        return defaultValue;
    }
    /**
     * Get a stored session variable for the site that has been base64 encoded
     * @param siteVarPath
     * @param defaultValue
     * @constructor
     */
    function GetEncodedSessionSiteVar(siteVarPath, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        var siteVar = GetSessionSiteVar(siteVarPath, defaultValue);
        if (IsString(siteVar, true)) {
            try {
                siteVar = JSON.parse(atob(siteVar));
            }
            catch (e) {
                siteVar = null;
            }
        }
        else {
            siteVar = null;
        }
        return siteVar;
    }
    /**
     * Deep Copy an Object
     * @param obj
     */
    function DeepCopy(obj) {
        var copy;
        // Handle the 3 simple types, and null or undefined
        if (null == obj || 'object' != typeof obj)
            return obj;
        // Handle Date
        if (obj instanceof Date) {
            copy = new Date();
            copy.setTime(obj.getTime());
            return copy;
        }
        // Handle Array
        if (obj instanceof Array) {
            copy = [];
            for (var i = 0, len = obj.length; i < len; i++) {
                copy[i] = DeepCopy(obj[i]);
            }
            return copy;
        }
        // Handle Object
        if (obj instanceof Object) {
            copy = {};
            for (var attr in obj) {
                if (obj.hasOwnProperty(attr))
                    copy[attr] = DeepCopy(obj[attr]);
            }
            return copy;
        }
        throw new Error('Unable to copy obj! Its type isn\'t supported.');
    }
    function RandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    function JsonCopy(x) {
        return JSON.parse(JSON.stringify(x));
    }
    /**
     * Deep merge two objects.
     * @param target
     * @param ...sources
     */
    function DeepMerge(target) {
        var _a, _b;
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (!sources.length)
            return target;
        var source = sources.shift();
        if (IsObject(target) && IsObject(source)) {
            for (var key in source) {
                if (IsObject(source[key])) {
                    if (!target[key])
                        Object.assign(target, (_a = {}, _a[key] = {}, _a));
                    DeepMerge(target[key], source[key]);
                }
                else {
                    Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                }
            }
        }
        return DeepMerge.apply(void 0, __spreadArray([target], __read(sources)));
    }
    /**
     * Helper Function to prepare an array to used as an option set for a field item
     * @param arr
     * @param params
     */
    function ConvertArrayToOptionList(arr, params) {
        if (params === void 0) { params = {}; }
        if (!params.key)
            params.key = 'id';
        if (!params.setKey)
            params.setKey = 'value';
        if (!params.nameKey)
            params.nameKey = 'name';
        if (!params.tags)
            params.tags = null;
        if (!params.prevent)
            params.prevent = [];
        if (!params.parent)
            params.parent = null;
        if (!params.groupKey)
            params.groupKey = 'group';
        if (!params.activeKey)
            params.activeKey = 'active';
        if (!params.preserveKeys)
            params.preserveKeys = [];
        // if( typeof params.level === 'undefined') params.level = 1;
        if (params.converted)
            return arr.slice();
        var optionList = [];
        var listOption;
        var ensureOptionFound = false;
        if (Array.isArray(arr) && arr.length) {
            // check if this list has already be converted to the option list structure, so it does not get re-run
            var tmpArr = __spreadArray([], __read(arr));
            var first = tmpArr[0];
            if (params.key === 'id' && typeof first.id === 'undefined' && typeof first.value !== 'undefined')
                params.key = 'value';
            if (typeof first[params.activeKey] !== 'undefined') {
                tmpArr = tmpArr.filter(function (item) { return item[params.activeKey]; });
            }
            if (typeof first[params.nameKey] === 'undefined' && first.name) {
                params.nameKey = 'name';
            }
            tmpArr.map(function (item) {
                if (item && params.key in item && params.prevent.indexOf(item[params.key]) === -1) {
                    if (params.parent) {
                        if (params.parent.field in item && +item[params.parent.field] === +params.parent.value) {
                            // continue
                        }
                        else {
                            return false;
                        }
                    }
                    listOption = { name: item[params.nameKey], sort_order: item.sort };
                    listOption[params.setKey] = item[params.key];
                    if (params.preserveKeys.length) {
                        params.preserveKeys.map(function (preserveKey) {
                            listOption[preserveKey] = item[preserveKey] ? item[preserveKey] : undefined;
                        });
                    }
                    if (typeof item['level'] === 'number') {
                        listOption.level = item['level'];
                    }
                    else if (params.level) {
                        listOption.level = params.level;
                    }
                    if (typeof item[params.groupKey] === 'string') {
                        listOption.group = item[params.groupKey] ? item[params.groupKey] : params.group ? item[params.groupKey] : '';
                    }
                    if (typeof params.groupFkKey === 'string') {
                        listOption.groupFk = item[params.groupFkKey] ? item[params.groupFkKey] : 0;
                    }
                    if (params.ensure && params.ensure.id && !ensureOptionFound && params.ensure[params.setKey] === item[params.setKey]) {
                        ensureOptionFound = true;
                    }
                    if (params.tags) {
                        params.tags.map(function (tag) {
                            if (tag in item) {
                                listOption[tag] = item[tag];
                            }
                        });
                    }
                    if (listOption[params.setKey])
                        optionList.push(listOption);
                }
            });
            if (params.ensure && !ensureOptionFound) {
                optionList.push(params.ensure);
            }
            if (params.sort && optionList.length > 1) {
                if (typeof optionList[0].sort_order !== 'undefined') {
                    optionList.sort(function (a, b) {
                        if (a.sort_order < b.sort_order)
                            return -1;
                        if (a.sort_order > b.sort_order)
                            return 1;
                        return 0;
                    });
                }
                else {
                    optionList.sort(function (a, b) {
                        if (a.name < b.name)
                            return -1;
                        if (a.name > b.name)
                            return 1;
                        return 0;
                    });
                }
            }
        }
        // add empty option only if the optionList is empty !IsArray(optionList,true)
        // remove any duplicates
        // return optionList;
        return __spreadArray([], __read(new Map(optionList.map(function (item) { return [item['name'], item]; })).values()));
    }
    /**
     * Helper to get an nested value out of an object
     * @param storage - The base object you want to reach into
     * @param steps  - the nested path to the find the value you are looking for
     * @param defaultValue Set a default value to return if value is not found
     */
    function StorageGetter(storage, steps, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        if (IsObject(storage, true)) {
            var pathLength = steps.length;
            var path = void 0;
            while (pathLength) {
                path = steps.shift();
                if (!storage[path]) {
                    return defaultValue;
                }
                storage = storage[path];
                pathLength--;
            }
            if (!storage) {
                return defaultValue;
            }
        }
        else {
            return defaultValue;
        }
        return storage;
    }
    /**
     * Helper to set a storage container into a nested location in an object
     * @param storage - The base object you want to reach into
     * @param steps  - the nested path to the find the value you are looking for
     * @param defaultValue Set a default value to return if value is not found
     */
    function StorageSetter(storage, steps) {
        var pathLength = steps.length;
        var path;
        while (pathLength) {
            path = steps.shift();
            if (!storage[path]) {
                storage[path] = {};
            }
            storage = storage[path];
            pathLength--;
        }
        return storage;
    }
    function Sleep(milliseconds) {
        return new Promise(function (resolve) { return setTimeout(resolve, milliseconds); });
    }
    /**
     * Sort helper for a list of objects where the sort needs to be done on a specific property
     * @param key
     * @param order
     */
    function DynamicSort(key, order) {
        if (order === void 0) { order = 'asc'; }
        return function (a, b) {
            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
                // property doesn't exist on either object
                return 0;
            }
            var varA = (typeof a[key] === 'string') ?
                a[key].toUpperCase() : a[key];
            var varB = (typeof b[key] === 'string') ?
                b[key].toUpperCase() : b[key];
            var comparison = 0;
            if (varA > varB) {
                comparison = 1;
            }
            else if (varA < varB) {
                comparison = -1;
            }
            return ((order == 'desc') ? (comparison * -1) : comparison);
        };
    }
    /**
     * Check if the values of two arrays contain the same items
     * This is way to get around the order not being the same, but the items are the same
     * @param arr1
     * @param arr2
     * @param field
     */
    function ArraysMatch(arr1, arr2, field) {
        if (arr1.length !== arr2.length)
            return false;
        if (field) {
            for (var i = arr1.length; i--;) {
                if (arr1[i][field] !== arr2[i][field])
                    return false;
            }
        }
        else {
            for (var i = arr1.length; i--;) {
                if (arr1[i] !== arr2[i])
                    return false;
            }
        }
        return true;
    }
    /**
     * Check if an array contains a list of key:value pairs
     * @param needles
     * @param haystack
     * @param strict
     */
    function ArrayContainsAll(needles, haystack, strict) {
        if (strict === void 0) { strict = false; }
        haystack = haystack.map(function (hay) {
            return String(hay).toLowerCase().trim();
        });
        if (strict) {
            for (var i = 0, len = needles.length; i < len; i++) {
                needles[i] = String(needles[i]).toLowerCase().trim();
                if (haystack.indexOf(needles[i]) === -1)
                    return false;
            }
        }
        else {
            var need = needles.length;
            var match_1;
            var met_1 = 0;
            needles.forEach(function (needle) {
                // loop over the blacklisted terms
                match_1 = null;
                haystack.some(function (str) {
                    if (String(str).toLowerCase().trim().indexOf(needle) > -1) {
                        match_1 = true;
                        return true;
                    }
                });
                if (match_1) {
                    met_1++;
                }
            });
            return met_1 >= need;
        }
        return true;
    }
    /**
     * Create a map of an array of objects using a specific property
     * @param arr
     * @param array_key_field
     */
    function ArrayMapSetter(arr, array_key_field) {
        var map = {};
        if (Array.isArray(arr)) {
            arr.forEach(function (value, index) {
                if (value[array_key_field])
                    map[value[array_key_field]] = index;
            });
        }
        return map;
    }
    /**
     * Sort an array by a parent_id
     * @param arr
     * @param parentId
     * @param result
     * @param itemKey
     * @param parentKey
     * @constructor
     */
    function ArrayParentSort(arr, parentId, result, itemKey, parentKey) {
        if (parentId === void 0) { parentId = 0; }
        if (result === void 0) { result = []; }
        if (itemKey === void 0) { itemKey = 'id'; }
        if (parentKey === void 0) { parentKey = 'parent_id'; }
        if (IsArray(arr, true)) {
            arr.map(function (item) {
                if (+item[parentKey] === +parentId) {
                    result.push(item);
                    ArrayParentSort(arr, item[itemKey], result, itemKey, parentKey);
                }
            });
        }
        return result;
    }
    /**
     * Convert an array to a nested array
     * @param data
     * @param itemKey
     * @param parentKey
     * @constructor
     */
    function ArrayTreeList(data, itemKey, parentKey) {
        if (itemKey === void 0) { itemKey = 'id'; }
        if (parentKey === void 0) { parentKey = 'parent_id'; }
        var map = {};
        var roots = [];
        var node;
        var i;
        for (i = 0; i < data.length; i += 1) {
            map[data[i][itemKey]] = i; // initialize the map
            data[i].children = []; // initialize the children
        }
        for (i = 0; i < data.length; i += 1) {
            node = data[i];
            if (node[parentKey] !== 0) {
                // if you have dangling branches check that map[node.parentId] exists
                data[map[node[parentKey]]].children.push(node);
            }
            else {
                roots.push(node);
            }
        }
        return roots;
    }
    /**
     * Flatten an array that has parent/child relationship
     * @param list
     * @param result
     * @param level
     * @param itemKey
     * @param parentKey
     * @constructor
     */
    function ArrayParentTreeFlatten(list, result, level, itemKey, parentKey) {
        if (result === void 0) { result = []; }
        if (level === void 0) { level = 0; }
        if (itemKey === void 0) { itemKey = 'id'; }
        if (parentKey === void 0) { parentKey = 'parent_id'; }
        var children;
        if (IsArray(list, true)) {
            list.map(function (item) {
                children = item.children;
                delete item.children;
                item.level = level;
                result.push(item);
                if (IsArray(children, true)) {
                    ArrayParentTreeFlatten(children, result, level + 1);
                }
            });
        }
        return result;
    }
    /**
     * Create an array with parent child relations
     * @param data
     * @param parentId
     * @param result
     * @param tree
     * @param itemKey
     * @param parentKey
     * @param flatten
     * @constructor
     */
    function ArrayParentTree(data, parentId, result, tree, itemKey, parentKey, flatten) {
        if (parentId === void 0) { parentId = 0; }
        if (result === void 0) { result = []; }
        if (itemKey === void 0) { itemKey = 'id'; }
        if (parentKey === void 0) { parentKey = 'parent_id'; }
        if (flatten === void 0) { flatten = false; }
        data = ArrayParentSort(data, parentId, result, itemKey, parentKey);
        data = ArrayTreeList(data, itemKey, parentKey);
        return data;
    }
    /**
     * Create a map of list of object keyed by an object property
     * @param arr
     * @param array_key_field
     */
    function ArrayKeyBy(arr, key) {
        var keyBy = {};
        if (IsArray(arr, true) && IsString(key, true)) {
            arr.map(function (x) {
                if (IsDefined(x[key]))
                    keyBy[x[key]] = x;
            });
        }
        return keyBy;
    }
    /**
     * Determine if an object is an array
     * @param arr
     * @param requireLength - Requires that it is an array but also has values
     */
    function IsArray(arr, requireLength) {
        if (requireLength === void 0) { requireLength = false; }
        if (Array.isArray(arr)) {
            if (requireLength) {
                if (arr.length) {
                    return true;
                }
                else {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    function IsArrayThrowError(arr, requireLength, throwError) {
        if (requireLength === void 0) { requireLength = false; }
        var isArray = IsArray(arr, requireLength);
        if (!isArray) {
            if (IsObject(exports.PopLog)) {
                if (exports.PopLog.enabled('error')) {
                    console.log(exports.PopLog.message("IsArrayError: Fail"), exports.PopLog.color('error'), {
                        data: arr,
                        requireLength: requireLength,
                        name: throwError
                    });
                }
            }
            throw new Error(throwError);
        }
        return isArray;
    }
    /**
     * Convert an Object to an Array
     * @param obj
     */
    function ToArray(obj) {
        if (typeof obj === 'object' && Object.keys(obj).length) {
            return Object.keys(obj).map(function (key) {
                return obj[key];
            });
        }
        return [];
    }
    /**
     * Check if a var is undefined
     * @param x
     */
    function IsUndefined(x) {
        if (typeof x === 'undefined')
            return true;
        return false;
    }
    /**
     * Check if a var is defined
     * @param x
     */
    function IsDefined(x, allowNull) {
        if (allowNull === void 0) { allowNull = true; }
        if (x === null && !allowNull)
            return false;
        if (typeof x === 'undefined')
            return false;
        return true;
    }
    /**
     * Convert an Array to an object
     * @param obj
     */
    function ToObject(arr) {
        if (arr && Array.isArray(arr) && arr.length) {
            var rv = {};
            for (var i = 0; i < arr.length; ++i)
                rv[i] = arr[i];
            return rv;
        }
        return arr;
    }
    function ObjectsMatch(x, y) {
        if (x === null || x === undefined || y === null || y === undefined) {
            return x === y;
        }
        // after this just checking type of one would be enough
        if (x.constructor !== y.constructor) {
            return false;
        }
        // if they are functions, they should exactly refer to same one (because of closures)
        if (x instanceof Function) {
            return x === y;
        }
        // if they are regexps, they should exactly refer to same one (it is hard to better equality check on current ES)
        if (x instanceof RegExp) {
            return x === y;
        }
        if (x === y || x.valueOf() === y.valueOf()) {
            return true;
        }
        if (Array.isArray(x) && x.length !== y.length) {
            return false;
        }
        // if they are dates, they must had equal valueOf
        if (x instanceof Date) {
            return false;
        }
        // if they are strictly equal, they both need to be object at least
        if (!(x instanceof Object)) {
            return false;
        }
        if (!(y instanceof Object)) {
            return false;
        }
        // recursive object equality check
        var p = Object.keys(x);
        return Object.keys(y).every(function (i) {
            return p.indexOf(i) !== -1;
        }) &&
            p.every(function (i) {
                return ObjectsMatch(x[i], y[i]);
            });
    }
    /**
     * Check for a qualified object
     * @param value
     * @param requireKeys
     * @constructor
     */
    function IsObject(value, requireKeys) {
        if (requireKeys === void 0) { requireKeys = false; }
        if (!Array.isArray(value) && value !== null && typeof value === 'object') {
            if (requireKeys) {
                if (typeof requireKeys === 'boolean' && Object.keys(value).length) {
                    return true;
                }
                else if (IsArray(requireKeys, true)) {
                    var pass_1 = true;
                    var keys = requireKeys;
                    keys.some(function (key) {
                        if (!(key in value))
                            pass_1 = false;
                        return true;
                    });
                    if (!pass_1)
                        return false;
                }
                else {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    /**
     * Check for a qualified function
     * @param value
     * @param requireKeys
     * @constructor
     */
    function IsCallableFunction(fn) {
        return typeof fn === 'function';
    }
    /**
     * Remove empty values from an object
     * @param obj
     * @constructor
     */
    function CleanObject(obj, options) {
        if (options === void 0) { options = {}; }
        if (!(IsArray(options.whitelist)))
            options.whitelist = [];
        if (!(IsArray(options.blacklist)))
            options.blacklist = [];
        if (!(IsObject(options.alias)))
            options.alias = {};
        for (var propName in obj) {
            if (!(options.whitelist.includes(propName)) && (obj[propName] === null || obj[propName] === undefined || options.blacklist.includes(propName))) {
                delete obj[propName];
            }
            if (propName in options.alias && IsString(options.alias[propName], true)) {
                obj[options.alias[propName]] = obj[propName];
                delete obj[propName];
            }
        }
        return obj;
    }
    /**
     * A helper function to determine if a variable is a qualified object
     *
     * @param value
     * @param requireKeys
     * @param throwError
     */
    function IsObjectThrowError(value, requireKeys, throwError) {
        if (requireKeys === void 0) { requireKeys = false; }
        var isObject = IsObject(value, requireKeys);
        if (!isObject && throwError) {
            if (IsObject(exports.PopLog)) {
                if (exports.PopLog.enabled('error')) {
                    if (exports.PopTemplate) {
                        if (i0.isDevMode() && !(IsObject(exports.PopAuth, ['token']))) {
                            exports.PopTemplate.error({ message: throwError + ", this may be due to not being authenticated.", code: 500 });
                        }
                    }
                    console.log(exports.PopLog.message("IsObjectError: Fail"), exports.PopLog.color('error'), {
                        data: value,
                        requireKeys: requireKeys,
                        name: throwError
                    });
                }
            }
            throw new Error(throwError);
        }
        return isObject;
    }
    /**
     * Check for a qualified number
     * @param value
     * @param requireTruthy
     * @constructor
     */
    function IsNumber(value, requireTruthy) {
        if ((typeof value === 'number' || typeof value === 'string') && String(value).length && !isNaN(Number(value.toString()))) {
            if (requireTruthy) {
                if (+value) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return true;
            }
        }
        return false;
    }
    /**
     * Check for a qualified string
     * @param value
     * @param requireLength
     * @constructor
     */
    function IsString(value, requireLength) {
        if (requireLength === void 0) { requireLength = false; }
        if (value && typeof value === 'string' && !(IsNumber(value))) {
            if (requireLength) {
                if (String(value).length) {
                    return true;
                }
                else {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    /**
     *
     * A helper function to determine if a variable is a qualified string
     * @param value
     * @param requireLength
     * @param throwError
     */
    function IsStringError(value, requireLength, throwError) {
        if (requireLength === void 0) { requireLength = false; }
        var isString = IsString(value, requireLength);
        if (!isString && throwError) {
            if (IsObject(exports.PopLog)) {
                if (exports.PopLog.enabled('error')) {
                    console.log(exports.PopLog.message("IsStringError: Fail"), exports.PopLog.color('error'), {
                        data: value,
                        requireLength: requireLength,
                        name: throwError
                    });
                }
            }
            throw new Error(throwError);
        }
        return isString;
    }
    /**
     * Capitalize the first Letter of every word in a string
     * @param str
     * @returns str
     */
    function TitleCase(str) {
        if (IsString(str, true)) {
            str = StringReplaceAll(str, '_', ' '); // convert underscores to spaces
            str = String(str).replace(/\w\S*/g, function (txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); // capitalize first letter of words
            });
            str = str.replace(/(^|[\s-])\S/g, function (match) {
                return match.toUpperCase();
            });
        }
        return str;
    }
    /**
     * Capitalize the first Letter of every word in a string
     * @param str
     * @returns str
     */
    function Capitalize(str) {
        if (IsString(str, true)) {
            str = str.trim();
            str = StringReplaceAll(str, '_', ' '); // convert underscores to spaces
            str = StringReplaceAll(str, '\'', ''); // convert ' to spaces
            str = str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
        }
        return str;
    }
    /**
     * Convert a string from snake case to Pascal Case
     * @param field
     * @returns string
     */
    function SnakeToPascal(field) {
        var e_1, _a;
        if (IsString(field, true)) {
            var words = field.split('_');
            var validField = '';
            try {
                for (var words_1 = __values(words), words_1_1 = words_1.next(); !words_1_1.done; words_1_1 = words_1.next()) {
                    var word = words_1_1.value;
                    validField += word.charAt(0).toUpperCase() + word.slice(1) + ' ';
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (words_1_1 && !words_1_1.done && (_a = words_1.return)) _a.call(words_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return String(validField).trim();
        }
        return field;
    }
    /**
     * Convert a string with spaces to snake case .. 'this is snake case' to 'this_is_snake_case'
     * @param field
     * @returns string
     */
    function SpaceToSnake(pascal) {
        var e_2, _a;
        var words = pascal.split(' ');
        try {
            for (var words_2 = __values(words), words_2_1 = words_2.next(); !words_2_1.done; words_2_1 = words_2.next()) {
                var word = words_2_1.value;
                word = String(word).toLowerCase();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (words_2_1 && !words_2_1.done && (_a = words_2.return)) _a.call(words_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return words.join('_');
    }
    /**
     * Convert a string with hyphens to Pascal Case
     * @param field
     * @returns string
     */
    function HyphenToPascal(field) {
        var e_3, _a;
        var words = field.split('-');
        var validField = '';
        try {
            for (var words_3 = __values(words), words_3_1 = words_3.next(); !words_3_1.done; words_3_1 = words_3.next()) {
                var word = words_3_1.value;
                validField += word.charAt(0).toUpperCase() + word.slice(1) + ' ';
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (words_3_1 && !words_3_1.done && (_a = words_3.return)) _a.call(words_3);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return validField;
    }
    /**
     * Convert a string with spaces to Pascal Case
     * @param field
     * @returns string
     */
    function SpaceToHyphenLower(str) {
        var tmp = str.trim();
        return String(StringReplaceAll(tmp, ' ', '-')).toLowerCase();
    }
    /**
     * String replace all
     * @param str
     * @param find
     * @param replace
     * @constructor
     */
    function StringReplaceAll(str, find, replace) {
        return str.replace(new RegExp(find, 'g'), replace);
    }
    /**
     * Search filter helper to see if an object contains tags
     * @param obj
     * @param tags
     * @param match
     * @param values
     * @param has
     * @param not
     * @constructor
     */
    function ObjectContainsTagSearch(obj, tags, match, values, has, not) {
        if (match === void 0) { match = null; }
        if (values === void 0) { values = null; }
        if (has === void 0) { has = null; }
        if (not === void 0) { not = null; }
        if (String(tags).length) {
            has = String(tags).toLowerCase().split(',').map(function (str) {
                return str.trim();
            }).filter(function (item) {
                return String(item).length && String(item).charAt(0) !== '!';
            });
            not = String(tags).toLowerCase().split(',').map(function (str) {
                return str.trim();
            }).filter(function (item) {
                return String(item).length >= 2 && String(item).charAt(0) === '!';
            });
            not = not.map(function (tag) {
                return StringReplaceAll(tag, '!', '');
            }).filter(function (tag) {
                return tag.length >= 1;
            });
            match = true;
            values = Object.values(obj).filter(function (val) {
                return String(val).length > 0;
            });
            if (Array.isArray(not) && not.length) {
                match = true;
                not.some(function (tag) {
                    values.some(function (val) {
                        if (String(val).toLowerCase().indexOf(tag) > -1) {
                            match = null;
                            return true;
                        }
                    });
                    if (!match) {
                        return true;
                    }
                });
            }
            if (match === true) {
                match = null;
                if (Array.isArray(has) && has.length) {
                    has.some(function (tag) {
                        if (tag.indexOf('&') > -1) {
                            var has2 = String(tag).toLowerCase().split('&').map(function (str) {
                                return str.trim();
                            }).filter(function (item) {
                                return String(item).length && String(item).charAt(0) !== '!';
                            });
                            var not2 = String(tag).toLowerCase().split('&').map(function (str) {
                                return str.trim();
                            }).filter(function (item) {
                                return String(item).length >= 1 && String(item).charAt(0) === '!';
                            });
                            not2 = not2.map(function (firstTag) {
                                return StringReplaceAll(firstTag, '!', '');
                            }).filter(function (nextTag) {
                                return nextTag.length >= 1;
                            });
                            match = true;
                            if (Array.isArray(not2) && not2.length) {
                                match = true;
                                not2.some(function (firstTag) {
                                    values.some(function (val) {
                                        if (String(val).toLowerCase().indexOf(firstTag) > -1) {
                                            match = null;
                                            return true;
                                        }
                                    });
                                    if (!match) {
                                        return true;
                                    }
                                });
                            }
                            if (match === true) {
                                match = null;
                                if (Array.isArray(has2) && has2.length) {
                                    if (ArrayContainsAll(has2, values)) {
                                        match = true;
                                    }
                                    return match;
                                }
                            }
                            return match;
                        }
                        else {
                            values.some(function (val) {
                                if (String(val).toLowerCase().indexOf(tag) > -1) {
                                    match = true;
                                    return true;
                                }
                            });
                        }
                        if (match) {
                            return true;
                        }
                    });
                }
            }
            return match;
        }
        return true;
    }
    function ConvertDateToDateTimeFormat(value) {
        var dt = new Date(value);
        dt.setHours(dt.getHours() + Math.round(dt.getMinutes() / 60));
        dt.setMinutes(0);
        var date = dt.getDate();
        if (String(date).length === 1) {
            date = '0' + date;
        }
        var month = dt.getMonth() + 1;
        if (String(month).length === 1) {
            month = '0' + month;
        }
        var year = dt.getFullYear();
        var h = dt.getHours();
        if (String(h).length === 1) {
            h = '0' + h;
        }
        return year + '-' + month + '-' + date + ' ' + h + ':' + '00' + ':' + '00';
    }
    function ConvertDateFormat(value, format) {
        if (format === void 0) { format = 'yyyy-mm-dd'; }
        var dt = new Date(value);
        var dateFormat;
        var date = dt.getDate();
        if (String(date).length === 1) {
            date = '0' + date;
        }
        var month = dt.getMonth() + 1;
        if (String(month).length === 1) {
            month = '0' + month;
        }
        var year = dt.getFullYear();
        switch (String(format).toLowerCase()) {
            case 'mm-dd-yyyy':
                dateFormat = month + '-' + date + '-' + year;
                break;
            case 'mm/dd/yyyy':
                dateFormat = month + '/' + date + '/' + year;
                break;
            case 'yyyy-mm-dd':
                dateFormat = year + '-' + month + '-' + date;
                break;
            default:
                dateFormat = year + '-' + month + '-' + date;
                break;
        }
        return dateFormat;
    }
    function ConvertDateToTimeFormat(value) {
        var dt = new Date(value);
        var h = dt.getHours().toString(10).padStart(2, '0');
        var m = dt.getMinutes().toString(10).padStart(2, '0');
        var s = dt.getSeconds().toString(10).padStart(2, '0');
        return h + ':' + m + ':' + s;
    }
    function PopUid() {
        return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);
    }
    function ConvertObjectToUri(obj) {
        if (Array.isArray(obj)) {
            obj = ToObject(obj);
        }
        return Object.entries(obj).map(function (_a) {
            var _b = __read(_a, 2), key = _b[0], val = _b[1];
            return key + "=" + encodeURIComponent(val);
        }).join('&');
    }
    /**
     * Group a list of objects inside of an array
     * @param arr
     * @param key
     * @constructor
     */
    function ArrayGroupBy(arr, key) {
        if (IsArray(arr, true)) {
            return arr.reduce(function (rv, x) {
                (rv[x[key]] = rv[x[key]] || []).push(x);
                return rv;
            }, {});
        }
        else {
            return arr;
        }
    }
    /**
     * Pick a random element from an array
     * @param arr
     * @constructor
     */
    function RandomArrayElement(arr) {
        if (IsArrayThrowError(arr, true, "RandomArrayElement: Invalid Array")) {
            return arr[Math.floor(Math.random() * arr.length)];
        }
    }
    /**
     * Helper method to remove duplicate items from a  flat array [1,2,3,1,1], [['a','b','c','a']
     * @param arr
     */
    function ArrayOnlyUnique(arr) {
        if (IsArray(arr, true)) {
            return arr.filter(function (elem, index, self) {
                return index === self.indexOf(elem);
            });
        }
        return arr;
    }
    function ArrayRemoveDupliates(array, prop) {
        return array.filter(function (obj, pos, arr) {
            return arr.map(function (mapObj) { return mapObj[prop]; }).indexOf(obj[prop]) === pos;
        });
    }
    /**
     * Pass in a state verb to resolve to a color theme ... use case would be color of buttons, icons, and notifications
     * @param state
     */
    function GetVerbStateTheme(stateVerb) {
        var successVerbs = ['active', 'success', 'on', '1'];
        var dangerVerbs = ['err', 'off', 'remove', '0', 'fail', 'archived'];
        var warningVerbs = ['warn', 'pend', 'remove'];
        var infoVerbs = ['new', 'info', 'add'];
        var theme = null;
        successVerbs.some(function (verb) {
            if (String(stateVerb).toLowerCase().search(verb) > -1) {
                theme = 'success';
                return true;
            }
        });
        if (!theme) {
            dangerVerbs.some(function (verb) {
                if (String(stateVerb).toLowerCase().search(verb) > -1) {
                    theme = 'danger';
                    return true;
                }
            });
        }
        if (!theme) {
            warningVerbs.some(function (verb) {
                if (String(stateVerb).toLowerCase().search(verb) > -1) {
                    theme = 'warn';
                    return true;
                }
            });
        }
        if (!theme) {
            infoVerbs.some(function (verb) {
                if (String(stateVerb).toLowerCase().search(verb) > -1) {
                    theme = 'info';
                    return true;
                }
            });
        }
        if (!theme)
            theme = 'default';
        return theme;
    }
    /**
     * Helper for getting a message string from an http error
     * @param err
     * @constructor
     */
    function GetHttpErrorMsg(err) {
        var errorMessage = '';
        var location = err;
        if (IsObject(location, true)) {
            if (IsObject(err.error, true)) {
                location = err.error;
                if (IsObject(location.errors, true)) {
                    Object.keys(location.errors).map(function (key) {
                        if (IsArray(location.errors[key], true)) {
                            location.errors[key].map(function (errorMsg, index) {
                                if (index)
                                    errorMessage += "<br/>";
                                errorMessage += errorMsg + "<br/>";
                            });
                        }
                        else if (IsString(location.errors[key])) {
                            errorMessage += err.errors[key] + "<br/>";
                        }
                        errorMessage += "<br/>";
                    });
                }
                else if (IsString(location.message, true)) {
                    errorMessage = location.message;
                }
            }
            else if (IsString(location.message, true)) {
                errorMessage = err.message;
            }
            else if (StorageGetter(location, ['data', 'message'])) {
                errorMessage = location.data.message;
            }
        }
        else if (IsObject(location, ['message'])) {
            errorMessage = location.message;
        }
        else if (IsString(location, true)) {
            errorMessage = String(location);
        }
        if (!errorMessage) {
            if (IsObject(exports.PopLog)) {
                console.log(exports.PopLog.message("GetHttpErrorMsg: Fail"), exports.PopLog.color('error'), {
                    data: location,
                });
            }
            errorMessage = "Server Error: Code " + (err.status + (err.statusText ? ' - ' + err.statusText : '') + '.');
        }
        return errorMessage;
    }
    /**
     * Helper for getting an array from a response
     * @param err
     * @constructor
     */
    function GetHttpResult(res) {
        if (res) {
            if (res.data)
                res = res.data;
        }
        else {
            console.log("Undefined response: " + JSON.stringify(res));
        }
        return res;
    }
    /**
     * Helper for getting an array from a response
     * @param err
     * @constructor
     */
    function GetHttpArrayResult(res, requireLength) {
        if (requireLength === void 0) { requireLength = false; }
        var result = res;
        if (result && result.data) {
            result = result.data;
        }
        return IsArrayThrowError(result, requireLength, "Api Result was not an array as expected") ? result : null;
    }
    /**
     * Helper for getting an object from a response
     * @param err
     * @constructor
     */
    function GetHttpObjectResult(res, requireKeys) {
        if (requireKeys === void 0) { requireKeys = false; }
        var result = res;
        if (result && result.data) {
            result = result.data;
        }
        return IsObjectThrowError(result, requireKeys, "Api Result was not an object as expected") ? result : null;
    }
    /**
     * Replace { var } in a string with the corresponding data value of an object
     * @param str
     * @param obj
     * @constructor
     */
    function InterpolateString(str, obj) {
        if (typeof (str) === 'string' && str.includes('{') && IsObject(obj, true)) {
            var start = str.indexOf('{');
            var end = str.indexOf('}', start) !== -1 ? str.indexOf('}', start) : str.length;
            var fieldName = str.substring(start + 1, end);
            var varName = fieldName.trim();
            if (varName in obj) {
                str = str.replace('{' + fieldName + '}', obj[varName]);
                if (str && str.includes('{')) {
                    str = InterpolateString(str, obj);
                }
            }
        }
        return str;
    }
    function GetStringAbbrv(str) {
        var abbrv = '';
        if (IsString(str, true)) {
            var strArray = String(str).trim().split(' ');
            var word = void 0;
            while (strArray.length) {
                word = strArray.shift();
                abbrv += String(word).trim().charAt(0).toLocaleUpperCase();
            }
        }
        return abbrv;
    }
    function PopTransform(value, transformation) {
        switch (String(transformation).toLowerCase()) {
            case 'toRelationName':
                if (IsObject(value)) {
                    var val = value;
                    var location = val.label ? 'label' : 'name';
                    var name = StorageGetter(value, [location]);
                    if (name)
                        value = name;
                }
                break;
            case 'totitlecase':
            case 'title':
                value = TitleCase(String(value));
                break;
            case 'tolowercase':
            case 'lower':
                value = String(value).toLowerCase();
                break;
            case 'label':
                var label = new LabelPipe();
                value = label.transform(value + '');
                break;
            case 'todigits':
            case 'digits':
                value = String(value).match(/\d+/g).map(Number).join('');
                break;
            case 'tophonepipe':
            case 'phone':
                var phone = new PhonePipe();
                value = phone.transform(value);
                break;
            case 'active':
            case 'archived':
            case 'toactiveararchived':
                var active = new ToActiveOrArchivedPipe();
                value = active.transform(value);
                break;
            case 'touppercase':
            case 'upper':
                value = String(value).toUpperCase();
                break;
            case 'convertemptytonull':
                if (!String(value).length)
                    value = null;
                break;
            case 'convertemptyzero':
                if (!String(value).length)
                    value = 0;
                break;
            case 'tocurrency':
            case 'currency':
            case 'dollar':
                if (IsNumber(value)) {
                    value = new Intl.NumberFormat('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2
                    }).format(Number(value));
                }
                break;
            case 'amount':
                value = IsNumber(value) ? parseFloat(String(value)).toFixed(2) : '0.00';
                break;
            default:
                break;
        }
        return value;
    }

    var TruncatePipe = /** @class */ (function () {
        function TruncatePipe() {
        }
        TruncatePipe.prototype.transform = function (value, args) {
            if (IsString(value, true)) {
                var limit = args.length > 0 ? parseInt(args[0] + '', 10) : 20;
                var trail = args.length > 1 ? args[1] : '...';
                return String(value).length > limit ? String(value).substring(0, limit) + trail : value;
            }
            return value;
        };
        return TruncatePipe;
    }());
    TruncatePipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'truncate'
                },] }
    ];

    function GetAuthStorage() {
        return {
            token: GetSiteVar('Auth.token', ''),
            popcxToken: GetSiteVar('Auth.popcx-token', ''),
            time: parseInt(GetSiteVar('Auth.time', 0), 10),
            auth: GetSiteVar('Auth.details', {}),
            businessId: parseInt(GetSessionSiteVar('Business.current', 0), 10)
        };
    }

    function GetServiceDom() {
        return {
            subscriber: {},
            delay: {},
            interval: {},
            handler: {},
            session: {},
            state: {},
        };
    }
    function DestroyServiceDom(dom) {
        if (typeof (dom.interval) === 'object') {
            Object.keys(dom.interval).map(function (name) {
                if (dom.interval[name]) {
                    clearInterval(dom.interval[name]);
                }
                if (dom.interval[name]) {
                    clearInterval(dom.interval[name]);
                }
            });
        }
        if (typeof (dom.delay) === 'object') {
            Object.keys(dom.delay).map(function (name) {
                if (dom.delay[name]) {
                    clearTimeout(dom.delay[name]);
                }
                if (dom.delay[name]) {
                    clearTimeout(dom.delay[name]);
                }
            });
        }
        if (typeof (dom.subscriber) === 'object') {
            Object.keys(dom.subscriber).map(function (name) {
                if (dom.subscriber[name] && typeof dom.subscriber[name].unsubscribe === 'function') {
                    dom.subscriber[name].unsubscribe();
                }
            });
        }
    }
    function GetServiceAssetContainer() {
        return {
            map: {}
        };
    }
    function GetServiceUiContainer() {
        return {
            state: { loaded: false, loading: true, refreshing: false },
            active: {},
            session: {},
            asset: {
                map: {},
            }
        };
    }
    /************************************************************************************************
     *                                                                                              *
     *                                          Service                                             *
     *                                      ( Handles Services )                                    *
     *                                                                                              *
     ************************************************************************************************/
    function GetServiceContainer() {
        return {};
    }
    function GetComponentUiContainer() {
        return {
            error: {
                code: 0,
                message: ''
            },
            overhead: 0,
            height: {
                outer: null,
                inner: null,
                default: 0
            },
            width: {},
            state: {},
            resource: {
                map: {},
            },
            active: {
                map: {},
            },
            session: {},
            asset: {
                map: {},
            },
            contextMenu: {
                config: undefined,
                configure: undefined,
            }
        };
    }
    function AbstractUiMixin(Base) {
        if (Base === void 0) { Base = /** @class */ (function () {
            function class_1() {
            }
            return class_1;
        }()); }
        return /** @class */ (function (_super) {
            __extends(class_2, _super);
            function class_2() {
                var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
                _this.ui = GetComponentUiContainer();
                return _this;
            }
            return class_2;
        }(Base));
    }
    function GetComponentTraitContainer() {
        return {
            bubble: false
        };
    }
    function GetComponentAssetContainer() {
        return {
            map: {}
        };
    }
    function GetComponentDomContainer() {
        var dom = {
            /**
             * Service will preserve session, state, etc and allow all components on the core to communicate and share assets`
             */
            active: {},
            error: {
                code: 0,
                message: ''
            },
            overhead: 0,
            height: {
                outer: null,
                inner: null,
                default: 0
            },
            width: {},
            state: {},
            session: {},
            contextMenu: {
                config: undefined,
                configure: undefined,
            },
            repo: undefined,
            /**
             * Store all subscribers here
             */
            subscriber: {},
            /**
             * Store all time intervals here
             */
            interval: {},
            /**
             * Store all timeouts here
             */
            delay: {},
            handler: {},
        };
        return dom;
    }
    function AbstractDomMixin(Base) {
        if (Base === void 0) { Base = /** @class */ (function () {
            function class_3() {
            }
            return class_3;
        }()); }
        return /** @class */ (function (_super) {
            __extends(class_4, _super);
            function class_4() {
                var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
                _this.dom = GetComponentDomContainer();
                return _this;
            }
            return class_4;
        }(Base));
    }
    function DestroyComponentDom(dom) {
        if (typeof (dom.interval) === 'object') {
            Object.keys(dom.interval).map(function (name) {
                if (dom.interval[name]) {
                    clearInterval(dom.interval[name]);
                }
                if (dom.interval[name]) {
                    clearInterval(dom.interval[name]);
                }
            });
        }
        if (typeof (dom.delay) === 'object') {
            Object.keys(dom.delay).map(function (name) {
                if (dom.delay[name]) {
                    clearTimeout(dom.delay[name]);
                }
                if (dom.delay[name]) {
                    clearTimeout(dom.delay[name]);
                }
            });
        }
        if (typeof (dom.subscriber) === 'object') {
            Object.keys(dom.subscriber).map(function (name) {
                if (dom.subscriber[name] && typeof dom.subscriber[name].unsubscribe === 'function') {
                    dom.subscriber[name].unsubscribe();
                }
            });
        }
    }
    function GetComponentTemplateContainer() {
        var template = {
            container: undefined,
            refs: [],
            ref_events: []
        };
        return template;
    }
    function AbstractTemplateMixin(Base) {
        if (Base === void 0) { Base = /** @class */ (function () {
            function class_5() {
            }
            return class_5;
        }()); }
        return /** @class */ (function (_super) {
            __extends(class_6, _super);
            function class_6() {
                var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
                _this.template = GetComponentTemplateContainer();
                return _this;
            }
            return class_6;
        }(Base));
    }
    function DestroyComponentTemplate(template) {
        if (typeof template === 'object') {
            template.ref_events.map(function (subscription) {
                if (subscription && typeof subscription.unsubscribe === 'function') {
                    subscription.unsubscribe();
                }
            });
            template.refs = template.refs.map(function (componentRef) {
                if (componentRef && typeof componentRef.destroy === 'function') {
                    componentRef.destroy();
                }
                componentRef = null;
                return null;
            });
            if (template.container)
                template.container.clear();
            template = null;
        }
    }

    var PopExtendService = /** @class */ (function () {
        // public ui = <ServiceUiContainerInterface>GetServiceUiContainer();
        function PopExtendService() {
            var _this = this;
            this.dom = GetServiceDom();
            this.id = PopUid();
            if (!this.asset)
                this.asset = GetServiceAssetContainer();
            this.dom = Object.assign(Object.assign({}, this.dom), {
                setSubscriber: function (subscriptionKey, subscription) {
                    if (subscription === void 0) { subscription = null; }
                    if (subscriptionKey && _this.dom.subscriber && subscriptionKey in _this.dom.subscriber && _this.dom.subscriber[subscriptionKey] && typeof _this.dom.subscriber[subscriptionKey].unsubscribe === 'function') {
                        _this.dom.subscriber[subscriptionKey].unsubscribe();
                    }
                    if (subscription) {
                        _this.dom.subscriber[subscriptionKey] = subscription;
                    }
                },
                setTimeout: function (timeoutKey, callback, delay) {
                    if (callback === void 0) { callback = null; }
                    if (delay === void 0) { delay = 250; }
                    if (timeoutKey && _this.dom.delay && timeoutKey in _this.dom.delay && _this.dom.delay[timeoutKey]) {
                        clearTimeout(_this.dom.delay[timeoutKey]);
                    }
                    if (typeof callback === 'function') {
                        _this.dom.delay[timeoutKey] = setTimeout(callback, delay);
                    }
                },
            });
        }
        PopExtendService.prototype.ngOnDestroy = function () {
            DestroyServiceDom(this.dom);
        };
        return PopExtendService;
    }());
    PopExtendService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopExtendService_Factory() { return new PopExtendService(); }, token: PopExtendService, providedIn: "root" });
    PopExtendService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopExtendService.ctorParameters = function () { return []; };

    var PopBaseService = /** @class */ (function (_super) {
        __extends(PopBaseService, _super);
        function PopBaseService() {
            var _this = _super.call(this) || this;
            _this.name = 'PopBaseService';
            _this.asset = {
                sessionRoot: 'SiteVars',
                businessId: 0,
                authTime: undefined,
            };
            var authStorage = GetAuthStorage();
            _this.auth = authStorage.auth;
            _this.asset.businessId = authStorage.businessId;
            _this.asset.authTime = authStorage.time;
            if (!_this.asset.businessId) {
                var lastBusinessId = parseInt(GetSiteVar('Business.last') || '0', 10);
                if (lastBusinessId) {
                    _this.setCurrentBusinessId(lastBusinessId);
                }
            }
            return _this;
        }
        /************************************************************************************************
         *                                                                                              *
         *                                      Local Storage                                           *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Clear localStorage data
         */
        PopBaseService.prototype.clearLocalStorage = function () {
            localStorage.clear();
            this.auth = null;
            this.asset.authTime = 0;
            this.asset.businessId = 0;
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Auth Details                                            *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Remove any user auth relics
         */
        PopBaseService.prototype.clearAuthDetails = function (caller) {
            SetSessionSiteVar('Login.time', 0);
            this.clearLocalStorage();
            sessionStorage.clear();
        };
        /**
         * Clear the time when an auth was last completed
         */
        PopBaseService.prototype.clearAuthTime = function () {
            this.asset.authTime = 0;
            SetSiteVar('Auth.time', 0);
            // localStorage.setItem('Auth-Time', '0');
        };
        /**
         * Return the entire Auth Object
         */
        PopBaseService.prototype.getAuthDetails = function () {
            if (!IsObject(this.auth, true)) {
                var authStorage = GetAuthStorage();
                this.auth = authStorage.auth;
            }
            return this.auth;
        };
        /**
         * Extract the prime user/ root out of the auth details
         */
        PopBaseService.prototype.getAuthPrimeUser = function () {
            if (IsObject(this.auth, ['id', 'email'])) {
                return {
                    id: this.auth.id,
                    name: this.auth.name,
                    first_name: this.auth.first_name,
                    last_name: this.auth.last_name,
                    initials: this.auth.initials,
                    avatarLink: StorageGetter(this.auth, ['profile', 'avatar_link'], null),
                    email: this.auth.email,
                    business_fk: this.auth.business_fk,
                };
            }
            return null;
        };
        /**
         * Return the time when the last authentication took place
         */
        PopBaseService.prototype.getAuthTime = function () {
            return this.asset.authTime;
        };
        /**
         * Bearer token helper
         * The api will expect an auth token for any authenticated routes
         */
        PopBaseService.prototype.getBearerToken = function () {
            if (IsObject(this.auth, ['token'])) {
                return 'Bearer ' + (this.auth.token ? this.auth.token : '123');
            }
            else {
                return '';
            }
        };
        /**
         * Get all the Business Users that belong to the auth user
         */
        PopBaseService.prototype.getAuthUsers = function () {
            return JSON.parse(JSON.stringify(this.auth.users));
        };
        /**
         * Get the current business id that is in user
         */
        PopBaseService.prototype.getCurrentBusinessId = function () {
            return this.asset.businessId;
        };
        /**
         * Return the business details for the current business
         */
        PopBaseService.prototype.getCurrentBusinessUserId = function () {
            var businessId = this.getCurrentBusinessId();
            if (IsObject(this.auth.users, true) && businessId in this.auth.users) {
                return this.auth.users[businessId].id;
            }
            return 0;
        };
        /**
         * Determine if the last auth has expired
         */
        PopBaseService.prototype.isAuthExpired = function () {
            var expired = false;
            if (!(IsObject(this.auth, ['token']))) {
                return true;
            }
            var currentTime = Math.round(new Date().getTime() / 1000);
            if (!this.asset.authTime || typeof this.auth.created_at == 'undefined' || !this.getBearerToken()) {
                expired = true;
            }
            else if (currentTime > ((+this.auth.created_at) + (this.auth.max_ttl * 60))) { // Check if token is passed max_ttl
                expired = true;
                return true;
            }
            else if (currentTime > (this.asset.authTime + (this.auth.max_ttl * 60))) { // Check if token has timed out.
                expired = true;
            }
            return expired;
        };
        /**
         * Stores a timestamp to track when the last authentication took place
         */
        PopBaseService.prototype.setAuthTime = function () {
            // This gets set when there is a new token. It will calculate this and the tokendetails TTL / timeout to decide if the token
            // is expired without having to make an ajax call to know.
            this.asset.authTime = Math.round(new Date().getTime() / 1000);
            // localStorage.setItem('Auth-Time', this.asset.authTime.toString());
            SetSiteVar('Auth.time', this.asset.authTime.toString());
        };
        /**
         * Exposes the Auth Token at the root level of localStorage for convenience
         * @param token
         */
        PopBaseService.prototype.setAuthToken = function (authToken) {
            // localStorage.setItem('Auth-Token', authToken);
            SetSiteVar('Auth.token', authToken);
        };
        /**
         * Store the auth object that the auth/user login route return to the app
         * @param authDetails
         */
        PopBaseService.prototype.setAuthDetails = function (auth) {
            if (IsObject(auth, ['id', 'token'])) {
                var existingAuthDetailsDetails = this.auth;
                if (existingAuthDetailsDetails && +existingAuthDetailsDetails.id && +existingAuthDetailsDetails.id !== +auth.id) {
                    // this.clearAuthDetails('setAuthDetails');
                }
                this.auth = auth;
                this.setAuthToken(this.auth.token);
                this.setAuthPopcxToken(this.auth.x_popcx_token);
                this.setAuthTime();
                SetPopAuth({
                    id: auth.id,
                    name: auth.name,
                    first_name: auth.first_name,
                    last_name: auth.last_name,
                    initials: auth.initials,
                    email: auth.email,
                    email_verified_at: auth.email_verified_at,
                    avatarLink: StorageGetter(this.auth, ['profile', 'avatar_link'], null),
                    username: auth.username,
                    created_at: auth.created_at
                });
                SetSiteVar('Auth.details', auth);
            }
        };
        /**
         * Exposes the Auth User at the root level of localStorage for convenience
         * @param token
         */
        PopBaseService.prototype.setAuthUser = function (primeUser) {
            if (IsObject(primeUser, true)) {
                SetSiteVar('Auth.User', primeUser);
            }
        };
        /**
         * Exposes the Auth Popcx Token at the root level of localStorage for convenience
         * @param token
         */
        PopBaseService.prototype.setAuthPopcxToken = function (token) {
            // localStorage.setItem('Auth-Popcx-Token', token);
            SetSiteVar('Auth.popcx-token', token);
        };
        /**
         * Track the current business that has been selected
         * @param id
         */
        PopBaseService.prototype.setCurrentBusinessId = function (id) {
            this.asset.businessId = id;
            SetSessionSiteVar('Business.current', id);
            SetSiteVar('Business.last', id);
        };
        /**
         * Get all the Businesses that the auth user has access to
         */
        PopBaseService.prototype.getAuthBusinesses = function () {
            return IsObject(this.auth, ['token']) && IsObject(this.auth.businesses) ? JSON.parse(JSON.stringify(this.auth.businesses)) : null;
        };
        /**
         * Switch to a different business
         * @param id
         */
        PopBaseService.prototype.switchBusiness = function (id) {
            this.setCurrentBusinessId(id);
            this.redirect();
        };
        /**
         * Change to a different app with the current business
         * @param appPath
         */
        PopBaseService.prototype.switchApps = function (appPath) {
            window.location.href = window.location.origin + appPath;
        };
        /**
         * Change to a different app with the current business
         * @param appPath
         */
        PopBaseService.prototype.checkAppAccess = function (appName, redirect) {
            if (redirect === void 0) { redirect = false; }
            if (IsObject(exports.PopBusiness, ['id', 'apps']) && IsObject(exports.PopBusiness.apps, true)) {
                if (IsString(appName, true) && appName in exports.PopBusiness.apps) {
                    return true;
                }
            }
            if (redirect && !i0.isDevMode()) {
                if (IsString(exports.PopHref) && exports.PopHref !== 'home')
                    window.location.href = window.location.protocol + '//' + window.location.host + '/home';
            }
            return false;
        };
        /**
         * Determine the route after a user has authenticated
         */
        PopBaseService.prototype.redirect = function () {
            var auth = this.getAuthDetails();
            var url = '';
            // First check if the redirect url was set. This is for if you want to over-ride and take priority over other redirects.
            url = GetSiteVar('App.redirect');
            if (url)
                SetSiteVar('App.redirect', '');
            // Check if the site was redirected due to a 401.
            if (!url) {
                url = GetSiteVar('App.redirectAfterLogin');
                if (url)
                    SetSiteVar('App.redirectAfterLogin', '');
            }
            if (!auth.email_verified_at) {
                url = window.location.origin + '/user/confirm-email-resend';
            }
            // Check if there is a current business unit for this onSession and a corresponding default page.
            if (!url) {
                // const currentBuId = this.asset.businessId;
                // If their current B.U. is no longer available then make sure the settings are zero'd out.
                if (this.asset.businessId && IsObject(auth.businesses, true) && typeof auth.businesses[this.asset.businessId] === 'undefined') {
                    this.setCurrentBusinessId(0);
                }
                else if (this.asset.businessId && IsObject(auth.businesses, true) && typeof auth.businesses[this.asset.businessId] !== 'undefined') {
                    if (auth.businesses[this.asset.businessId].homepage) {
                        var business = auth.businesses[this.asset.businessId];
                        url = window.location.origin + business.homepage;
                    }
                    else {
                        if (i0.isDevMode()) {
                            url = window.location.origin + '/';
                        }
                        else {
                            url = window.location.origin + '/home';
                        }
                    }
                }
            }
            // Check if there is a home page set for the default business unit.
            if (!url) {
                if (IsObject(auth.businesses, true)) {
                    if (auth.business_fk && typeof auth.businesses[auth.business_fk] !== 'undefined') {
                        if (auth.businesses[auth.business_fk].homepage) {
                            url = window.location.origin + auth.businesses[auth.business_fk].homepage;
                        }
                        else {
                            if (i0.isDevMode()) {
                                url = window.location.origin + '/' + (IsString(exports.PopHref, true) ? exports.PopHref : '');
                            }
                            else {
                                url = window.location.origin + '/home';
                            }
                        }
                    }
                }
            }
            if (url) {
                window.location.href = url;
            }
            else {
                // If still no url then redirect to the users profile page.
                if (i0.isDevMode()) {
                    window.location.href = window.location.origin + '/';
                }
                else {
                    window.location.href = window.location.origin + '/home';
                }
            }
        };
        PopBaseService.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopBaseService;
    }(PopExtendService));
    PopBaseService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopBaseService_Factory() { return new PopBaseService(); }, token: PopBaseService, providedIn: "root" });
    PopBaseService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopBaseService.ctorParameters = function () { return []; };

    var PopMenuService = /** @class */ (function () {
        function PopMenuService() {
            this.srv = {
                base: exports.ServiceInjector.get(PopBaseService),
            };
        }
        PopMenuService.prototype.isAuthenticated = function () {
            return !this.srv.base.isAuthExpired();
        };
        PopMenuService.prototype.changeBusiness = function (id) {
            this.srv.base.switchBusiness(id);
        };
        return PopMenuService;
    }());
    PopMenuService.decorators = [
        { type: i0.Injectable }
    ];

    var PopCredentialService = /** @class */ (function () {
        function PopCredentialService(base, backend, APP_GLOBAL, env) {
            this.base = base;
            this.backend = backend;
            this.APP_GLOBAL = APP_GLOBAL;
            this.env = env;
            this.name = 'PopCredentialService';
            if (!this.baseUrl) {
                var envUrl = i0.isDevMode() && this.env && this.env.apiBaseUrl ? this.env.apiBaseUrl : null;
                this.baseUrl = (envUrl ? envUrl : window.location.protocol + "//api." + window.location.host);
            }
            this.http = new i1$1.HttpClient(this.backend); // bypass the default interceptors
        }
        /**
         * Main login function hit after they click the Login button.
         *
         * @param credentials
         * @returns {Observable<void>}
         */
        PopCredentialService.prototype.authenticate = function (credentials) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.base.clearAuthDetails(_this.name + ":authenticate");
                _this.http.post(_this.baseUrl + "/auth/login", credentials).pipe(operators.map(function (auth) {
                    auth = auth.data ? auth.data : auth;
                    auth = _this._transformAuthResponse(auth);
                    // this.base.setAuthDetails( auth );
                    SetSiteVar('Legacy.remember_me', credentials.remember_me);
                    SetSiteVar('Legacy.remembered_username', (credentials.remember_me ? credentials.username : null));
                    return auth;
                })).subscribe(function (auth) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this._attachBusinesses(auth)];
                            case 1:
                                auth = _a.sent();
                                this.base.setAuthDetails(auth);
                                SetSessionSiteVar('Login.time', new Date().getTime());
                                return [2 /*return*/, resolve(auth)];
                        }
                    });
                }); }, function (err) {
                    return resolve(GetHttpErrorMsg(err));
                });
            });
        };
        /**
         * Reset login function hit after password reset
         *
         * @param credentials
         * @returns {Observable<void>}
         */
        PopCredentialService.prototype.reset = function (credentials, businessId) {
            var _this = this;
            if (businessId === void 0) { businessId = 0; }
            return new Promise(function (resolve, reject) {
                _this.base.clearLocalStorage();
                _this.http.post(_this.baseUrl + "/auth/password/reset", credentials).pipe(operators.map(function (auth) {
                    auth = auth.data ? auth.data : auth;
                    auth = _this._transformAuthResponse(auth);
                    _this.base.setAuthDetails(auth);
                    return auth;
                })).subscribe(function (auth) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(IsObject(auth), ['token', 'id'])) return [3 /*break*/, 2];
                                auth = auth.data ? auth.data : auth;
                                return [4 /*yield*/, this._attachBusinesses(auth, businessId)];
                            case 1:
                                auth = _a.sent();
                                this.base.setAuthDetails(auth);
                                return [2 /*return*/, resolve(auth)];
                            case 2: return [2 /*return*/, reject(auth)];
                        }
                    });
                }); }, function (err) {
                    return resolve(GetHttpErrorMsg(err));
                });
            });
        };
        PopCredentialService.prototype.update = function (auth, businessId) {
            var _this = this;
            if (businessId === void 0) { businessId = 0; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.base.clearLocalStorage();
                            auth = this._transformAuthResponse(auth);
                            return [4 /*yield*/, this._attachBusinesses(auth, businessId)];
                        case 1:
                            auth = _a.sent();
                            this.base.setAuthDetails(auth);
                            return [2 /*return*/, resolve(auth)];
                    }
                });
            }); });
        };
        PopCredentialService.prototype.clear = function (storage) {
            var _this = this;
            if (storage === void 0) { storage = true; }
            return exports.PopRequest.doPost("auth/logout", {}).pipe(operators.map(function (res) {
                res = res.data ? res.data : res;
                if (storage) {
                    _this.base.clearAuthDetails(_this.name + ":clear");
                }
                return res;
            }));
        };
        PopCredentialService.prototype.clearAll = function (storage) {
            var _this = this;
            if (storage === void 0) { storage = true; }
            return exports.PopRequest.doPost("auth/logout", { logoutAll: true }).pipe(operators.map(function (res) {
                res = res.data ? res.data : res;
                if (storage) {
                    SetPopAuth(null);
                    SetPopBusiness(null);
                    _this.base.clearAuthDetails(_this.name + ":clearAll");
                }
                return res;
            }));
        };
        /**
         * Verify the current auth storage
         *
         * @param credentials
         * @returns {Observable<void>}
         */
        PopCredentialService.prototype.verify = function (businessId) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var checkedPermission, initRequests;
                var _this = this;
                return __generator(this, function (_a) {
                    if (!businessId || this.base.isAuthExpired()) {
                        return [2 /*return*/, resolve(null)];
                    }
                    checkedPermission = false;
                    initRequests = [
                        exports.PopRequest.doGet("/auth/user").pipe(operators.map(function (auth) {
                            auth = auth.data ? auth.data : auth;
                            auth = _this._transformAuthResponse(auth);
                            if (+businessId) {
                                var tmp = IsObject(auth.businesses[businessId], true) ? auth.businesses[businessId] : null;
                                auth.businesses = {};
                                if (tmp) {
                                    auth.businesses[businessId] = tmp;
                                }
                                tmp = IsObject(auth.users[businessId], true) ? auth.users[businessId] : null;
                                auth.users = {};
                                if (tmp) {
                                    auth.users[businessId] = tmp;
                                }
                            }
                            return auth;
                        }))
                    ];
                    if (IsObject(exports.PopUser, ['id']) && this.APP_GLOBAL.isPermissions()) {
                        checkedPermission = true;
                        initRequests.push(exports.PopRequest.doPatch("/businesses/" + businessId + "/users/" + exports.PopUser.id + "/permissions", {
                            with: ''
                        }, 1, true));
                    }
                    rxjs.forkJoin(initRequests).subscribe(function (results) {
                        var auth = results[0];
                        var existing = _this.base.getAuthDetails();
                        existing.users = Object.assign(Object.assign({}, existing.users), auth.users);
                        existing.businesses = Object.assign(Object.assign({}, existing.businesses), auth.businesses);
                        if (checkedPermission) {
                            var user = GetHttpResult(results[1]);
                            if (businessId in existing.users) {
                                existing.users[businessId].permissions = user.permissions;
                            }
                        }
                        if (+businessId) {
                            rxjs.forkJoin([
                                exports.PopRequest.doGet("/businesses/" + businessId, { with: 'apps' }, 1, false, businessId).pipe(operators.catchError(function (error) { return rxjs.of(error); }), operators.map(function (res) {
                                    if (res.data)
                                        res = res.data;
                                    if (IsArray(res)) {
                                        return res.pop();
                                    }
                                    else {
                                        return res;
                                    }
                                })),
                                exports.PopRequest.doGet("/apps/user/" + auth.users[businessId].id + "/settings", {}, 1, false, businessId).pipe(operators.catchError(function (error) { return rxjs.of(error); }), operators.map(function (res) {
                                    if (res.data)
                                        res = res.data;
                                    return res;
                                })),
                            ]).subscribe(function (data) {
                                if (!(IsObject(existing.businesses[businessId], true)) || !(existing.users[businessId])) {
                                    return resolve(null);
                                }
                                existing.businesses[businessId] = data[0];
                                existing.users[businessId].setting = {};
                                if (IsArray(data[1], true)) {
                                    data[1].map(function (item) {
                                        if (IsObject(item, true)) {
                                            existing.users[businessId].setting[item.name] = item.setting.value ? item.setting.value : item.defaultValue;
                                        }
                                    });
                                }
                                // existing.users[businessId] = auth.users[businessId];
                                // existing.businesses[businessId] = auth.businesses[businessId];
                                _this.base.setAuthDetails(existing);
                                return resolve(existing);
                            }, function () {
                                return resolve(existing);
                            });
                        }
                        else {
                            _this.base.setAuthDetails(existing);
                            return resolve(existing);
                        }
                    }, function () {
                        return resolve(null);
                    });
                    return [2 /*return*/];
                });
            }); });
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopCredentialService.prototype._attachBusinesses = function (auth, defaultBusinessId) {
            var _this = this;
            if (defaultBusinessId === void 0) { defaultBusinessId = 0; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var businessIds;
                var _this = this;
                return __generator(this, function (_a) {
                    businessIds = Object.keys(auth.users).map(function (id) { return +id; });
                    if (!defaultBusinessId)
                        defaultBusinessId = +auth.business_fk && businessIds.includes(+auth.business_fk) ? +auth.business_fk : (IsArray(businessIds, true) ? +businessIds[0] : 0);
                    if (+defaultBusinessId > 0) {
                        this.base.setCurrentBusinessId(defaultBusinessId);
                        this.http.get(this.baseUrl + "/businesses", {
                            headers: new i1$1.HttpHeaders({
                                'Authorization': "Bearer " + auth.token,
                                'X-Popcx-Business': defaultBusinessId + '',
                                'Content-Type': 'application/json',
                                'Api-Version': '1'
                            }),
                            params: this._setParams({
                                id: businessIds
                            })
                        }).subscribe(function (res) {
                            var businesses = res.data ? res.data : res;
                            auth.businesses = {};
                            if (IsArray(businesses, true)) {
                                businesses.map(function (business) {
                                    auth.businesses[business.id] = business;
                                });
                            }
                            // Check if this app was public facing, and turn it off
                            if (_this.APP_GLOBAL.isOpen())
                                _this.APP_GLOBAL.setOpen(false);
                            return resolve(auth);
                        });
                    }
                    else {
                        auth.businesses = {};
                        auth.users = {};
                        return [2 /*return*/, resolve(auth)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        PopCredentialService.prototype._setParams = function (body) {
            var e_1, _a;
            var params = new i1$1.HttpParams();
            var _loop_1 = function (key) {
                if (body[key]) {
                    if (body[key] instanceof Array) {
                        body[key].forEach(function (item) {
                            params = params.append(key.toString() + "[]", item);
                        });
                    }
                    else {
                        params = params.append(key.toString(), body[key]);
                    }
                }
            };
            try {
                for (var _b = __values(Object.keys(body)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _loop_1(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return params;
        };
        PopCredentialService.prototype._transformAuthResponse = function (auth) {
            var existingAuth = this.base.getAuthDetails();
            if (!(IsObject(auth.businesses))) {
                auth.businesses = {};
            }
            if (IsArray(auth.users, true)) {
                auth.users.map(function (user) {
                    auth.businesses[user.business_id] = user.business;
                    delete user.business;
                });
                auth.users = ArrayKeyBy(auth.users, 'business_id');
            }
            if (IsString(auth.first_name, true) && IsString(auth.last_name, true)) {
                auth.initials = GetStringAbbrv(auth.first_name + " " + auth.last_name);
            }
            else if (IsString(auth.name, true)) {
                auth.initials = GetStringAbbrv(auth.name);
            }
            else if (auth.first_name || auth.last_name) {
                if (auth.first_name) {
                    auth.initials = GetStringAbbrv(auth.first_name);
                }
                else {
                    auth.initials = GetStringAbbrv(auth.last_name);
                }
            }
            else {
                auth.initials = '?';
            }
            if (IsDefined(auth.created_at))
                auth.created_at = Math.floor((new Date(auth.created_at)).getTime() / 1000);
            if (IsDefined(auth.last_login_at))
                auth.last_login_at = Math.floor(new Date(auth.last_login_at).getTime() / 1000);
            if (IsString(auth.email_verified_at, true))
                auth.email_verified_at = Math.floor(new Date(auth.email_verified_at).getTime() / 1000);
            if (IsDefined(auth.token_created_at) && IsUndefined(auth.created_at))
                auth.created_at = auth.token_created_at;
            if (IsUndefined(auth.max_ttl))
                auth.max_ttl = 720;
            if (!(IsString(auth.token, true)) && IsObject(existingAuth, ['token']))
                auth.token = existingAuth.token;
            if (IsDefined(existingAuth.created_at))
                auth.created_at = existingAuth.created_at;
            return auth;
        };
        return PopCredentialService;
    }());
    PopCredentialService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopCredentialService_Factory() { return new PopCredentialService(i0__namespace.ɵɵinject(PopBaseService), i0__namespace.ɵɵinject(i1__namespace.HttpBackend), i0__namespace.ɵɵinject("APP_GLOBAL"), i0__namespace.ɵɵinject("env")); }, token: PopCredentialService, providedIn: "root" });
    PopCredentialService.decorators = [
        { type: i0.Injectable },
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopCredentialService.ctorParameters = function () { return [
        { type: PopBaseService },
        { type: i1$1.HttpBackend },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['env',] }] }
    ]; };

    var TabConfig = /** @class */ (function () {
        function TabConfig(params) {
            var _this = this;
            this.hidden = false;
            this.path = '';
            this.scheme = false;
            this.overhead = 0;
            this.sections = null;
            this.syncPositions = false;
            this.requireRefresh = false;
            this.when = null;
            this.wrap = true;
            this.columnWrap = true;
            this.groups = {};
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.name)
                this.name = this.id.replace(/_/g, ' ').replace(/(?:^|\s)\S/g, function (a) {
                    return a.toUpperCase();
                });
            if (!this.path)
                this.path = this.id.replace(/_/g, '-').toLowerCase();
            if (!this.metadata)
                this.metadata = {};
            if (!this.syncPositionMap)
                this.syncPositionMap = {};
            if (!this.positions)
                this.positions = { 1: { flex: 1 } };
            Object.keys(this.positions).map(function (position) {
                if (!_this.positions[position].min)
                    _this.positions[position].multiple_min = null;
                if (!_this.positions[position].max)
                    _this.positions[position].multiple_max = null;
                if (!_this.positions[position].flex && _this.positions[position].cols)
                    _this.positions[position].flex = _this.positions[position].cols;
                delete _this.positions[position].cols;
            });
        }
        return TabConfig;
    }());
    var TabMenuConfig = /** @class */ (function () {
        function TabMenuConfig(params) {
            this.name = '';
            this.goBack = true;
            this.tabs = [];
            this.buttons = [];
            this.portal = false;
            this.metadata = {};
            this.loaded = false;
            this.loading = false;
            if (params)
                for (var i in params)
                    this[i] = params[i];
        }
        return TabMenuConfig;
    }());

    var SideBySideConfig = /** @class */ (function () {
        function SideBySideConfig(config) {
            this.name = 'name';
            this.bubble = false;
            this.hasLabelRow = false;
            this.hasFilterRow = false;
            this.hasHeader = false;
            this.assigned = []; // List of item ids of assigned items
            this.assignAll = false;
            this.assignedLabel = '';
            this.bucketLimit = 0;
            this.disabled = false;
            this.displayCircleID = true;
            this.displayHelper = true;
            this.displayTitle = true;
            this.facade = false;
            this.facadeEvent = false;
            this.optionsLabel = '';
            this.optionHtml = 'label';
            this.filter = true;
            this.filterBoth = false;
            this.route = '';
            this.metadata = null;
            this.options = { values: [] }; // List of all available items
            this.removeAll = false;
            this.display = '';
            this.patch = null;
            for (var i in config)
                this[i] = config[i];
            if (!this.patch)
                this.patch = {};
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (!this.patch.field)
                this.patch.field = 'option';
            if (!this.patch.assignMethod)
                this.patch.assignMethod = 'POST';
            if (!this.patch.removeMethod)
                this.patch.removeMethod = 'DELETE';
            if (!this.patch.businessId)
                this.patch.businessId = 0;
            if (!this.metadata)
                this.metadata = {};
            this.hasHeader = this.display && this.displayTitle;
            this.hasLabelRow = this.assignAll || this.removeAll || this.optionsLabel || this.assignedLabel ? true : false;
            this.hasFilterRow = this.filter || this.filterBoth ? true : false;
            if (this.route)
                this.optionHtml = 'route';
            if (this.displayHelper && !this.helpText)
                this.helpText = 'You have no ' + (this.display ? this.display.toLowerCase() : 'options');
            this.options = JSON.parse(JSON.stringify(this.options)); // make as deep copy of options so that options reference can be used elsewhere
            if (this.displayHelper && !this.helpTextRight)
                this.helpTextRight = ' No ' + (this.display ? this.display.toLowerCase() + ' available ' : 'data available ');
            this.options = JSON.parse(JSON.stringify(this.options)); // make as deep copy of options so that options reference can be used elsewhere
            if (this.sort && this.options.values.length > 1) {
                if (typeof this.options[0].sort_order !== 'undefined') {
                    this.options.values.sort(function (a, b) {
                        if (a.sort_order < b.sort_order)
                            return -1;
                        if (a.sort_order > b.sort_order)
                            return 1;
                        return 0;
                    });
                }
                else {
                    this.options.values.sort(function (a, b) {
                        if (a.name < b.name)
                            return -1;
                        if (a.name > b.name)
                            return 1;
                        return 0;
                    });
                }
            }
        }
        return SideBySideConfig;
    }());

    var SelectConfig = /** @class */ (function () {
        function SelectConfig(params) {
            this.bubble = false;
            this.disabled = false;
            this.displayErrors = true;
            this.facade = false;
            this.helpText = '';
            this.height = 240;
            this.label = '';
            this.message = '';
            this.mode = 'select';
            this.minimal = false;
            this.name = 'name';
            this.noInitialValue = false;
            this.options = { values: [] };
            this.readonly = false;
            this.showTooltip = false;
            this.sort = false;
            this.tooltip = '';
            this.value = null;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (this.sort && this.options.values.length > 1) {
                if (typeof this.options.values[0].sort_order !== 'undefined') {
                    this.options.values.sort(function (a, b) {
                        if (a.sort_order < b.sort_order)
                            return -1;
                        if (a.sort_order > b.sort_order)
                            return 1;
                        return 0;
                    });
                }
                else {
                    this.options.values.sort(function (a, b) {
                        if (a.name < b.name)
                            return -1;
                        if (a.name > b.name)
                            return 1;
                        return 0;
                    });
                }
            }
            if (this.options.empty)
                this.options.values.unshift({ value: this.options.empty.value, name: this.options.empty.name });
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (!this.disabled)
                this.disabled = false;
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.noInitialValue)
                this.value = '';
            if (!this.control)
                this.setControl();
        }
        SelectConfig.prototype.setControl = function () {
            this.control = (this.disabled
                ? new forms.FormControl({ value: this.value, disabled: true })
                : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return SelectConfig;
    }());

    var SelectMultiConfig = /** @class */ (function () {
        function SelectMultiConfig(params) {
            this.bubble = false;
            this.displayErrors = true;
            this.disabled = false;
            this.facade = false;
            this.helpText = '';
            this.label = '';
            this.message = '';
            this.noInitialValue = false;
            this.name = 'name';
            this.showTooltip = false;
            this.tooltip = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            this.value = Array.isArray(this.value) ? this.value : [];
            if (!this.options)
                this.options = { values: [] };
            if (this.sort && this.options.values.length > 1) {
                if (typeof this.options.values[0].sort_order !== 'undefined') {
                    this.options.values.sort(function (a, b) {
                        if (a.sort_order < b.sort_order)
                            return -1;
                        if (a.sort_order > b.sort_order)
                            return 1;
                        return 0;
                    });
                }
                else {
                    this.options.values.sort(function (a, b) {
                        if (a.name < b.name)
                            return -1;
                        if (a.name > b.name)
                            return 1;
                        return 0;
                    });
                }
            }
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.noInitialValue)
                this.value = [];
            if (!this.control)
                this.setControl();
        }
        SelectMultiConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return SelectMultiConfig;
    }());

    var InputConfig = /** @class */ (function () {
        function InputConfig(params) {
            // Defaults
            this.autofocus = false;
            this.autoselect = false;
            this.bubble = false;
            this.conceal = false;
            this.displayErrors = true;
            this.disabled = false;
            this.dropSpecial = true;
            this.facade = false;
            this.helpText = '';
            this.hintText = '';
            this.hidden = false;
            this.hint = false;
            this.id = '';
            this.label = '';
            this.maxlength = 129;
            this.mask = null;
            this.minimal = false;
            this.message = '';
            this.name = 'name';
            this.noInitialValue = false;
            this.prefix = '';
            this.readonly = false;
            this.showMask = false;
            this.showTooltip = false;
            this.suffix = '';
            this.selectMode = false;
            this.selectModeOptionsDirection = 'down';
            this.specialChars = ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']'];
            this.tooltip = '';
            this.type = 'text';
            this.tabOnEnter = false;
            this.value = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.patch)
                this.patch = { field: '', path: '', duration: 750, disabled: false, businessId: 0 };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (!this.readonly)
                this.readonly = false;
            if (this.selectMode)
                this.readonly = true; // input is mimicking a select box to a trigger  modal functionality
            if (this.noInitialValue)
                this.value = '';
            if (!this.control)
                this.setControl();
            if (this.mask) {
                this.maxlength = null;
                this.hint = false;
                this.pattern = null;
            }
        }
        InputConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return InputConfig;
    }());

    var NumberConfig = /** @class */ (function () {
        // No Defaults
        function NumberConfig(params) {
            // Defaults
            this.bubble = false;
            this.dropSpecial = true;
            this.displayErrors = true;
            this.disabled = false;
            this.facade = false;
            this.helpText = '';
            this.hidden = false;
            this.id = '';
            this.label = '';
            this.message = '';
            this.min = 1;
            this.max = 100;
            this.minimal = false;
            this.mask = '0*';
            this.name = 'name';
            this.noInitialValue = false;
            this.pattern = 'Numeric';
            this.prefix = '';
            this.readonly = false;
            this.showTooltip = false;
            this.specialChars = ['$', ' ', ',', '%'];
            this.showMask = false;
            this.suffix = '';
            this.step = 1;
            this.tooltip = '';
            this.value = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (!this.readonly)
                this.readonly = false;
            if (this.min > this.max)
                this.min = this.max;
            if (this.max < this.min)
                this.max = this.min;
            this.maxlength = String(this.max).length;
            if (this.value) {
                if (this.value < this.min)
                    this.value = this.min;
                if (this.value > this.max)
                    this.value = this.max;
            }
            if (this.noInitialValue)
                this.value = '';
            if (!this.control)
                this.setControl();
        }
        NumberConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return NumberConfig;
    }());

    var DateConfig = /** @class */ (function () {
        function DateConfig(params) {
            // Defaults
            this.type = 'Expanded';
            this.bubble = false;
            this.displayErrors = true;
            this.disabled = false;
            this.filterPredicate = null;
            this.helpText = '';
            this.id = '';
            this.label = '';
            this.min = null;
            this.max = null;
            this.message = '';
            this.name = 'name';
            this.noInitialValue = false;
            this.showTooltip = false;
            this.tooltip = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (this.value)
                this.value = new Date(this.value);
            if (typeof this.min === 'string') {
                this.min = new Date(this.min);
            }
            if (typeof this.max === 'string') {
                this.max = new Date(this.max);
            }
            // if( isNaN( this.max ) === false ){
            //   const maxDate = new Date();
            //   // maxDate.setDate(maxDate.getDate() - 1);
            //   maxDate.setDate( maxDate.getDate() + parseInt( this.max, 10 ) );
            //   this.max = new Date( maxDate );
            // }
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.noInitialValue)
                this.value = '';
            if (!this.control)
                this.setControl();
        }
        DateConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return DateConfig;
    }());

    var TimeConfig = /** @class */ (function () {
        // No Defaults
        function TimeConfig(params) {
            // Defaults
            this.bubble = false;
            this.displayErrors = true;
            this.disabled = false;
            this.facade = false;
            this.helpText = '';
            this.id = '';
            this.label = '';
            this.message = '';
            this.name = 'name';
            this.noInitialValue = false;
            this.showTooltip = false;
            this.readonly = false;
            this.tooltip = '';
            this.time = 12;
            this.interval = 15;
            this.value = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (!this.readonly)
                this.readonly = false;
            if (this.noInitialValue)
                this.value = '';
            if (!this.control)
                this.setControl();
        }
        TimeConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return TimeConfig;
    }());

    var CheckboxConfig = /** @class */ (function () {
        function CheckboxConfig(params) {
            this.align = 'right';
            this.bubble = false;
            this.disabled = false;
            this.displayErrors = true;
            this.facade = false;
            this.helpText = '';
            this.id = '';
            this.label = '';
            this.labelPosition = 'after';
            this.message = '';
            this.name = 'name';
            this.noInitialValue = false;
            this.options = { values: [] };
            this.tabOnEnter = false;
            this.toolTipDirection = 'right';
            this.textOverflow = 'wrap';
            this.value = false;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (this.label) {
                this.toolTipDirection = this.labelPosition === 'after' ? 'right' : 'left';
            }
            else {
                this.toolTipDirection = 'above';
            }
            if (['left', 'center', 'right',].indexOf(this.align) === -1)
                this.align = 'center';
            if (!this.patch)
                this.patch = { field: '', path: '', disabled: false, businessId: 0 };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.noInitialValue)
                this.value = null;
            if (!this.control)
                this.setControl();
        }
        CheckboxConfig.prototype.setControl = function () {
            this.control = this.disabled === true ? new forms.FormControl({
                value: this.value,
                disabled: this.disabled
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : []));
        };
        return CheckboxConfig;
    }());

    var SwitchConfig = /** @class */ (function () {
        function SwitchConfig(params) {
            this.bubble = false;
            this.disabled = false;
            this.displayErrors = true;
            this.facade = false;
            this.helpText = '';
            this.label = '';
            this.labelPosition = 'after';
            this.message = '';
            this.noInitialValue = false;
            this.name = 'name';
            this.padding = '0';
            this.toolTipDirection = 'right';
            this.tabOnEnter = false;
            this.textOverflow = 'wrap';
            this.value = false;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            this.value = +this.value === 1 ? true : false;
            this.labelPosition = ['before', 'after'].indexOf(this.labelPosition) >= 0 ? this.labelPosition : 'after';
            if (this.label) {
                if (this.labelPosition === 'after') {
                    this.toolTipDirection = 'right';
                }
            }
            else {
                this.toolTipDirection = 'above';
            }
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (!this.disabled)
                this.disabled = false;
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (!this.control)
                this.setControl();
        }
        SwitchConfig.prototype.setControl = function () {
            this.control = this.disabled === true ? new forms.FormControl({
                value: this.value,
                disabled: this.disabled
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : []));
        };
        return SwitchConfig;
    }());

    var MinMaxConfig = /** @class */ (function () {
        // No Defaults
        function MinMaxConfig(params) {
            // Defaults
            this.allowNegative = false;
            this.bubble = false;
            this.disabled = false;
            this.facade = false;
            this.helpText = '';
            this.id = '';
            this.label = 'Min/Max';
            this.limit = 100;
            this.minValue = 1;
            this.maxValue = 10;
            this.min = 1;
            this.max = 10;
            this.minColumn = 'min';
            this.maxColumn = 'max';
            this.minReadonly = false;
            this.maxReadonly = false;
            this.minRequired = false;
            this.maxRequired = false;
            this.minDefaultValue = 1;
            this.maxDefaultValue = 1;
            this.minLabel = 'Minimum';
            this.maxLabel = 'Maximum';
            this.message = '';
            this.showTooltip = false;
            this.tooltip = '';
            this.value = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            // const maxOptions = [];
            // let maxLimit = this.limit;
            // while( maxLimit ){
            //   maxOptions.push({ value: maxLimit, name: maxLimit, sort: maxLimit });
            //   maxLimit--;
            // }
            if (this.limit && this.maxValue > this.limit)
                this.maxValue = +this.limit;
            this.isMaxConfig = new SwitchConfig({
                label: this.maxLabel,
                value: +this.maxValue ? true : this.maxRequired ? true : false,
                disabled: this.maxRequired ? true : false,
                bubble: true,
                facade: false,
                labelPosition: 'after',
            });
            this.maxConfig = new NumberConfig({
                label: null,
                value: +this.maxValue,
                min: this.min,
                max: this.max,
                readonly: this.maxReadonly,
                facade: true,
                minimal: true,
                bubble: true,
            });
            if (this.minValue > this.maxValue)
                this.minValue = this.maxValue;
            // let minLimit = this.maxValue;
            // const minOptions = [];
            // while( minLimit ){
            //   minOptions.push({ value: minLimit, name: minLimit, sort: minLimit });
            //   minLimit--;
            // }
            this.isMinConfig = new SwitchConfig({
                label: this.minLabel,
                value: +this.minValue ? true : this.minRequired ? true : false,
                disabled: this.minRequired ? true : false,
                bubble: true,
                facade: false,
                labelPosition: 'after',
            });
            this.minConfig = new NumberConfig({
                label: null,
                value: +this.minValue,
                min: this.min,
                max: this.max,
                readonly: this.minReadonly,
                facade: true,
                minimal: true,
                bubble: true,
            });
            if (!this.control)
                this.setControl();
        }
        MinMaxConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: { min: this.minValue, max: this.maxValue },
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return MinMaxConfig;
    }());

    var RadioConfig = /** @class */ (function () {
        function RadioConfig(params) {
            this.bubble = false;
            this.disabled = false;
            this.displayErrors = true;
            this.facade = false;
            this.helpText = '';
            this.label = '';
            this.labelPosition = 'above';
            this.layout = 'row';
            this.message = '';
            this.noInitialValue = false;
            this.name = 'name';
            this.reset = false;
            this.sort = false;
            this.value = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (this.sort && this.options.values.length > 1) {
                if (typeof this.options.values[0].sort_order !== 'undefined') {
                    this.options.values.sort(function (a, b) {
                        if (a.sort_order < b.sort_order)
                            return -1;
                        if (a.sort_order > b.sort_order)
                            return 1;
                        return 0;
                    });
                }
                else {
                    this.options.values.sort(function (a, b) {
                        if (a.name < b.name)
                            return -1;
                        if (a.name > b.name)
                            return 1;
                        return 0;
                    });
                }
            }
            if (this.layout !== 'column')
                this.layout = 'row';
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (!this.disabled)
                this.disabled = false;
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.noInitialValue)
                this.value = '';
            if (!this.control)
                this.setControl();
        }
        RadioConfig.prototype.setControl = function () {
            if (!this.control) {
                this.control = (this.disabled === true
                    ? new forms.FormControl({
                        value: this.value,
                        disabled: this.disabled
                    })
                    : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
            }
        };
        return RadioConfig;
    }());

    var TextareaConfig = /** @class */ (function () {
        function TextareaConfig(params) {
            this.autoSize = false;
            this.bubble = false;
            this._disabled = false;
            this.displayErrors = true;
            this.facade = false;
            this.helpText = '';
            this.height = 0;
            this.maxHeight = null;
            this.hint = false;
            this.message = '';
            this.maxlength = 1024;
            this.name = 'name';
            this.noInitialValue = false;
            this.readonly = false;
            this.showTooltip = false;
            this.tabOnEnter = false;
            this.tooltip = '';
            this.value = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            // if( this.height && !isNaN(Number(this.height)) ) this.height = this.height + 'px';
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.noInitialValue)
                this.value = '';
            if (!this.control)
                this.setControl();
        }
        TextareaConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        Object.defineProperty(TextareaConfig.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (value) {
                this._disabled = value;
                if (value === true) {
                    this.control.disable();
                }
                else if (value === false) {
                    this.control.enable();
                }
            },
            enumerable: false,
            configurable: true
        });
        return TextareaConfig;
    }());

    var LabelConfig = /** @class */ (function () {
        function LabelConfig(params) {
            this.bubble = false;
            this.button = false;
            this.border = false;
            this.copyValue = false;
            this.copyLabel = false;
            this.html = 'label';
            this.helpText = '';
            this.iconType = 'mat';
            this.name = 'name';
            this.label = 'Label';
            this.link = false;
            this.subLabel = '';
            this.subValue = '';
            this.tooltip = '';
            this.textOverflow = 'wrap';
            this.truncate = 0;
            this.value = '';
            this.valueButton = false;
            this.valueButtonDisabled = false;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (this.link || this.route)
                this.html = 'link';
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.icon) {
                if (this.icon.length === 1) {
                    this.icon = this.icon.toUpperCase();
                    this.iconType = 'sw';
                }
            }
        }
        LabelConfig.prototype.setControl = function () {
            // meet requirement
        };
        return LabelConfig;
    }());
    var MetadataConfig = /** @class */ (function () {
        function MetadataConfig(name, value) {
            this.bubble = false;
            this.value = '';
            this.name = name;
            this.value = value;
            this.control = new forms.FormControl(value);
        }
        return MetadataConfig;
    }());

    var ButtonConfig = /** @class */ (function () {
        function ButtonConfig(params) {
            this.color = 'default';
            this.bubble = false;
            this.displayErrors = true;
            this.disabled = false;
            this.event = 'click';
            this.helpText = '';
            this.hidden = false;
            this.icon = 'help_outline';
            this.iconColor = 'accent';
            this.id = '';
            this.label = '';
            this.message = '';
            this.name = 'name';
            this.radius = 2;
            this.size = 35;
            this.showTooltip = false;
            this.text = 26;
            this.tooltip = '';
            this.type = 'mat-button';
            this.value = 'Button';
            this.width = null;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.patch)
                this.patch = { field: '', path: '', disabled: false };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.size < 10)
                this.size = 10;
            if (!this.control)
                this.setControl();
        }
        ButtonConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return ButtonConfig;
    }());

    var EmailFieldSetting = {
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
        disabled: {
            name: 'disabled',
            type: 'boolean',
            item: 'address',
            defaultValue: false,
        },
        address_pattern: {
            name: 'address_pattern',
            item: 'address',
            type: 'model',
            model: 'pattern',
            value: 'Email',
        },
        make_primary: {
            name: 'make_primary',
            type: 'fixed',
            defaultValue: false,
        },
        email_primary: {
            name: 'email_primary',
            type: 'trait',
            icon: 'email',
            defaultValue: false,
        },
    };

    var FieldSwitchParamComponent = /** @class */ (function () {
        function FieldSwitchParamComponent() {
            this.events = new i0.EventEmitter();
        }
        FieldSwitchParamComponent.prototype.ngOnInit = function () {
            this.param = new SwitchConfig({
                name: this.config.name,
                label: this.config.label,
                labelPosition: 'after',
                value: IsDefined(this.config.value) ? this.config.value : this.config.defaultValue,
                patch: this.config.patch,
                facade: this.config.facade,
                metadata: this.config.metadata ? this.config.metadata : {}
            });
        };
        return FieldSwitchParamComponent;
    }());
    FieldSwitchParamComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-switch-param',
                    template: "\n    <lib-pop-switch (events)=\"events.emit($event);\" [config]=param></lib-pop-switch>"
                },] }
    ];
    FieldSwitchParamComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var AddressFieldSetting = {
        show_name: null,
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
        primary_can_text: {
            name: 'primary_can_text',
            label: 'Primary Text',
            type: 'primary',
            defaultValue: true,
        },
        primary_can_call: {
            name: 'primary_can_call',
            label: 'Primary Call',
            type: 'primary',
            defaultValue: true,
        },
        make_primary: {
            name: 'make_primary',
            type: 'fixed',
            defaultValue: false,
        },
        shipping_primary: {
            name: 'shipping_primary',
            type: 'trait',
            icon: 'local_shipping',
            defaultValue: false,
        },
        billing_primary: {
            name: 'billing_primary',
            type: 'trait',
            icon: 'local_post_office',
            component: FieldSwitchParamComponent,
            defaultValue: false,
        },
        allow_canada: {
            name: 'allow_canada',
            type: 'boolean',
            item: 'zip',
            defaultValue: false,
        },
        auto_fill: {
            name: 'auto_fill',
            type: 'boolean',
            item: 'zip',
            component: FieldSwitchParamComponent,
            defaultValue: true,
        },
    };

    var PhoneFieldSetting = {
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
        make_primary: {
            name: 'make_primary',
            type: 'fixed',
            defaultValue: false,
        },
        text_primary: {
            name: 'text_primary',
            type: 'trait',
            icon: 'sms',
            defaultValue: false,
        },
        call_primary: {
            name: 'call_primary',
            type: 'trait',
            icon: 'call',
            defaultValue: false,
        },
    };

    var NameFieldSetting = {
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
        disabled: {
            name: 'disabled',
            type: 'boolean',
            defaultValue: false,
        },
        make_primary: {
            name: 'make_primary',
            type: 'fixed',
            defaultValue: false,
        },
        name_primary: {
            name: 'name_primary',
            type: 'trait',
            icon: 'api',
            defaultValue: false,
        },
    };

    var InputFieldSetting = {
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
        transformation: {
            name: 'transformation',
            type: 'transformation',
            item: 'value',
            defaultValue: '',
            options: {
                empty: { value: '', name: '--- Select One ---' },
                values: [
                    { value: 'toTitleCase', name: 'Title Case' },
                    { value: 'toUpperCase', name: 'Upper Case' },
                    { value: 'toLowerCase', name: 'Lower Case' },
                    { value: 'toCurrency', name: 'Currency' },
                    { value: 'date', name: 'Date' },
                ]
            }
        },
    };

    var RadioFieldSetting = {
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
    };

    var SwitchFieldSetting = {
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
    };

    var SelectFieldSetting = {
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
    };

    var CheckboxFieldSetting = {
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
    };

    var TextareaFieldSetting = {
        disabled: {
            name: 'disabled',
            type: 'boolean',
            item: 'address',
            defaultValue: false,
        },
    };

    var SelectFilterConfig = /** @class */ (function () {
        function SelectFilterConfig(params) {
            var _this = this;
            this.allLabel = 'All';
            this.all = false;
            this.allowAll = true;
            this.bubble = false;
            this.displayErrors = true;
            this.collapsed = false;
            this.checkboxPosition = 'before';
            this.defaultMinHeight = 1;
            this.facade = false;
            this.float = false;
            this.filter = true;
            this.helpText = '';
            this.height = 200;
            this.levelGap = 35;
            this.minHeight = 50;
            this.multiple = false;
            this.name = 'name';
            this.noInitialValue = false;
            this.offset = null;
            this.offsetSession = null;
            this.patchGroupFk = false;
            this.strVal = '';
            this.setDefaultValues();
            if (params)
                for (var i in params)
                    this[i] = params[i];
            this.value = this.multiple ? (Array.isArray(this.value) ? this.value : []) : (+this.value ? this.value : null);
            if (this.options.values.length > 1) {
                if (this.sort) {
                    if (typeof this.options.values[0].sort_order !== 'undefined') {
                        this.options.values.sort(function (a, b) {
                            if (a.sort_order < b.sort_order)
                                return -1;
                            if (a.sort_order > b.sort_order)
                                return 1;
                            return 0;
                        });
                    }
                    else {
                        this.options.values.sort(function (a, b) {
                            if (a.name < b.name)
                                return -1;
                            if (a.name > b.name)
                                return 1;
                            return 0;
                        });
                    }
                }
                if (this.options.values[0].group) {
                    this.groups = this.getOptionGroups();
                    if (this.groups.length < 2) {
                        this.allowAll = false;
                    }
                }
                else {
                    var str_1 = [];
                    this.selectedOptions = [];
                    this.options.values.map(function (option) {
                        if (_this.all) {
                            option.selected = true;
                            _this.selectedOptions.push(option.value);
                        }
                        else {
                            option.selected = IsArray(_this.value) ? (_this.value.includes(option.value) ? true : false) : false;
                            if (option.selected) {
                                _this.selectedOptions.push(option.value);
                                str_1.push(option.name);
                            }
                        }
                        option.level = _this.levelGap * option.level;
                    });
                    var defaultGroup = {
                        label: '',
                        options: this.options,
                        groupFk: 0,
                        open: true,
                    };
                    this.groups = [defaultGroup];
                }
            }
            if (!this.levelGap)
                this.levelGap = 35;
            this.defaultHeight = this.height;
            this.all = IsArray(this.value) ? (this.options.values.length === this.value.length) : false;
            if (!this.position)
                this.position = 'below';
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.groups.length === 1)
                this.collapsed = false;
            if (this.noInitialValue)
                this.value = this.multiple ? [] : '';
            if (!this.control)
                this.setControl();
        }
        SelectFilterConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        SelectFilterConfig.prototype.setDefaultValues = function () {
            // this.helpText = '';
            this.label = '';
            this.message = '';
            this.options = { values: [] };
            this.disabled = false;
            this.sort = false;
            // this.showTooltip = false;
            // this.tooltip = '';
        };
        SelectFilterConfig.prototype.getOptionGroups = function () {
            var _this = this;
            this.selectedOptions = [];
            var groups = {};
            var list = [];
            var defaultGroup = this.options.values[0].group;
            this.options.values.map(function (option, index) {
                if (typeof option.level === 'undefined')
                    option.level = 0;
                option.level = _this.levelGap * option.level;
                if (!option.group)
                    option.group = defaultGroup;
                if (option.group in groups === false) {
                    groups[option.group] = {
                        label: option.group,
                        groupFk: option.groupFk,
                        options: {
                            values: [],
                            filtered: []
                        },
                        all: false,
                        open: true,
                        indeterminate: false,
                    };
                    defaultGroup = option.group;
                }
                if (_this.all) {
                    option.selected = true;
                    _this.selectedOptions.push(option.value);
                }
                else {
                    option.selected = IsArray(_this.value) ? _this.value.includes(option.value) : false;
                    if (option.selected) {
                        _this.selectedOptions.push(option.value);
                    }
                }
                groups[option.group].options.values.push(option);
            });
            var count = Object.keys(groups).length;
            Object.keys(groups).map(function (key) {
                var group = groups[key];
                // if(IsArray(group.options.values)){
                //   // ToDo:: allow ordering by a sort order property
                //   group.options.values = group.options.values.sort(DynamicSort('name'));
                // }
                if (count > 1 && _this.collapsed)
                    group.open = false;
                list.push(groups[key]);
            });
            return list;
        };
        SelectFilterConfig.prototype.resetSelection = function () {
            this.selectedOptions = [];
        };
        SelectFilterConfig.prototype.addSelectedOption = function (option) {
            this.selectedOptions.push(option);
        };
        return SelectFilterConfig;
    }());

    // export class CustomValidators{
    function RegexPatterns(pattern) {
        switch (pattern) {
            case 'Alpha':
                return { tester: /^[ a-zA-Z\-\_]+/g, replacer: /[^ a-zA-Z\-\_]+/g };
            case 'AlphaNoSpace':
                return { tester: /^[a-zA-Z]+/g, replacer: /[^a-zA-Z\.\-\_]+/g };
            case 'AlphaNoSpaceOnlyDash':
                return { tester: /^[a-zA-Z]+/g, replacer: /[^a-zA-Z\-]+/g };
            case 'AlphaLowercaseNoSpace':
                return { tester: /^[a-z]+/g, replacer: /[^a-z\.\-\_]+/g };
            case 'AlphaNumeric':
                return { tester: /^[ a-zA-Z0-9\.\-\_]+/g, replacer: /[^ a-zA-Z0-9\.\-\_]+/g };
            case 'AlphaNumericNoUnderscore':
                return { tester: /^[ a-zA-Z0-9\.\-]+/g, replacer: /[^ a-zA-Z0-9\.\-]+/g };
            case 'AlphaNumericNoSpace':
                return { tester: /^[a-zA-Z0-9\.\-\_]+/g, replacer: /[^a-zA-Z0-9\.\-\_]+/g };
            case 'NumericNoSpace':
                return { tester: /^[0-9]+/g, replacer: /[^0-9]+/g };
            case 'NoSpace':
                return { tester: /[^ ]+/g, replacer: /[ ]+/g };
            case 'Default':
                return { tester: /^[a-zA-Z0-9\/\*\?\!\%\@\$\&\,\.\-\(\) ]+/g, replacer: /[^a-zA-Z0-9\/\*\?\!\%\@\$\&\,\.\-\(\) ]+/g };
            case 'NumericWithSpace':
                return { tester: /^[ 0-9]+/g, replacer: /[^ 0-9]+/g };
            case 'Numeric':
                return { tester: /^[0-9]+/g, replacer: /[^0-9]+/g };
            case 'Phone':
                return { tester: /@"^[\d-]+$"/, replacer: /[^\d-]+/g };
            case 'Email':
                return { tester: /^[^@]+@[a-zA-Z0-9._-]+\\.+[a-z._-]+$/, replacer: /[^@a-zA-Z0-9._-]+/g };
            case 'Password':
                return {
                    tester: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}$/,
                    replacer: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}$/
                };
            case 'Username':
                return {
                    tester: /^\S[a-zA-Z0-9._\-]{2,}$/g,
                    replacer: /[^a-zA-Z0-9._\-]+/g
                };
            case 'Url':
                return {
                    tester: /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/,
                    replacer: /[^\\:a-zA-Z0-9._\\-\\/\\?\\=\\#\\&]+/g
                };
            case 'Zip':
                return {
                    tester: /^(\d{5}(-\d{4})?|[A-Z]\d[A-Z] *\d[A-Z]\d)$/,
                    replacer: /[^[0-9][A-Z][A-Z]$]+/g
                };
            // case 'NumericSigned': return '^-?[^0-9]+[0-9]';
            // case 'float': return /[^.0-9]+/g;
            // case 'float': return /^(.(?!\d)|\D)+/;
            // case 'floatSigned': return '^-?[^0-9]+\.?[0-9]';
            default:
                return { tester: /^[a-zA-Z0-9\!\%\@\$\&\.\-\(\) ]+/g, replacer: /[^a-zA-Z0-9\!\%\@\$\&\.\-\(\) ]+/g }; // default
        }
    }
    function PatternValidation(pattern, response, value) {
        var regExPattern = RegexPatterns(pattern);
        if (response === 'test') {
            return regExPattern.tester.test(value.trim());
        }
        else if (response === 'value') {
            if (typeof value !== 'string')
                value = '';
            switch (pattern) {
                case 'Alpha':
                    return value.replace(regExPattern.replacer, '');
                case 'AlphaNoSpace':
                    return value.replace(regExPattern.replacer, '');
                case 'AlphaNoSpaceOnlyDash':
                    return value.replace(regExPattern.replacer, '');
                case 'AlphaLowercaseNoSpace':
                    return value.replace(regExPattern.replacer, '');
                case 'AlphaNumeric':
                    return value.replace(regExPattern.replacer, '');
                case 'AlphaNumericNoUnderscore':
                    return value.replace(regExPattern.replacer, '');
                case 'AlphaNumericNoSpace':
                    return value.replace(regExPattern.replacer, '');
                case 'NoSpace':
                    return value.replace(regExPattern.replacer, '');
                case 'Numeric':
                    return value.replace(regExPattern.replacer, '');
                case 'NumericNoSpace':
                    return value.replace(regExPattern.replacer, '');
                case 'Phone':
                    return value.replace(regExPattern.replacer, '');
                case 'Email':
                    return value.replace(regExPattern.replacer, '');
                case 'Zip':
                    return value.replace(regExPattern.replacer, '');
                case 'Url':
                    return value.replace(regExPattern.replacer, '');
                default:
                    return value.replace(regExPattern.replacer, '');
            }
        }
        else {
            switch (pattern) {
                case 'Alpha':
                    return 'Only letters are allowed.';
                case 'AlphaNoSpace':
                    return 'Only letters are allowed.';
                case 'AlphaLowercaseNoSpace':
                    return 'Only lowercase letters are allowed.';
                case 'AlphaNumeric':
                    return 'Only letters and Numbers are allowed.';
                case 'AlphaNumericNoUnderscore':
                    return 'Only letters and Numbers are allowed.';
                case 'AlphaNumericNoSpace':
                    return 'Only letters and Numbers are allowed.';
                case 'Blacklist':
                    return 'Not allowed';
                case 'NoSpace':
                    return 'Spaces not allowed.';
                case 'Numeric':
                    return 'Only numbers are allowed.';
                case 'NumericNoSpace':
                    return 'Only numbers are allowed.';
                case 'Phone':
                    return 'Invalid Phone.';
                case 'Email':
                    return 'Invalid Email.';
                case 'Password':
                    return 'Must contain a number, letter, special and be > 8 characters.';
                case 'Username':
                    return 'Must contain only A-Z 0-9 . - _';
                case 'Url':
                    return 'Must be a valid url.';
                default:
                    return 'Invalid characters.';
            }
        }
    }
    function ValidateBlacklist(blacklist) {
        return function (control) {
            var e_1, _a;
            var forbidden = false;
            try {
                for (var blacklist_1 = __values(blacklist), blacklist_1_1 = blacklist_1.next(); !blacklist_1_1.done; blacklist_1_1 = blacklist_1.next()) {
                    var s = blacklist_1_1.value;
                    if (s === control.value) {
                        forbidden = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (blacklist_1_1 && !blacklist_1_1.done && (_a = blacklist_1.return)) _a.call(blacklist_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return forbidden ? { alpha: { message: PatternValidation('Blacklist', 'message') } } : null;
        };
    }
    function ValidateAlpha(control) {
        var pattern = RegexPatterns('Alpha');
        if (!pattern.tester.test(control.value.trim()))
            return { alpha: { message: PatternValidation('Alpha', 'message') } };
        return null;
    }
    function ValidateAlphaNoSpace(control) {
        var pattern = RegexPatterns('AlphaNoSpace');
        if (!pattern.tester.test(control.value.trim()))
            return { alpha: { message: PatternValidation('AlphaNoSpace', 'message') } };
        return null;
    }
    function ValidateAlphaLowercaseNoSpace(control) {
        var pattern = RegexPatterns('AlphaLowercaseNoSpace');
        if (!pattern.tester.test(control.value.trim()))
            return { alpha: { message: PatternValidation('AlphaLowercaseNoSpace', 'message') } };
        return null;
    }
    function ValidateAlphaNumeric(control) {
        var pattern = RegexPatterns('AlphaNumeric');
        if (!pattern.tester.test(control.value.trim()))
            return { alpha: { message: PatternValidation('AlphaNumeric', 'message') } };
        return null;
    }
    function ValidateAlphaNumericNoUnderscore(control) {
        var pattern = RegexPatterns('AlphaNumericNoUnderscore');
        if (!pattern.tester.test(control.value.trim()))
            return { alpha: { message: PatternValidation('AlphaNumericNoUnderscore', 'message') } };
        return null;
    }
    function ValidateAlphaNumericNoSpace(control) {
        var pattern = RegexPatterns('AlphaNumericNoSpace');
        if (!pattern.tester.test(control.value.trim()))
            return { alpha: { message: PatternValidation('AlphaNumericNoSpace', 'message') } };
        return null;
    }
    function ValidateNumeric(control) {
        var pattern = RegexPatterns('Numeric');
        if (!pattern.tester.test(control.value.trim()))
            return { numeric: { message: PatternValidation('Numeric', 'message') } };
        return null;
    }
    function ValidateNumericNoSpace(control) {
        var pattern = RegexPatterns('NumericNoSpace');
        if (!pattern.tester.test(control.value))
            return { numeric: { message: PatternValidation('NumericNoSpace', 'message') } };
        return null;
    }
    function ValidateUsername(control) {
        var pattern = RegexPatterns('Username');
        if (!pattern.tester.test(control.value))
            return { username: { message: PatternValidation('Username', 'message') } };
        return null;
    }
    function ValidateEmail(control) {
        var pattern = RegexPatterns('Email');
        if (!pattern.tester.test(control.value))
            return { email: { message: PatternValidation('Email', 'message') } };
        return null;
    }
    function ValidatePassword(control) {
        var pattern = RegexPatterns('Password');
        if (!pattern.tester.test(control.value))
            return { password: { message: PatternValidation('Password', 'message') } };
        return null;
    }
    function ValidatePhone(control) {
        var pattern = RegexPatterns('Phone');
        if (!pattern.tester.test(control.value))
            return { phone: { message: PatternValidation('Phone', 'message') } };
        return null;
    }
    function ValidateZip(control) {
        var pattern = RegexPatterns('Zip');
        if (!pattern.tester.test(control.value))
            return { zip: { message: PatternValidation('Zip', 'message') } };
        return null;
    }
    function ValidateUrl(control) {
        var pattern = RegexPatterns('Url');
        var value = control.value;
        if (IsString(value, true))
            value = value.trim();
        if (!pattern.tester.test(value))
            return { url: { message: PatternValidation('Url', 'message') } };
        return null;
    }
    function MatchPassword(control) {
        var password = control.get('password').value; // to get value in input tag
        var password_confirmation = control.get('password_confirmation').value; // to get value in input tag
        if (password !== password_confirmation) {
            control.get('password_confirmation').setErrors({ MatchPassword: true });
            if (control.get('password_confirmation').value) {
                control.get('password_confirmation').markAsDirty();
            }
        }
        else {
            return true;
        }
    }
    function MatchEmail(control) {
        var email = control.get('email').value; // to get value in input tag
        var email_confirmation = control.get('email_confirmation').value; // to get value in input tag
        if (email !== email_confirmation) {
            control.get('email_confirmation').setErrors({ MatchEmail: true });
            if (control.get('email_confirmation').value) {
                control.get('email_confirmation').markAsDirty();
            }
        }
        else {
            return true;
        }
    }
    function ValidationErrorMessages(validationError) {
        var message = '';
        for (var validation in validationError) {
            if (!validationError.hasOwnProperty(validation))
                continue;
            if (typeof validationError[validation].message === 'string') {
                message += validationError[validation].message + ' ';
            }
            else {
                switch (validation) {
                    case 'min':
                        message += "Must be greater than or equal to " + validationError[validation].min + ". ";
                        break;
                    case 'max':
                        message += "Must be less than or equal to " + validationError[validation].max + ". ";
                        break;
                    case 'required':
                        message += 'Field is required.';
                        break;
                    case 'email':
                        message += 'Invalid email. ';
                        break;
                    case 'unique':
                        message += 'The current value is already in use.';
                        break;
                    case 'minlength':
                        message += "To short, minimum " + validationError[validation].requiredLength + " characters. ";
                        break;
                    case 'maxlength':
                        message += "To long, maximum " + validationError[validation].requiredLength + " characters. ";
                        break;
                    case 'pattern':
                        message += 'Invalid characters. ';
                        break;
                    case 'MatchPassword':
                        message = "This field must match the password.";
                        break;
                    case 'MatchEmail':
                        message = "This field must match the email.";
                        break;
                    default:
                        message += 'Invalid. ';
                        break;
                }
            }
        }
        return message.trim();
    }
    // }

    var TextConfig = /** @class */ (function () {
        function TextConfig(params) {
            this.border = false;
            this.className = 'theme-foreground-base';
            this.header = false;
            this.message = '';
            this.noInitialValue = false;
            this.name = 'name';
            this.padding = 5;
            this.textOverflow = 'wrap';
            this.value = false;
            this.warning = true;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.control)
                this.setControl();
        }
        TextConfig.prototype.setControl = function () {
            this.control = new forms.FormControl(this.value);
        };
        return TextConfig;
    }());

    var SelectListConfig = /** @class */ (function () {
        function SelectListConfig(params) {
            var _this = this;
            this.allLabel = 'All';
            this.allowAll = true;
            this.allowGroupAll = true;
            this.allOverlay = false;
            this.allOverlayEnabled = false;
            this.allOverlayLabel = '';
            this.allOverlayMessage = '';
            this.all = false;
            this.bubble = false;
            this.checkboxPosition = 'before';
            this.collapsed = false;
            this.column = 'column';
            this.displayErrors = true;
            this.defaultHeight = null;
            this.disabledIds = [];
            this.facade = false;
            this.filter = true;
            this.helpText = '';
            this.height = null;
            this.levelGap = 35;
            this.label = '';
            this.multiple = false;
            this.minHeight = null;
            this.noInitialValue = false;
            this.outline = true;
            this.patchGroupFk = false;
            this.strVal = '';
            this.setDefaultValues();
            if (params)
                for (var i in params)
                    this[i] = params[i];
            var mode = this.mode;
            var hasMode = IsArray(this.mode, true) ? true : false;
            this.defaultMode = hasMode ? this.mode[0].value : 0;
            this.value = Array.isArray(this.value) ? this.value : [];
            if (this.options.values.length > 1) {
                if (this.sort) {
                    if (typeof this.options.values[0].sort_order !== 'undefined') {
                        this.options.values.sort(function (a, b) {
                            if (a.sort_order < b.sort_order)
                                return -1;
                            if (a.sort_order > b.sort_order)
                                return 1;
                            return 0;
                        });
                    }
                    else {
                        this.options.values.sort(function (a, b) {
                            if (a.name < b.name)
                                return -1;
                            if (a.name > b.name)
                                return 1;
                            return 0;
                        });
                    }
                }
                if (this.options.values[0].group) {
                    this.groups = this.getOptionGroups();
                }
                else if (this.options.values.length) {
                    var str_1 = [];
                    this.selectedOptions = [];
                    this.options.values.map(function (option) {
                        if (hasMode && IsUndefined(option.mode))
                            option.mode = _this.defaultMode;
                        option.selected = _this.value.includes(option.value) ? true : false;
                        if (option.selected) {
                            _this.selectedOptions.push(option.value);
                            str_1.push(option.name);
                        }
                        option.indentation = (+_this.levelGap) * (option.level + 1);
                        str_1 = str_1.sort();
                        _this.strVal = str_1.join(', ');
                    });
                    if (this.options.empty)
                        this.options.values.unshift({ value: this.options.empty.value, name: this.options.empty.name });
                    var defaultGroup = {
                        label: '',
                        options: this.options,
                        open: true
                    };
                    this.groups = [defaultGroup];
                }
                else {
                    this.groups = [];
                }
            }
            if (!this.groups)
                this.groups = [];
            if (!this.levelGap)
                this.levelGap = 35;
            this.defaultHeight = this.height;
            var allGroupsSelected = true;
            var selected = this.selectedOptions;
            var groupSelected;
            if (this.all) {
                this.selectedOptions = [];
                this.groups.map(function (group) {
                    group.all = true;
                    _this.selectedOptions = group.options.values.map(function (option) {
                        option.selected = true;
                        _this.selectedOptions.push(option.value);
                    });
                });
                this.strVal = this.allLabel;
            }
            else {
                var str_2 = [];
                this.selectedOptions = [];
                var isGroups_1 = this.groups.length > 1;
                this.groups.map(function (group) {
                    if (group.all) {
                        if (isGroups_1) {
                            str_2.push(group.label + ' (All)');
                        }
                        else {
                            str_2.push('All');
                        }
                        group.options.values.filter(function (option) {
                            _this.selectedOptions.push(option.value);
                        });
                    }
                    else {
                        groupSelected = group.options.values.filter(function (option) {
                            return option.selected;
                        });
                        if (groupSelected && groupSelected.length) {
                            if (groupSelected.length === group.options.values.length)
                                group.all = true;
                            if (group.all) {
                                if (isGroups_1) {
                                    str_2.push(group.label + ' (All)');
                                }
                                else {
                                    str_2.push('All');
                                }
                                group.options.values.filter(function (option) {
                                    _this.selectedOptions.push(option.value);
                                });
                            }
                            else {
                                allGroupsSelected = false;
                                if (isGroups_1 && groupSelected.length) {
                                    str_2.push(group.label + (" (" + groupSelected.length + " of " + group.options.values.length + ")"));
                                    groupSelected.map(function (option) {
                                        _this.selectedOptions.push(option.value);
                                    });
                                }
                                else {
                                    groupSelected.map(function (option) {
                                        _this.selectedOptions.push(option.value);
                                        str_2.push(option.name);
                                    });
                                }
                            }
                        }
                        else {
                            group.all = false;
                            allGroupsSelected = false;
                        }
                    }
                });
                if (!this.selectedOptions.length) {
                    allGroupsSelected = false;
                    if (this.emptyLabel) {
                        str_2 = [this.emptyLabel];
                    }
                }
                else if (!this.all && allGroupsSelected) {
                    str_2 = ['All'];
                }
                this.all = allGroupsSelected;
                str_2 = str_2.sort();
                this.strVal = str_2.join(', ');
            }
            delete this.options;
            delete this.value;
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.groups.length === 1)
                this.collapsed = false;
            if (this.noInitialValue)
                this.value = this.multiple ? [] : '';
            if (!this.control)
                this.setControl();
            if (!(IsDefined(this.value, false)))
                this.value = this.multiple ? [] : '';
            if (this.allOverlay && !this.allOverlayLabel) {
                this.allOverlayLabel = 'All Access';
            }
        }
        SelectListConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: false
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        SelectListConfig.prototype.setDefaultValues = function () {
            // this.helpText = '';
            this.label = '';
            this.message = '';
            this.options = { values: [] };
            this.disabled = false;
            this.sort = false;
            // this.showTooltip = false;
            // this.tooltip = '';
        };
        SelectListConfig.prototype.getOptionGroups = function () {
            var _this = this;
            this.selectedOptions = [];
            var groups = {};
            var list = [];
            var defaultGroup = this.options.values[0].group;
            var defaultGroupFk = this.options.values[0].groupFk;
            this.options.values.map(function (option, index) {
                if (typeof option.level === 'undefined')
                    option.level = 0;
                if (_this.mode && IsUndefined(option.mode))
                    option.mode = _this.defaultMode;
                option.indentation = (+_this.levelGap) * (option.level + 1);
                if (!option.group)
                    option.group = defaultGroup;
                if (option.group in groups === false) {
                    groups[option.group] = {
                        label: option.group,
                        options: { values: [] },
                        all: false,
                        indeterminate: false,
                        open: true,
                        groupFk: option.groupFk,
                    };
                    defaultGroup = option.group;
                    defaultGroupFk = option.groupFk;
                }
                option.selected = _this.value.includes(option.value);
                if (option.selected) {
                    _this.selectedOptions.push(option.value);
                }
                groups[option.group].options.values.push(option);
            });
            var count = Object.keys(groups).length;
            Object.keys(groups).map(function (key) {
                var indeterminate = false;
                var all = true;
                groups[key].options.values.some(function (option) {
                    if (!option.selected) {
                        all = false;
                        indeterminate = true;
                        return true;
                    }
                });
                groups[key].all = all;
                groups[key].indeterminate = indeterminate;
                if (count > 1 && _this.collapsed)
                    groups[key].open = false;
                list.push(groups[key]);
            });
            var countLabel = this.selectedOptions.length > 1 ? "[" + this.selectedOptions.length + "] " : '';
            return list;
        };
        SelectListConfig.prototype.resetSelection = function () {
            this.selectedOptions = [];
        };
        SelectListConfig.prototype.addSelectedOption = function (option) {
            this.selectedOptions.push(option);
        };
        return SelectListConfig;
    }());

    var DatePickerConfig = /** @class */ (function () {
        function DatePickerConfig(params) {
            // Defaults
            this.bubble = false;
            this.displayErrors = true;
            this.disabled = false;
            this.filterPredicate = null;
            this.helpText = '';
            this.id = '';
            this.label = '';
            this.min = null;
            this.max = null;
            this.message = '';
            this.name = 'name';
            this.noInitialValue = false;
            this.showTooltip = false;
            this.tooltip = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (this.value)
                this.value = new Date(this.value);
            if (typeof this.min === 'string') {
                this.min = new Date(this.min);
            }
            if (isNaN(this.max) === false) {
                var maxDate = new Date();
                // maxDate.setDate(maxDate.getDate() - 1);
                maxDate.setDate(maxDate.getDate() + parseInt(this.max, 10));
                this.max = new Date(maxDate);
            }
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.noInitialValue)
                this.value = '';
            if (!this.control)
                this.setControl();
        }
        DatePickerConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return DatePickerConfig;
    }());

    var SelectModalConfig = /** @class */ (function () {
        function SelectModalConfig(params) {
            this.displayErrors = true;
            this.disabled = false;
            this.facade = false; // Sets a flag that says this fieldItems really does not exist in the backend, and just pretend to hit the api
            this.header = '';
            this.label = '';
            this.noInitialValue = false; // Set to true to always have an empty value on load
            if (params)
                for (var i in params)
                    this[i] = params[i];
            // if( !this.label ) this.label = 'Options';
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, json: false };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.noInitialValue)
                this.value = this.list.multiple ? [] : '';
            if (!this.control)
                this.setControl();
        }
        SelectModalConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: false
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return SelectModalConfig;
    }());

    /**
     * A helper method that will build out TabMenuConfig off of an entityConfig
     * @param entityConfig
     * @param tabs
     */
    function GetTabMenuConfig(core, tabs) {
        if (tabs === void 0) { tabs = []; }
        var tabMenuConfig = new TabMenuConfig({
            name: DetermineEntityName(core.entity),
            goBack: true,
            portal: false,
            tabs: tabs,
            buttons: GetTabMenuButtons(core),
        });
        return tabMenuConfig;
    }
    /**
     * Determine the buttons that should be shown for this entity
     * @param core
     */
    function GetTabMenuButtons(core) {
        var buttons = [];
        var defaultButtons = [
            { id: 'clone', name: 'Clone', accessType: 'can_update', hidden: false },
            // { id: 'archive', name: 'Archive', accessType: 'can_update', hidden: true },
            // { id: 'activate', name: 'Activate', accessType: 'can_update', hidden: true },
            { id: 'delete', name: 'Delete', accessType: 'can_delete', hidden: true },
            { id: 'close', name: 'Close', hidden: false },
        ];
        if (IsObject(core.repo.model.table.button, true)) {
            buttons = defaultButtons.filter(function (button) {
                if (button.id === 'clone' && !core.repo.model.menu.button.clone)
                    return false;
                // if( button.id === 'archive' && !core.repo.model.menu.button.archive ) return false;
                // if( button.id === 'activate' && !core.repo.model.menu.button.archive ) return false;
                if (button.id === 'delete' && !core.repo.model.menu.button.delete)
                    return false;
                if (!button.accessType)
                    return true;
                if (!core.access[button.accessType])
                    return false;
                return true;
            });
        }
        return buttons;
    }
    /**
     * A helper method that sets up a FieldGroupConfig for a create/new pop-table-dialog
     * @param entityConfig
     * @param goToUrl
     */
    function GetObjectVar(obj, path) {
        var steps = path.split('.');
        var key = steps.pop();
        var pathStorage = StorageGetter(obj, steps);
        if (pathStorage) {
            return typeof pathStorage[key] !== 'undefined' ? pathStorage[key] : undefined;
        }
        else {
            return undefined;
        }
    }
    /**
     * Get a list of the transformations that are within a field set
     * @param obj
     * @constructor
     */
    function GetObjectTransformations(obj) {
        var transformations = [];
        Object.keys(obj).map(function (key) {
            var field = obj[key];
            if (IsObject(field, ['model'])) {
                if (field.model && field.model.name && field.model.transformation) {
                    transformations[field.model.name] = CleanObject({
                        type: field.model.transformation.type,
                        arg1: field.model.transformation.arg1 ? field.model.transformation.arg1 : null,
                        arg2: field.model.transformation.arg2 ? field.model.transformation.arg2 : null,
                        arg3: field.model.transformation.arg3 ? field.model.transformation.arg3 : null,
                    });
                }
            }
            else if (IsObject(field, ['id', 'name'])) {
                console.log('with relation', key, obj[key]);
            }
            else {
                console.log('fail', key);
            }
        });
        return transformations;
    }
    function SetCoreValue(core, entity_path, value) {
        var steps = entity_path.split('.');
        var key = steps.pop();
        var pathStorage = StorageGetter(core, steps);
        if (value === null) {
            delete pathStorage[key];
        }
        else {
            pathStorage[key] = value;
        }
    }
    /**
     * Parse a value with any mutations that need to be applied
     * @param value
     * @param core
     * @param blockEntity
     * @constructor
     */
    function ParseModelValue(value, core, blockEntity) {
        if (value === void 0) { value = ''; }
        if (blockEntity === void 0) { blockEntity = false; }
        // console.log('ParseModelValue', value);
        var tmp = value;
        if (typeof tmp === 'undefined') {
            // console.log('zzz')
            return tmp;
        }
        if (tmp === 'null' || tmp === null) {
            // console.log( 'a', tmp );
            tmp = null;
        }
        else if (typeof tmp === 'boolean') {
            tmp = +tmp;
            // console.log( 'b', tmp );
        }
        else if (IsString(tmp, true)) {
            if (tmp.includes('/')) { // url
                if (core && core.params && IsString(tmp, true) && tmp.includes('#')) {
                    tmp = ParseUrlForParams(tmp, core.params);
                    // console.log( 'd', tmp );
                }
                if (!blockEntity && core && core.entity && IsString(tmp, true) && tmp.includes(':')) {
                    var entityField = ParseStringForEntityField(tmp, core.entity);
                    if (IsDefined(entityField, false)) {
                        tmp = entityField;
                    }
                    // console.log( 'e', tmp );
                }
                return tmp;
            }
            else {
                if (IsString(tmp, true) && tmp.includes('alias:')) {
                    tmp = ParseForAlias(tmp);
                    // console.log( 'f', tmp );
                }
                if (core) {
                    if (tmp.includes('.') && !(tmp.includes('@')) && !(tmp.includes(' '))) { // object location
                        var coreVar = GetObjectVar(core, tmp);
                        if (typeof coreVar !== 'undefined')
                            tmp = coreVar;
                        // console.log( 'g', tmp );
                    }
                    if (core.params && IsString(tmp, true) && tmp.includes('#')) {
                        var paramsField = ParseStringForParams(tmp, core.params);
                        if (IsDefined(paramsField, false)) {
                            tmp = paramsField;
                        }
                        // console.log( 'h', tmp );
                    }
                    if (!blockEntity && core.entity && IsString(tmp, true) && tmp.includes(':')) {
                        var entityField = ParseStringForEntityField(tmp, core.entity);
                        if (IsDefined(entityField, false)) {
                            tmp = entityField;
                        }
                        // console.log( 'i', tmp );
                    }
                }
            }
        }
        else if (IsNumber(tmp)) {
            // console.log( 'ca', tmp );
            tmp = Number(tmp);
            // console.log( 'c', tmp );
        }
        // console.log( 'after', tmp );
        return tmp;
    }
    /**
     * Look through an entire object and make the necessary mutations
     * @param obj
     * @param entityConfig
     * @constructor
     */
    function ParseObjectDefinitions(obj, entityConfig) {
        var definitions = {};
        var value;
        if (typeof obj !== 'undefined') {
            if (obj && Array.isArray(obj))
                obj = ToObject(obj);
            if (typeof obj === 'object') {
                Object.keys(obj).map(function (key) {
                    value = ParseModelValue(obj[key], entityConfig);
                    definitions[key] = value;
                });
            }
        }
        return definitions;
    }
    /**
     * A method to translate entityId fields out of a url /#app/#plural_name/:entityId, (#) indicates a entityId param, (:) indicates a entityId field
     */
    function ParseUrlForEntityFields(url, entity) {
        if (url && url.includes(':')) {
            var start = url.indexOf(':');
            var end = url.indexOf('/', start) !== -1 ? url.indexOf('/', start) : url.length;
            var fieldName = url.substring(start + 1, end);
            url = url.replace(':' + fieldName, entity[fieldName]);
            if (url && url.includes(':')) {
                url = ParseUrlForEntityFields(url, entity);
            }
        }
        return url;
    }
    /**
     * Translate an aliases or mutations within a url
     * @param url
     * @param entity
     * @param ignore
     * @constructor
     */
    function ParseLinkUrl(url, entity, ignore) {
        if (entity === void 0) { entity = null; }
        if (ignore === void 0) { ignore = []; }
        if (url) {
            return url.split('/').map(function (part) {
                if (part.includes('alias:')) {
                    part = exports.PopPipe.label.getAlias((part.split(':')[1]));
                }
                else if (part.includes(':') && entity) {
                    if (!(ignore.includes(part))) {
                        part = part.split(':')[1];
                        if (part in entity)
                            part = entity[part];
                    }
                }
                return part;
            }).join('/');
        }
        return url;
    }
    /**
     * A method to translate entityId params out of a url /#app/#plural_name/:entityId, (#) indicates a entityId param, (:) indicates a entityId field
     */
    function ParseUrlForParams(url, entityParams) {
        if (url && url.includes('#') && !(url.includes(' '))) {
            var start = url.indexOf('#');
            var end = url.indexOf('/', start) !== -1 ? url.indexOf('/', start) : url.length;
            var paramName = url.substring(start + 1, end);
            url = url.replace('#' + paramName, entityParams[paramName]);
            if (url && url.includes('#')) {
                url = ParseUrlForParams(url, entityParams);
            }
        }
        return url;
    }
    /**
     * A methid that replaces entityId aliases found in a string
     * @param string
     */
    function ParseForAlias(string) {
        if (IsString(string, true)) {
            var alias_1 = false;
            var parts_1 = [];
            string.split(':').map(function (part) {
                if (part.includes('alias')) {
                    alias_1 = true;
                }
                else {
                    parts_1.push(alias_1 ? TitleCase(exports.PopPipe.label.getAlias((part))) : part);
                    alias_1 = false;
                }
                return part;
            });
            return parts_1.join(' ');
        }
        return string;
    }
    /**
     * A method to translate entityId fields out of a string ':entityId' (:) indicates a entityId field
     */
    function ParseStringForEntityField(str, entity) {
        if (typeof (str) === 'string' && str.includes(':') && !(str.includes(' '))) {
            var start = str.indexOf(':');
            var end = str.indexOf('.', start) !== -1 ? str.indexOf('.', start) : str.length;
            var fieldName = str.substring(start + 1, end);
            if (IsDefined(entity[fieldName], false)) {
                str = str.replace(':' + fieldName, entity[fieldName]);
                if (str && str.includes(':')) {
                    str = ParseStringForEntityField(str, entity);
                }
            }
        }
        else if (typeof (str) === 'string' && str.includes(':') && str.includes(' ')) {
            var parts = str.trim().split(' ');
            var partials_1 = [];
            parts.map(function (part) {
                var start = part.indexOf(':');
                var end = part.indexOf('.', start) !== -1 ? part.indexOf('.', start) : part.length;
                var fieldName = part.substring(start + 1, end);
                if (IsDefined(entity[fieldName], false)) {
                    part = part.replace(':' + fieldName, entity[fieldName]);
                    if (part && part.includes(':')) {
                        part = ParseStringForEntityField(part, entity);
                    }
                }
                partials_1.push(part);
            });
            str = partials_1.join(' ').trim();
        }
        return str;
    }
    /**
     * A method that replaces entityId params found in a string
     * @param str
     * @param entityParams
     */
    function ParseStringForParams(str, entityParams, separator) {
        if (separator === void 0) { separator = '.'; }
        if (typeof (str) === 'string' && str.includes('#')) {
            var start = str.indexOf('#');
            var end = str.indexOf(separator, start) !== -1 ? str.indexOf(separator, start) : str.length;
            var paramName = str.substring(start + 1, end);
            if (entityParams[paramName]) {
                str = str.replace('#' + paramName, entityParams[paramName]);
                if (str && str.includes('#')) {
                    str = ParseStringForParams(str, entityParams);
                }
            }
        }
        return str;
    }
    /**
     * Helper function to set routes for an entity
     * @param routes
     * @param params
     * @constructor
     */
    function InterpolateEntityRoutes(routes, params) {
        if (IsObject(routes)) {
            var set_1 = {};
            Object.keys(routes).map(function (method) {
                set_1[method] = {};
                Object.keys(routes[method]).map(function (route) {
                    if (!set_1[method][route])
                        set_1[method][route] = {};
                    set_1[method][route].path = String(ParseUrlForParams(routes[method][route].path, params)).trim();
                    set_1[method][route].params = routes[method][route].params;
                });
            });
            return set_1;
        }
        else {
            return routes;
        }
    }
    /**
     * Helper function to set routes for an entity
     * @param routes
     * @param params
     * @constructor
     */
    function InterpolateEntityRoute(route, obj) {
        var path = InterpolateString(route, obj);
        path = StringReplaceAll(path, '\\/\\/', '\\/');
        return path;
    }
    /**
     * Remove all the empty values from an object
     * @param model
     * @constructor
     */
    function ClearEmptyValues(model) {
        var pointless = [null, undefined, ''];
        Object.getOwnPropertyNames(model).map(function (key) {
            if (typeof key === 'string' && key.includes('_') == false && pointless.includes(model[key]) && key !== 'value') {
                delete model[key];
            }
            if (model[key] !== null && !Array.isArray(model[key]) && typeof model[key] === 'object') {
                model[key] = ClearEmptyValues(model[key]);
            }
        });
        return model;
    }
    /**
     * Get a name to display for an entity, use fall backs if necessary
     * @param entity
     * @constructor
     */
    function DetermineEntityName(entity) {
        var name = '';
        if (entity) {
            if (IsString(entity.label, true)) {
                name = entity.label;
            }
            else if (IsString(entity.name, true)) {
                name = entity.name;
            }
            else if (IsString(entity.display_name, true)) {
                name = entity.display_name;
            }
            else if (IsString(entity.first_name, true)) { //code change by Chetu Development Team on 17-05-2021
                name = entity.first_name + ' ' + entity.last_name;
            }
            else if (IsString(entity.email, true)) {
                name = entity.email;
            }
            else if (typeof entity.id !== 'undefined') {
                name = String(entity.id);
            }
        }
        return name;
    }
    /**
     * Parse conditional logic of a when statement
     * [
     *    first level is OR statements
     *    [ ...Every thing in the second level is an AND statement..., ['name', '=', 'user'], ['age', '>', 21] ],
     *    [key, '=', 'value ],
     *    [key, 'in', [1,2,3,45] ],
     * ]
     * @param obj
     * @param when
     * @param core
     * @constructor
     */
    function EvaluateWhenConditions(obj, when, core) {
        if (when === void 0) { when = null; }
        if (!when || when === null)
            return true;
        var pass = true;
        if (IsArray(when, true)) { // conditional logic to display fields
            var block = void 0;
            when = DeepCopy(when).filter(function (section) { return IsArray(section, true); });
            var isOrStatement = when.length > 1;
            if (isOrStatement) {
                // console.log('or check', obj, when, core);
                when.reverse();
                while (when.length) {
                    block = when.pop().filter(function (section) { return IsArray(section, true); });
                    pass = EvaluateWhenCondition(obj, block, core);
                    if (pass)
                        break;
                }
            }
            else {
                // console.log('check', obj, when, core);
                pass = EvaluateWhenCondition(obj, when, core);
            }
        }
        else {
            pass = false;
        }
        return pass;
    }
    /**
     * Evaluate a single conditional block: [location, operator, value]
     * @param obj
     * @param block
     * @param core
     * @constructor
     */
    function EvaluateWhenCondition(obj, block, core) {
        var operators = ['=', '>', '>=', '<', 'truthy', 'falsey', 'length', 'contains'];
        var pass = true;
        var location;
        var operator;
        var value;
        if (IsArray(block, true)) {
            // expects array of arrays
            block.some(function (section) {
                section.some(function (rule) {
                    // console.log('rule', rule);
                    // console.log('has core', core);
                    if (IsArray(rule, true)) {
                        location = rule[0];
                        if (rule.length === 1) {
                            operator = 'truthy';
                            value = undefined;
                        }
                        else if (rule.length === 2) {
                            operator = '=';
                            value = rule[1];
                            if (['truthy', 'falsey', 'length'].includes(value)) {
                                operator = value;
                                value = undefined;
                            }
                        }
                        else if (rule.length >= 2) {
                            operator = rule[1];
                            value = rule[2];
                        }
                        if (location && operator && operators.includes(operator)) {
                            if (IsString(location, true) && location in obj && obj[location]) {
                                location = obj[location];
                            }
                            else if (IsString(location, true) && location.includes('.')) {
                                location = GetObjectVar(obj, location);
                            }
                            else {
                                location = ParseModelValue(location, core);
                            }
                            if (IsString(value, true) && IsObject(core, [value])) {
                                value = ParseModelValue(value, core);
                            }
                            else if (IsString(value, true) && IsObject(obj, [value])) {
                                value = GetObjectVar(obj, value);
                            }
                            // console.log('location', location);
                            // console.log('operator', operator);
                            // console.log('value', value);
                            switch (operator) {
                                case 'contains':
                                    if (IsArray(location)) {
                                        if (!(location.includes(value))) {
                                            pass = false;
                                            return true;
                                        }
                                    }
                                    else if (IsString(location)) {
                                        if (!(location.search(value) > -1)) {
                                            pass = false;
                                            return true;
                                        }
                                    }
                                    else if (IsObject(location)) {
                                        if (!(value in location)) {
                                            pass = false;
                                            return true;
                                        }
                                    }
                                    else {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                case 'length':
                                    if (!(IsArray(location, true))) {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                case 'truthy':
                                    if (!location) {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                case 'falsey':
                                    if (location) {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                case '=':
                                    if (location != value) {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                case '!=':
                                    if (location == value) {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                case '>':
                                    if (!(location > value)) {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                case '>=':
                                    if (!(location >= value)) {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                case '<':
                                    if (!(location < value)) {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                case '<=':
                                    if (!(location <= value)) {
                                        pass = false;
                                        return true;
                                    }
                                    break;
                                default:
                                    pass = false;
                                    return true;
                                    break;
                            }
                        }
                        else {
                            pass = false;
                            return true;
                        }
                    }
                    else {
                        pass = false;
                        return true;
                    }
                });
                return pass === false;
            });
        }
        else {
            pass = false;
        }
        return pass;
    }
    /**
     * check if event matches the signature for a field patch
     * @param core
     * @param event
     * @constructor
     */
    function IsValidFieldPatchEvent(core, event) {
        if (IsObject(event, true)) {
            if (event.type === 'field' && event.name === 'patch' && event.success) {
                return true;
            }
            if (event.type === 'field' && event.name === 'onChange' && event.config.facade) {
                return true;
            }
        }
        return false;
    }
    /**
     * check if event matches the signature for a field patch
     * @param core
     * @param event
     * @constructor
     */
    function IsValidChangeEvent(core, event) {
        if (IsObject(event, true)) {
            if (event.type === 'field' && event.name === 'onChange') {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if a event matches the same core signature of a core that belongs to a component
     * @param core
     * @param event
     * @constructor
     */
    function IsValidCoreSignature(core, event) {
        if (event === void 0) { event = null; }
        console.log(' IsValidCoreSignature core', core);
        console.log(' IsValidCoreSignature event', event);
        if (IsObject(core, true) && IsObject(core.entity)) {
            if (IsObject(event, true) && IsObject(event.core)) {
                return core === event.core;
            }
            return true;
        }
        console.log('IsValidCoreSignature, fail');
        return false;
    }
    function GetCustomFieldSettings(field) {
        var fieldSettings = {};
        switch (String(field.fieldgroup.name).toLowerCase()) {
            case 'email':
                fieldSettings = EmailFieldSetting;
                break;
            case 'address':
                fieldSettings = AddressFieldSetting;
                break;
            case 'phone':
                fieldSettings = PhoneFieldSetting;
                break;
            case 'name':
                fieldSettings = NameFieldSetting;
                break;
            case 'textfield':
            case 'input':
                fieldSettings = InputFieldSetting;
                break;
            case 'radio':
                fieldSettings = RadioFieldSetting;
                break;
            case 'switch':
                fieldSettings = SwitchFieldSetting;
                break;
            case 'select':
                fieldSettings = SelectFieldSetting;
                break;
            case 'select-multi':
            case 'select_multi':
            case 'multi_selection':
                fieldSettings = SelectFieldSetting;
                break;
            case 'checkbox':
                fieldSettings = CheckboxFieldSetting;
                break;
            case 'textarea':
                fieldSettings = TextareaFieldSetting;
                break;
            default:
                fieldSettings = {};
        }
        return fieldSettings;
    }
    /**
     * Selection type fields require a list of options to present the user
     * The option values may be directly assigned on the field, point to a specific location in the entity data, or reference a resource that may exists in the entity models
     * ...
     * options:{
     *   ...
     *   values: FieldItemOptions[], resolve what is in this list
     *   ...
     * }
     * ...
     * @param core
     * @param options
     * @private
     */
    function ModelOptionValues(core, options) {
        if (IsObject(options, true)) {
            if (IsString(options.resource, true)) {
                if (IsObject(core.resource, true) && options.resource in core.resource && IsObject(core.resource[options.resource], ['data_values']) && IsArray(core.resource[options.resource].data_values, true)) {
                    options.converted = false;
                    options.rawValues = DeepCopy(core.resource[options.resource].data_values);
                    // options.values = DeepCopy( core.resource[ options.resource ].data_values );
                }
            }
            else if (IsArray(options.values, true)) {
                options.converted = false;
                var tmp = DeepCopy(options.values);
                options.values = null;
                options.rawValues = tmp;
            }
            else if (IsString(options.values)) {
                var tmpOptions = GetObjectVar(core, options.values);
                if (IsArray(tmpOptions)) {
                    options.converted = false;
                    options.rawValues = DeepCopy(tmpOptions);
                }
                else {
                    var tmp = ParseModelValue(options.values, core);
                    if (IsArray(tmp, true)) {
                        options.converted = false;
                        options.rawValues = DeepCopy(tmp);
                    }
                }
            }
        }
        return options;
    }
    /**
     * Get the rules that should be applied on this field
     * @param fieldItem
     * @private
     */
    function FieldItemRules(fieldItem) {
        var RuleSet = {};
        fieldItem.rule = {};
        var itemRules = IsArray(fieldItem.itemrules, true) ? fieldItem.itemrules : []; // default rules inherited from the field_item_id
        var fieldRules = IsArray(fieldItem.fieldrules, true) ? fieldItem.fieldrules : []; // rules specific to this field item
        // we want field rules to override items rules when there is overlap ie.. the item might come with a default rule but the items rules should override it
        itemRules.map(function (rule) {
            if (IsArray(rule.validations, true)) {
                if (!(IsObject(rule.options)))
                    rule.options = {};
                rule.options.values = ConvertArrayToOptionList(rule.validations, {
                    nameKey: 'label',
                });
                rule.validationMap = ArrayKeyBy(rule.validations, 'id');
                rule.value = +rule.validation.id;
            }
            else {
                rule.value = rule.raw_value;
            }
            if (!rule.value && rule.default_value)
                rule.value = rule.default_value;
            RuleSet[rule.name] = rule;
        });
        fieldRules.map(function (rule) {
            if (IsObject(RuleSet[rule.name])) {
                RuleSet[rule.name].id = rule.id;
                RuleSet[rule.name].value = IsArray(RuleSet[rule.name].validations, true) ? rule.validation.id : rule.raw_value;
                RuleSet[rule.name].field_id = rule.field_id;
            }
        });
        fieldItem.rules = Object.values(RuleSet);
        fieldItem.rules.map(function (rule) {
            if (!rule.validation.fixed) {
                fieldItem.rule[rule.name] = ParseModelValue(rule.value);
            }
        });
        // delete fieldItem.fieldrules;
        // delete fieldItem.itemrules;
    }
    function FieldItemModel(core, fieldItem, checkAccess) {
        if (checkAccess === void 0) { checkAccess = true; }
        if (IsObject(fieldItem, true)) {
            var hasAccess = true;
            if (checkAccess) {
                hasAccess = core.access.can_update ? true : false;
                if (IsObject(core.entity, ['system']) && core.entity.system)
                    hasAccess = false;
            }
            var showAsReadonly = +fieldItem.readonly ? true : (!hasAccess ? true : false);
            var allowPatch = IsObject(core.entity, ['id']) && IsObject(fieldItem.patch, ['path']) && !fieldItem.facade && hasAccess && !showAsReadonly ? true : false;
            if (!fieldItem.metadata) {
                fieldItem.metadata = {};
            }
            fieldItem.metadata = DeepMerge(fieldItem.metadata, { internal_name: core.params.internal_name });
            // ToDo:: Optimize this part, currently uses catch-all method to accommodate all field item types, need to run checks on some and not others which prevents simply merging
            var model = Object.assign({}, CleanObject({
                access: hasAccess,
                align: fieldItem.align,
                all: fieldItem.all,
                allValue: fieldItem.allValue,
                allowAll: fieldItem.allowAll,
                allowGroupAll: fieldItem.allowGroupAll,
                allOverlay: fieldItem.allOverlay,
                allOverlayEnabled: fieldItem.allOverlayEnabled,
                allOverlayLabel: fieldItem.allOverlayLabel,
                allOverlayMessage: fieldItem.allOverlayMessage,
                allOverlayCallback: fieldItem.allOverlayCallback,
                autoFill: +fieldItem.autoFill ? true : null,
                autoSize: +fieldItem.autoSize ? true : null,
                autofocus: +fieldItem.autofocus ? true : null,
                autoselect: +fieldItem.autoselect ? true : null,
                border: fieldItem.border,
                bubble: fieldItem.bubble,
                button: fieldItem.button,
                checkboxPosition: fieldItem.checkboxPosition,
                className: fieldItem.className,
                color: fieldItem.color,
                collapsed: fieldItem.collapsed,
                control: fieldItem.control,
                defaultHeight: fieldItem.defaultHeight,
                disabled: +fieldItem.disabled ? true : false,
                displayErrors: +fieldItem.displayErrors ? true : false,
                dropSpecial: fieldItem.dropSpecial,
                event: +fieldItem.event,
                empty: fieldItem.empty,
                facade: fieldItem.facade ? true : false,
                filterPredicate: fieldItem.filterPredicate,
                form: fieldItem.view ? String(fieldItem.view.name).toLowerCase() : fieldItem.form ? fieldItem.form : 'label',
                header: fieldItem.header,
                hidden: fieldItem.hidden,
                hint: fieldItem.hint,
                hintText: fieldItem.hintText,
                height: fieldItem.height,
                helpText: fieldItem.helpText,
                helper: fieldItem.helper,
                html: fieldItem.html,
                icon: fieldItem.icon,
                iconColor: fieldItem.iconColor,
                interval: fieldItem.interval,
                layout: fieldItem.setting && fieldItem.setting.layout,
                level: fieldItem.level,
                levelGap: fieldItem.levelGap,
                link: fieldItem.link,
                label: fieldItem.label,
                list: fieldItem.list,
                maxHeight: fieldItem.maxHeight,
                multiple: fieldItem.multiple,
                message: fieldItem.message,
                minimal: fieldItem.minimal,
                mode: fieldItem.mode,
                noInitialValue: fieldItem.noInitialValue,
                labelPosition: fieldItem.labelPosition,
                mask: fieldItem.mask,
                metadata: fieldItem.metadata ? fieldItem.metadata : {},
                min: fieldItem.min,
                max: fieldItem.max,
                minColumn: fieldItem.minColumn,
                maxColumn: fieldItem.maxColumn,
                minHeight: fieldItem.minHeight,
                minlength: IsObject(fieldItem.rule) && IsDefined(fieldItem.rule.minlength) ? fieldItem.rule.minlength : (fieldItem.minlength ? fieldItem.minlength : null),
                maxlength: IsObject(fieldItem.rule) && IsDefined(fieldItem.rule.maxlength) ? fieldItem.rule.maxlength : (fieldItem.maxlength ? fieldItem.maxlength : 128),
                minValue: fieldItem.minValue,
                maxValue: fieldItem.maxValue,
                name: fieldItem.name,
                options: ModelOptionValues(core, fieldItem.options),
                pattern: fieldItem.rule && fieldItem.rule.pattern ? fieldItem.rule.pattern : (fieldItem.pattern ? fieldItem.pattern : null),
                patch: allowPatch && fieldItem.patch ? fieldItem.patch : null,
                patchGroupFk: fieldItem.patchGroupFk,
                padding: fieldItem.padding,
                position: fieldItem.position,
                preserve: fieldItem.preserve,
                prevent: fieldItem.prevent,
                prefix: fieldItem.prefix ? fieldItem.prefix : null,
                suffix: fieldItem.suffix ? fieldItem.suffix : null,
                radius: fieldItem.radius,
                readonly: showAsReadonly,
                reset: fieldItem.reset,
                route: fieldItem.route,
                required: fieldItem.rule && fieldItem.rule.required ? true : fieldItem.required ? true : false,
                session: fieldItem.session,
                sessionPath: fieldItem.sessionPath,
                showMask: fieldItem.showMask,
                showTooltip: fieldItem.showTooltip,
                size: fieldItem.size,
                sort: fieldItem.sort,
                sort_order: fieldItem.sort_order,
                specialChars: fieldItem.specialChars,
                tooltip: fieldItem.tooltip,
                toolTipDirection: fieldItem.toolTipDirection,
                textOverflow: fieldItem.textOverflow,
                transformation: fieldItem.transformation,
                truncate: fieldItem.truncate,
                type: fieldItem.type,
                value: fieldItem.value,
                validators: fieldItem.validators,
                width: fieldItem.width,
                warning: fieldItem.warning,
                when: IsArray(fieldItem.when, true) ? fieldItem.when : null
            }));
            if (model.form === 'label') { // label specific params
                model = Object.assign(Object.assign({}, model), CleanObject({
                    subLabel: fieldItem.subLabel ? fieldItem.subLabel : null,
                    subValue: fieldItem.subValue ? fieldItem.subValue : null,
                    truncate: fieldItem.truncate ? fieldItem.truncate : null,
                    copyLabel: fieldItem.copyLabel ? fieldItem.copyLabel : null,
                    labelButton: fieldItem.labelButton ? fieldItem.labelButton : null,
                    valueButton: fieldItem.valueButton ? fieldItem.valueButton : null,
                    copyLabelBody: fieldItem.copyLabelBody ? fieldItem.copyLabelBody : null,
                    copyLabelDisplay: fieldItem.copyLabelDisplay ? fieldItem.copyLabelDisplay : null,
                    valueButtonDisplay: fieldItem.valueButtonDisplay ? fieldItem.valueButtonDisplay : null,
                    valueButtonDisabled: fieldItem.valueButtonDisabled ? fieldItem.valueButtonDisabled : null,
                    valueButtonDisplayTransformation: fieldItem.valueButtonDisplayTransformation ? fieldItem.valueButtonDisplayTransformation : null,
                }));
            }
            delete fieldItem.patch;
            if (model.patch) {
                if (model.patch.path)
                    model.patch.path = StringReplaceAll(ParseUrlForParams(model.patch.path, core.params), '//', '/');
                if (model.patch.metadata)
                    model.patch.metadata = ParseObjectDefinitions(model.patch.metadata, core);
            }
            return model;
        }
        return {};
    }
    /**
     * When patches are made, we need to update the entity in the core config
     * ToDo:: Hoping to be able to improve this, and have each component be responsible to manage their own updates. My hesitation right now is I want the least amount of components as possible manipulating the core config
     * @param core
     * @param event
     */
    function SessionEntityFieldUpdate(core, event, path) {
        if (path === void 0) { path = null; }
        exports.PopLog.event("SessionEntityFieldUpdate", "Session Detected", event);
        if (IsValidCoreSignature(core, event)) {
            if (IsValidFieldPatchEvent(core, event)) {
                var value = void 0;
                if (!(IsString(path, true)))
                    path = 'entity';
                var session = StorageGetter(core, String(path).trim().split('.'));
                if (event.config.name in session || event.config.facade) {
                    value = event.config.control ? event.config.control.value : event.data;
                    value = ParseModelValue(value);
                    console.log('SessionEntityFieldUpdate', session, event.config.name, value);
                    session[event.config.name] = value;
                    core.repo.clearCache('active', "SessionEntityFieldUpdate");
                    core.repo.clearCache('all', "SessionEntityFieldUpdate");
                    event.session = true;
                }
                return true;
            }
        }
        return false;
    }
    function GetSingularName(value) {
        if (IsString(value, true) && String(value).length > 3) {
            var tmp = SpaceToHyphenLower(String(value).toLowerCase().trim());
            if (String(tmp).slice(-3) === 'ies') {
                tmp = String(tmp).slice(0, -3);
                tmp += 'y';
            }
            else if (String(tmp).slice(-1) === 's') {
                tmp = String(tmp).slice(0, -1);
            }
            return tmp;
        }
        return value;
    }
    function IsAliasable(value) {
        if (IsString(value, true) && String(value).length > 3) {
            var tmp = SpaceToHyphenLower(String(value).toLowerCase().trim());
            if (IsObject(exports.PopRouteAliasMap, true) && tmp in exports.PopRouteAliasMap) {
                return true;
            }
        }
        return false;
    }
    function IsEntity(entityValue) {
        if (IsString(entityValue, true)) {
            if (IsObject(exports.PopApp, ['entities']) && entityValue in exports.PopApp.entities) {
                return true;
            }
        }
        return false;
    }
    function ParseModuleRoutes(parent, config, routes) {
        if (routes === void 0) { routes = []; }
        for (var i = 0; i < config.length; i++) {
            var route = config[i];
            // console.log(parent + '/' + route.path);
            routes.push(route);
            if (route.children) {
                var currentPath = route.path ? parent + '/' + route.path : parent;
                ParseModuleRoutes(currentPath, route.children, routes);
            }
        }
        return routes;
    }
    function ParseModuleRoutesForAliases(routes) {
        if (IsArray(routes, true)) {
            routes.map(function (route) {
                if (IsObject(route.data, ['alias', 'internal_name'])) {
                    var alias = route.data.alias;
                    if (IsObject(alias, ['target', 'type']) && !route.data.masterPath) {
                        route.data.masterPath = route.path;
                        if (IsString(alias.target, true) && IsString(alias.type, true)) {
                            route.path = String(StringReplaceAll(route.path, alias.target, GetRouteAlias((IsString(alias.internal_name, true) ? alias.internal_name : route.data.internal_name), alias.type))).trim();
                            if (route.data.masterPath !== route.path)
                                routes.push({
                                    path: route.data.masterPath,
                                    redirectTo: route.path,
                                    pathMatch: 'prefix'
                                });
                        }
                        if (IsObject(route.data.table, true)) {
                            if (IsString(route.data.table.route, true)) {
                                var tableRoute = route.data.table.route;
                                if (String(tableRoute).includes(alias.target)) {
                                    route.data.table.route = String(StringReplaceAll(tableRoute, alias.target, GetRouteAlias((IsString(alias.internal_name, true) ? alias.internal_name : route.data.internal_name), alias.type))).trim();
                                }
                            }
                            if (IsString(route.data.table.goToUrl)) {
                                var goToUrl = route.data.table.goToUrl;
                                if (String(goToUrl).includes(route.data.alias)) {
                                    route.data.table.goToUrl = String(StringReplaceAll(goToUrl, route.data.alias, GetRouteAlias((IsString(alias.internal_name, true) ? alias.internal_name : route.data.internal_name), alias.type))).trim();
                                }
                            }
                        }
                    }
                    else if (IsString(route.data.alias, true) && !route.data.masterPath) {
                        route.data.masterPath = route.path;
                        route.path = String(StringReplaceAll(route.path, route.data.alias, GetRouteAlias(route.data.internal_name, 'plural'))).trim();
                        if (route.data.masterPath !== route.path)
                            routes.push({
                                path: route.data.masterPath,
                                redirectTo: route.path,
                                pathMatch: 'prefix'
                            });
                        if (IsObject(route.data.table, true)) {
                            if (IsString(route.data.table.route, true)) {
                                var tableRoute = route.data.table.route;
                                if (String(tableRoute).includes(route.data.alias)) {
                                    route.data.table.route = String(StringReplaceAll(tableRoute, route.data.alias, GetRouteAlias(route.data.internal_name, 'plural'))).trim();
                                }
                            }
                            if (IsString(route.data.table.goToUrl)) {
                                var goToUrl = route.data.table.goToUrl;
                                if (String(goToUrl).includes(route.data.alias)) {
                                    route.data.table.goToUrl = String(StringReplaceAll(goToUrl, route.data.alias, GetRouteAlias(route.data.internal_name, 'plural'))).trim();
                                }
                            }
                        }
                    }
                }
                if (IsArray(route.children, true)) {
                    route.children = ParseModuleRoutesForAliases(route.children);
                }
                if (IsObject(route._loadedConfig, ['routes'])) {
                    route._loadedConfig.routes = ParseModuleRoutesForAliases(route._loadedConfig.routes);
                }
            });
        }
        return routes;
    }
    function FieldItemView(view) {
        var tmp = IsObject(view) ? view : null;
        return CleanObject({
            id: tmp ? tmp.id : 0,
            name: tmp ? tmp.name : 'label',
            type: tmp && String(tmp.html).includes('[') ? String(tmp.html).split('[')[1].split(']')[0] : 'text',
            description: tmp ? tmp.description : null
        });
    }
    function FieldItemBooleanValue(model, core) {
        exports.PopLog.debug('FieldItemBooleanValue', "convert:", { name: name, model: model, core: core });
        var result;
        if (IsDefined(model.value, false)) {
            if (typeof model.value === 'boolean') {
                result = model.value;
            }
            else if (IsString(model.value, true)) {
                result = ParseModelValue(model.value, core);
            }
            else if (IsNumber(model.value, false)) {
                result = +core.entity[model.name] > 0;
            }
        }
        if (!(IsDefined(result, false)) && model.name && IsObject(core.entity, true) && IsDefined(core.entity[model.name])) {
            result = +core.entity[model.name] > 0;
        }
        if (!(IsDefined(result, false)))
            result = false;
        exports.PopLog.debug('FieldItemBooleanValue', "result:", { initial: model.value, result: result });
        return result;
    }
    function FieldItemTextValue(model, core) {
        var result;
        if (+model.value > 0) {
            result = model.value;
        }
        else if (IsDefined(model.value, false) && IsString(model.value, true)) {
            result = ParseModelValue(model.value, core);
            // console.log( 'belongs to parse', model.value, result );
        }
        if (!(IsDefined(result, false)) && model.name && IsObject(core.entity, true) && IsDefined(core.entity[model.name]) && IsString(core.entity[model.name], true)) {
            result = core.entity[model.name];
            // console.log( 'belongs to entity', model.value, result );
        }
        if (!(IsDefined(result, false)) || result === 'Null')
            result = '';
        return result;
    }
    function FieldItemArrayValue(model, core) {
        var result;
        if (IsDefined(model.value, false)) {
            if (IsArray(model.value, false)) {
                result = model.value;
            }
            else if (IsString(model.value, true)) {
                result = ParseModelValue(model.value, core);
            }
        }
        if (!(IsArray(result, false)) && model.name && IsObject(core.entity, true) && IsArray(core.entity[model.name], false)) {
            result = core.entity[model.name];
        }
        if (!(IsArray(result, false)))
            result = [];
        return result;
    }
    function GetPatternValidator(pattern) {
        // ToDo:: Add all of the options that are built for this, numeric, alpha, ....
        switch (String(pattern).toLowerCase()) {
            case 'url':
                return ValidateUrl;
                break;
            case 'phone':
                return ValidatePhone;
                break;
            case 'email':
                return forms.Validators.email;
                break;
            case 'zip':
                return ValidatePhone;
                break;
            case 'password':
                return ValidatePassword;
                break;
            case 'username':
                return ValidateUsername;
                break;
            default:
                return null;
        }
    }
    function FieldItemOptionValues(model, core) {
        if (IsUndefined(model.options)) {
            model.options = {
                rawValues: [],
                values: []
            };
        }
        // console.log('model', model.options);
        if (!IsArray(model.options.rawValues, true)) {
            var optionValues = IsArray(model.options.values, true) ? model.options.values : [];
            model.options.rawValues = __spreadArray([], __read(new Map(optionValues.map(function (item) { return [item['name'], item]; })).values()));
        }
        var list = ConvertArrayToOptionList(model.options.rawValues, {
            converted: model.options.converted ? true : false,
            // ensure that an option shows up in list in case other conditions remove it, aka it has been archived
            nameKey: model.options.nameKey ? model.options.nameKey : 'name',
            ensure: model.options.ensure && IsObject(core.entity, true) ? {
                name: core.entity[model.options.ensure.name],
                value: core.entity[model.name]
            } : undefined,
            prevent: IsArray(model.options.prevent, true) ? model.options.prevent : [],
            preserveKeys: IsArray(model.options.preserveKeys, true) ? model.options.preserveKeys : [],
            // parent means this options should all have a common field trait like client_fk, account_fk ....
            parent: model.options.parent && IsObject(core.entity, true) ? {
                field: model.options.parent,
                value: core.entity[model.options.parent]
            } : undefined,
            // empty is the blank or null option that you want to have
            empty: null,
            sort: IsDefined(model.options.sort) ? model.options.sort : true,
        });
        return list;
    }
    /**
     * Generatea form config from the field item model;
     * @param core
     * @param model
     * @constructor
     */
    function FieldItemModelConfig(core, model) {
        var value;
        var assigned;
        var configInterface;
        var validators;
        //   const isDialogLimit = this.srv.dialog.openDialogs.length > 3;
        var isDialogLimit = false;
        var config = null;
        // const metadata = { ...GetCoreParamsAsMetadata(core.params), ...model.metadata };
        switch (model.form) {
            case 'sidebyside':
                assigned = Array.isArray(model.options.assigned) && model.options.assigned.length ? model.options.assigned : typeof model.options.assigned === 'string' && IsObject(core.entity.assignments, true) && Array.isArray(core.entity.assignments[model.options.assigned]) ? core.entity.assignments[model.options.assigned] : [];
                model.options.values = FieldItemOptionValues(model, core);
                model.options.converted = true;
                configInterface = {
                    assigned: assigned,
                    assignAll: typeof model.assign_all === 'boolean' ? model.assign_all : false,
                    assignedLabel: typeof model.assignedLabel === 'string' ? model.assignedLabel : 'Assigned',
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    displayHelper: typeof model.displayHelper === 'boolean' ? model.displayHelper : false,
                    displayTitle: typeof model.displayTitle === 'boolean' ? model.displayTitle : false,
                    facade: true,
                    filter: typeof model.filter === 'boolean' ? model.filter : true,
                    helpText: typeof model.helpText === 'string' ? model.helpText : undefined,
                    id: model.id ? model.id : undefined,
                    label: model.label ? ParseForAlias(model.label) : '',
                    metadata: model.metadata,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    name: model.name ? model.name : null,
                    optionsLabel: typeof model.optionsLabel === 'string' ? model.optionsLabel : 'Available',
                    options: model.options,
                    // bucketHeight: typeof model.bucketHeight === 'string' ? model.bucketHeight : undefined,
                    parentHeight: 'mat-grid-tile',
                    patch: model.patch,
                    route: typeof model.route === 'string' ? model.route : undefined,
                    removeAll: typeof model.removeAll === 'boolean' ? model.removeAll : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    validators: model.required ? [forms.Validators.required] : undefined,
                };
                config = new SideBySideConfig(CleanObject(configInterface));
                break;
            case 'select':
                model.options.values = FieldItemOptionValues(model, core);
                model.options.converted = true;
                configInterface = {
                    autoFill: model.autoFill,
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    empty: model.empty ? model.empty : null,
                    facade: model.facade ? true : false,
                    height: model.height ? model.height : undefined,
                    helpText: model.helpText ? model.helpText : undefined,
                    id: model.id ? model.id : undefined,
                    label: model.label ? ParseForAlias(model.label) : '',
                    mode: model.mode ? model.mode : 'select',
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    options: model.options,
                    patch: model.patch,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    required: model.required ? true : false,
                    validators: model.required ? [forms.Validators.required] : undefined,
                    value: typeof model.value !== 'undefined' && model.value !== null ? ParseModelValue(model.value, core) : IsObject(core.entity, true) && typeof core.entity[(model.name ? model.name : null)] !== 'undefined' ? core.entity[(model.name ? model.name : null)] : null,
                };
                config = new SelectConfig(CleanObject(configInterface));
                break;
            case 'select-modal':
                model.options.values = FieldItemOptionValues(model, core);
                model.options.converted = true;
                var configListInterface = {
                    autoFill: model.autoFill,
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    empty: model.empty ? model.empty : null,
                    facade: model.facade ? true : false,
                    height: model.height ? model.height : undefined,
                    helpText: model.helpText ? model.helpText : undefined,
                    id: model.id ? model.id : undefined,
                    label: model.subLabel ? ParseForAlias(model.subLabel) : '',
                    mode: model.mode ? model.mode : 'select',
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    options: model.options,
                    patch: model.patch,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    required: model.required,
                    validators: model.required ? [forms.Validators.required] : undefined,
                    value: typeof model.value !== 'undefined' && model.value !== null ? ParseModelValue(model.value, core) : IsObject(core.entity, true) && typeof core.entity[(model.name ? model.name : null)] !== 'undefined' ? core.entity[(model.name ? model.name : null)] : null,
                };
                config = new SelectModalConfig({
                    facade: false,
                    header: model.header ? model.header : null,
                    label: model.label ? model.label : null,
                    metadata: {},
                    name: model.name,
                    required: model.required,
                    validators: model.required ? [forms.Validators.required] : undefined,
                    list: new SelectListConfig(CleanObject(configListInterface))
                });
                break;
            case 'select-filter':
                model.options.values = FieldItemOptionValues(model, core);
                model.options.converted = true;
                configInterface = {
                    autoFill: model.autoFill,
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : undefined,
                    height: model.height ? model.height : undefined,
                    id: model.id ? model.id : undefined,
                    label: model.label ? ParseForAlias(model.label) : '',
                    mode: model.mode ? model.mode : 'select',
                    minHeight: model.minHeight ? model.minHeight : undefined,
                    multiple: model.multiple ? true : false,
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    options: model.options,
                    patch: model.patch,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    validators: model.required ? [forms.Validators.required] : undefined,
                    value: typeof model.value !== 'undefined' && model.value !== null ? ParseModelValue(model.value, core) : IsObject(core.entity, true) && typeof core.entity[(model.name ? model.name : null)] !== 'undefined' ? core.entity[(model.name ? model.name : null)] : null,
                };
                config = new SelectFilterConfig(CleanObject(configInterface));
                break;
            case 'select-list':
                model.options.values = FieldItemOptionValues(model, core);
                model.options.converted = true;
                configInterface = {
                    autoFill: model.autoFill,
                    all: model.all,
                    allowAll: model.allowAll,
                    allowGroupAll: model.allowGroupAll,
                    allOverlay: model.allOverlay,
                    allOverlayEnabled: model.allOverlayEnabled,
                    allOverlayLabel: model.allOverlayLabel,
                    allOverlayMessage: model.allOverlayMessage,
                    allOverlayCallback: model.allOverlayCallback,
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : undefined,
                    height: model.height ? model.height : undefined,
                    id: model.id ? model.id : undefined,
                    label: model.label ? ParseForAlias(model.label) : '',
                    mode: model.mode ? model.mode : null,
                    multiple: model.multiple ? true : false,
                    minHeight: model.minHeight ? model.minHeight : undefined,
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    options: model.options,
                    patch: model.patch,
                    required: model.required,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    validators: model.required ? [forms.Validators.required] : undefined,
                    value: typeof model.value !== 'undefined' && model.value !== null ? ParseModelValue(model.value, core) : IsObject(core.entity, true) && typeof core.entity[(model.name ? model.name : null)] !== 'undefined' ? core.entity[(model.name ? model.name : null)] : null,
                };
                config = new SelectListConfig(CleanObject(configInterface));
                break;
            case 'select-multi':
            case 'select_multi':
                model.options.values = FieldItemOptionValues(model, core);
                model.options.converted = true;
                configInterface = {
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : undefined,
                    id: model.id ? model.id : undefined,
                    label: model.label ? ParseForAlias(model.label) : '',
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    options: model.options,
                    patch: model.patch,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    validators: model.required ? [forms.Validators.required] : undefined,
                    value: FieldItemArrayValue(model, core),
                };
                model.options.converted = true;
                config = new SelectMultiConfig(CleanObject(configInterface));
                break;
            case 'textfield':
            case 'text':
            case 'input':
                validators = [];
                if (!model.mask)
                    validators.push(forms.Validators.maxLength(+model.maxlength || 64));
                if (model.mask)
                    model.maxlength = null;
                if (model.required)
                    validators.push(forms.Validators.required);
                if (model.pattern) {
                    var patternValidator = GetPatternValidator(model.pattern);
                    if (patternValidator) {
                        validators.push(patternValidator);
                    }
                }
                if (+model.minlength)
                    validators.push(forms.Validators.minLength(+model.minlength));
                configInterface = {
                    autofocus: model.autofocus ? true : null,
                    autoselect: model.autoselect ? true : null,
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled ? true : false,
                    empty: model.empty ? model.empty : null,
                    facade: model.facade ? true : null,
                    hint: model.hint ? true : null,
                    hintText: model.hintText ? model.hintText : null,
                    helpText: model.helpText ? model.helpText : null,
                    hidden: model.hidden ? true : false,
                    id: model.id ? model.id : undefined,
                    label: ParseForAlias(model.label),
                    metadata: model.metadata,
                    maxlength: model.maxlength || 64,
                    mask: typeof model.mask === 'string' && model.mask.length ? model.mask : null,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    patch: model.patch,
                    pattern: typeof model.pattern === 'string' && model.pattern.length ? model.pattern : null,
                    prefix: IsString(model.prefix, true) ? model.prefix : null,
                    prevent: IsArray(model.prevent, true) ? model.prevent : null,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    suffix: typeof model.suffix === 'string' && model.suffix.length ? model.suffix : null,
                    transformation: IsString(model.transformation, true) ? model.transformation : null,
                    validators: validators,
                    value: FieldItemTextValue(model, core),
                };
                config = new InputConfig(CleanObject(configInterface));
                break;
            case 'number':
                validators = [];
                if (model.min)
                    validators.push(forms.Validators.max(model.min));
                if (model.max)
                    validators.push(forms.Validators.max(model.max));
                if (model.required)
                    validators.push(forms.Validators.required);
                configInterface = {
                    bubble: model.bubble ? true : false,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : null,
                    hidden: model.hidden ? true : false,
                    id: model.id ? model.id : undefined,
                    label: ParseForAlias(model.label),
                    metadata: model.metadata,
                    min: typeof model.min !== 'undefined' ? model.min : 1,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    name: model.name ? model.name : null,
                    prefix: IsString(model.prefix, true) ? model.prefix : '',
                    patch: model.patch,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    suffix: typeof model.suffix === 'string' && model.suffix.length ? model.suffix : '',
                    step: typeof model.step ? model.step : 1,
                    transformation: IsString(model.transformation, true) ? model.transformation : null,
                    validators: validators,
                    value: FieldItemTextValue(model, core),
                };
                config = new NumberConfig(CleanObject(configInterface));
                break;
            case 'date':
                configInterface = {
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : null,
                    id: model.id ? model.id : undefined,
                    label: ParseForAlias(model.label),
                    min: IsString(model.min, true) ? model.min : null,
                    // min: isNaN( model.min ) === false ? model.min : null,
                    max: isNaN(model.max) === false ? model.max : null,
                    metadata: model.metadata,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    name: model.name ? model.name : null,
                    patch: model.patch,
                    required: model.required,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    transformation: IsString(model.transformation, true) ? model.transformation : null,
                    type: IsString(model.type, true) ? model.type : "Basic",
                    value: FieldItemTextValue(model, core),
                    validators: model.required ? [forms.Validators.required] : undefined,
                };
                configInterface = CleanObject(configInterface);
                if (IsDefined(model.filterPredicate))
                    configInterface.filterPredicate = model.filterPredicate;
                config = new DateConfig(configInterface);
                break;
            case 'datepicker':
                configInterface = {
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : null,
                    id: model.id ? model.id : undefined,
                    label: ParseForAlias(model.label),
                    min: IsString(model.min, true) ? model.min : null,
                    // min: isNaN( model.min ) === false ? model.min : null,
                    max: isNaN(model.max) === false ? model.max : null,
                    metadata: model.metadata,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    name: model.name ? model.name : null,
                    patch: model.patch,
                    required: model.required,
                    transformation: IsString(model.transformation, true) ? model.transformation : null,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    value: FieldItemTextValue(model, core),
                    validators: model.required ? [forms.Validators.required] : undefined,
                };
                configInterface = CleanObject(configInterface);
                if (IsDefined(model.filterPredicate))
                    configInterface.filterPredicate = model.filterPredicate;
                config = new DatePickerConfig(configInterface);
                break;
            case 'time':
                configInterface = {
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : null,
                    interval: model.interval ? model.interval : 15,
                    id: model.id ? model.id : undefined,
                    label: ParseForAlias(model.label),
                    metadata: model.metadata,
                    min: typeof model.min === 'string' ? model.min : null,
                    max: typeof model.max === 'string' ? model.max : null,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    patch: model.patch,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    time: model.time ? model.time : 12,
                    transformation: IsString(model.transformation, true) ? model.transformation : null,
                    value: FieldItemTextValue(model, core),
                    validators: model.required ? [forms.Validators.required] : undefined,
                };
                config = new TimeConfig(CleanObject(configInterface));
                break;
            case 'checkbox':
                model.options.values = FieldItemOptionValues(model, core);
                model.options.converted = true;
                configInterface = {
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : undefined,
                    id: model.id ? model.id : undefined,
                    label: model.label ? ParseForAlias(model.label) : '',
                    labelPosition: typeof model.labelPosition !== 'undefined' ? model.labelPosition : 'after',
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    options: model.options,
                    patch: model.patch,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    textOverflow: model.textOverflow ? model.textOverflow : 'wrap',
                    value: FieldItemBooleanValue(model, core),
                };
                config = new CheckboxConfig(CleanObject(configInterface));
                break;
            case 'switch':
                configInterface = {
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : undefined,
                    id: model.id ? model.id : undefined,
                    label: model.label ? ParseForAlias(model.label) : '',
                    labelPosition: typeof model.labelPosition !== 'undefined' ? model.labelPosition : 'after',
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    patch: model.patch,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    textOverflow: model.textOverflow ? model.textOverflow : 'wrap',
                    value: FieldItemBooleanValue(model, core),
                };
                config = new SwitchConfig(CleanObject(configInterface));
                break;
            case 'minmax':
                var minColumn = model.minColumn ? model.minColumn : 'min';
                var maxColumn = model.maxColumn ? model.maxColumn : 'max';
                var minValue = typeof model.minValue !== 'undefined' && model.minValue !== null ? ParseModelValue(model.minValue, core) : IsObject(core.entity, true) && typeof core.entity[minColumn] !== 'undefined' ? core.entity[minColumn] : 1;
                var maxValue = typeof model.maxValue !== 'undefined' && model.maxValue !== null ? ParseModelValue(model.maxValue, core) : IsObject(core.entity, true) && typeof core.entity[maxColumn] !== 'undefined' ? core.entity[maxColumn] : 10;
                configInterface = {
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : undefined,
                    id: model.id ? model.id : undefined,
                    label: model.label ? ParseForAlias(model.label) : '',
                    minColumn: model.minColumn ? model.minColumn : 'min',
                    maxColumn: model.maxColumn ? model.maxColumn : 'max',
                    minValue: minValue,
                    maxValue: maxValue,
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    patch: model.patch,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                };
                config = new MinMaxConfig(CleanObject(configInterface));
                break;
            case 'radio':
                model.options.values = FieldItemOptionValues(model, core);
                model.options.converted = true;
                configInterface = {
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    helpText: model.helpText ? model.helpText : '',
                    id: model.id ? model.id : undefined,
                    labelPosition: typeof model.labelPosition !== 'undefined' ? model.labelPosition : 'above',
                    label: model.label ? ParseForAlias(model.label) : '',
                    layout: typeof model.layout !== 'undefined' ? model.layout : 'row',
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    options: model.options,
                    patch: model.patch,
                    reset: model.reset ? true : false,
                    readonly: model.readonly ? true : false,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    sort: typeof model.labelPosition !== 'undefined' ? model.sort : false,
                    value: FieldItemTextValue(model, core),
                };
                model.options.converted = true;
                config = new RadioConfig(CleanObject(configInterface));
                break;
            case 'textarea':
                configInterface = {
                    autoSize: model.autoSize ? true : false,
                    bubble: model.bubble ? true : false,
                    facade: model.facade ? true : false,
                    height: model.height || 70,
                    helpText: model.helpText ? model.helpText : '',
                    id: model.id ? model.id : undefined,
                    label: ParseForAlias(model.label),
                    maxlength: model.maxlength || 255,
                    metadata: model.metadata,
                    maxHeight: model.maxHeight || null,
                    name: model.name ? model.name : null,
                    noInitialValue: model.noInitialValue ? model.noInitialValue : false,
                    pattern: typeof model.pattern === 'string' && model.pattern.length ? model.pattern : null,
                    patch: model.patch,
                    readonly: model.readonly,
                    session: model.session,
                    sessionPath: model.sessionPath,
                    validators: model.required ? [forms.Validators.required, forms.Validators.maxLength(model.maxlength || 255)] : [forms.Validators.maxLength(model.maxlength || 255)],
                    value: FieldItemTextValue(model, core),
                };
                config = new TextareaConfig(CleanObject(configInterface));
                break;
            case 'label':
                value = typeof model.value !== 'undefined' && model.value !== null ? ParseModelValue(model.value, core) : IsObject(core.entity, true) && IsObject(core.entity, true) && typeof core.entity[(model.name ? model.name : null)] !== 'undefined' ? core.entity[(model.name ? model.name : null)] : '';
                if (model.transformation && typeof (value) !== 'undefined') {
                    value = PopTransform(value, model.transformation);
                }
                if (typeof (model.copyLabelDisplay) !== 'undefined') {
                    model.copyLabelDisplay = ParseModelValue(model.copyLabelDisplay, core);
                    if (model.copyLabelDisplay && model.copyLabelDisplayTransformation) {
                        model.copyLabelDisplay = PopTransform(model.copyLabelDisplay, model.copyLabelDisplayTransformation);
                    }
                }
                if (typeof (model.copyLabelBody) !== 'undefined') {
                    model.copyLabelBody = ParseModelValue(model.copyLabelBody, core);
                    if (model.copyLabelBody && model.copyLabelBodyTransformation) {
                        model.copyLabelBody = PopTransform(model.copyLabelBody, model.copyLabelBodyTransformation);
                    }
                }
                if (typeof (model.copyValueDisplay) !== 'undefined') {
                    model.copyValueDisplay = model.copyValueDisplay !== null ? ParseModelValue(model.copyValueDisplay, core) : '';
                    if (model.copyValueDisplay && model.copyValueDisplayTransformation) {
                        model.copyValueDisplay = PopTransform(model.copyValueDisplay, model.copyValueDisplayTransformation);
                    }
                }
                if (typeof (model.copyValueBody) !== 'undefined') {
                    model.copyValueBody = model.copyValueBody !== null ? ParseModelValue(model.copyValueBody, core) : '';
                    if (model.copyValueBody && model.copyValueBodyTransformation) {
                        model.copyValueBody = PopTransform(model.copyValueBody, model.copyValueBodyTransformation);
                    }
                }
                if (typeof (model.valueButtonDisplay) !== 'undefined') {
                    model.valueButtonDisplay = ParseModelValue(model.valueButtonDisplay, core);
                    if (model.valueButtonDisplay && model.valueButtonDisplayTransformation) {
                        model.valueButtonDisplay = PopTransform(model.valueButtonDisplay, model.valueButtonDisplayTransformation);
                    }
                }
                configInterface = CleanObject({
                    name: model.name ? model.name : null,
                    label: ParseForAlias(model.label),
                    button: model.button,
                    border: model.border,
                    icon: model.icon,
                    iconType: model.iconType,
                    html: model.html,
                    textOverflow: model.textOverflow ? model.textOverflow : 'wrap',
                    labelButton: !!model.labelButton,
                    copyLabel: !!model.copyLabel,
                    copyLabelBody: model.copyLabelBody ? model.copyLabelBody : null,
                    copyLabelBodyTransformation: model.copyLabelBodyTransformation ? model.copyLabelBodyTransformation : null,
                    copyLabelDisplay: model.copyLabelDisplay ? model.copyLabelDisplay : null,
                    copyLabelDisplayTransformation: model.copyLabelDisplayTransformation ? model.copyLabelDisplayTransformation : null,
                    copyValue: !!model.copyValue,
                    copyValueBody: model.copyValueBody ? model.copyValueBody : null,
                    copyValueBodyTransformation: model.copyValueBodyTransformation ? model.copyValueBodyTransformation : null,
                    copyValueDisplay: model.copyValueDisplay ? model.copyValueDisplay : null,
                    copyValueDisplayTransformation: model.copyValueDisplayTransformation ? model.copyValueDisplayTransformation : null,
                    valueButton: !!model.valueButton,
                    valueButtonDisabled: !!model.valueButtonDisabled,
                    valueButtonDisplay: model.valueButtonDisplay ? model.valueButtonDisplay : null,
                    valueButtonDisplayTransformation: model.valueButtonDisplayTransformation ? model.valueButtonDisplayTransformation : null,
                    value: value,
                    link: model.link || false,
                    helpText: model.helpText ? model.helpText : undefined,
                    route: model.route && !isDialogLimit ? ParseModelValue(model.route, core) : '',
                    metadata: model.metadata,
                });
                config = new LabelConfig(CleanObject(configInterface));
                break;
            case 'textstring':
                configInterface = {
                    border: model.border,
                    className: model.className,
                    header: model.header,
                    id: model.id ? model.id : undefined,
                    name: model.name ? model.name : null,
                    size: model.size,
                    textOverflow: model.textOverflow,
                    value: model.value ? model.value : '',
                    warning: model.warning
                };
                config = new TextConfig(CleanObject(configInterface));
                break;
            case 'button':
                configInterface = {
                    bubble: model.bubble ? true : false,
                    disabled: model.disabled,
                    facade: model.facade ? true : false,
                    icon: model.icon ? model.icon : 'help_outline',
                    helpText: model.helpText ? model.helpText : undefined,
                    id: model.id ? model.id : undefined,
                    metadata: model.metadata,
                    name: model.name ? model.name : null,
                    patch: model.patch,
                    value: FieldItemTextValue(model, core),
                };
                config = new ButtonConfig(CleanObject(configInterface));
                break;
            case 'metadata':
                var val = IsDefined(model.value) ? model.value : IsObject(core.entity, true) && model.name in core.entity ? core.entity[model.name] : null;
                config = new MetadataConfig(model.name, val);
                break;
            default:
                exports.PopLog.warn("FieldItemModelConfig", "buildCoreFieldItemConfig", model.form);
                break;
        }
        return config;
    }

    var PopExtendComponent = /** @class */ (function () {
        function PopExtendComponent() {
            this.position = 1;
            this.core = {};
            this.events = new i0.EventEmitter();
            this.when = null;
            this.hidden = false;
            this.id = 1;
            this.trait = GetComponentTraitContainer();
            if (!this.asset)
                this.asset = GetComponentAssetContainer();
            if (!this.ui)
                this.ui = GetComponentAssetContainer();
            this.log = this._initializeLogSystem();
            this.dom = this._initializeDom();
        }
        PopExtendComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dom.loading();
            var init = new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.dom._extend()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.dom.configure()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.dom.register()];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.dom.proceed()];
                        case 4:
                            _a.sent();
                            if (!IsCallableFunction(this.onLoad)) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.onLoad(this.core, {
                                    source: this.name,
                                    type: 'component',
                                    name: 'onLoad',
                                    data: this
                                }, this.dom)];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6:
                            this.dom.ready();
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
            init.then(function () {
                _this.log.init();
            });
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopExtendComponent.prototype.ngOnDestroy = function () {
            var _this = this;
            var destroy = new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!IsCallableFunction(this.onUnload)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.onUnload(this.core, {
                                    source: this.name,
                                    type: 'component',
                                    name: 'onUnload',
                                    data: this
                                })];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, this.dom.unload()];
                        case 3:
                            _a.sent();
                            if (this.dom.repo)
                                this.dom.store();
                            this.dom.destroy();
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
            destroy.then(function () {
                _this.log.destroy();
            });
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopExtendComponent.prototype._initializeDom = function () {
            var _this = this;
            return Object.assign(Object.assign({}, GetComponentDomContainer()), {
                /**
                 * Initialize the component in a loading state
                 */
                loading: function () {
                    _this.dom.error = { code: 0, message: '' };
                    _this.dom.state.loading = true;
                    _this.dom.state.loader = false;
                    _this.dom.setTimeout('delay-loader-trigger', function () {
                        _this.dom.state.loader = true;
                    }, 500);
                },
                /**
                 * Configure the component tailored to its specific needs
                 */
                _extend: function () {
                    return new Promise(function (resolve) {
                        var repos = Object.keys(_this).filter(function (key) { return String(key).startsWith('_') && String(key).endsWith('Repo') && String(key).length > 6 && IsObject(_this[key], true); });
                        if (IsArray(repos, true)) {
                            if (!(IsObject(_this.srv)))
                                _this.srv = {};
                            repos.map(function (repoName) {
                                var srvName = repoName.replace('_', '').replace('Repo', '');
                                // this.log.info( `Transferred ${repoName} to srv container as ${srvName}` );
                                if (srvName === 'dom') {
                                    _this.dom.repo = _this[repoName];
                                }
                                else {
                                    _this.srv[srvName] = _this[repoName];
                                }
                                delete _this[repoName];
                            });
                        }
                        return resolve(true);
                    });
                },
                /**
                 * Configure the component tailored to its specific needs
                 */
                configure: function () {
                    return new Promise(function (resolve) {
                        return resolve(true);
                    });
                },
                /**
                 * Configure the component tailored to its specific needs
                 */
                proceed: function () {
                    return new Promise(function (resolve) {
                        return resolve(true);
                    });
                },
                /**
                 * Trigger the view to render
                 */
                ready: function () {
                    _this.dom.setTimeout('delay-loader-trigger', null);
                    _this.dom.state.loading = false;
                    _this.dom.state.loaded = true;
                    _this.dom.state.loader = false;
                    _this.dom.state.refresh = false;
                    if (IsArray(_this.when, true)) {
                        _this.log.info("eval when", _this.when);
                        _this.hidden = !EvaluateWhenConditions(_this.core, _this.when, _this.core);
                    }
                },
                /**
                 * Trigger the view to refresh
                 */
                refreshing: function () {
                    _this.dom.state.refresh = true;
                },
                /**
                 * Register this component in the PopDomService so that session, state, etc can be preserved
                 * It will also bind events to the appropriate handlers
                 * CoreConfig is obviously something that you must have for any of this to work
                 */
                register: function () {
                    return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            if (this.el && !this.dom.width.outer)
                                this.dom.width.outer = this.el.nativeElement.getBoundingClientRect().width;
                            if (IsObject(this.core, true)) {
                                if (IsObject(this.core.access, true))
                                    this.dom.access = JsonCopy(this.core.access);
                                if (typeof this.dom.handler.core === 'function' || IsArray(this.when, true)) {
                                    this.dom.setSubscriber('on-core-event', this.core.channel.subscribe(function (event) { return __awaiter(_this, void 0, void 0, function () {
                                        var _this = this;
                                        return __generator(this, function (_a) {
                                            // if( event.source !== this.name ){
                                            if (IsValidFieldPatchEvent(this.core, event) && IsArray(this.when)) {
                                                this.log.info('eval when', this.when);
                                                this.dom.setTimeout('eval-when', function () {
                                                    _this.hidden = !EvaluateWhenConditions(_this.core, _this.when, _this.core);
                                                }, 50);
                                            }
                                            if (event.source && event.target) {
                                                if (event.source && event.source === this.name)
                                                    return [2 /*return*/];
                                                if (event.target && String(event.target).search(this.name) === -1)
                                                    return [2 /*return*/];
                                            }
                                            if (IsCallableFunction(this.dom.handler.core))
                                                this.dom.handler.core(IsObject(this.core, true) ? this.core : null, event);
                                            return [2 /*return*/];
                                        });
                                    }); }));
                                }
                            }
                            if (this.name && typeof this.id !== 'undefined') {
                                if (this.dom.repo && typeof this.dom.repo.onRegister === 'function') {
                                    this.dom.repo.onRegister(this);
                                }
                            }
                            if (IsCallableFunction(this.onEvent)) {
                                this.dom.setSubscriber("on-event", this.events.subscribe(function (event) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.onEvent(this.core, event, this.dom)];
                                            case 1:
                                                _a.sent();
                                                this.log.event(this.name, event);
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }));
                            }
                            return [2 /*return*/, resolve(true)];
                        });
                    }); });
                },
                find: function (assetType, name, id) {
                    if (id === void 0) { id = 1; }
                    var asset = null;
                    if (assetType === 'field') {
                        var fieldRepo = StorageGetter(_this.dom, ['repo', 'ui', 'fields']);
                        asset = fieldRepo.get(name);
                        asset = StorageGetter(asset, ['inputs', 'config']);
                    }
                    else if (assetType === 'component') {
                        asset = StorageGetter(_this.dom, ['repo', 'components', String(name)]);
                        if (IsObject(asset) && id in asset) {
                            asset = asset[id];
                        }
                        else {
                            asset = null;
                        }
                    }
                    else if (_this.el && assetType === 'el') {
                        asset = _this.el.nativeElement.querySelector(name);
                    }
                    return asset;
                },
                focus: function (querySelector, delay) {
                    if (_this.el && IsString(querySelector, true)) {
                        _this.dom.setTimeout('focus-child-element-delay', function () {
                            _this.dom.setTimeout('focus-child-element', function () {
                                var childEl = _this.el.nativeElement.querySelector(querySelector);
                                if (childEl) {
                                    childEl.focus();
                                }
                            }, 0);
                        }, delay);
                    }
                },
                setError: function (err, modal) {
                    if (err === void 0) { err = null; }
                    if (modal === void 0) { modal = false; }
                    if (IsObject(err)) {
                        if (modal) {
                            exports.PopTemplate.error({ code: (err.status ? err.status : 422), message: GetHttpErrorMsg(err) });
                        }
                        else {
                            this.dom.error.code = err.status ? err.status : 422;
                            this.dom.error.message = GetHttpErrorMsg(err);
                        }
                    }
                    else {
                        this.dom.error.message = '';
                    }
                },
                /**
                 * Configure operations that need to happen when this component is going to be destroyed
                 */
                unload: function () {
                    return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, resolve(true)];
                        });
                    }); });
                },
                /**
                 * Preferred method of setting a subscriber
                 * @param subscriptionKey
                 * @param subscription
                 */
                setSubscriber: function (subscriptionKey, subscription) {
                    if (subscription === void 0) { subscription = null; }
                    if (subscriptionKey && _this.dom.subscriber && subscriptionKey in _this.dom.subscriber && _this.dom.subscriber[subscriptionKey] && typeof _this.dom.subscriber[subscriptionKey].unsubscribe === 'function') {
                        _this.dom.subscriber[subscriptionKey].unsubscribe();
                    }
                    if (subscription) {
                        _this.dom.subscriber[subscriptionKey] = subscription;
                    }
                },
                /**
                 * Preferred method of setting a timeout
                 * @param timeoutKey
                 * @param callback
                 * @param delay
                 */
                setTimeout: function (timeoutKey, callback, delay) {
                    if (callback === void 0) { callback = null; }
                    if (delay === void 0) { delay = 250; }
                    if (timeoutKey && _this.dom.delay && timeoutKey in _this.dom.delay && _this.dom.delay[timeoutKey]) {
                        clearTimeout(_this.dom.delay[timeoutKey]);
                    }
                    if (typeof callback === 'function') {
                        _this.dom.delay[timeoutKey] = setTimeout(callback, delay);
                    }
                },
                setHeight: function (parentHeight, overhead) {
                    if (_this.name && parentHeight > 0) {
                        _this.dom.overhead = overhead;
                        _this.dom.height = {
                            outer: parentHeight,
                            inner: parentHeight - overhead,
                            split: +((parentHeight - overhead) / 2),
                            default: 0
                        };
                    }
                },
                setHeightWithParent: function (parentClassName, overhead, defaultHeight) {
                    if (parentClassName === void 0) { parentClassName = null; }
                    if (overhead === void 0) { overhead = 0; }
                    return new Promise(function (resolve) {
                        if (_this.el) {
                            _this.dom.waitForParent(_this.el, parentClassName, 10, 10).then(function (parentEl) {
                                if (parentEl) {
                                    _this.dom.waitForParentHeight(parentEl).then(function (parentHeight) {
                                        if (parentHeight < defaultHeight)
                                            parentHeight = defaultHeight;
                                        if (parentHeight) {
                                            _this.dom.setHeight(+parentHeight, overhead);
                                            resolve(true);
                                        }
                                        else {
                                            _this.dom.setHeight(defaultHeight, overhead);
                                            resolve(true);
                                        }
                                    });
                                }
                                else {
                                    _this.dom.setHeight(defaultHeight, overhead);
                                    resolve(true);
                                }
                            });
                        }
                        else {
                            resolve(false);
                        }
                    });
                },
                focusNextInput: function (el) {
                    if (el) {
                        var limit = 5;
                        var input = null;
                        var next = el.nativeElement.nextElementSibling;
                        while (limit && !input) {
                            input = next.querySelector('input[type=text]');
                            if (!input) {
                                input = next.querySelector('input[type=checkbox]');
                            }
                            if (!input) {
                                input = next.querySelector('mat-select');
                            }
                            if (!input) {
                                input = next.querySelector('button');
                            }
                            if (!input) {
                                if (next.nativeElement && next.nativeElement.nextElementSibling) {
                                    next = next.nativeElement.nextElementSibling;
                                }
                                else if (next.nextElementSibling) {
                                    next = next;
                                    next = next.nextElementSibling;
                                }
                                else {
                                    limit = 0;
                                }
                            }
                            limit--;
                        }
                        if (input) {
                            if (input instanceof i0.ElementRef) {
                                input.nativeElement.focus();
                            }
                            else if (IsCallableFunction(next.focus)) {
                                input.focus();
                            }
                        }
                    }
                },
                setWithComponentInnerHeight: function (component, componentId, overhead, defaultHeight) {
                    if (componentId === void 0) { componentId = 1; }
                    return new Promise(function (resolve) {
                        if (_this.dom.repo) {
                            var height = _this.dom.repo.getComponentHeight(component);
                            if (height && height.inner) {
                                height = height.inner;
                            }
                            else {
                                height = defaultHeight;
                            }
                            _this.dom.setHeight(+height, overhead);
                            resolve(_this.dom.height.inner);
                        }
                        else {
                            _this.dom.setHeight(+defaultHeight, overhead);
                            resolve(_this.dom.height.inner);
                        }
                    });
                },
                waitForParent: function (el, className, time, counter) {
                    if (className === void 0) { className = null; }
                    if (time === void 0) { time = 50; }
                    if (counter === void 0) { counter = 5; }
                    var interval;
                    var parentEl;
                    return new Promise(function (resolve) {
                        interval = setInterval(function () {
                            parentEl = _this.dom.findParentElement(el, className);
                            if (!counter || (parentEl)) {
                                clearInterval(interval);
                                return resolve(parentEl);
                            }
                            counter--;
                        }, time);
                    });
                },
                waitForParentHeight: function (el, time, counter) {
                    if (time === void 0) { time = 5; }
                    if (counter === void 0) { counter = 10; }
                    return new Promise(function (resolve) {
                        var interval = setInterval(function () {
                            if (!counter || (el && el.clientHeight)) {
                                clearInterval(interval);
                                return resolve(el.clientHeight);
                            }
                            counter--;
                        }, time);
                    });
                },
                findParentElement: function (el, className) {
                    if (className === void 0) { className = null; }
                    var attempts = 10;
                    var found;
                    if (el && el.nativeElement && el.nativeElement.parentElement) {
                        var parent = el.nativeElement.parentElement;
                        while (!found && attempts) {
                            if (parent) {
                                if (className) {
                                    if (parent.classList && parent.classList.contains(className)) {
                                        found = parent;
                                    }
                                }
                                else {
                                    found = parent;
                                }
                                if (!found) {
                                    parent = parent.parentElement;
                                }
                            }
                            attempts--;
                        }
                    }
                    return found;
                },
                store: function (key) {
                    if (key === void 0) { key = null; }
                    if (_this.dom.repo && _this.name && _this.id) {
                        return _this.dom.repo.onSession(_this, key);
                    }
                },
                destroy: function () {
                    if (_this.dom)
                        DestroyComponentDom(_this.dom);
                }
            });
        };
        PopExtendComponent.prototype._initializeLogSystem = function () {
            var _this = this;
            return {
                repo: {
                    message: function (message) {
                        return "%c" + message;
                    },
                    color: function (type) {
                        var color = 'aqua';
                        switch (type) {
                            case 'warn':
                                color = 'orange';
                                break;
                            case 'force':
                            case 'error':
                            case 'destroy':
                                color = 'red';
                                break;
                            case 'info':
                                color = 'aqua';
                                break;
                            case 'event':
                                color = 'yellow';
                                break;
                            case 'onSession':
                            case 'event-trigger':
                                color = 'gold';
                                break;
                            case 'cache-in':
                                color = 'green';
                                break;
                            case 'cache-out':
                                color = 'darkgreen';
                                break;
                            case 'dom':
                                color = 'brown';
                                break;
                            case 'debug':
                                color = 'pink';
                                break;
                            case 'api':
                                color = 'darkgreen';
                                break;
                            case 'config':
                                color = 'pink';
                                break;
                            case 'theme':
                                color = 'purple';
                                break;
                            default:
                                color = 'aqua';
                                break;
                        }
                        return "color: " + color;
                    },
                    enabled: function (type, component) {
                        if (type === void 0) { type = ''; }
                        if (component === void 0) { component = null; }
                        if (IsObject(exports.PopEnv, true) && exports.PopEnv.debug) {
                            if (type && Array.isArray(exports.PopEnv.debugTypes)) {
                                if (exports.PopEnv.debugTypes.includes(type))
                                    return true;
                            }
                            if (typeof exports.PopEnv.debugLevel === 'number') {
                                if (['error', 'onSession'].includes(type) && exports.PopEnv.debug >= 1) {
                                    return true;
                                }
                                if (['warning', 'info'].includes(type) && exports.PopEnv.debug >= 2) {
                                    return true;
                                }
                                if (['events'].includes(type) && exports.PopEnv.debug >= 2) {
                                    return true;
                                }
                            }
                            if (component && typeof exports.PopEnv.debugComponents === 'string') {
                                return exports.PopEnv.debugComponents.search(component) > -1;
                            }
                        }
                        return false;
                    },
                    init: function (componentName, message, data, force) {
                        if (data === void 0) { data = ''; }
                        if (force === void 0) { force = false; }
                        var type = 'init';
                        if (_this.log.repo.enabled(type, componentName) || force)
                            console.log(_this.log.repo.message(componentName + ":" + message), _this.log.repo.color((force ? 'force' : type)), data);
                    },
                    debug: function (componentName, message, data, force) {
                        if (data === void 0) { data = ''; }
                        if (force === void 0) { force = false; }
                        var type = 'debug';
                        if (_this.log.repo.enabled(type, componentName) || force)
                            console.log(_this.log.repo.message(componentName + ":" + message), _this.log.repo.color((force ? 'force' : type)), data);
                    },
                    cache: function (componentName, message, set, force) {
                        if (set === void 0) { set = true; }
                        if (force === void 0) { force = false; }
                        var type = 'cache';
                        if (_this.log.repo.enabled(type, componentName) || force) {
                            type = set ? 'cache-in' : 'cache-out';
                            console.log(_this.log.repo.message(componentName + ":" + message), _this.log.repo.color((force ? 'force' : type)));
                        }
                    },
                    warn: function (componentName, message, data, force) {
                        if (data === void 0) { data = ''; }
                        if (force === void 0) { force = false; }
                        var type = 'warn';
                        if (_this.log.repo.enabled(type, componentName) || force)
                            console.log(_this.log.repo.message(componentName + ":" + message), _this.log.repo.color((force ? 'force' : type)), data);
                    },
                    info: function (componentName, message, data, force) {
                        if (data === void 0) { data = ''; }
                        if (force === void 0) { force = false; }
                        var type = 'info';
                        if (_this.log.repo.enabled(type, componentName) || force)
                            console.log(_this.log.repo.message(componentName + ":" + message), _this.log.repo.color((force ? 'force' : type)), data);
                    },
                    theme: function (componentName, message, data, force) {
                        if (data === void 0) { data = ''; }
                        if (force === void 0) { force = false; }
                        var type = 'theme';
                        if (_this.log.repo.enabled(type, componentName) || force)
                            console.log(_this.log.repo.message(componentName + ":" + message), _this.log.repo.color((force ? 'force' : type)), data);
                    },
                    event: function (componentName, message, event, force) {
                        if (force === void 0) { force = false; }
                        var type = 'event';
                        if (_this.log.repo.enabled(type, componentName) || force)
                            console.log(_this.log.repo.message(componentName + ":" + message), _this.log.repo.color((force ? 'force' : type)), event);
                    },
                    error: function (componentName, message, data, force) {
                        if (data === void 0) { data = ''; }
                        if (force === void 0) { force = false; }
                        var type = 'error';
                        if (_this.log.repo.enabled(type, componentName) || force) {
                            console.log(_this.log.repo.message(componentName + ":" + message), _this.log.repo.color((force ? 'force' : type)), data);
                            // throw new Error('message');
                        }
                    }
                },
                init: function () {
                    if (_this.log.repo.enabled('init', _this.name))
                        console.log(_this.log.repo.message(_this.name + ":init"), _this.log.repo.color('init'), _this);
                },
                debug: function (msg, data) {
                    if (msg === void 0) { msg = 'Debug'; }
                    if (data === void 0) { data = ''; }
                    if (_this.log.repo.enabled('debug', _this.name))
                        console.log(_this.log.repo.message(_this.name + ":" + msg), _this.log.repo.color('debug'), data);
                },
                error: function (msg, error) {
                    if (msg === void 0) { msg = 'Error'; }
                    if (error === void 0) { error = ''; }
                    if (_this.log.repo.enabled('error', _this.name))
                        console.log(_this.log.repo.message(_this.name + ":" + msg), _this.log.repo.color('error'), error);
                },
                warn: function (msg, data) {
                    if (msg === void 0) { msg = 'Warning'; }
                    if (data === void 0) { data = ''; }
                    if (_this.log.repo.enabled('warn', _this.name))
                        console.log(_this.log.repo.message(_this.name + ":" + msg), _this.log.repo.color('error'), data);
                },
                info: function (msg, data) {
                    if (msg === void 0) { msg = 'info'; }
                    if (data === void 0) { data = ''; }
                    if (_this.log.repo.enabled('event', _this.name))
                        console.log(_this.log.repo.message(_this.name + ":" + msg), _this.log.repo.color('info'), data);
                },
                event: function (msg, event) {
                    if (msg === void 0) { msg = 'event'; }
                    if (_this.log.repo.enabled('event', _this.name))
                        console.log(_this.log.repo.message(_this.name + ":" + msg), _this.log.repo.color('event'), event);
                },
                config: function (msg, config) {
                    if (msg === void 0) { msg = 'config'; }
                    if (config === void 0) { config = ''; }
                    if (_this.log.repo.enabled('config', _this.name))
                        console.log(_this.log.repo.message(_this.name + ":" + msg), _this.log.repo.color('config'), config);
                },
                destroy: function () {
                    if (_this.log.repo.enabled('destroy', _this.name))
                        console.log(_this.log.repo.message(_this.name + ":destroy"), _this.log.repo.color('destroy'));
                },
            };
        };
        return PopExtendComponent;
    }());
    PopExtendComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-base-component',
                    template: "Base Component"
                },] }
    ];
    PopExtendComponent.ctorParameters = function () { return []; };
    PopExtendComponent.propDecorators = {
        position: [{ type: i0.Input }],
        core: [{ type: i0.Input }],
        events: [{ type: i0.Output }],
        extension: [{ type: i0.Input }],
        onLoad: [{ type: i0.Input }],
        onEvent: [{ type: i0.Input }],
        onUnload: [{ type: i0.Input }],
        when: [{ type: i0.Input }],
        hidden: [{ type: i0.HostBinding, args: ['class.sw-hidden',] }, { type: i0.Input }]
    };

    var PopMenuComponent = /** @class */ (function (_super) {
        __extends(PopMenuComponent, _super);
        function PopMenuComponent(APP_GLOBAL) {
            var _this = _super.call(this) || this;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.name = 'PopMenuComponent';
            _this.asset = {
                existingBusinesses: undefined
            };
            _this.ui = {
                alternate_businesses: [],
                menus: {
                    all: [],
                    more: []
                },
                user: undefined
            };
            _this.srv = {
                base: exports.ServiceInjector.get(PopBaseService),
                credential: exports.ServiceInjector.get(PopCredentialService),
                menu: exports.ServiceInjector.get(PopMenuService),
                router: exports.ServiceInjector.get(i1.Router),
            };
            _this.dom.configure = function () {
                // this component set the outer height boundary of this view
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, Promise.all([
                                    this._setInitialConfig()
                                ])];
                            case 1:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (!this.dom.state.checkedContent && this.mmNavRef) {
                            this.onUpdateMenus();
                            this.dom.state.checkedContent = true;
                        }
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        PopMenuComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The user click to a app nav menu
         * @param appPath
         */
        PopMenuComponent.prototype.onChangeApp = function (appPath) {
            var _this = this;
            if (i0.isDevMode() && IsString(exports.PopHref)) { // Auto Login/Logout since there is no access to the prime-user-app
                if (appPath === '/login') {
                    if (exports.PopEnv.username && exports.PopEnv.password) {
                        exports.PopTemplate.lookBusy(30);
                        this.srv.credential.authenticate({
                            username: exports.PopEnv.username,
                            password: exports.PopEnv.password
                        }).then(function (auth) {
                            if (IsObject(auth, true)) {
                                return window.location.reload();
                            }
                            else {
                                exports.PopTemplate.error({ message: String(auth), code: 500 });
                            }
                        });
                    }
                }
                else if (appPath === '/logout') {
                    exports.PopTemplate.goodbye();
                    setTimeout(function () {
                        _this.srv.credential.clear().subscribe(function () {
                            _this.srv.base.switchApps("/" + (IsString(exports.PopHref, true) ? exports.PopHref : ''));
                        });
                    }, 0);
                }
                else {
                    exports.PopTemplate.notify("You Shall not Pass! Actually this link will take you to nowhere, so its been disabled.");
                }
            }
            else {
                this.srv.base.switchApps(appPath);
            }
        };
        /**
         * Temporary fx to help test if the menu can auto update itself to external changes
         */
        PopMenuComponent.prototype.onAuthVerification = function () {
            exports.PopTemplate.verify();
        };
        /**
         * A user can select from a list of businesses that their prime user has access to
         * @param appPath
         */
        PopMenuComponent.prototype.onChangeBusiness = function (id) {
            var slugs = window.location.href.split(exports.PopHref + '/').pop().trim();
            slugs = slugs.split('/');
            slugs = slugs.slice(0, 1);
            var path = slugs.join('/');
            var redirect = window.location.origin + "/" + exports.PopHref + "/" + slugs.join('/');
            var originalRoute = IsObject(exports.PopAliasRouteMap, true) && path in exports.PopAliasRouteMap ? exports.PopAliasRouteMap[path] : null;
            SetSiteVar('App.redirect', (originalRoute ? originalRoute : redirect));
            this.srv.menu.changeBusiness(id);
        };
        /**
         * Determine the presentation of the nav menus
         */
        PopMenuComponent.prototype.onUpdateMenus = function () {
            if (!this.dom.state.authenticated) {
                this.ui.menus.all = [];
                this.ui.menus.more = [];
            }
            else {
                var moreMenus = [];
                var talliedMenuSize = 0;
                var children = this.mmNavRef.nativeElement.children;
                var maxWidth = this.mmNavRef.nativeElement.offsetWidth - 15;
                for (var i = 0; i < children.length; i++) {
                    talliedMenuSize += children[i].offsetWidth;
                    if (talliedMenuSize < maxWidth) {
                        children[i].style.visibility = 'visible';
                    }
                    else {
                        children[i].style.visibility = '';
                        moreMenus.push(this.ui.menus.all[i]);
                    }
                }
                this.ui.menus.more = moreMenus;
            }
        };
        PopMenuComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Set the initial config for this component
         * @private
         */
        PopMenuComponent.prototype._setInitialConfig = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.dom.active.path = "/" + window.location.pathname.split('/')[1];
                    this.dom.active.business = undefined;
                    this.dom.state.authenticated = false;
                    this.dom.state.checkedContent = false;
                    this.dom.state.isDevMode = i0.isDevMode();
                    this._initialize();
                    this.dom.setSubscriber('init', this.APP_GLOBAL.init.subscribe(function (val) {
                        if (val) {
                            _this.dom.setTimeout("init", function () {
                                _this._initialize();
                            }, 100);
                        }
                    }));
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Initialize the component
         * This is designed so that at any time a verification event can be fired from the Initializer module, and the menu can respond to the business(app)s that is stored in the new Auth Token
         * Future:  A web socket will be able to detect a change in security+access of apps and trigger the menu to auto update
         */
        PopMenuComponent.prototype._initialize = function () {
            var _this = this;
            this.dom.state.authenticated = this.srv.menu.isAuthenticated();
            this.ui.user = this.srv.base.getAuthPrimeUser();
            this._loadBusiness();
            setTimeout(function () {
                _this.onUpdateMenus();
            }, 0);
        };
        /**
         * Set the menus for the current business, apps across the top
         * @param business
         */
        PopMenuComponent.prototype._loadBusiness = function () {
            var _this = this;
            // Token details should contain all the info to populate the menu bar.
            var businesses = this.srv.base.getAuthBusinesses();
            if (IsObject(businesses, true) && !(ObjectsMatch(this.asset.existingBusinesses, businesses))) { // check to see if an update is really required
                this.asset.existingBusinesses = businesses;
                // Set non-business unit stuff.
                // Get the current buId from onSession storage.
                var businessId_1 = this.srv.base.getCurrentBusinessId();
                this.ui.alternate_businesses = [];
                // If a business unit has been found then populate the necessary objects.
                if (businessId_1) {
                    Object.keys(businesses).map(function (buId) {
                        var business = businesses[buId];
                        if (business.id === businessId_1) {
                            _this.dom.active.business = {
                                id: business.id,
                                name: business.name,
                                short_name: business.short_name,
                                logo_main_url: business.logo_main_url,
                                logo_small_url: business.logo_small_url,
                            };
                            _this._setBusinessAppMenus(business);
                        }
                        else {
                            _this.ui.alternate_businesses.push({
                                id: business.id,
                                name: business.name,
                                short_name: business.short_name,
                                logo_main_url: business.logo_main_url,
                                logo_small_url: business.logo_small_url,
                            });
                        }
                    });
                }
            }
        };
        /**
         * This set the nav menu across the top of template
         * @param business
         */
        PopMenuComponent.prototype._setBusinessAppMenus = function (business) {
            var _this = this;
            if (business) {
                if (IsArray(business.apps, true)) {
                    this.ui.menus.all = business.apps.filter(function (app) {
                        return +app.active;
                    }).sort(function (a, b) {
                        if (a.sort < b.sort)
                            return -1;
                        if (a.sort > b.sort)
                            return 1;
                        return 0;
                    }).map(function (app) {
                        return _this._extractAppMenu(app);
                    });
                }
                else if (IsObject(business.apps, true)) {
                    this.ui.menus.all = Object.keys(business.apps).map(function (appKey) {
                        return _this._extractAppMenu(business.apps[appKey]);
                    });
                }
            }
        };
        /**
         * This fx will extract the necessary data out of the app data
         * @param app
         * @private
         */
        PopMenuComponent.prototype._extractAppMenu = function (app) {
            return {
                name: app.label ? app.label : app.name,
                path: "/" + String(app.name).toLowerCase(),
                description: '',
                short_description: '',
                sort: app.sort,
                icon: '',
            };
        };
        return PopMenuComponent;
    }(PopExtendComponent));
    PopMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-menu',
                    template: "<div class=\"mm-sticky-container\" (window:resize)=\"onUpdateMenus()\">\n  <!-- User Not Logged In -->\n  <div *ngIf=\"!dom.state.authenticated\" class=\"mm-container pt-bg-1\">\n    <div class=\"mm-bu\">\n      <div class=\"mm-bu-selected\">\n        <a href=\"/public/\" onclick=\"window.location.reload()\">PopCX</a>\n      </div>\n    </div>\n\n    <div class=\"mm-public\">\n      <div class=\"mm-buttons\">\n        <button mat-raised-button (click)=\"onChangeApp('/login')\" role=\"button\">Login</button>\n      </div>\n      <div class=\"mm-buttons\">\n        <button mat-raised-button (click)=\"onChangeApp('/signup')\" role=\"button\">Sign Up</button>\n      </div>\n    </div>\n\n  </div>\n\n  <!-- User Logged In -->\n  <div class=\"mm-container pt-bg-1\" [ngClass]=\"{'sw-hidden': !dom.state.authenticated}\">\n\n    <div *ngIf=\"!dom.active.business\" class=\"mm-bu\">\n      <div class=\"mm-bu-selected\">\n        <a onclick=\"window.location.reload()\">Welcome to PopCX</a>\n      </div>\n    </div>\n\n    <div *ngIf=\"dom.active.business\" class=\"mm-bu active-business\" >\n      <div *ngIf=\"ui.alternate_businesses.length\" [matMenuTriggerFor]=\"businessUnitMenu\" class=\"mm-bu-more\" >\n        <img *ngIf=\"dom.active.business.logo_main_url\" class=\"mm-bu-selected-img\" src=\"{{dom.active.business.logo_main_url}}\">\n        <span *ngIf=\"!dom.active.business.logo_main_url\" class=\"mm-bu-selected\">{{dom.active.business.name}}</span>\n        <mat-menu #businessUnitMenu=\"matMenu\" [overlapTrigger]=\"false\" class=\"mm-bu-list\">\n          <div *ngFor=\"let business of ui.alternate_businesses\" (click)=\"onChangeBusiness(business.id)\">\n            <img *ngIf=\"business.logo_main_url\" class=\"mm-nav-item-img\" src=\"{{business.logo_main_url}}\">\n            <span *ngIf=\"!business.logo_main_url\" class=\"mm-bu-list-item\">{{business.name}}</span>\n          </div>\n        </mat-menu>\n      </div>\n      <div *ngIf=\"!ui.alternate_businesses.length\">\n        <img *ngIf=\"dom.active.business.logo_main_url\" class=\"mm-bu-selected-img\" src=\"{{dom.active.business.logo_main_url}}\">\n        <span *ngIf=\"!dom.active.business.logo_main_url\" class=\"mm-bu-selected\">{{dom.active.business.name}}</span>\n      </div>\n    </div>\n\n\n\n    <div class=\"mm-nav\" #mmNavRef>\n      <div *ngFor=\"let menu of ui.menus.all\" class=\"mm-nav-item-hidden\">\n        <!-- Fake Div is here to stablize the nav buttons so they do not expand in size when hover trasition is applied-     -->\n        <div class=\"mm-nav-item-fake\"><span>{{menu.name}}</span></div>\n        <div class=\"mm-nav-item mat-h4\" [ngClass]=\"{'mm-nav-item-active' : menu.path == dom.active.path}\" (click)=\"onChangeApp(menu.path)\">\n          <span >{{menu.name}}</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"mm-misc\" >\n      <div *ngIf=\"ui.menus.more.length\">\n        <div class=\"mm-misc-more\" [matMenuTriggerFor]=\"moreMenus\">\n          <mat-icon>more_vert</mat-icon>\n        </div>\n        <mat-menu #moreMenus=\"matMenu\" [overlapTrigger]=\"false\" class=\"\">\n          <div *ngFor=\"let menu of ui.menus.more\" class=\"\" (click)=\"onChangeApp(menu.path)\">\n            <span class=\"mm-more-menu-item\">{{menu.name}}</span>\n          </div>\n        </mat-menu>\n      </div>\n\n\n      <div class=\"search-control mm-misc\">\n        <div >\n          <mat-form-field class=\"sw-search\" appearance=\"outline\" >\n            <span matPrefix class=\"search-icon\">\n              <mat-icon>search</mat-icon>\n            </span>\n            <input  matInput placeholder=\"Search\">\n          </mat-form-field>\n        </div>\n      </div>\n\n      <mat-icon class=\"mm-misc-notification\">notifications</mat-icon>\n    </div>\n\n    <div class=\"mm-profile\" [matMenuTriggerFor]=\"profileMenu\" >\n\n      <div class=\"mm-profile-avatar\" *ngIf=\"ui.user\">\n        <img *ngIf=\"ui.user.avatarLink\" class=\"mm-avatar-img\" [src]=\"ui.user.avatarLink\"/>\n        <div *ngIf=\"!ui.user.avatarLink\" class=\"sw-circle-ID\">\n          {{ui.user.initials}}\n        </div>\n      </div>\n\n      <mat-menu #profileMenu=\"matMenu\" [overlapTrigger]=\"false\" class=\"mm-profile-menu\">\n        <!--<div *ngIf=\"dom.state.isDevMode\" class=\"mm-profile-list-item\" (click)=\"onAuthVerification();\">Verify Auth (Temp)</div>-->\n        <div class=\"mm-profile-list-item\" (click)=\"onChangeApp('/user/profile');\">Profile</div>\n        <div class=\"mm-profile-list-item\" (click)=\"onChangeApp('/logout');\">Logout</div>\n      </mat-menu>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [".mm-sticky-container{position:fixed;width:100%;z-index:111}.mm-buttons{margin-right:10px}.mm-container{display:flex;flex-wrap:nowrap;justify-content:center;align-items:center;height:48px;margin:0;color:var(--background-base)}.search-icon{color:var(--foreground-base)}.mm-container a{color:var(--background-base)}.mm-public{order:2;flex:1 1 auto;justify-content:flex-end;padding-right:10px}.mm-bu,.mm-public{height:100%;align-items:center;display:inline-flex}.mm-bu{flex:0 0 257px;width:257px;overflow:hidden;flex-wrap:nowrap;justify-content:left;background-color:var(--primary-700);border-bottom:1px solid;border-bottom-color:var(--disabled);border-right:1px solid;border-right-color:var(--disabled);box-sizing:border-box}.active-business,.mm-profile{border:1px ridge var(--primary)}.mm-bu-selected{display:inline-block;font-size:16px;line-height:95%;padding:0 20px;padding:0 0 0 var(--gap-m);color:#fff}.mm-bu-selected a{text-decoration:none}.mat-icon,.mm-bu,.mm-profile-text{transition:font-weight .4s,color .4s;-webkit-transition:font-weight .4s,color .4s}.mm-bu-more{cursor:pointer;height:100%;display:flex;align-items:center}.mm-bu-selected-img{width:216px;padding:0 20px}.mm-bu-list-item,.mm-profile-list-item{width:216px}.mm-bu-list-item,.mm-more-menu-item,.mm-profile-list-item{display:block;padding:10px 20px;font-size:1rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;transition:font-weight .4s,background-color .4s}.mm-bu-list-item:hover,.mm-more-menu-item:hover,.mm-nav-item-img:hover,.mm-profile-list-item:hover{font-weight:500;background-color:var(--darken1);cursor:pointer}.mm-nav{display:flex;flex:1 1 auto;height:100%;align-items:center;overflow:hidden;white-space:nowrap;background-color:var(--background-main-menu);border-bottom:1px solid;border-bottom-color:var(--disabled);box-sizing:border-box}.mm-nav-item{text-align:left;padding:15px 0 15px var(--gap-lm);white-space:nowrap;cursor:pointer;transition:font-weight .4s,color .4s;color:var(--foreground-base)}.mm-nav-item-hidden{visibility:hidden}.mm-nav-item-fake{margin-top:-20px;font-size:1.1rem;padding-left:15px;padding-right:15px;white-space:nowrap;font-weight:500;visibility:hidden}.mm-nav-item-img{width:216px;padding:6px 20px;display:block;transition:background-color 1s}.mm-nav-item-active{color:var(--primary);font-weight:700}.mm-nav-item:hover{font-weight:700}.mm-nav-item:active{font-weight:500;color:var(--primary-700)}.mm-misc{height:100%;display:flex;flex-wrap:nowrap;justify-content:flex-end;align-items:center;background-color:var(--background-main-menu);color:var(--text-2);border-bottom:1px solid;border-bottom-color:var(--disabled);box-sizing:border-box}.mm-misc-notification{font-size:1.25rem;text-align:right;padding:5px var(--gap-m) 0 0;cursor:pointer}.mm-misc-more{display:flex;align-items:center;height:48px;padding-right:10px;cursor:pointer}.mm-misc-more .mat-icon{font-size:2.3em;cursor:pointer;margin-bottom:10px}.mm-profile{max-width:80px;height:100%;display:flex;flex-wrap:nowrap;justify-content:flex-end;align-items:center;cursor:pointer;background-color:var(--primary-700);box-sizing:border-box}.mm-profile-text{width:137px;font-size:1rem;flex:1 1 auto;padding-left:10px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mm-profile-avatar{display:flex;align-items:center;justify-content:center;width:40px;height:40px;overflow:hidden;background-color:var(--disabled);border-radius:50%;margin:0 var(--gap-m)}.mm-profile-avatar path{fill:var(--primary-text)}.mm-avatar-img{max-width:50px;max-height:50px;border-radius:50%}.mm-profile-menu{display:flex;flex-direction:column}.mm-line-break{flex:none;width:1px;background-color:var(--lighten-50);height:65%}.search-control{flex-grow:0.5;padding-right:var(--gap-lm);border-bottom:0!important}:host ::ng-deep .search-control .mat-form-field .mat-form-field-infix{width:200px}"]
                },] }
    ];
    PopMenuComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] }
    ]; };
    PopMenuComponent.propDecorators = {
        mmNavRef: [{ type: i0.ViewChild, args: ['mmNavRef',] }]
    };

    var PopMenuModule = /** @class */ (function () {
        function PopMenuModule() {
        }
        return PopMenuModule;
    }());
    PopMenuModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        i1$1.HttpClientModule,
                        menu.MatMenuModule,
                        icon.MatIconModule,
                        tooltip.MatTooltipModule,
                        button.MatButtonModule,
                        formField.MatFormFieldModule,
                        input.MatInputModule
                    ],
                    declarations: [
                        PopMenuComponent,
                    ],
                    providers: [
                        PopMenuService,
                    ],
                    exports: [
                        PopMenuComponent
                    ]
                },] }
    ];

    var PopTemplateAjaxLoaderComponent = /** @class */ (function () {
        function PopTemplateAjaxLoaderComponent() {
            var greetings = [
                "Just a sec ...",
                "Git 'Er Done",
                "This may take a while ...",
                "No Problemo",
            ];
            this.expression = RandomArrayElement(greetings);
        }
        return PopTemplateAjaxLoaderComponent;
    }());
    PopTemplateAjaxLoaderComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "\n    <div class=\"pop-template-ajax-loader\">\n      <div class=\"pop-template-ajax-row\">\n        <h5>{{expression}}</h5>\n      </div>\n      <div class=\"pop-template-ajax-row\">\n        <lib-main-spinner\n          [options]=\"{strokeWidth:10, color:'primary', diameter:40}\">\n        </lib-main-spinner>\n      </div>\n    </div>\n  ",
                    styles: ["\n    .pop-template-ajax-loader {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n    }\n\n    .pop-template-ajax-row {\n      display: flex;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n      clear: both;\n    }\n  "]
                },] }
    ];
    PopTemplateAjaxLoaderComponent.ctorParameters = function () { return []; };

    var PopTemplateGoodByeComponent = /** @class */ (function () {
        function PopTemplateGoodByeComponent() {
            var name = exports.ServiceInjector.get(PopBaseService).getAuthPrimeUser().first_name;
            var greetings = [
                "Audios Amigo",
                "See Ya Later, " + name,
                "Hasta la vista",
                "Later Hater",
                "Done so soon?",
                "GoodBye",
                "Thanks for all you have done, " + name
            ];
            this.expression = RandomArrayElement(greetings);
        }
        return PopTemplateGoodByeComponent;
    }());
    PopTemplateGoodByeComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "\n    <div class=\"pop-template-goodbye\">\n      <div class=\"pop-template-goodbye-row\">\n        <h4>{{expression}}</h4>\n      </div>\n    </div>\n  ",
                    styles: ["\n    .pop-template-goodbye {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n      font-size: 1.5em;\n    }\n\n    .pop-template-goodbye-row {\n      display: flex;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n      clear: both;\n    }\n  "]
                },] }
    ];
    PopTemplateGoodByeComponent.ctorParameters = function () { return []; };

    var PopTemplateWelcomeComponent = /** @class */ (function () {
        function PopTemplateWelcomeComponent() {
            var name = exports.ServiceInjector.get(PopBaseService).getAuthPrimeUser().first_name;
            var greetings = [
                "Hola!",
                "Welcome Back, " + name,
                "Howd, partner",
                "Good to see you, " + name,
                "Hello, " + name,
                "Lets do this!",
                "Alright, Alright, Alright ..."
            ];
            this.expression = RandomArrayElement(greetings);
        }
        return PopTemplateWelcomeComponent;
    }());
    PopTemplateWelcomeComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "\n    <div class=\"pop-template-welcome\">\n      <div class=\"pop-template-welcome-row\">\n        <h4>{{expression}}</h4>\n      </div>\n    </div>\n  ",
                    styles: ["\n    .pop-template-welcome {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n      font-size: 1.5em;\n      background: var(--background-2);\n    }\n\n    .pop-template-welcome-row {\n      display: flex;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n      clear: both;\n    }\n  "]
                },] }
    ];
    PopTemplateWelcomeComponent.ctorParameters = function () { return []; };

    var PopTemplateErrorComponent = /** @class */ (function () {
        function PopTemplateErrorComponent() {
            if (!IsObject(this.error))
                this.error = { message: 'Something went wrong!', code: 500 };
        }
        return PopTemplateErrorComponent;
    }());
    PopTemplateErrorComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "\n    <div class=\"pop-template-error\">\n      <div class=\"pop-template-error-row\">\n        <h5>{{error.code}} - {{error.message}}</h5>\n      </div>\n    </div>\n  ",
                    styles: ["\n    .pop-template-error {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n      font-size: 1em;\n      color: white;\n      padding: 10px;\n      background: red;\n      box-sizing: border-box;\n    }\n\n    .pop-template-error-row {\n      display: flex;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n      clear: both;\n      word-wrap: break-word;\n      box-sizing: border-box;\n    }\n  "]
                },] }
    ];
    PopTemplateErrorComponent.ctorParameters = function () { return []; };
    PopTemplateErrorComponent.propDecorators = {
        error: [{ type: i0.Input }]
    };

    var PopTemplateBufferComponent = /** @class */ (function () {
        function PopTemplateBufferComponent(data) {
            this.data = data;
            this.color = 'primary';
            this.mode = 'buffer';
            this.bufferValue = 100;
            this.value = 0;
        }
        PopTemplateBufferComponent.prototype.ngOnInit = function () {
            this._meterProgress();
        };
        PopTemplateBufferComponent.prototype.ngOnDestroy = function () {
            if (this.interval)
                clearInterval(this.interval);
        };
        PopTemplateBufferComponent.prototype._meterProgress = function () {
            var _this = this;
            this.interval = setInterval(function () {
                _this.bufferValue -= 5;
                _this.value += 5;
                if (_this.value >= 100)
                    clearInterval(_this.interval);
            }, 175, 50);
        };
        return PopTemplateBufferComponent;
    }());
    PopTemplateBufferComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "\n    <div class=\"pop-template-buffer\">\n      <div class=\"pop-template-ajax-row\" *ngIf=\"data.expression\">\n        <h5>{{data.expression}}</h5>\n      </div>\n      <div class=\"pop-template-buffer-row\">\n        <mat-progress-bar\n          [color]=\"color\"\n          [mode]=\"mode\"\n          [value]=\"value\"\n          [bufferValue]=\"bufferValue\">\n        </mat-progress-bar>\n      </div>\n    </div>\n  ",
                    styles: ["\n    .pop-template-buffer {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n      font-size: 1.5em;\n      background: var(--background-code);\n    }\n\n    .pop-template-buffer-row {\n      display: flex;\n      width: 100%;\n      min-height: 30px;\n      justify-content: center;\n      align-items: center;\n      clear: both;\n    }\n  "]
                },] }
    ];
    PopTemplateBufferComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.MAT_SNACK_BAR_DATA,] }] }
    ]; };

    var CacFilterBarConfig = /** @class */ (function () {
        function CacFilterBarConfig(params) {
            this.archived = false;
            this.active = false;
            this.display = 'default';
            this.loader = false;
            this.view = ['client', 'account', 'campaign'];
            this.sortToTop = false;
            this.invalid = false;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!(['default', 'static', 'float'].includes(this.display)))
                this.display = 'default';
        }
        return CacFilterBarConfig;
    }());
    var CacFilterBarEntityConfig = /** @class */ (function () {
        function CacFilterBarEntityConfig(params) {
            /**/
            this.allSelected = false;
            this.checkAll = false;
            this.indeterminate = false;
            this.single = true;
            this.selected = {};
            this.display = {};
            this.hidden = {};
            this.filter = [];
            this.selectedText = '';
            this.displaySelectedText = '';
            this.totalText = '';
            this.mode = false;
            this.visible = false;
            for (var i in params)
                this[i] = params[i];
            this.feed = new rxjs.BehaviorSubject([]);
        }
        return CacFilterBarEntityConfig;
    }());

    var PopEntityEventService = /** @class */ (function () {
        function PopEntityEventService() {
            this.events = new i0.EventEmitter();
        }
        PopEntityEventService.prototype.sendEvent = function (event) {
            this.events.emit(event);
        };
        return PopEntityEventService;
    }());
    PopEntityEventService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntityEventService_Factory() { return new PopEntityEventService(); }, token: PopEntityEventService, providedIn: "root" });
    PopEntityEventService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    /**
     * Cache Service is an observables based in-memory cache implementation
     * Keeps track of in-flight observables and sets a default expiry for cached values
     */
    var PopCacheService = /** @class */ (function () {
        function PopCacheService() {
            this.name = 'PopCacheService';
            this.cache = {};
            this.inFlightObservables = new Map();
            this.DEFAULT_MAX_AGE = 60000; // 1 minute
        }
        /**
         * Gets the value from cache if the key is provided.
         * If no value exists in cache, then check if the same call exists
         * in flight, if so return the subject. If not create a new
         * Subject inFlightObservable and return the source observable.
         */
        PopCacheService.prototype.get = function (type, key, fallback, maxAge) {
            var _this = this;
            if (this.hasValidCachedValue(type, key)) {
                return rxjs.of(this.cache[type].get(key).value);
            }
            if (!maxAge) {
                maxAge = this.DEFAULT_MAX_AGE;
            }
            if (fallback && fallback instanceof rxjs.Observable) {
                if (this.inFlightObservables.has(key)) {
                    var sub = this.inFlightObservables.get(key);
                    if (sub) {
                        sub.complete();
                        sub.unsubscribe();
                    }
                }
                this.inFlightObservables.set(key, new rxjs.Subject());
                return fallback.pipe(operators.tap(function (value) {
                    _this.set(type, key, value, maxAge);
                }));
            }
            else {
                return rxjs.of(null);
                // return throwError('Requested key is not available in Cache');
            }
        };
        PopCacheService.prototype.clear = function (cacheType, cacheKey) {
            if (IsString(cacheType, true)) {
                if (IsString(cacheKey, true)) {
                    if (this.cache[cacheType] && this.has(cacheType, cacheKey)) {
                        this.cache[cacheType].delete(cacheKey);
                    }
                }
                else {
                    if (this.cache[cacheType])
                        delete this.cache[cacheType];
                }
            }
        };
        PopCacheService.prototype.clearAll = function () {
            this.cache = {};
        };
        /**
         * Sets the value with key in the cache
         * Notifies all observers of the new value
         */
        PopCacheService.prototype.set = function (type, key, value, maxAge) {
            if (maxAge === void 0) { maxAge = this.DEFAULT_MAX_AGE; }
            if (!this.cache[type])
                this.cache[type] = new Map();
            this.cache[type].set(key, { value: value, expiry: Date.now() + maxAge });
            this.notifyInFlightObservers(key, value);
        };
        /**
         * Checks if the a key exists in cache
         */
        PopCacheService.prototype.has = function (type, key) {
            if (this.cache[type]) {
                return this.cache[type].has(key);
            }
            return false;
        };
        /**
         * Publishes the value to all observers of the given
         * in progress observables if observers exist.
         */
        PopCacheService.prototype.notifyInFlightObservers = function (key, value) {
            if (this.inFlightObservables.has(key)) {
                var inFlight = this.inFlightObservables.get(key);
                var observersCount = inFlight.observers.length;
                if (observersCount) {
                    inFlight.next(value);
                }
                inFlight.complete();
                this.inFlightObservables.delete(key);
            }
        };
        /**
         * Checks if the key exists and  has not expired.
         */
        PopCacheService.prototype.hasValidCachedValue = function (type, key) {
            if (this.cache[type] && this.cache[type].has(key)) {
                if (this.cache[type].get(key).expiry < Date.now()) {
                    this.cache[type].delete(key);
                    return false;
                }
                return true;
            }
            else {
                return false;
            }
        };
        return PopCacheService;
    }());
    PopCacheService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopCacheService_Factory() { return new PopCacheService(); }, token: PopCacheService, providedIn: "root" });
    PopCacheService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    PopCacheService.ctorParameters = function () { return []; };

    var PopResourceService = /** @class */ (function (_super) {
        __extends(PopResourceService, _super);
        function PopResourceService() {
            var _this = _super.call(this) || this;
            _this.name = 'PopResourceService';
            _this.cache = new PopCacheService();
            return _this;
        }
        /**
         * This fx will map the api calls for a collection of resources
         * @param collection
         * @param core
         */
        PopResourceService.prototype.setCollection = function (collection, core) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var api_requests, request_map, resource;
                var _this = this;
                return __generator(this, function (_a) {
                    api_requests = [];
                    request_map = [];
                    if (IsObject(collection, true)) {
                        Object.keys(collection).map(function (resourceKey) {
                            resource = collection[resourceKey];
                            if (resource.api_path) {
                                if (!resource.can_read || exports.PopEntity.checkAccess(resource.can_read, 'can_read')) {
                                    // break;
                                    var path_1 = resource.api_path;
                                    if (IsArray(resource.api_when, true) && IsObject(core, true)) {
                                        var when = EvaluateWhenConditions(core, resource.api_when);
                                        if (!when) {
                                            exports.PopLog.info(_this.name, "setCollection: condition not met", resource);
                                            return false;
                                        }
                                    }
                                    request_map.push(resourceKey);
                                    if (IsObject(resource.api_path_vars, true) && core) {
                                        Object.keys(resource.api_path_vars).map(function (varKey) {
                                            var value = '';
                                            if (String(resource.api_path_vars[varKey]).includes('.')) {
                                                value = StorageGetter(core, String(resource.api_path_vars[varKey]).split('.'));
                                            }
                                            if (!value)
                                                value = ParseModelValue(String(resource.api_path_vars[varKey]));
                                            if (value) {
                                                path_1 = StringReplaceAll(path_1, ":" + varKey, value);
                                            }
                                        });
                                    }
                                    var body_1 = IsObject(resource.api_params, true) ? resource.api_params : {};
                                    if (IsObject(body_1)) {
                                        Object.keys(body_1).map(function (key) {
                                            body_1[key] = ParseModelValue(body_1[key], core);
                                        });
                                    }
                                    if (+resource.api_cache) {
                                        exports.PopLog.info(_this.name, "cached resource", resource);
                                        api_requests.push(_this.cache.get('resource', path_1, exports.PopRequest.doGet(path_1, body_1, resource.api_version), 3600000));
                                    }
                                    else {
                                        api_requests.push(exports.PopRequest.doGet(path_1, body_1, resource.api_version));
                                    }
                                }
                            }
                        });
                    }
                    if (api_requests.length) {
                        rxjs.forkJoin(api_requests).subscribe(function (results) {
                            results.map(function (res, index) {
                                res = res.data ? res.data : res;
                                resource = collection[request_map[index]];
                                var dataTarget;
                                if (IsArray(res, false)) {
                                    dataTarget = resource.data_storage ? resource.data_storage : 'data_values';
                                    if (IsObject(collection[request_map[index]].data_filter, true)) {
                                        try {
                                            Object.keys(resource.data_filter).map(function (filterKey) {
                                                res = res.filter(function (item) {
                                                    var filterKeyValue = resource.data_filter[filterKey];
                                                    if (String(filterKeyValue).includes('.')) {
                                                        filterKeyValue = StorageGetter(core, String(filterKeyValue).split('.'));
                                                    }
                                                    if (!filterKeyValue)
                                                        filterKeyValue = ParseModelValue(String(resource.data_filter[filterKey]));
                                                    return item[filterKey] == filterKeyValue;
                                                });
                                            });
                                        }
                                        catch (e) {
                                            exports.PopLog.warn(_this.name, "setCollection", e);
                                        }
                                    }
                                    res = IsCallableFunction(resource.data_decorator) ? res.map(function (x) { return resource.data_decorator(core, x); }) : res;
                                    if (IsArray(resource.data_when, true)) {
                                        // EvaluateModelConditionals();
                                        try {
                                            res = res.filter(function (item) {
                                                return EvaluateWhenConditions(item, resource.data_when, core);
                                            });
                                        }
                                        catch (e) {
                                            exports.PopLog.warn(_this.name, "setCollection", e);
                                        }
                                    }
                                    if (IsCallableFunction(resource.data_setter))
                                        res = resource.data_setter(core, res);
                                    resource[dataTarget] = res;
                                }
                                else {
                                    dataTarget = resource.data_storage ? resource.data_storage : 'data';
                                    resource[dataTarget] = IsCallableFunction(resource.data_decorator) ? resource.data_decorator(core, res) : res;
                                    if (IsCallableFunction(resource.data_setter))
                                        resource[dataTarget] = resource.data_setter(core, resource[dataTarget]);
                                }
                            });
                            resolve(true);
                        }, function (err) {
                            resolve(false);
                        });
                    }
                    else {
                        resolve(true);
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * This fx will extract the data from a resource collection
         * @param collection
         * @param core
         */
        PopResourceService.prototype.getCollection = function (collection) {
            var store = {};
            if (IsObject(collection, true)) {
                Object.keys(collection).map(function (resourceKey) {
                    var resource = collection[resourceKey];
                    store[resource.name] = CleanObject(new ResourceConfig(resource));
                });
            }
            return store;
        };
        /**
         * This fx will reload a single existing resource
         * @param collection
         */
        PopResourceService.prototype.reloadResource = function (core, resource) {
            var _this = this;
            return new Promise(function (resolve) {
                if (IsObject(resource, ['api_path'] && resource.api_path && IsString(resource.api_path, true))) {
                    var path_2 = resource.api_path;
                    if (resource.can_read && !exports.PopEntity.checkAccess(resource.can_read, 'can_read')) {
                        exports.PopLog.debug(_this.name, "reloadResource: Cannot read resource:" + resource.can_read);
                        return resolve(resource);
                    }
                    if (IsArray(resource.api_when, true) && IsObject(core, true)) {
                        var when = EvaluateWhenConditions(core, resource.api_when);
                        if (!when) {
                            exports.PopLog.debug(_this.name, 'reloadResource: condition not met');
                            return resolve(resource);
                        }
                    }
                    if (IsObject(resource.api_path_vars, true) && core) {
                        Object.keys(resource.api_path_vars).map(function (varKey) {
                            var value = '';
                            if (String(resource.api_path_vars[varKey]).includes('.')) {
                                value = StorageGetter(core, String(resource.api_path_vars[varKey]).split('.'));
                            }
                            if (!value)
                                value = ParseModelValue(String(resource.api_path_vars[varKey]));
                            if (value) {
                                path_2 = StringReplaceAll(path_2, ":" + varKey, value);
                            }
                        });
                    }
                    var body_2 = IsObject(resource.api_params, true) ? resource.api_params : {};
                    if (IsObject(body_2)) {
                        Object.keys(body_2).map(function (key) {
                            body_2[key] = ParseModelValue(body_2[key], core);
                        });
                    }
                    exports.PopRequest.doGet(path_2, body_2, resource.api_version).subscribe(function (res) {
                        res = GetHttpResult(res);
                        var dataTarget;
                        exports.PopLog.debug(_this.name, 'reloadResource: pass 4');
                        if (IsArray(res, false)) {
                            dataTarget = resource.data_storage ? resource.data_storage : 'data_values';
                            if (IsObject(resource.data_filter, true)) {
                                try {
                                    Object.keys(resource.data_filter).map(function (filterKey) {
                                        res = res.filter(function (item) {
                                            var filterKeyValue = resource.data_filter[filterKey];
                                            if (String(filterKeyValue).includes('.')) {
                                                filterKeyValue = StorageGetter(core, String(filterKeyValue).split('.'));
                                            }
                                            if (!filterKeyValue)
                                                filterKeyValue = ParseModelValue(String(resource.data_filter[filterKey]));
                                            return item[filterKey] == filterKeyValue;
                                        });
                                    });
                                }
                                catch (e) {
                                    exports.PopLog.warn(_this.name, "setCollection", e);
                                }
                            }
                            if (IsArray(resource.data_when, true)) {
                                // EvaluateModelConditionals();
                                try {
                                    res = res.filter(function (item) {
                                        return EvaluateWhenConditions(item, resource.data_when, core);
                                    });
                                }
                                catch (e) {
                                    exports.PopLog.warn(_this.name, "setCollection", e);
                                }
                            }
                            resource[dataTarget] = IsCallableFunction(resource.data_decorator) ? res.map(function (x) { return resource.data_decorator(core, x); }) : res;
                            if (IsCallableFunction(resource.data_setter))
                                resource[dataTarget] = resource.data_setter(core, resource[dataTarget]);
                        }
                        else {
                            dataTarget = resource.data_storage ? resource.data_storage : 'data';
                            resource[dataTarget] = IsCallableFunction(resource.data_decorator) ? resource.data_decorator(core, res) : res;
                        }
                        return resolve(resource);
                    }, function () {
                        return resolve(resource);
                    });
                }
                else {
                    return resolve(resource);
                }
            });
        };
        PopResourceService.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopResourceService;
    }(PopExtendService));
    PopResourceService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopResourceService_Factory() { return new PopResourceService(); }, token: PopResourceService, providedIn: "root" });
    PopResourceService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopResourceService.ctorParameters = function () { return []; };

    var PopPipeService = /** @class */ (function () {
        function PopPipeService(resource) {
            this.resource = resource;
            this.name = 'PopPipeService';
            this.loaded = false;
            this.resources = {
                timezone: {
                    name: 'timezone',
                    defaultValue: null,
                    data_type: 'api_records',
                    api_path: 'records/timezone-values',
                    api_cache: 1,
                },
                country: {
                    name: 'country',
                    defaultValue: null,
                    data_type: 'api_records',
                    api_path: 'records/countries',
                    api_cache: 1,
                },
                state: {
                    name: 'state',
                    defaultValue: null,
                    data_type: 'api_records',
                    api_path: 'records/u-s-states',
                    api_cache: 1,
                },
                entity: {
                    name: 'entity',
                    defaultValue: null,
                    data_type: 'api_records',
                    api_path: "entities?select=id,name,internal_name,alias&with=alias",
                    api_cache: 1,
                }
            };
            this.asset = {
                business: {},
                country: {},
                timezone: {},
                state: {},
                client: {},
                campaign: {},
                account: {},
                entity: {},
            };
            this.assetMap = {
                entity: {}
            };
            this.active = new ToActiveOrArchivedPipe();
            this.yesno = new ToYesNoPipe();
            this.truncate = new TruncatePipe();
            this.phone = new PhonePipe();
            this.label = new LabelPipe();
        }
        /**
         * Mutate a value with a specified transformation
         * @param value
         * @param transformation
         * @param core
         */
        PopPipeService.prototype.transform = function (value, transformation, core) {
            if (core === void 0) { core = null; }
            if (IsObject(transformation, true)) {
                switch (transformation.type) {
                    case 'toRelationName':
                        if (IsObject(value)) {
                            if (transformation.arg1) { // core storage path
                                var location = IsString(transformation.arg1, true) ? transformation.arg1 : 'name';
                                var steps = String(location).split('.');
                                // steps.push(value);
                                var name = StorageGetter(value, steps);
                                if (name)
                                    value = name;
                                if (IsString(transformation.arg2, true)) { // alias
                                    if (IsAliasable(GetSingularName(String(value)))) {
                                        value = StorageGetter(exports.PopApp.entities[TitleCase(String(value))], ['alias', String(transformation.arg2).toLowerCase()], value);
                                    }
                                }
                            }
                        }
                        else {
                            value = transformation.arg2 ? transformation.arg2 : value; // transformations[ field ].arg2 is default value
                        }
                        break;
                    case 'toResourceName':
                        if (IsNumber(value)) {
                            var resource = void 0;
                            var key = 'name';
                            var resourceName = void 0;
                            var id = void 0;
                            if (IsString(transformation.arg1, true)) { // resource name
                                resourceName = String(transformation.arg1).trim();
                                if (IsObject(core, ['resource']) && resourceName in core.resource) {
                                    resource = core.resource[resourceName];
                                    if (IsArray(core.resource[resourceName].data_values, true)) {
                                        if (IsString(transformation.arg2, true))
                                            key = transformation.arg2;
                                        var item = core.resource[resourceName].data_values.find(function (i) { return +i.id === value; });
                                        if (IsObject(item, [key]) && IsDefined(item[key])) {
                                            value = item[key];
                                        }
                                    }
                                    if (IsString(transformation.arg2, true)) { // alias
                                        if (IsAliasable(GetSingularName(String(value)))) {
                                            value = StorageGetter(exports.PopApp.entities[TitleCase(String(value))], ['alias', String(transformation.arg2).toLowerCase()], value);
                                        }
                                    }
                                }
                                else if (resourceName in this.asset) {
                                    id = +value;
                                    resourceName = String(transformation.arg1).trim();
                                    if (IsString(transformation.arg1, true)) { // alternate value
                                        key = transformation.arg1;
                                    }
                                    if (resourceName in this.asset && id in this.asset[resourceName] && IsDefined(this.asset[resourceName][id][key])) {
                                        value = this.asset[transformation.type][id][key];
                                    }
                                }
                            }
                        }
                        else {
                            value = transformation.arg3 ? transformation.arg3 : value; // transformations[ field ].arg2 is default value
                        }
                        break;
                    case 'entity':
                        if (value) {
                            var key = void 0;
                            if (IsString(value, true) && transformation.arg1 === 'alias') {
                                var id = this.assetMap.entity[value + ''];
                                var alias = transformation.arg2 ? (transformation.arg2 !== 'plural' ? 'name' : 'plural') : 'name';
                                if (id in this.asset.entity && this.asset.entity[id]) {
                                    var entity = this.asset.entity[id];
                                    if (IsObject(entity.alias) && alias in entity.alias) {
                                        value = TitleCase(entity.alias[alias]);
                                    }
                                    else {
                                        if (alias === 'plural') {
                                            value = entity.name;
                                        }
                                        else {
                                            value = TitleCase(value + '');
                                        }
                                    }
                                }
                                else {
                                    value = TitleCase(value + '');
                                }
                            }
                            else if (IsString(value, true)) {
                                var id = this.assetMap.entity[value + ''];
                                key = 'name';
                                if (IsString(transformation.arg1, true)) {
                                    key = transformation.arg1;
                                }
                                if (id in this.asset.entity && this.asset.entity[id] && IsDefined(this.asset.entity[id][key])) {
                                    value = this.asset.entity[id][key];
                                }
                                else {
                                    value = TitleCase(value + '');
                                }
                            }
                            else if (IsNumber(value, true)) {
                                var id = +value;
                                key = 'name';
                                if (IsString(transformation.arg1, true)) { // alternate value
                                    key = transformation.arg1;
                                }
                                if (id in this.asset.entity && IsString(this.asset.entity[id][key])) {
                                    value = this.asset[transformation.type][id][key];
                                }
                            }
                        }
                        break;
                    case 'client':
                    case 'account':
                    case 'campaign':
                    case 'state':
                    case 'country':
                    case 'timezone':
                        if (value) {
                            var id = +value;
                            var key = 'name';
                            if (IsString(transformation.arg1, true)) { // alternate value
                                key = transformation.arg1;
                            }
                            if (transformation.type in this.asset && id in this.asset[transformation.type] && IsDefined(this.asset[transformation.type][id][key])) {
                                value = this.asset[transformation.type][id][key];
                            }
                        }
                        break;
                    case 'toDigits':
                        value = String(value).match(/\d+/g).map(Number).join('');
                        break;
                    case 'toYesNoPipe':
                        value = this.yesno.transform(+value > 0);
                        break;
                    case 'toPhonePipe':
                        value = this.phone.transform(value);
                        break;
                    case 'toActiveOrArchived':
                        value = this.active.transform(value);
                        break;
                    case 'toTitleCase':
                        value = TitleCase(value + '');
                        break;
                    case 'toUpperCase':
                        value = String(value).toUpperCase();
                        break;
                    case 'toLowerCase':
                        value = String(value).toLowerCase();
                        break;
                    case 'date':
                        value = exports.PopDate.transform(value, transformation.arg1);
                        break;
                    case 'toCurrency':
                        value = new Intl.NumberFormat('en-US', {
                            style: 'currency',
                            currency: 'USD',
                            minimumFractionDigits: 2
                        }).format(Number(value));
                        break;
                    default:
                        break;
                }
            }
            else if (IsString(transformation, true)) {
                return PopTransform(value, transformation);
            }
            return value;
        };
        PopPipeService.prototype.loadResources = function (allowCache) {
            var _this = this;
            if (allowCache === void 0) { allowCache = true; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var resources;
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.loaded)
                        return [2 /*return*/, resolve(true)];
                    if (allowCache && IsObject(exports.PopBusiness, ['id'])) {
                        try {
                            resources = GetSessionSiteVar("App." + exports.PopBusiness.id + ".Resource");
                            resources = JSON.parse(atob(resources));
                        }
                        catch (e) {
                        }
                    }
                    if (IsObject(resources, Object.keys(this.resources))) {
                        Object.keys(resources).map(function (key) {
                            var values = resources[key].data_values;
                            _this.asset[key] = {};
                            values.map(function (item) {
                                _this.asset[key][item.id] = item;
                            });
                        });
                        this._setAssetMap();
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        this.resource.setCollection(this.resources).then(function () {
                            resources = _this.resource.getCollection(_this.resources);
                            if (IsObject(resources, true)) {
                                try {
                                    SetSessionSiteVar("App." + exports.PopBusiness.id + ".Resource", btoa(JSON.stringify(resources)));
                                }
                                catch (e) {
                                }
                                Object.keys(resources).map(function (key) {
                                    var values = resources[key].data_values;
                                    _this.asset[key] = {};
                                    values.map(function (item) {
                                        _this.asset[key][item.id] = item;
                                    });
                                });
                                _this._setAssetMap();
                                _this.loaded = true;
                                return resolve(true);
                            }
                            else {
                                _this.loaded = true;
                                return resolve(true);
                            }
                        }, function () {
                            return resolve(false);
                        });
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        PopPipeService.prototype.setAsset = function (assetName, data) {
            if (assetName in this.asset && IsObject(data, true)) {
                this.asset[assetName] = data;
            }
        };
        PopPipeService.prototype.updateEntityAlias = function (entityId, alias) {
            if (entityId in this.asset.entity && IsObject(this.asset.entity[entityId])) {
                this.asset.entity[entityId].alias = alias;
            }
        };
        /**
         * A helper method to prepareTableData
         * @param row
         * @param transformations
         */
        PopPipeService.prototype.transformObjectValues = function (obj, transformations, core) {
            if (core === void 0) { core = null; }
            for (var field in transformations) {
                if (!transformations.hasOwnProperty(field))
                    continue;
                obj[field] = this.transform(obj[field], transformations[field], core);
            }
            return obj;
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopPipeService.prototype._setAssetMap = function () {
            var _this = this;
            if (IsObject(this.asset.entity, true)) {
                Object.keys(this.asset.entity).map(function (entityId) {
                    var entity = _this.asset.entity[entityId];
                    _this.assetMap.entity[entity.internal_name] = entityId;
                });
            }
        };
        return PopPipeService;
    }());
    PopPipeService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopPipeService_Factory() { return new PopPipeService(i0__namespace.ɵɵinject(PopResourceService)); }, token: PopPipeService, providedIn: "root" });
    PopPipeService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    PopPipeService.ctorParameters = function () { return [
        { type: PopResourceService }
    ]; };

    var PopCacFilterBarService = /** @class */ (function (_super) {
        __extends(PopCacFilterBarService, _super);
        function PopCacFilterBarService(crud, pipe, APP_GLOBAL) {
            var _this = _super.call(this) || this;
            _this.crud = crud;
            _this.pipe = pipe;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.loading = false;
            _this.name = 'PopClientFilterBarService';
            _this.config = new CacFilterBarConfig({
                active: false
            });
            _this.asset = {
                lookup: {},
                el: undefined,
                client: new Map(),
                account: new Map(),
                campaign: new Map(),
                triggerFields: ['name', 'archived', 'deleted_at', 'client_id', 'account_id', 'campaign_id'],
                views: ['client', 'account', 'campaign']
            };
            _this.event = {
                data: new rxjs.Subject(),
                config: new rxjs.Subject(),
                bubble: new rxjs.Subject()
            };
            _this.filter = {};
            _this.entities = [
                new CacFilterBarEntityConfig({
                    sort_order: 0,
                    internal_name: 'client',
                    name: 'Client(s)',
                    options: [],
                    parent_link: null,
                    child_link: 'client_id',
                    single: false,
                    visible: true
                }),
                new CacFilterBarEntityConfig({
                    sort_order: 1,
                    internal_name: 'account',
                    name: 'Account(s)',
                    options: [],
                    parent_link: 'client_id',
                    child_link: 'account_id',
                    single: false,
                    visible: true,
                }),
                new CacFilterBarEntityConfig({
                    sort_order: 2,
                    internal_name: 'campaign',
                    name: 'Campaigns(s)',
                    options: [],
                    parent_link: 'account_id',
                    child_link: null,
                    single: false,
                    visible: true
                }),
            ];
            _this._init().then(function () { return true; });
            return _this;
        }
        PopCacFilterBarService.prototype._init = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.APP_GLOBAL.isVerified()];
                        case 1:
                            _a.sent();
                            if (IsObject(exports.PopBusiness, ['id']) && IsObject(exports.PopUser, ['id'])) {
                                this._getFilterStorage(); // retrieve any session data
                            }
                            else {
                                this.config.active = false;
                                return [2 /*return*/, resolve(false)];
                            }
                            this.dom.setSubscriber("crud-events", this.crud.events.subscribe(function (event) {
                                if (IsValidFieldPatchEvent({}, event)) {
                                    var internalName = StorageGetter(event.config, ['metadata', 'internal_name'], null);
                                    if (internalName && _this.asset.views.includes(internalName) && _this.asset.triggerFields.includes(event.config.name)) {
                                        _this._triggerDataRefresh('Patch');
                                    }
                                }
                                else {
                                    if (event.internal_name && event.type === 'entity' && _this.asset.views.includes(event.internal_name)) {
                                        if (event.method === 'archive') {
                                            var entity_1 = _this.entities.find(function (e) { return e.internal_name; });
                                            var filter_1 = _this.filter[entity_1.internal_name];
                                            var archive = event.data;
                                            if (archive) {
                                                var id = void 0;
                                                if (IsString(event.id, true)) {
                                                    if (String(event.id).includes(',')) {
                                                        id = String(event.id).split(',').map(function (x) { return +x; });
                                                    }
                                                    else {
                                                        id = [+event.id];
                                                    }
                                                }
                                                else if (IsNumber(event.id)) {
                                                    id = [+event.data.id];
                                                }
                                                var setFilter_1 = false;
                                                id.map(function (x) {
                                                    delete entity_1.hidden[x];
                                                    delete entity_1.display[x];
                                                    delete entity_1.selected[x];
                                                    if (IsArray(filter_1, true)) {
                                                        var index = filter_1.indexOf(String(x), 0);
                                                        if (index > -1) {
                                                            setFilter_1 = true;
                                                            filter_1.splice(index, 1);
                                                        }
                                                    }
                                                });
                                                if (setFilter_1) {
                                                    _this.setFilter(_this.filter);
                                                }
                                            }
                                            _this._triggerDataRefresh('archive', 1);
                                        }
                                        if (event.method === 'create') {
                                            var entity = _this.entities.find(function (e) { return e.internal_name; });
                                            _this._triggerDataRefresh('create', 1);
                                        }
                                    }
                                }
                            }));
                            return [2 /*return*/, resolve(false)];
                    }
                });
            }); });
        };
        PopCacFilterBarService.prototype.register = function (el) {
            this.asset.el = el;
        };
        PopCacFilterBarService.prototype.getEntities = function () {
            return this.entities;
        };
        PopCacFilterBarService.prototype.getFilter = function () {
            return this.filter;
        };
        /**
         * Return the filter bar config
         */
        PopCacFilterBarService.prototype.getConfig = function () {
            return this.config;
        };
        PopCacFilterBarService.prototype.setFilter = function (filter) {
            this.filter = {};
            if (IsObject(exports.PopBusiness, ['id'])) {
                if (IsArray(filter.client, true))
                    this.filter.client = filter.client;
                if (this.config.view.includes('account') && IsArray(filter.account, true)) {
                    this.filter.account = filter.account;
                }
                else {
                    if (IsArray(filter.client, true)) {
                        var clients_1 = filter.client.map(function (c) { return +c; });
                        filter.account = this.entities[1].options.filter(function (account) {
                            return +account.client_id && clients_1.includes(account.client_id);
                        }).map(function (a) { return String(a.id); });
                        this.filter.account = filter.account;
                    }
                }
                if (this.config.view.includes('campaign') && IsArray(filter.campaign, true)) {
                    this.filter.campaign = filter.campaign;
                }
                else {
                    if (IsArray(filter.account, true)) {
                        var accounts_1 = filter.account.map(function (c) { return +c; });
                        filter.campaign = this.entities[2].options.filter(function (campaign) {
                            return +campaign.account_id && accounts_1.includes(campaign.account_id);
                        }).map(function (c) { return String(c.id); });
                        console.log('filter.campaign', filter.campaign);
                        this.filter.campaign = filter.campaign;
                    }
                }
                SetSessionSiteVar("Business." + exports.PopBusiness.id + ".Filter.Entities", filter);
                SetPopFilter(filter);
            }
        };
        PopCacFilterBarService.prototype.getElHeight = function () {
            if (this.asset.el) {
                return this.asset.el.nativeElement.lastChild.clientHeight;
            }
            return 0;
        };
        PopCacFilterBarService.prototype.getHeight = function () {
            if (IsObject(exports.PopBusiness, ['id'])) {
                var open = GetSessionSiteVar("Business." + exports.PopBusiness.id + ".Filter.open", false);
                if (+open) {
                    return 281;
                }
                else {
                    return 101;
                }
            }
            return 0;
        };
        /**
         * Clear any existing filters
         * @param app
         */
        PopCacFilterBarService.prototype.clearFilters = function () {
            this.setFilter({});
        };
        /**
         * Trigger update trigger
         * @param type strings
         * @returns void
         */
        PopCacFilterBarService.prototype.onChange = function (event) {
            var _this = this;
            setTimeout(function () {
                _this.event.bubble.next(event);
            }, 0);
        };
        /**
         * Ask whether the filter bar is active or not
         */
        PopCacFilterBarService.prototype.isActive = function () {
            return this.config.active;
        };
        PopCacFilterBarService.prototype.refresh = function () {
            this.event.bubble.next({
                source: 'PopFilterBarService',
                type: 'filter',
                name: 'refresh',
            });
        };
        /**
         * Toggle whether to include archived records
         * @param active
         */
        PopCacFilterBarService.prototype.setArchived = function (archived) {
            if (this.config) {
                this.config.archived = archived;
                this.event.bubble.next({
                    source: 'PopFilterBarService',
                    type: 'filter',
                    name: 'archived',
                    data: archived
                });
            }
        };
        /**
         * Toggle the filer bar on and off
         * @param active
         */
        PopCacFilterBarService.prototype.setActive = function (active) {
            if (this.config) {
                this.config.active = active;
                this.event.bubble.next({
                    source: 'PopFilterBarService',
                    type: 'filter',
                    name: 'state',
                    model: 'active'
                });
            }
        };
        /**
         * Toggle the Loader
         * @param loader
         */
        PopCacFilterBarService.prototype.setLoader = function (loader) {
            if (this.config) {
                this.config.loader = loader;
            }
        };
        /**
         * Change the display state of the filter bar
         * @param display
         */
        PopCacFilterBarService.prototype.setDisplay = function (display) {
            if (this.config) {
                if (!['default', 'static', 'float'].includes(display))
                    display = 'default';
                this.config.display = display;
            }
        };
        /**
         * Change the display state of the filter bar
         * @param display
         */
        PopCacFilterBarService.prototype.setView = function (view) {
            var _this = this;
            if (IsArray(view)) {
                this.config.view = view;
                this.entities.map(function (entity) {
                    entity.visible = _this.config.view.includes(entity.internal_name);
                });
            }
        };
        PopCacFilterBarService.prototype.getAsset = function (internal_name, id) {
            if (internal_name in this.asset) {
                return this.asset[internal_name].get(+id);
            }
            return null;
        };
        PopCacFilterBarService.prototype.setData = function (caller, allowCache) {
            var _this = this;
            if (allowCache === void 0) { allowCache = true; }
            exports.PopLog.info(this.name, "setData", caller);
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var cache, url;
                var _this = this;
                return __generator(this, function (_a) {
                    if (allowCache && IsObject(exports.PopBusiness, ['id'])) {
                        try {
                            cache = GetSessionSiteVar("Business." + exports.PopBusiness.id + ".Filter.Data");
                            cache = JSON.parse(atob(cache));
                        }
                        catch (e) {
                        }
                    }
                    if (IsArray(cache, true)) {
                        this._transFormData(cache);
                        this._triggerDataRefresh('init');
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        url = "clients?select=id,name,client_id,account_id,campaign_id,allaccounts,allcampaigns&archived=0&with=allaccounts.allcampaigns&limit=500";
                        this.dom.setSubscriber("data-fetch", exports.PopRequest.doGet(url, {}, 1, false).subscribe(function (x) {
                            if (x.data)
                                x = x.data;
                            if (IsObject(exports.PopBusiness, ['id'])) {
                                try {
                                    SetSessionSiteVar("Business." + exports.PopBusiness.id + ".Filter.Data", btoa(JSON.stringify(x)));
                                }
                                catch (e) {
                                }
                            }
                            _this._transFormData(x);
                            // this.config.loader = false;
                            return resolve(true);
                        }, function () {
                            return resolve(false);
                        }));
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        PopCacFilterBarService.prototype.setConfigAliases = function () {
            this.entities.map(function (entity) {
                entity.name = exports.PopPipe.transform(entity.internal_name, { type: 'entity', arg1: 'alias', arg2: 'singular' }) + '(s)';
            });
        };
        PopCacFilterBarService.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        PopCacFilterBarService.prototype._triggerDataRefresh = function (caller, seconds) {
            var _this = this;
            if (seconds === void 0) { seconds = 10; }
            this.dom.setTimeout('lazy-load-filter-data', function () {
                _this.setData("_triggerDataRefresh", false).then(function () {
                    _this.event.data.next(caller);
                });
            }, (seconds * 1000));
        };
        PopCacFilterBarService.prototype._transFormData = function (x) {
            var _this = this;
            var data = this._setDataStructure(x);
            Object.keys(data).map(function (key) {
                _this.pipe.setAsset(key, data[key]);
                exports.PopLog.init(_this.name, "Transfer asset to PipeService: " + key);
            });
            this.entities[0].options = Object.values(data.client).sort(function (a, b) {
                if (a.name < b.name)
                    return -1;
                if (a.name > b.name)
                    return 1;
                return 0;
            });
            this.entities[1].options = Object.values(data.account).sort(function (a, b) {
                if (a.name < b.name)
                    return -1;
                if (a.name > b.name)
                    return 1;
                return 0;
            });
            this.entities[2].options = Object.values(data.campaign).sort(function (a, b) {
                if (a.name < b.name)
                    return -1;
                if (a.name > b.name)
                    return 1;
                return 0;
            });
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Retrieves any filter settings from session storage
         */
        PopCacFilterBarService.prototype._getFilterStorage = function () {
            var filter = {};
            if (IsObject(exports.PopBusiness, ['id'])) {
                filter = GetSessionSiteVar("Business." + exports.PopBusiness.id + ".Filter.Entities", {});
                if (IsArray(filter.client, true)) {
                    var client_1 = this.entities[0];
                    if (!IsObject(client_1.selected))
                        client_1.selected = {};
                    filter.client.map(function (c) {
                        client_1.selected[c.id] = true;
                    });
                }
                if (IsArray(filter.account, true)) {
                    var account_1 = this.entities[1];
                    if (!IsObject(account_1.selected))
                        account_1.selected = {};
                    filter.account.map(function (a) {
                        account_1.selected[a.id] = true;
                    });
                }
                if (IsArray(filter.campaign, true)) {
                    var campaign_1 = this.entities[2];
                    if (!IsObject(campaign_1.selected))
                        campaign_1.selected = {};
                    filter.campaign.map(function (c) {
                        campaign_1.selected[c.id] = true;
                    });
                }
                // this.asset.views.map((internal_name: string) => {
                //   if( !IsArray(filter[ internal_name ], true) ) delete filter[ internal_name ];
                // });
                SetPopFilter(filter);
            }
            this.filter = filter;
        };
        PopCacFilterBarService.prototype._setDataStructure = function (res) {
            var data = {
                client: {},
                account: {},
                campaign: {}
            };
            if (IsArray(res, true)) {
                res.map(function (client) {
                    data.client[+client.id] = {
                        id: +client.id,
                        name: client.name,
                        archived: client.archived,
                    };
                    // this.asset.client.set(+client.id, data.client[ +client.id ]);
                    if (IsArray(client.allaccounts, true)) {
                        client.allaccounts.map(function (account) {
                            if (IsObject(account)) {
                                data.account[+account.id] = {
                                    id: +account.id,
                                    name: account.name,
                                    client_id: +account.client_id,
                                    archived: +account.archived,
                                };
                                // this.asset.account.set(+account.id, data.account[ +account.id ]);
                                if (IsArray(account.allcampaigns, true)) {
                                    account.allcampaigns.map(function (campaign) {
                                        if (IsObject(campaign)) {
                                            data.campaign[+campaign.id] = {
                                                id: +campaign.id,
                                                name: campaign.name,
                                                client_id: +client.id,
                                                account_id: +campaign.account_id,
                                                archived: +campaign.archived,
                                            };
                                            // this.asset.campaign.set(+campaign.id, data.campaign[ +campaign.id ]);
                                        }
                                    });
                                }
                            }
                        });
                    }
                });
            }
            return data;
        };
        return PopCacFilterBarService;
    }(PopExtendService));
    PopCacFilterBarService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopCacFilterBarService_Factory() { return new PopCacFilterBarService(i0__namespace.ɵɵinject(PopEntityEventService), i0__namespace.ɵɵinject(PopPipeService), i0__namespace.ɵɵinject("APP_GLOBAL")); }, token: PopCacFilterBarService, providedIn: "root" });
    PopCacFilterBarService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopCacFilterBarService.ctorParameters = function () { return [
        { type: PopEntityEventService },
        { type: PopPipeService },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] }
    ]; };

    var PopTemplateService = /** @class */ (function () {
        function PopTemplateService(filter, snackbar, APP_GLOBAL, env) {
            this.filter = filter;
            this.snackbar = snackbar;
            this.APP_GLOBAL = APP_GLOBAL;
            this.env = env;
            this.asset = {
                notification: undefined,
                contentEl: undefined
            };
        }
        PopTemplateService.prototype.turnOffFilter = function () {
            this.filter.setActive(false);
        };
        PopTemplateService.prototype.welcome = function () {
            this.asset.notification = this.snackbar.openFromComponent(PopTemplateWelcomeComponent, {
                panelClass: 'pop-template-center',
                duration: 5 * 1000
            });
        };
        PopTemplateService.prototype.buffer = function (expression, duration) {
            if (expression === void 0) { expression = null; }
            if (duration === void 0) { duration = 4; }
            if (i0.isDevMode()) {
                this.asset.notification = this.snackbar.openFromComponent(PopTemplateBufferComponent, {
                    panelClass: 'pop-template-center',
                    duration: duration * 1000,
                    data: {
                        expression: expression,
                    }
                });
            }
        };
        PopTemplateService.prototype.error = function (error, duration) {
            if (duration === void 0) { duration = 5; }
            if (i0.isDevMode()) {
                this.asset.notification = this.snackbar.openFromComponent(PopTemplateErrorComponent, {
                    panelClass: 'pop-template-center',
                    duration: duration * 1000
                });
                this.asset.notification.instance.error = error;
            }
        };
        PopTemplateService.prototype.goodbye = function () {
            this.asset.notification = this.snackbar.openFromComponent(PopTemplateGoodByeComponent, {
                panelClass: 'pop-template-center',
                duration: 5 * 1000
            });
        };
        PopTemplateService.prototype.lookBusy = function (duration) {
            if (duration === void 0) { duration = 5; }
            if (i0.isDevMode()) {
                this.asset.notification = this.snackbar.openFromComponent(PopTemplateAjaxLoaderComponent, {
                    panelClass: 'pop-template-center',
                    duration: duration * 1000
                });
            }
        };
        PopTemplateService.prototype.notify = function (message, action, duration) {
            if (action === void 0) { action = null; }
            if (duration === void 0) { duration = 3; }
            this.asset.notification = this.snackbar.open(message, action, {
                panelClass: 'pop-template-center',
                duration: duration * 1000
            });
        };
        PopTemplateService.prototype.clear = function () {
            if (IsObject(this.asset.notification, ['dismiss'])) {
                this.asset.notification.dismiss();
            }
        };
        PopTemplateService.prototype.setContentEl = function (el) {
            if (el)
                this.asset.contentEl = el;
        };
        PopTemplateService.prototype.verify = function () {
            if (this.APP_GLOBAL.isVerified()) {
                this.APP_GLOBAL.verification.next();
            }
        };
        PopTemplateService.prototype.getContentHeight = function (modal, overhead) {
            if (modal === void 0) { modal = false; }
            if (overhead === void 0) { overhead = 60; }
            var height = window.innerHeight;
            if (this.asset.contentEl && this.asset.contentEl.nativeElement.offsetTop)
                height = (height - this.asset.contentEl.nativeElement.offsetTop);
            if (modal)
                height -= 100;
            if (overhead)
                height -= overhead;
            return height;
        };
        return PopTemplateService;
    }());
    PopTemplateService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopTemplateService_Factory() { return new PopTemplateService(i0__namespace.ɵɵinject(PopCacFilterBarService), i0__namespace.ɵɵinject(i2__namespace.MatSnackBar), i0__namespace.ɵɵinject("APP_GLOBAL"), i0__namespace.ɵɵinject("env")); }, token: PopTemplateService, providedIn: "root" });
    PopTemplateService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopTemplateService.ctorParameters = function () { return [
        { type: PopCacFilterBarService },
        { type: i2.MatSnackBar },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['env',] }] }
    ]; };

    var PopTemplateComponent = /** @class */ (function (_super) {
        __extends(PopTemplateComponent, _super);
        function PopTemplateComponent(el, router, template, renderer, APP_GLOBAL, APP_THEME) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.router = router;
            _this.template = template;
            _this.renderer = renderer;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.APP_THEME = APP_THEME;
            _this.backdrop = true;
            _this.menus = [];
            _this.widgets = [];
            _this.filter = true;
            _this.left = true;
            _this.right = true;
            _this.displayMenu = true;
            _this.name = 'PopTemplateComponent';
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        this.dom.setSubscriber('theme', this.APP_THEME.init.subscribe(function (val) {
                            _this.dom.setTimeout("remove-backdrop", function () {
                                _this.renderer.removeClass(document.body, 'site-backdrop-dark');
                            }, 0);
                            if (val)
                                _this.backdrop = !val;
                        }));
                        this.dom.setSubscriber('init', this.APP_GLOBAL.init.subscribe(function (val) {
                            if (val)
                                _this._initialize();
                        }));
                        window.onbeforeunload = function () {
                            try {
                                _this.APP_GLOBAL._unload.next(true);
                            }
                            catch (e) {
                                console.log(e);
                            }
                        };
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.template.setContentEl(this.content);
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        PopTemplateComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopTemplateComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopTemplateComponent.prototype._initialize = function () {
            return true;
        };
        return PopTemplateComponent;
    }(PopExtendComponent));
    PopTemplateComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-template',
                    template: "<div class=\"pop-template\">\n  <header class=\"pop-template-header\" #header *ngIf=\"displayMenu\">\n    <lib-pop-menu></lib-pop-menu>\n  </header>\n  <section class=\"pop-template-section\">\n    <aside class=\"pop-template-aside-left\">\n      <lib-pop-left-menu [hidden]=!left [entityMenus]=\"menus\"></lib-pop-left-menu>\n    </aside>\n    <div class=\"pop-template-main\">\n      <lib-pop-cac-filter #filter></lib-pop-cac-filter>\n      <div class=\"sw-outlet-target pop-template-content-overflow\">\n        <router-outlet></router-outlet>\n      </div>\n    </div>\n    <aside class=\"pop-template-aside-right\">\n      <lib-pop-widget-bar  [hidden]=!right [widgets]=\"widgets\"></lib-pop-widget-bar>\n    </aside>\n  </section>\n  <footer class=\"pop-template-footer\"></footer>\n</div>\n\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [":host{height:100%;display:flex;flex-direction:column;position:absolute;top:0;bottom:0;left:0;right:0}:host ::ng-deep .mat-form-field .mat-form-field-infix{width:0}:host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-flex{margin-top:0}.pop-template{width:100%;height:100vh;margin:0;display:flex;flex-direction:column;overflow-y:hidden}.pop-template-backdrop{background:pink}.pop-template-footer{height:0}.pop-template-section{flex:1;justify-content:space-between;display:flex;flex-direction:row;margin-top:48px}.pop-template-main{position:relative;flex:5}.pop-template-content-overflow{position:absolute!important;height:calc(100vh - 55px)!important;left:0;right:0;overflow-y:auto;overflow-x:auto}.pop-template-aside-left{border-right:1px solid var(--disabled);background:var(--background-main-menu)}.pop-template-aside-left,.pop-template-aside-right{flex:0;border-bottom:1px solid var(--disabled);box-sizing:border-box}.pop-template-aside-right{border-left:1px solid var(--disabled)}.pop-template-center{display:flex;align-items:center;justify-content:center}.pop-template-center div{text-align:center}"]
                },] }
    ];
    PopTemplateComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1.Router },
        { type: PopTemplateService },
        { type: i0.Renderer2 },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_THEME',] }] }
    ]; };
    PopTemplateComponent.propDecorators = {
        header: [{ type: i0.ViewChild, args: ['header',] }],
        content: [{ type: i0.ViewChild, args: ['content',] }],
        backdrop: [{ type: i0.HostBinding, args: ['class.pop-template-backdrop',] }, { type: i0.Input }],
        menus: [{ type: i0.Input }],
        widgets: [{ type: i0.Input }],
        filter: [{ type: i0.Input }],
        left: [{ type: i0.Input }],
        right: [{ type: i0.Input }],
        displayMenu: [{ type: i0.Input }]
    };

    var EntityMenu = /** @class */ (function () {
        function EntityMenu(args) {
            this.id = args.id || 0;
            this.description = args.description || '';
            this.name = args.name;
            this.entity_id = args.entity_id || null;
            this.path = args.path;
            this.short_description = args.short_description || '';
            this.sort = args.sort || 0;
            this.internal_name = args.internal_name || null;
            this.hasAlias = args.hasAlias ? true : false;
            this.originalPath = args.originalPath;
            this.originalName = args.originalName;
            if (IsString(args.icon, true)) {
                this.icon = args.icon;
                this._setIcon();
            }
            else {
                this._setCharacters();
            }
        }
        EntityMenu.prototype._setPath = function () {
            var pathSet = this.path.split("/");
            this.path = '/' + pathSet[pathSet.length - 1];
        };
        EntityMenu.prototype._setIcon = function () {
            var _a;
            var iconSet = this.icon.split(":");
            if (iconSet.length === 2) {
                _a = __read(iconSet, 2), this.iconType = _a[0], this.icon = _a[1];
            }
        };
        EntityMenu.prototype._setCharacters = function () {
            this.character_icon = "";
            var nameArray = this.name.split(" ");
            if (nameArray.length >= 2) {
                this.character_icon += nameArray[0].charAt(0).toLocaleUpperCase();
                this.character_icon += nameArray[1].charAt(0).toLocaleUpperCase();
            }
            else {
                this.character_icon += this.name.charAt(0).toLocaleUpperCase();
                this.character_icon += this.name.charAt(1).toLocaleLowerCase();
            }
        };
        return EntityMenu;
    }());

    var PopEntityUtilParamService = /** @class */ (function () {
        function PopEntityUtilParamService() {
            this.store = new Map();
            this.mapById = new Map();
            this.mapByRoute = new Map();
            this.setEntityParams({
                id: 0,
                alias: null,
                access: {
                    can_create: 1,
                    can_read: 1,
                    can_update: 1,
                    can_delete: 0,
                    can_destroy: 0,
                },
                can_extend: false,
                path: '/auth/user',
                param: '',
                api: '/auth/user',
                internal_name: 'prime_user',
                name: 'Prime User',
            });
        }
        PopEntityUtilParamService.prototype.getEntityParamsWithPath = function (path, entityId) {
            if (entityId === void 0) { entityId = null; }
            var entity;
            var entityParams = undefined;
            var internal_name = this.mapByRoute.get(path);
            if (internal_name && this.store.has(internal_name))
                entity = this.store.get(internal_name);
            if (entity) {
                entityParams = {
                    alias: entity.alias,
                    api: entity.api,
                    app: entity.app,
                    id: entity.id,
                    can_extend: entity.can_extend,
                    internal_name: entity.internal_name,
                    name: entity.name,
                    path: entity.path,
                    param: entity.param,
                };
                if (entityId)
                    entityParams.entityId = entityId;
            }
            return entityParams;
        };
        PopEntityUtilParamService.prototype.setEntityParams = function (params) {
            if (IsObject(params, true)) {
                if (!(IsObject(params.access, true))) {
                    params.access = { can_create: 0, can_read: 0, can_update: 0, can_delete: 0, can_destroy: 0 };
                }
                else {
                    Object.keys(params.access).map(function (accessName) {
                        params.access[accessName] = +params.access[accessName];
                    });
                }
                this.mapById.set(+params.id, params.internal_name);
                this.mapByRoute.set(SpaceToHyphenLower(params.name), params.internal_name);
                if (this.store.has(params.internal_name)) {
                    var existingParams = this.store.get(params.internal_name);
                    existingParams = DeepMerge(existingParams, params);
                    this.store.set(params.internal_name, existingParams);
                }
                else {
                    this.store.set(params.internal_name, params);
                }
            }
        };
        PopEntityUtilParamService.prototype.getEntityParams = function (internal_name, entityId) {
            if (entityId === void 0) { entityId = null; }
            var entityParams = undefined;
            if (IsNumber(internal_name)) {
                internal_name = this.mapById.get(+internal_name);
            }
            var entity = this.store.get(internal_name + '');
            if (entity) {
                entityParams = {
                    alias: entity.alias,
                    api: entity.api,
                    app: entity.app,
                    id: entity.id,
                    can_extend: entity.can_extend,
                    internal_name: entity.internal_name,
                    name: entity.name,
                    path: entity.path,
                    param: entity.param,
                };
                if (entityId)
                    entityParams.entityId = entityId;
            }
            return entityParams;
        };
        PopEntityUtilParamService.prototype.getAccess = function (internal_name, accessType) {
            var access = null;
            if (IsNumber(internal_name))
                internal_name = this.mapById.get(+internal_name);
            if (this.store.has(internal_name + '')) {
                var entity = this.store.get(internal_name + '');
                if (accessType && accessType in entity.access) {
                    access = entity.access[accessType];
                }
                else {
                    access = entity.access;
                }
            }
            return access;
        };
        PopEntityUtilParamService.prototype.getAlias = function (internal_name, accessType) {
            var alias = null;
            if (IsNumber(internal_name))
                internal_name = this.mapById.get(+internal_name);
            if (this.store.has(internal_name + '')) {
                var entity = this.store.get(internal_name + '');
                if (IsObject(entity.alias, true)) {
                    alias = entity.alias;
                }
            }
            return alias;
        };
        /**
         * Checks if the user has permissons to the specific type of an entity depending upon the local token details.
         *
         * @param appName - The name of the app to check. IE: admin, cis, etc...
         * @param entityName - The name of the entity inside the app to check: IE: For the admin app, users.
         * @param accessType - The type of permissons to check. Enum [can_create, can_read, can_update, can_delete]
         */
        PopEntityUtilParamService.prototype.checkAccess = function (internal_name, accessType) {
            if (IsNumber(internal_name))
                internal_name = this.mapById.get(+internal_name);
            if (this.store.has(internal_name + '')) {
                var entity = this.store.get(internal_name + '');
                return !!entity.access[accessType];
            }
            return false;
        };
        return PopEntityUtilParamService;
    }());
    PopEntityUtilParamService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntityUtilParamService_Factory() { return new PopEntityUtilParamService(); }, token: PopEntityUtilParamService, providedIn: "root" });
    PopEntityUtilParamService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopEntityUtilParamService.ctorParameters = function () { return []; };

    var PopLeftMenuComponent = /** @class */ (function (_super) {
        __extends(PopLeftMenuComponent, _super);
        function PopLeftMenuComponent(router, APP_GLOBAL, APP_MENUS) {
            var _this = _super.call(this) || this;
            _this.router = router;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.APP_MENUS = APP_MENUS;
            _this.entityMenus = [];
            _this.hidden = false;
            _this.name = 'PopLeftMenuComponent';
            _this.srv = {
                param: exports.ServiceInjector.get(PopEntityUtilParamService)
            };
            _this.asset = {
                siteVar: 'App.LeftMenu.open',
            };
            _this.ui = {};
            if (APP_GLOBAL.isOpen()) {
                exports.PopLog.init(_this.name, "Public App", _this.entityMenus);
                _this.hidden = ((_this.APP_GLOBAL.isEntities() && !(IsObject(exports.PopAuth))) || !(_this.entityMenus.length)) ? true : false;
            }
            else {
                _this._initialize();
                _this.dom.setSubscriber('init', _this.APP_GLOBAL.init.subscribe(function (val) { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!val) return [3 /*break*/, 2];
                                _a = this.dom.state;
                                return [4 /*yield*/, this.APP_GLOBAL.isVerified()];
                            case 1:
                                _a.verified = _b.sent();
                                this._initialize();
                                _b.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                }); }));
            }
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this._setState();
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        PopLeftMenuComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * This fx will open/close the left side nav
         */
        PopLeftMenuComponent.prototype.onToggleMenu = function () {
            this.dom.state.open = !this.dom.state.open;
            this.dom.state.closed = !this.dom.state.open;
            SetSiteVar(this.asset.siteVar, this.dom.state.open);
            window.dispatchEvent(new Event('onWindowResize'));
        };
        PopLeftMenuComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This fx will build out the menus for this component
         * @private
         */
        PopLeftMenuComponent.prototype._initialize = function () {
            var _this = this;
            this.dom.setTimeout("init", function () { return __awaiter(_this, void 0, void 0, function () {
                var menus;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._setMenus()];
                        case 1:
                            menus = _a.sent();
                            exports.PopLog.init(this.name, "Private App", this.entityMenus);
                            if (IsArray(menus, true) && this._isVerifiedMenusDifferent(menus)) {
                                this.entityMenus = menus;
                            }
                            this.hidden = ((this.APP_GLOBAL.isEntities() && !(IsObject(exports.PopAuth))) || !(this.entityMenus.length)) ? true : false;
                            if (!this.dom.state.verified) return [3 /*break*/, 3];
                            return [4 /*yield*/, this._checkDefaultRoute()];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); }, 5);
        };
        /**
         * Determine the state of this component
         * The component should be open or closed base of the users latest session setting, or should default to open
         * @private
         */
        PopLeftMenuComponent.prototype._setState = function () {
            var open = GetSiteVar(this.asset.siteVar, true);
            this.dom.state.open = typeof open === 'boolean' ? open : false;
            this.dom.state.closed = !this.dom.state.open;
        };
        /**
         * Create a list of the menus needed for the current app
         * @private
         */
        PopLeftMenuComponent.prototype._setMenus = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var menus, routeAliasMap, menuEntity, menu, params, alias;
                return __generator(this, function (_a) {
                    menus = [];
                    routeAliasMap = {};
                    if (this.APP_GLOBAL.isEntities() && IsObject(exports.PopApp, ['menu'])) {
                        for (menuEntity in exports.PopApp.menu) {
                            if (IsObject(exports.PopApp.menu[menuEntity])) {
                                menu = exports.PopApp.menu[menuEntity];
                                menu.originalPath = menu.path;
                                menu.originalName = menu.name;
                                if (menu.entity_id) {
                                    params = this.srv.param.getEntityParams(menu.entity_id);
                                    if (IsObject(params, ['id', 'internal_name']) && this.srv.param.checkAccess(params.internal_name, 'can_read')) {
                                        menu.id = +menu.entity_id;
                                        menu.internal_name = params.internal_name;
                                        if (this.APP_GLOBAL.isAliases() && IsObject(params.alias, ['name', 'plural'])) {
                                            alias = params.alias;
                                            menu.hasAlias = true;
                                            menu.name = TitleCase(alias.plural);
                                            menu.path = SpaceToHyphenLower(alias.plural);
                                            routeAliasMap[SpaceToHyphenLower(alias.plural)] = menu.originalPath;
                                        }
                                        else {
                                            menu.hasAlias = false;
                                        }
                                        menus.push(new EntityMenu(menu));
                                    }
                                    else {
                                        exports.PopLog.warn(this.name, "Cannot view menu:", menu);
                                    }
                                }
                                else {
                                    menus.push(new EntityMenu(menu));
                                }
                            }
                        }
                        if (IsCallableFunction(this.APP_MENUS.init)) {
                            menus = this.APP_MENUS.init(menus);
                        }
                        SetPopAliasRouteMap(routeAliasMap);
                        this.APP_MENUS.set(menus);
                        return [2 /*return*/, resolve(menus)];
                    }
                    else {
                        return [2 /*return*/, resolve(menus)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Set a default route for the project
         * @param parent
         * @param config
         * @param routes
         * @private
         */
        PopLeftMenuComponent.prototype._checkDefaultRoute = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var defaultRoute, currentPath;
                return __generator(this, function (_a) {
                    if (this.router.config.length && IsArray(this.entityMenus, true)) {
                        defaultRoute = this.router.config.find(function (route) { return route.path === '**'; });
                        if (!defaultRoute && this._isValidRoute(this.entityMenus[0].path)) {
                            this.router.config.push({ path: '**', 'redirectTo': this.entityMenus[0].path });
                            exports.PopLog.init(this.name, "Default Route Wildcard **", this.entityMenus[0].path);
                        }
                        currentPath = window.location.href.split("" + exports.PopHref)[1];
                        if (this._isValidRoute(currentPath)) {
                            this._fallBackUrlRoute();
                        }
                        else {
                            this._fallBackMenuRoute();
                        }
                        // }
                    }
                    else {
                    }
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * This fx will try to use the first menu item as the default route
         * @private
         */
        PopLeftMenuComponent.prototype._fallBackMenuRoute = function () {
            var _this = this;
            exports.PopLog.init(this.name, "Fallback Menu Route", this.entityMenus[0].path);
            if (IsArray(this.entityMenus, true) && this._isValidRoute(this.entityMenus[0].path)) {
                this.log.info("Fallback Menu Route", this.entityMenus[0].path);
                this.router.navigate([this.entityMenus[0].path]).catch(function (e) {
                    _this.log.info("Could not find route");
                    _this._fallbackSystemRoute();
                });
            }
            else {
                this._fallbackSystemRoute();
            }
        };
        /**
         * This fx will attempt to use the current url as the default route
         * @private
         */
        PopLeftMenuComponent.prototype._fallBackUrlRoute = function () {
            var _this = this;
            var currentPath = window.location.href.split(exports.PopHref)[1];
            currentPath = currentPath.split('?')[0];
            if (this._isValidRoute(currentPath)) {
                exports.PopLog.init(this.name, "Current Route", currentPath);
                this.router.navigate([currentPath], { queryParams: this._getUrlParams() }).catch(function (e) {
                    _this._fallbackSystemRoute();
                }).then(function () {
                    if (!(_this.router.url.includes(currentPath))) {
                        _this._fallbackSystemRoute();
                    }
                });
            }
            else {
                this._fallbackSystemRoute();
            }
        };
        /**
         * This fx will temp redirect and try to find a valid route
         * @private
         */
        PopLeftMenuComponent.prototype._fallbackSystemRoute = function () {
            if (this.dom.state.verified) {
                this.router.navigate(['/system/route'], { skipLocationChange: true });
            }
            else {
                this.router.navigate(['/']);
            }
        };
        /**
         * This fx determines if there is a difference between tow sets of menus(existing, new)
         * @param menus
         * @private
         */
        PopLeftMenuComponent.prototype._isVerifiedMenusDifferent = function (menus) {
            return !(ObjectsMatch(this.entityMenus, menus));
        };
        /**
         * This fx determines if a path is a valid route
         * @param path
         * @private
         */
        PopLeftMenuComponent.prototype._isValidRoute = function (path) {
            return IsDefined(path, false) && IsString(path, true) && path !== '/' && path !== 'null' && !(String(path).includes('/error/'));
        };
        PopLeftMenuComponent.prototype._getUrlParams = function () {
            var params = {};
            window.location.search.slice(1).split('&').forEach(function (elm) {
                if (elm === '')
                    return;
                var spl = elm.split('=');
                var d = decodeURIComponent;
                params[d(spl[0])] = (spl.length >= 2 ? d(spl[1]) : true);
            });
            return params;
        };
        return PopLeftMenuComponent;
    }(PopExtendComponent));
    PopLeftMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-left-menu',
                    template: "<div class=\"pop-left-menu\" [ngClass]=\"{'pop-left-menu-closed': dom.state.closed, 'pop-left-menu-open': dom.state.open}\">\n  <mat-nav-list>\n    <div class=\"pop-left-menu-item\" *ngFor=\"let menu of entityMenus\">\n      <a class=\"pop-left-menu-item-header\" [routerLink]=\"menu.path\" matRipple routerLinkActive=\"pop-left-menu-item-header-active\">\n        <div class=\"pop-left-menu-icon-container\">\n          <mat-icon *ngIf=\" menu.iconType && menu.iconType === 'materials'\" [matTooltip]=menu.name [matTooltipPosition]=\"'right'\" [matTooltipDisabled]=\"dom.state.open\">\n            {{menu.icon}}\n          </mat-icon>\n          <span *ngIf=\" menu.iconType && menu.iconType === 'pop'\" class=\"sw-pop-icon\" [matTooltip]=menu.name [matTooltipPosition]=\"'right'\" [matTooltipDisabled]=\"dom.state.open\">\n              {{menu.icon}}\n          </span>\n          <div class=\"sw-circle-ID mat-body-2\" *ngIf=\"!menu.iconType && menu.character_icon\" [matTooltip]=menu.name [matTooltipPosition]=\"'right'\" [matTooltipDisabled]=\"dom.state.open\">\n            {{menu.character_icon}}\n          </div>\n        </div>\n        <div class=\"pop-left-menu-label-container\">\n          <span class=\"mat-body\">{{menu.name}}</span>\n        </div>\n      </a>\n    </div>\n  </mat-nav-list>\n  <lib-main-spinner *ngIf=\"dom.state.loader\"></lib-main-spinner>\n  <button class=\"pop-left-menu-toggle\" mat-icon-button (click)=\"onToggleMenu();\">\n    <span class=\"sw-pop-icon\" *ngIf=\"dom.state.open\" id=\"left-nav-open\">H</span>\n    <span class=\"sw-pop-icon\" *ngIf=\"dom.state.closed\" id=\"left-nav-close\">I</span>\n  </button>\n</div>\n",
                    styles: [".pop-left-menu{height:100vh;padding:20px 0 0;margin:0;overflow-x:hidden;overflow-y:auto}.pop-left-menu-open{width:256px;transition:width .5s}.pop-left-menu-closed{width:80px;transition:width .5s}.pop-left-menu-item{position:relative;display:block;min-height:var(--gap-xl);padding:0;margin:0;cursor:pointer;outline:0;white-space:nowrap;overflow:hidden}.pop-left-menu-item-header{position:relative;display:flex;height:var(--gap-xl);width:256px;padding:0;margin:0;align-items:center;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;clear:both;border-left:4px solid transparent;transition:background-color .35s,border-color .35s;border-left:var(--gap-xxs) solid transparent}.pop-left-menu-item-header-active{border-left-width:var(--gap-xxs);border-left-style:solid;border-left-color:var(--primary-500)!important;background-color:var(background-item-menu)!important;height:var(--gap-xl)}.pop-left-menu-item-header-active span.mat-body{font-weight:700}.pop-left-menu-label-container{flex-grow:1;padding:12px 0 0;text-align:left;color:var(--text)}.pop-left-menu-icon-container,.pop-left-menu-label-container{position:relative;height:40px;margin:0;box-sizing:border-box;overflow:hidden;float:left}.pop-left-menu-icon-container{width:80px;padding-left:var(--gap-lm);padding-right:var(--gap-s)}.pop-left-menu-icon-container .sw-circle-ID{position:absolute;top:4px}.pop-left-menu-item-header:hover{background:var(--background-item-menu)!important}.pop-left-menu-toggle{position:fixed;width:40px;height:40px;padding:10px 30px 30px 26px;margin:0 0 30px;box-sizing:border-box;overflow:hidden;float:left;bottom:0;border-radius:50%;background:transparent}"]
                },] }
    ];
    PopLeftMenuComponent.ctorParameters = function () { return [
        { type: i1.Router },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_MENUS',] }] }
    ]; };
    PopLeftMenuComponent.propDecorators = {
        entityMenus: [{ type: i0.Input }],
        hidden: [{ type: i0.HostBinding, args: ['class.sw-hidden',] }, { type: i0.Input }]
    };

    var MaterialModule = /** @class */ (function () {
        function MaterialModule() {
        }
        MaterialModule.forRoot = function () {
            return {
                ngModule: MaterialModule,
                providers: [i1$2.MatDialog, overlay.Overlay]
            };
        };
        return MaterialModule;
    }());
    MaterialModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        autocomplete.MatAutocompleteModule,
                        button.MatButtonModule,
                        buttonToggle.MatButtonToggleModule,
                        checkbox.MatCheckboxModule,
                        card.MatCardModule,
                        datepicker.MatDatepickerModule,
                        i1$2.MatDialogModule,
                        expansion.MatExpansionModule,
                        formField.MatFormFieldModule,
                        gridList.MatGridListModule,
                        input.MatInputModule,
                        icon.MatIconModule,
                        list.MatListModule,
                        menu.MatMenuModule,
                        paginator.MatPaginatorModule,
                        progressBar.MatProgressBarModule,
                        progressSpinner.MatProgressSpinnerModule,
                        radio.MatRadioModule,
                        core.MatRippleModule,
                        select.MatSelectModule,
                        sidenav.MatSidenavModule,
                        slideToggle.MatSlideToggleModule,
                        sort.MatSortModule,
                        table.MatTableModule,
                        tabs.MatTabsModule,
                        toolbar.MatToolbarModule,
                        tooltip.MatTooltipModule,
                        slider.MatSliderModule
                    ],
                    exports: [
                        autocomplete.MatAutocompleteModule,
                        button.MatButtonModule,
                        buttonToggle.MatButtonToggleModule,
                        checkbox.MatCheckboxModule,
                        card.MatCardModule,
                        datepicker.MatDatepickerModule,
                        i1$2.MatDialogModule,
                        expansion.MatExpansionModule,
                        formField.MatFormFieldModule,
                        gridList.MatGridListModule,
                        input.MatInputModule,
                        icon.MatIconModule,
                        list.MatListModule,
                        menu.MatMenuModule,
                        paginator.MatPaginatorModule,
                        progressBar.MatProgressBarModule,
                        progressSpinner.MatProgressSpinnerModule,
                        radio.MatRadioModule,
                        core.MatRippleModule,
                        select.MatSelectModule,
                        sidenav.MatSidenavModule,
                        slideToggle.MatSlideToggleModule,
                        sort.MatSortModule,
                        table.MatTableModule,
                        tabs.MatTabsModule,
                        toolbar.MatToolbarModule,
                        tooltip.MatTooltipModule,
                        slider.MatSliderModule,
                    ],
                    providers: [],
                },] }
    ];

    var MainSpinnerComponent = /** @class */ (function () {
        function MainSpinnerComponent() {
        }
        MainSpinnerComponent.prototype.ngOnInit = function () {
            if (!this.options)
                this.options = {};
            this.color = this.options.color ? this.options.color : 'primary';
            this.mode = this.options.mode ? this.options.mode : 'indeterminate';
            this.diameter = this.options.diameter ? this.options.diameter : 75;
            this.strokeWidth = this.options.strokeWidth ? this.options.strokeWidth : 12;
        };
        return MainSpinnerComponent;
    }());
    MainSpinnerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-main-spinner',
                    template: "<div class=\"spinner-box\">\n  <mat-progress-spinner [color]=color [mode]=mode [diameter]=diameter [strokeWidth]=strokeWidth [value]=options.value></mat-progress-spinner>\n</div>\n\n",
                    styles: [".spinner-box{width:100%;height:100%;display:inline-flex}.mat-progress-spinner{margin:auto;align-self:center}"]
                },] }
    ];
    MainSpinnerComponent.propDecorators = {
        options: [{ type: i0.Input }]
    };

    var PopIndicatorsModule = /** @class */ (function () {
        function PopIndicatorsModule() {
        }
        return PopIndicatorsModule;
    }());
    PopIndicatorsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [MainSpinnerComponent],
                    imports: [MaterialModule],
                    exports: [MainSpinnerComponent],
                },] }
    ];

    var PopLeftMenuModule = /** @class */ (function () {
        function PopLeftMenuModule() {
        }
        return PopLeftMenuModule;
    }());
    PopLeftMenuModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        PopLeftMenuComponent,
                    ],
                    imports: [
                        common.CommonModule,
                        i1.RouterModule,
                        core.MatRippleModule,
                        icon.MatIconModule,
                        tooltip.MatTooltipModule,
                        list.MatListModule,
                        button.MatButtonModule,
                        PopIndicatorsModule
                    ],
                    exports: [
                        PopLeftMenuComponent,
                    ],
                    providers: [],
                },] }
    ];

    var PopExtendDynamicComponent = /** @class */ (function (_super) {
        __extends(PopExtendDynamicComponent, _super);
        function PopExtendDynamicComponent() {
            var _this = _super.call(this) || this;
            _this.template = GetComponentTemplateContainer();
            _this.template = Object.assign(Object.assign({}, _this.template), {
                attach: function (container) {
                    if (IsString(container, true)) {
                        if (_this[container]) {
                            _this.template.container = _this[container];
                            delete _this[container];
                        }
                        else {
                        }
                    }
                    else {
                        _this.template.container = container;
                    }
                },
                render: function (list, transfer, bypassTransfer) {
                    if (transfer === void 0) { transfer = ['core', 'position']; }
                    if (bypassTransfer === void 0) { bypassTransfer = false; }
                    _this.template.ref_events.map(function (subscription) {
                        if (subscription && typeof subscription.unsubscribe === 'function') {
                            subscription.unsubscribe();
                        }
                    });
                    _this.template.refs = _this.template.refs.map(function (componentRef) {
                        if (componentRef && typeof componentRef.destroy === 'function') {
                            componentRef.destroy();
                        }
                        componentRef = null;
                        return null;
                    });
                    _this.template.transfer = {};
                    if (!bypassTransfer) {
                        transfer.map(function (transferKey) {
                            if (typeof _this[transferKey] !== 'undefined') {
                                _this.template.transfer[transferKey] = _this[transferKey];
                            }
                        });
                    }
                    if (_this.template && _this.template.container) {
                        _this.template.container.clear();
                        if (Array.isArray(list)) {
                            list.map(function (component) {
                                if (IsObject(component, true) && IsDefined(component.type)) {
                                    var factory = exports.PopComponentResolver.resolveComponentFactory(component.type);
                                    var componentRef_1 = _this.template.container.createComponent(factory);
                                    if (componentRef_1.instance.events) {
                                        _this.template.ref_events.push(componentRef_1.instance.events.subscribe(function (event) {
                                            if (typeof _this.dom.handler.bubble === 'function') {
                                                _this.dom.handler.bubble(_this.core, event);
                                            }
                                            else {
                                                if (_this.trait.bubble)
                                                    _this.events.emit(event);
                                            }
                                        }));
                                    }
                                    if (typeof (component.inputs) === 'object') {
                                        Object.keys(component.inputs).map(function (key) {
                                            if (typeof (key) === 'string' && typeof (component.inputs[key]) !== 'undefined') {
                                                componentRef_1.instance[key] = component.inputs[key];
                                            }
                                        });
                                    }
                                    Object.keys(_this.template.transfer).map(function (transferKey) {
                                        componentRef_1.instance[transferKey] = _this.template.transfer[transferKey];
                                    });
                                    componentRef_1.changeDetectorRef.detectChanges();
                                    _this.template.refs.push(componentRef_1);
                                }
                            });
                        }
                    }
                },
                clear: function () {
                    if (_this.template.container)
                        _this.template.container.clear();
                },
                destroy: function () {
                    if (_this.template)
                        DestroyComponentTemplate(_this.template);
                },
            });
            return _this;
        }
        PopExtendDynamicComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopExtendDynamicComponent.prototype.ngOnDestroy = function () {
            this.template.destroy();
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopExtendDynamicComponent;
    }(PopExtendComponent));
    PopExtendDynamicComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-template-component',
                    template: "Template Component"
                },] }
    ];
    PopExtendDynamicComponent.ctorParameters = function () { return []; };

    var PopWidgetBarComponent = /** @class */ (function (_super) {
        __extends(PopWidgetBarComponent, _super);
        function PopWidgetBarComponent(APP_GLOBAL, APP_WIDGETS) {
            var _this = _super.call(this) || this;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.APP_WIDGETS = APP_WIDGETS;
            _this.hidden = false;
            _this.widgets = [];
            _this.name = 'PopWidgetBarComponent';
            _this.ui = {};
            _this.asset = {};
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        this.dom.state.open = false;
                        this.dom.state.closed = true;
                        this.dom.setSubscriber('init', this.APP_GLOBAL.init.subscribe(function (val) {
                            if (val)
                                _this._initialize();
                        }));
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        PopWidgetBarComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopWidgetBarComponent.prototype.onToggleMenu = function () {
            this.dom.state.open = !this.dom.state.open;
            this.dom.state.closed = !this.dom.state.open;
            window.dispatchEvent(new Event('onWindowResize'));
        };
        PopWidgetBarComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        PopWidgetBarComponent.prototype._initialize = function () {
            this.hidden = ((this.APP_GLOBAL.isEntities() && !(IsObject(exports.PopAuth))) || !(this.widgets.length)) ? true : false;
            return true;
        };
        return PopWidgetBarComponent;
    }(PopExtendDynamicComponent));
    PopWidgetBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-widget-bar',
                    template: "<div class=\"pop-widget-bar-container \" [ngClass]=\"{'pop-widget-bar-open': dom.state.open, 'pop-widget-bar-closed': dom.state.closed}\">\n  <div class=\"pop-widget-bar-layout\">\n    <p class=\"pop-widget-bar-icon-container\"></p>\n    <div class=\"pop-widget-item\">\n\n    </div>\n  </div>\n  <!--<button class=\"pop-widget-bar-toggle\" mat-icon-button (click)=\"onToggleMenu()\">-->\n    <!--<span class=\"sw-pop-icon\" *ngIf=\"dom.state.closed\">H</span>-->\n    <!--<span class=\"sw-pop-icon\" *ngIf=\"dom.state.open\">I</span>-->\n  <!--</button>-->\n</div>\n\n",
                    styles: [".pop-widget-bar-container{overflow-x:hidden;overflow-y:hidden;height:100vh;margin:0}.pop-widget-bar-open{width:255px;transition:width .5s}.pop-widget-bar-closed{width:79px;transition:width .5s;background-color:var(--background-main-menu)}.pop-widget-bar-layout{overflow:hidden}.pop-widget-bar-icon-container{width:79px;position:relative;display:block;float:right}.pop-widget-item{width:196px;position:relative;display:block;overflow:hidden;float:left}.pop-widget-bar-toggle{position:fixed;width:40px;height:40px;padding:10px 30px 30px 26px;margin:0 0 30px;box-sizing:border-box;overflow:hidden;float:left;bottom:0;border-radius:50%}.pop-widget-bar-toggle .mat-icon-button{background-color:var(--bg-3)}"]
                },] }
    ];
    PopWidgetBarComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_WIDGETS',] }] }
    ]; };
    PopWidgetBarComponent.propDecorators = {
        hidden: [{ type: i0.HostBinding, args: ['class.sw-hidden',] }, { type: i0.Input }],
        widgets: [{ type: i0.Input }]
    };

    var PopWidgetBarModule = /** @class */ (function () {
        function PopWidgetBarModule() {
        }
        return PopWidgetBarModule;
    }());
    PopWidgetBarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        button.MatButtonModule
                    ],
                    declarations: [
                        PopWidgetBarComponent,
                    ],
                    exports: [
                        PopWidgetBarComponent,
                    ],
                    providers: [],
                },] }
    ];

    var PopFieldItemComponent = /** @class */ (function (_super) {
        __extends(PopFieldItemComponent, _super);
        function PopFieldItemComponent() {
            var _this = _super.call(this) || this;
            _this.position = 1;
            _this.when = null;
            _this.hidden = false;
            _this.dom.state.helper = false;
            _this.dom.state.tooltip = false;
            _this.dom.state.hint = false;
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopFieldItemComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * On Link Click
         */
        PopFieldItemComponent.prototype.onLinkClick = function () {
            console.log('LINK STUB: Link to Entity', this.config);
        };
        /**
         * On Blur Event
         */
        PopFieldItemComponent.prototype.onBlur = function () {
            if (IsObject(this.config, true)) {
                var value = this.config.control.value;
                if (IsString(value)) {
                    value = String(value).trim();
                    this.config.control.setValue(value);
                }
                else if (IsNumber(value)) {
                    value = +String(value).trim();
                    this.config.control.setValue(value);
                }
                this.onBubbleEvent('onBlur');
                if (this._isChangeValid()) {
                    if (this._isFieldPatchable()) {
                        this.onChange();
                    }
                    else {
                        this._applyTransformation(value);
                    }
                }
            }
        };
        /**
         * On Change event
         * @param value
         * @param force
         */
        PopFieldItemComponent.prototype.onChange = function (value, force) {
            if (force === void 0) { force = false; }
            if (IsObject(this.config, ['control'])) {
                this.log.info("onChange", value);
                var control = this.config.control;
                if (typeof value !== 'undefined') {
                    control.setValue(value);
                    control.markAsDirty();
                    control.updateValueAndValidity();
                }
                if (this._isChangeValid()) {
                    value = typeof value !== 'undefined' ? value : this.config.control.value;
                    value = this._applyTransformation(value);
                    if (this.config.patch && (this.config.patch.path || this.config.facade)) {
                        this._onPatch(value, force);
                    }
                    else {
                        this.onBubbleEvent('onChange');
                    }
                }
                else {
                    // console.log( 'invalid change', this.config.control.value );
                    this.onBubbleEvent('onInvalidChange');
                }
            }
        };
        /**
         * On Focus event
         */
        PopFieldItemComponent.prototype.onFocus = function () {
            if (IsObject(this.config, ['control'])) {
                var control = this.config.control;
                if (!control.dirty)
                    this.asset.storedValue = this.config.control.value;
                this.config.message = '';
                this.onBubbleEvent('onFocus');
            }
        };
        /**
         * This will bubble an event up the pipeline
         * @param eventName
         * @param message
         * @param extend
         * @param force
         */
        PopFieldItemComponent.prototype.onBubbleEvent = function (eventName, message, extend, force) {
            if (message === void 0) { message = null; }
            if (extend === void 0) { extend = {}; }
            if (force === void 0) { force = false; }
            if (IsObject(this.config, true)) {
                var event_1 = {
                    type: 'field',
                    name: eventName,
                    source: this.name
                };
                if (this.config)
                    event_1.config = this.config;
                if (message)
                    event_1.message = message;
                Object.keys(extend).map(function (key) {
                    event_1[key] = extend[key];
                });
                this.log.event("onBubbleEvent", event_1);
                if (this.config.bubble || force) {
                    this.events.emit(event_1);
                }
                return event_1;
            }
        };
        PopFieldItemComponent.prototype.ngOnDestroy = function () {
            this._clearState();
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Protected Method )                                      *
         *               These are protected instead of private so that they can be overridden          *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Hook that is called on destroy to reset the field
         */
        PopFieldItemComponent.prototype._clearState = function () {
            var patch = this.config.patch;
            var control = this.config.control;
            if (patch.running) {
                control.enable();
                patch.running = false;
            }
        };
        /**
         * Hook that is called right before a patch
         */
        PopFieldItemComponent.prototype._beforePatch = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var patch = _this.config.patch;
                var control = _this.config.control;
                control.disable();
                patch.running = true;
                _this._clearMessage();
                return resolve(true);
            });
        };
        /**
         * Hook that is called right after the api response returns
         */
        PopFieldItemComponent.prototype._afterPatch = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var patch = _this.config.patch;
                var control = _this.config.control;
                control.enable();
                patch.running = false;
                return resolve(true);
            });
        };
        /**
         * Prepare to make an api call to the server
         * @param value
         * @param force
         */
        PopFieldItemComponent.prototype._onPatch = function (value, force) {
            var _this = this;
            if (force === void 0) { force = false; }
            var patch = this.config.patch;
            if (!force) {
                if (!this.config.control.valid)
                    return false;
                if (value === this.asset.storedValue)
                    return false;
                if (patch.trigger === 'manual')
                    return false;
            }
            this._beforePatch().then(function () {
                if (_this.config.facade && !force) {
                    _this.dom.setTimeout('api-facade', function () {
                        _this._onPatchSuccess({}).then(function () { return _this._afterPatch(); });
                    }, (_this.config.patch.duration || 0));
                }
                else {
                    _this.log.info("onPatch");
                    _this._doPatch(_this._getPatchBody(value));
                }
            });
        };
        /**
         * This fx will make the actual api call to the server
         * @param body
         * @private
         */
        PopFieldItemComponent.prototype._doPatch = function (body) {
            var _this = this;
            var method = this.config.patch.method ? this.config.patch.method : 'PATCH';
            var patch = this.config.patch;
            var ignore401 = (patch.ignore401 ? true : null);
            var version = (patch.version ? patch.version : 1);
            if (IsString(this.config.patch.path, true)) {
                var request = method === 'PATCH' ? exports.PopRequest.doPatch(this.config.patch.path, body, version, ignore401, this.config.patch.businessId) : exports.PopRequest.doPost(this.config.patch.path, body, version, ignore401, this.config.patch.businessId);
                this.dom.setSubscriber('api-patch', request.subscribe(function (res) {
                    _this._onPatchSuccess(res).then(function () { return _this._afterPatch(); });
                }, function (err) {
                    _this._onPatchFail(err).then(function () { return _this._afterPatch(); });
                }));
            }
            else {
                this._onPatchSuccess(body).then(function () { return _this._afterPatch(); });
            }
        };
        /**
         * Determine if a change is valid
         */
        PopFieldItemComponent.prototype._isChangeValid = function () {
            var control = this.config.control;
            if (control.invalid) {
                if (this.config.displayErrors)
                    this._setMessage(ValidationErrorMessages(control.errors));
                return false;
            }
            return this._checkPrevent();
        };
        /**
         * Determine if a field should be patched
         */
        PopFieldItemComponent.prototype._isFieldPatchable = function () {
            if (this.config.facade) {
                return true;
            }
            else if (this.config.patch && this.config.patch.path) {
                return true;
            }
            return false;
        };
        /**
         * Helper to determine if an event is related to a field update
         * @param event
         */
        PopFieldItemComponent.prototype._isFieldChange = function (event) {
            return event.type === 'field' && (event.name === 'onChange' || event.name === 'patch');
        };
        /**
         * Transformations can be applied to a value before it is sent to the api server
         * @param value
         */
        PopFieldItemComponent.prototype._applyTransformation = function (value) {
            if (IsString(this.config.transformation, true)) {
                value = PopTransform(value, this.config.transformation);
                if (value !== this.config.control.value)
                    this.config.control.setValue(value);
            }
            return value;
        };
        /**
         * Handle an api call success
         * @param res
         */
        PopFieldItemComponent.prototype._onPatchSuccess = function (res) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.log.info("onPatchSuccess");
                var patch = _this.config.patch;
                var control = _this.config.control;
                _this.asset.storedValue = control.value;
                patch.success = true;
                patch.running = false;
                var event = _this.onBubbleEvent("patch", 'Patched.', {
                    success: true,
                    response: res.data ? res.data : res
                }, true);
                if (IsObject(_this.core, ['channel'])) {
                    if (_this.config.session) {
                        if (SessionEntityFieldUpdate(_this.core, event, _this.config.sessionPath)) {
                            if (!event.channel) {
                                event.channel = true;
                                _this.core.channel.emit(event);
                            }
                            _this.core.repo.clearCache('table', 'data');
                        }
                        else {
                            _this.log.error("SessionEntityFieldUpdate:" + event.config.name, "Session failed");
                        }
                    }
                    exports.ServiceInjector.get(PopEntityEventService).sendEvent(event);
                }
                if (typeof patch.callback === 'function') { // allows developer to attach a callback when this field is updated
                    patch.callback(_this.core, event);
                    _this._onPatchSuccessAdditional();
                }
                _this.dom.setTimeout('patch-success', function () {
                    patch.success = false;
                }, (_this.config.patch.duration || 0));
                return resolve(true);
            });
        };
        PopFieldItemComponent.prototype._onPatchSuccessAdditional = function () {
            return true;
        };
        /**
         * Handle an http failure
         * @param err
         */
        PopFieldItemComponent.prototype._onPatchFail = function (err) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.log.info("onPatchFail");
                var patch = _this.config.patch;
                var control = _this.config.control;
                patch.running = false;
                control.markAsDirty();
                control.setValue(_this.asset.storedValue);
                control.setErrors({ server: true });
                _this.config.message = GetHttpErrorMsg(err);
                _this.onBubbleEvent("patch", _this.config.message, {
                    success: false,
                    response: err
                }, true);
                _this._onPatchFailAdditional();
                return resolve(true);
            });
        };
        PopFieldItemComponent.prototype._onPatchFailAdditional = function () {
            return true;
        };
        /**
         * Set up the body of the api patch
         * @param value
         * @private
         */
        PopFieldItemComponent.prototype._getPatchBody = function (value) {
            var body = {};
            var patch = this.config.patch;
            value = typeof value !== 'undefined' ? value : this.config.control.value;
            if (IsObject(value)) {
                var val = value;
                body = Object.assign(Object.assign({}, body), val);
            }
            else if (IsArray(value)) {
                body[this.config.patch.field] = value;
            }
            else {
                body[this.config.patch.field] = value;
                if (this.config.empty && !body[this.config.patch.field]) {
                    body[this.config.patch.field] = PopTransform(String(value), this.config.empty);
                }
            }
            if (this.config.patch.json)
                body[this.config.patch.field] = JSON.stringify(body[this.config.patch.field]);
            if (patch && patch.metadata) {
                for (var i in patch.metadata) {
                    if (!patch.metadata.hasOwnProperty(i))
                        continue;
                    body[i] = patch.metadata[i];
                }
            }
            return body;
        };
        /**
         * Helper to set error message
         * @param message
         */
        PopFieldItemComponent.prototype._setMessage = function (message) {
            this.config.message = message;
        };
        /**
         * Helper to clear error message
         */
        PopFieldItemComponent.prototype._clearMessage = function () {
            this.config.message = '';
        };
        PopFieldItemComponent.prototype._checkPrevent = function () {
            if (IsArray(this.config.prevent, true)) {
                var control = this.config.control;
                var value_1 = control.value;
                var conflicts = this.config.prevent.filter(function (str) { return str.toLowerCase() === String(value_1).toLowerCase(); });
                if (conflicts.length) {
                    control.setErrors({ unique: true });
                    this._setMessage(ValidationErrorMessages(control.errors));
                    return false;
                }
                else {
                    this._clearMessage();
                    return true;
                }
            }
            return true;
        };
        return PopFieldItemComponent;
    }(PopExtendComponent));
    PopFieldItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-field-item-component',
                    template: "Field Item Component"
                },] }
    ];
    PopFieldItemComponent.ctorParameters = function () { return []; };
    PopFieldItemComponent.propDecorators = {
        position: [{ type: i0.Input }],
        when: [{ type: i0.Input }],
        hidden: [{ type: i0.HostBinding, args: ['class.sw-hidden',] }, { type: i0.Input }]
    };

    var slideInOut = animations.trigger('slideInOut', [
        animations.state('in', animations.style({ height: '*', opacity: 0 })),
        animations.transition(':leave', [
            animations.style({ height: '*', opacity: 1 }),
            animations.group([
                animations.animate(300, animations.style({ height: 0 })),
                animations.animate('200ms ease-in-out', animations.style({ 'opacity': '0' }))
            ])
        ]),
        animations.transition(':enter', [
            animations.style({ height: '0', opacity: 0 }),
            animations.group([
                animations.animate(300, animations.style({ height: '*' })),
                animations.animate('400ms ease-in-out', animations.style({ 'opacity': '1' }))
            ])
        ])
    ]);
    var fadeInOut = animations.trigger('fadeInOut', [
        // the "in" style determines the "resting" state of the element when it is visible.
        animations.state('in', animations.style({ opacity: 1 })),
        // fade in when created. this could also be written as transition('void => *')
        animations.transition(':enter', [
            animations.style({ opacity: 0 }),
            animations.animate(600)
        ]),
        // fade out when destroyed. this could also be written as transition('void => *')
        animations.transition(':leave', animations.animate(600, animations.style({ opacity: 0 })))
    ]);

    var PopInputComponent = /** @class */ (function (_super) {
        __extends(PopInputComponent, _super);
        function PopInputComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.config = new InputConfig();
            _this.name = 'PopInputComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    if (_this.config.autofocus) {
                        _this.inputField.nativeElement.focus();
                    }
                    else if (_this.config.autoselect) {
                        _this.inputField.nativeElement.focus();
                        _this.inputField.nativeElement.select();
                    }
                    _this.config.triggerOnChange = function (value, forcePatch) {
                        if (forcePatch === void 0) { forcePatch = false; }
                        _this.dom.setTimeout("config-trigger-change", function () {
                            // this.cdr.detectChanges();
                            _this.onChange(value, forcePatch);
                        }, 0);
                    };
                    _this.config.triggerDirectPatch = function (value) {
                        _this.dom.setTimeout("config-trigger-patch", function () {
                            _this._onPatch(value, true);
                        }, 0);
                    };
                    _this.config.clearMessage = function () {
                        _this.dom.setTimeout("config-clear-message", function () {
                            _this.config.message = '';
                            _this.config.control.markAsPristine();
                            _this.config.control.markAsUntouched();
                            // this.cdr.detectChanges();
                        }, 0);
                    };
                    _this.config.setType = function (type) {
                        _this.dom.setTimeout("config-set-type", function () {
                            _this.config.type = type;
                            // this.cdr.detectChanges();
                        }, 0);
                    };
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopInputComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopInputComponent.prototype.onKeyUp = function (event) {
            var _this = this;
            if (event.code === 'Enter') {
                if (this.config.control.invalid) {
                    if (this.config.displayErrors)
                        this._setMessage(ValidationErrorMessages(this.config.control.errors));
                }
                else {
                    this._clearMessage();
                    if (this.config.patch && (this.config.patch.path || this.config.facade)) {
                        if (this.config.control.value !== this.asset.storedValue) {
                            if (this._isFieldPatchable()) {
                                this.onChange();
                            }
                        }
                    }
                    if (this.config.tabOnEnter) {
                        this.dom.focusNextInput(this.el);
                    }
                    else {
                        this.onBubbleEvent('onEnter');
                    }
                    if (IsCallableFunction(this.config.onEnter)) {
                        this.dom.setTimeout("on-enter", function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.config.onEnter(this.core, event)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, 250);
                    }
                }
            }
            else if (!this.config.mask && this.config.pattern && this.config.pattern.length) {
                var val = PatternValidation(this.config.pattern, 'value', this.config.control.value);
                if (val !== this.config.control.value)
                    this.config.control.setValue(val);
                if (this.config.control.touched && this._isChangeValid()) {
                    this._clearMessage();
                }
                else if (IsArray(this.config.prevent, true)) {
                    this._isChangeValid();
                }
                this.onBubbleEvent('onKeyUp');
            }
            else {
                if (this.config.control.touched && this._isChangeValid()) {
                    this._clearMessage();
                }
                else if (IsArray(this.config.prevent, true)) {
                    this._isChangeValid();
                }
                this.onBubbleEvent('onKeyUp');
            }
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopInputComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopInputComponent;
    }(PopFieldItemComponent));
    PopInputComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-input',
                    template: "<div class=\"import-field-item-container pop-input-container\" [ngClass]=\"{'sw-hidden': config.hidden, 'pop-input-minimal': config.minimal, 'pop-input-hint': config.hint, 'pop-input-default': !config.hint && !config.minimal, 'pop-input-readonly': config.readonly, 'pop-input-select': config.selectMode}\">\n  <mat-form-field appearance=\"outline\" color=\"accent\" class=\"import-field-item-container-expansion\" [title]=\"config?.tooltip\">\n    <mat-label *ngIf=\"config?.label\">{{config?.label}} <span *ngIf=\"config?.required\" >*</span>   </mat-label>\n    <input\n      matInput\n      [ngClass]=\"{'sw-dot-font': config.conceal, 'sw-pointer': (config.selectMode && config?.control?.status !== 'DISABLED'), 'pop-input-select': (config.selectMode && config?.control?.status !== 'DISABLED')}\"\n      matTooltipClass=\"pop-input-tooltip-background\"\n      [hidden]=config.hidden\n      [maxlength]=config.maxlength\n      [readonly]=config.readonly\n      [type]=config.type\n      [formControl]=config.control\n      (keyup)=\"onKeyUp($event);\"\n      (blur)=\"dom.state.hint=false; onBlur();\"\n      (focus)=\"dom.state.hint= true; onFocus();\"\n      [prefix]=config.prefix\n      [suffix]=config.suffix\n      [mask]=config.mask\n      [specialCharacters]=config.specialChars\n      [dropSpecialCharacters]=config.dropSpecial\n      [showMaskTyped]=config.showMask\n      #inputField\n    >\n    <div class=\"pop-input-select-icon\" [ngClass]=\"{'sw-pointer': config?.control?.status !== 'DISABLED'}\"  *ngIf=\"config.selectMode\">\n      <mat-icon>arrow_drop_{{config?.selectModeOptionsDirection}}</mat-icon>\n<!--      <mat-icon>arrow_drop_up</mat-icon>-->\n    </div>\n    <mat-hint class=\"pop-input-btm-rgt-hint\" *ngIf=\"config.hint && dom.state.hint\" align=\"end\">{{config.control.value?.length || 0}}/{{config.maxlength}}</mat-hint>\n\n    <div class=\"pop-input-feedback-container\" matSuffix *ngIf=\"!config.minimal\" >\n      <lib-pop-field-item-error class=\"pop-input-error\" [hidden]=\"!config.message\" [message]=\"config.message\"></lib-pop-field-item-error>\n      <lib-pop-field-item-helper class=\"pop-input-helper\" [hidden]=\"config.message && !config.selectMode\" [helpText]=config.helpText></lib-pop-field-item-helper>\n    </div>\n    <mat-hint class=\"pop-input-btm-lft-hint\" [ngClass]=\"{'hint-disabled': config.control.status === 'DISABLED'}\"  *ngIf=\"config.hint && config.hintText\">{{config.hintText}}</mat-hint>\n    <mat-hint class=\"pop-input-btm-lft-hint\"  *ngIf=\"config.hint && config.required && !config.hintText\">*Required</mat-hint>\n    <mat-error class=\"pop-input-btm-lft-error\" *ngIf=\"config.hint && config.message\">\n      {{config.message}}\n    </mat-error>\n  </mat-form-field>\n\n\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n",
                    animations: [
                        slideInOut
                    ],
                    styles: [".pop-input-feedback-container{position:relative;display:flex;justify-content:center;align-items:center;top:2px;width:20px;height:20px}.pop-input-select-icon{position:absolute;right:-2px;top:0;z-index:2;color:var(--text-disabled)}.pop-input-error{top:2px;z-index:2}.pop-input-error,.pop-input-helper{position:absolute;font-size:.8em;left:2px}.pop-input-helper{top:3px;z-index:1}.pop-input-btm-lft-error,.pop-input-btm-lft-hint{position:relative;color:var(--foreground-disabled);font-size:12px;right:5px;padding-left:var(--gap-s)}.pop-input-btm-rgt-hint{color:var(--foreground-disabled);font-size:12px}.pop-input-btm-lft-error{color:var(--warn)}.pop-input-container-minimal .mat-form-field-appearance-outline .mat-form-field-wrapper,:host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:0;margin:0!important}:host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{margin-top:5px!important}:host ::ng-deep .mat-form-field-infix{width:0!important}:host ::ng-deep .mat-form-field-flex{margin-top:0!important}:host ::ng-deep .pop-input-default .mat-form-field-appearance-outline .mat-form-field-infix{padding:8px 0 13px}:host ::ng-deep .pop-input-minimal .mat-form-field-appearance-outline .mat-form-field-infix{padding:8px 0 13px}:host ::ng-deep .pop-input-hint .mat-form-field-appearance-outline .mat-form-field-infix{padding:8px 0 30px!important}:host ::ng-deep .pop-input-minimal .mat-form-field-infix{padding-right:2px!important}:host ::ng-deep .pop-input-select .pop-input-helper{left:-46px}:host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline{max-height:40px;background-color:var(--background-base)}:host ::ng-deep .mat-form-field-label-wrapper{overflow:visible}:host ::ng-deep .pop-input-readonly input:not(.pop-input-select){color:var(--text-disabled)}"]
                },] }
    ];
    PopInputComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopInputComponent.propDecorators = {
        config: [{ type: i0.Input }],
        inputField: [{ type: i0.ViewChild, args: ['inputField', { static: true },] }]
    };

    var PopSelectComponent = /** @class */ (function (_super) {
        __extends(PopSelectComponent, _super);
        function PopSelectComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.config = new SelectConfig();
            _this.name = 'PopSelectComponent';
            _this.optionsTopPos = '-5px';
            _this.ui = { selected: { config: undefined } };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, Promise.all([
                                    this._setInitialConfig(),
                                    this._setConfigHooks(),
                                    this._initialFauxControl()
                                ])];
                            case 1:
                                _a.sent();
                                resolve(true);
                                return [2 /*return*/];
                        }
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this.dom.setTimeout('check-existing-value', function () {
                        if (!_this.config.control.value && _this.config.autoFill && _this.config.required) {
                            if (_this.config.options.values.length === 1) {
                                if (IsCallableFunction(_this.config.triggerOnChange)) {
                                    var existingValue = _this.config.options.values[0].value;
                                    _this.config.triggerOnChange(existingValue);
                                }
                            }
                        }
                    }, 0);
                    resolve(true);
                });
            };
            return _this;
        }
        PopSelectComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * SelectsOption
         * @param optionValue: option value selected
         */
        PopSelectComponent.prototype.onOptionSelected = function (optionValue) {
            this.config.control.setValue(optionValue);
            this.dom.state.displayItems = false;
            this.ui.selected.config.label = this.config.label;
            this.onBlur();
        };
        /**
         *  Select Box clicked
         *  @returns void
         */
        PopSelectComponent.prototype.onSelectionClick = function ($event) {
            if (!this.config.readonly && this.config.control.status !== 'DISABLED') {
                // determine display direction and top offset
                var thirdHeight = window.innerHeight / 3;
                if ($event.clientY < (thirdHeight * 2)) {
                    this.dom.state.displayBottom = true;
                    this.optionsTopPos = '-5px';
                    this.ui.selected.config.selectModeOptionsDirection = 'down';
                }
                else {
                    this.dom.state.displayBottom = false;
                    var offset = (44 + (this.config.options.values.length * 48));
                    offset = offset > 284 ? 284 : offset;
                    this.optionsTopPos = "-" + offset + "px";
                    this.ui.selected.config.label = ' ';
                    this.ui.selected.config.selectModeOptionsDirection = 'up';
                }
                if (this.dom.state.displayItems) {
                    this.dom.state.displayItems = false;
                    this.ui.selected.config.label = this.config.label;
                    this.onBlur();
                }
                else {
                    this.dom.state.displayItems = true;
                    this.onFocus();
                }
            }
        };
        /**
         * Closes the dropdown if it is active.
         * This method is called from the ClickOutside directive.
         * If the user clicks outside of the component, it will close
         * @returns void
         */
        PopSelectComponent.prototype.onOutsideCLick = function () {
            this.dom.state.displayItems = false;
            this.ui.selected.config.label = this.config.label;
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopSelectComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Set the initial config for this component
         * @private
         */
        PopSelectComponent.prototype._setInitialConfig = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.dom.state.displayItems = false;
                _this.dom.state.displayBottom = true;
                _this.config = IsObjectThrowError(_this.config, true, "Config required") ? _this.config : null;
                _this.id = _this.config.name;
                return resolve(true);
            });
        };
        /**
         * Set the config hooks for this component
         * @private
         */
        PopSelectComponent.prototype._setConfigHooks = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.config.triggerOnChange = function (value) {
                    _this.dom.setTimeout("config-trigger-change", function () {
                        // this.cdr.detectChanges();
                        _this._setStrVal(value);
                        _this.onChange(value, true);
                    }, 0);
                };
                _this.config.clearMessage = function () {
                    _this.dom.setTimeout("config-clear-message", function () {
                        _this.config.message = '';
                        _this.config.control.markAsPristine();
                        _this.config.control.markAsUntouched();
                        // this.cdr.detectChanges();
                    }, 0);
                };
                return resolve(true);
            });
        };
        /**
         * Initialize Faux control ( used to display string value of select ). Subscribes to actual control value changes to update value.
         */
        PopSelectComponent.prototype._initialFauxControl = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.ui.selected.config = new InputConfig({
                    value: '',
                    disabled: _this.config.disabled ? _this.config.disabled : null,
                    helpText: _this.config.helpText,
                    displayErrors: false,
                    label: _this.config.label,
                    readonly: true,
                    selectMode: true,
                    minimal: _this.config.minimal,
                    maxlength: 65000
                });
                _this._setStrVal(_this.config.value);
                _this.dom.setSubscriber("value-changes", _this.config.control.valueChanges.subscribe(function (value) {
                    _this._setStrVal(value);
                }));
                _this.dom.setSubscriber("status-changes", _this.config.control.statusChanges.subscribe(function (status) {
                    _this.ui.selected.config.control.status = status;
                }));
                return resolve(true);
            });
        };
        PopSelectComponent.prototype._setStrVal = function (value) {
            if (value || value == '') { // code change by chetu developer on 16-05-2021
                var selected = this.config.options.values.find(function (o) { return o.value === value; });
                if (IsObject(selected, ['name'])) {
                    this.ui.selected.config.control.setValue(selected.name);
                }
                else {
                    this.ui.selected.config.control.setValue('');
                }
            }
            else {
                this.ui.selected.config.control.setValue(null);
            }
        };
        return PopSelectComponent;
    }(PopFieldItemComponent));
    PopSelectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-select',
                    template: "<div class=\"import-field-item-container pop-select-container pop-select-mode-{{this.config.mode}} \"\n  [ngClass]=\"{'pop-select-container-minimal': this.config.minimal, 'pop-select-readonly': this.config.readonly, 'pop-select-opened-top': (dom.state.displayItems && !dom.state.displayBottom), 'pop-select-opened-bottom': (dom.state.displayItems && dom.state.displayBottom)}\"\n  (libClickOutside)=\"onOutsideCLick();\"\n>\n\n  <lib-pop-input\n    (click)=\"onSelectionClick($event)\"\n    class=\"pop-select-faux\"\n    *ngIf=\"ui?.selected?.config\"\n    [config]=ui?.selected?.config\n    >\n  </lib-pop-input>\n\n<!--  <mat-form-field appearance=\"outline\" class=\"pop-select-container-expansion\" [title]=\"config?.tooltip\" (click)=\"selectClick()\">-->\n<!--    <mat-label *ngIf=\"config.label\">{{config.label}}</mat-label>-->\n<!--&lt;!&ndash;    <div *ngIf=\"config.tooltip && config.showTooltip\" class=\"pop-select-tooltip-msg\" [innerHTML]=config.tooltip></div>&ndash;&gt;-->\n<!--    <mat-select anelClass=\"item-box\"-->\n<!--      [formControl]=\"config?.control\"-->\n<!--      (openedChange)=\"onOpenChange($event);\">-->\n<!--&lt;!&ndash;      <div class=\"item-box\"><mat-option class=\"items\"  *ngFor=\"let option of config.options.values\" [value]=\"option.value\">{{option.name}}</mat-option></div>&ndash;&gt;-->\n<!--    </mat-select>-->\n\n<!--    <div class=\"pop-select-feedback\" matSuffix *ngIf=\"!config.minimal\">-->\n<!--      <lib-pop-field-item-error class=\"pop-select-error\" [hidden]=\"!config.message\" [message]=\"config.message\"></lib-pop-field-item-error>-->\n<!--    </div>-->\n<!--    <lib-pop-field-item-helper class=\"pop-select-helper\" [helpText]=config.helpText></lib-pop-field-item-helper>-->\n<!--  </mat-form-field>-->\n  <!--<a *ngIf=\"config.route && config.control.value\" class=\"sw-pop-icon pop-select-goto-icon sw-pointer\" (click)=\"link(); $event.stopPropagation();\">M</a>-->\n\n  <lib-pop-field-item-loader [show]=\"config?.patch.displayIndicator && config?.patch.running\"></lib-pop-field-item-loader>\n  <div [style.maxHeight.px]=\"config.height\" [ngClass]=\"{'pop-select-items-box-bottom' : dom.state.displayBottom, 'pop-select-items-box-top': !dom.state.displayBottom}\" *ngIf=\"dom.state.displayItems\" [style.top]=\"optionsTopPos\">\n    <div class=\"pop-select-items\" *ngFor=\"let option of config?.options.values\" (click)=\"onOptionSelected(option.value)\"\n         [ngClass]=\"{'pop-select-level-1': option.level === 1, 'pop-select-level-2': option.level === 2}\">{{option.name}}</div>\n  </div>\n</div>\n\n",
                    styles: [".pop-select-opened-top{box-shadow:-1px -4px 5px 0 rgba(0,0,0,.14),0 -5px 0 0 rgba(0,0,0,.12),1px -1px 4px -1px rgba(0,0,0,.2)}.pop-select-opened-bottom{box-shadow:0 4px 5px 0 rgba(0,0,0,.14),0 1px 0 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2)}.pop-select-container{position:relative;display:block;top:1px;height:45px}.pop-select-container-expansion{position:absolute!important;top:-1px;left:0;bottom:0;right:0;box-sizing:border-box!important;-moz-box-sizing:border-box}.pop-select-feedback{position:relative;display:flex;justify-content:center;align-items:center;top:0;width:12px;height:20px}.pop-select-helper{position:absolute;top:7px;right:30px;font-size:.8em}.pop-select-error{top:-1px;position:relative;font-size:.8em;left:4px}:host ::ng-deep .pop-input-readonly input:not(.pop-input-select){color:red}:host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:0;margin:0!important}:host ::ng-deep .mat-form-field-appearance-outline .mat-select-value{padding-right:40px}:host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-infix .mat-select-arrow{margin-top:5px}:host ::ng-deep .pop-select-mode-label .mat-select-arrow{display:none!important}:host ::ng-deep .mat-form-field-infix{width:0!important}.pop-select-items-box-bottom{box-shadow:0 4px 5px 0 rgba(0,0,0,.14),0 1px 0 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2)}.pop-select-items-box-bottom,.pop-select-items-box-top{display:flex;flex-direction:column;position:relative;min-height:var(--field-min-height);max-width:var(--field-max-width);border:1px solid var(--background-border);z-index:1000;background-color:var(--background-base);overflow-y:scroll}.pop-select-items-box-top{box-shadow:-1px -4px 5px 0 rgba(0,0,0,.14),1px 1px 0 0 rgba(0,0,0,.12),1px -1px 4px -1px rgba(0,0,0,.2)}.pop-select-items{padding:var(--gap-sm);background-color:var(--background-base);cursor:pointer}.pop-select-level-1{padding-left:var(--gap-lm)}.pop-select-level-2{padding-left:var(--gap-xl)}.pop-select-items:hover{background-color:var(--background-main-menu)}"]
                },] }
    ];
    PopSelectComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopSelectComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopSelectMultiComponent = /** @class */ (function (_super) {
        __extends(PopSelectMultiComponent, _super);
        function PopSelectMultiComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.name = 'PopSelectMultiComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config.triggerOnChange = function (value) {
                        // this.cdr.detectChanges();
                        _this.dom.setTimeout("config-trigger-change", function () {
                            _this.onChange(value, true);
                        }, 0);
                    };
                    _this.config.clearMessage = function () {
                        _this.dom.setTimeout("config-clear-message", function () {
                            _this.config.message = '';
                            _this.config.message = '';
                            _this.config.control.markAsPristine();
                            _this.config.control.markAsUntouched();
                            // this.cdr.detectChanges();
                        }, 0);
                    };
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopSelectMultiComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * On Blur Event
         */
        PopSelectMultiComponent.prototype.onBlur = function () {
            this.onBubbleEvent('onBlur');
        };
        PopSelectMultiComponent.prototype.onClose = function (open) {
            if (!open) {
                this.onChange();
            }
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopSelectMultiComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopSelectMultiComponent;
    }(PopFieldItemComponent));
    PopSelectMultiComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-select-multi',
                    template: "<div class=\"import-field-item-container pop-select-multi-container\">\n  <mat-form-field appearance=\"outline\" class=\"expand-to-container\" [title]=\"config?.tooltip\">\n    <mat-label *ngIf=\"config.label\">{{config.label}}</mat-label>\n<!--    <div *ngIf=\"config.tooltip && config.showTooltip\" class=\"field-tooltip-msg\" [innerHTML]=config.tooltip></div>-->\n    <mat-select\n      multiple\n      [formControl]=\"config.control\"\n      (blur)=\"config.showTooltip=false; onBlur()\"\n      (focus)=\"config.showTooltip=true; onFocus()\"\n      (change)=\"onChange()\"\n      (openedChange)=\"onClose($event);\">\n      <mat-option *ngFor=\"let option of config.options.values\" [value]=\"option.value\">{{option.name}}</mat-option>\n    </mat-select>\n    <div class=\"pop-select-multi-feedback\" matSuffix *ngIf=\"!config.minimal\">\n      <lib-pop-field-item-error class=\"pop-select-multi-error\" [hidden]=\"!config.message\" [message]=\"config.message\"></lib-pop-field-item-error>\n    </div>\n    <lib-pop-field-item-helper class=\"pop-select-multi-helper\" [helpText]=config.helpText></lib-pop-field-item-helper>\n    <!--<div [ngClass]=\"{'sw-hidden':!this.config.control.value.length}\" class=\"pop-select-multi-count\">{{this.config.control.value.length}}</div>-->\n    <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n\n  </mat-form-field>\n</div>\n",
                    styles: [".pop-select-multi-container{position:relative;display:block;padding:0}.pop-select-multi-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:0;margin:0!important}.pop-select-multi-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-infix .mat-select-arrow{margin-top:5px}.pop-select-multi-container ::ng-deep .mat-select-arrow-wrapper{position:relative;top:2px}.expand-to-container{position:relative;width:100%;height:100%}.pop-select-multi-feedback{position:relative;display:flex;justify-content:center;align-items:center;top:0;width:12px;height:20px}.pop-select-multi-count{position:absolute;bottom:1px;right:-7px;font-size:.7em;text-align:right;color:var(--text)}.pop-select-multi-helper{position:absolute;top:8px;right:30px;font-size:.8em}.pop-select-multi-error{top:1px;position:relative;font-size:.8em;left:4px}:host ::ng-deep .mat-form-field-appearance-outline .mat-select-value{padding-right:40px}"]
                },] }
    ];
    PopSelectMultiComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopSelectMultiComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopCheckboxComponent = /** @class */ (function (_super) {
        __extends(PopCheckboxComponent, _super);
        function PopCheckboxComponent(el, renderer, cdr) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.renderer = renderer;
            _this.cdr = cdr;
            _this.name = 'PopCheckboxComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.dom.state.indeterminate = false;
                    _this.asset.storedValue = +_this.config.control.value === 1 ? true : false;
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopCheckboxComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * This will position the feedback container in the right spot
         */
        PopCheckboxComponent.prototype.ngAfterViewInit = function () {
            this.asset.checkBoxBackground = this.el.nativeElement.querySelector('.mat-checkbox-background');
            this.asset.checkBoxFrame = this.el.nativeElement.querySelector('.mat-checkbox-frame');
            this.cdr.detectChanges();
        };
        PopCheckboxComponent.prototype.onEnter = function (event) {
            if (this.config.tabOnEnter) {
                this.dom.focusNextInput(this.el);
            }
        };
        PopCheckboxComponent.prototype._beforePatch = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var patch = _this.config.patch;
                var control = _this.config.control;
                control.disable();
                patch.running = true;
                _this._onHideCheckbox();
                _this._clearMessage();
                return resolve(true);
            });
        };
        PopCheckboxComponent.prototype._afterPatch = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var patch = _this.config.patch;
                var control = _this.config.control;
                control.enable();
                control.markAsPristine();
                patch.running = false;
                return resolve(true);
            });
        };
        PopCheckboxComponent.prototype._onPatchSuccessAdditional = function () {
            this._displayCheckbox();
            return true;
        };
        PopCheckboxComponent.prototype._onPatchFailAdditional = function () {
            this._displayCheckbox();
            return true;
        };
        /**
         * This will trigger when the user click the checkbox to subject its value
         * This updates the config value since that is auto-handled with this input type
         */
        PopCheckboxComponent.prototype.onToggleValue = function () {
            var value = !this.asset.storedValue;
            this.config.control.setValue(value, { emitEvent: true });
            this.onChange(value);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopCheckboxComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This will make the checkbox hidden in the view
         */
        PopCheckboxComponent.prototype._onHideCheckbox = function () {
            this.renderer.setStyle(this.asset.checkBoxFrame, 'border-color', '');
            this.renderer.setStyle(this.asset.checkBoxBackground, 'background-color', '');
            this.renderer.setStyle(this.asset.checkBoxBackground, 'border', '');
            this.renderer.setStyle(this.asset.checkBoxBackground, 'display', 'none');
        };
        /**
         * This will make the checkbox visible in the view
         */
        PopCheckboxComponent.prototype._displayCheckbox = function () {
            this.renderer.setStyle(this.asset.checkBoxBackground, 'display', 'block');
        };
        return PopCheckboxComponent;
    }(PopFieldItemComponent));
    PopCheckboxComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-checkbox',
                    template: "<div class=\"pop-checkbox-container pop-checkbox-label-{{config.labelPosition}} pop-checkbox-{{config.textOverflow}}-text position-{{this.config.align}} import-field-item-container\" [ngClass]=\"{'pop-checkbox-has-label':config.label, 'pop-checkbox-no-label': !config.label, 'pop-checkbox-reverse':config.label && config.labelPosition === 'before'}\">\n  <mat-checkbox\n    [formControl]=config.control\n    [ngClass]=\"{'pop-checkbox-no-pointer': config.patch.running}\"\n    [(indeterminate)]=\"dom.state.indeterminate\"\n    [labelPosition]=\"config.labelPosition\"\n    (click)=\"$event.stopPropagation();\"\n    (change)=\"onChange();\"\n    (keyup.enter)=\"onEnter($event)\"\n  >\n  </mat-checkbox>\n\n  <!--<div class=\"pop-checkbox-spacer\" *ngIf=\"config.label\"></div>-->\n  <div class=\"pop-checkbox-filler\" *ngIf=\"config.label\"></div>\n  <div class=\"pop-checkbox-column\">\n    <lib-pop-field-item-error class=\"pop-checkbox-error\" [hidden]=\"!config.message || !config.label\" [message]=\"config.message\"></lib-pop-field-item-error>\n    <lib-pop-field-item-helper class=\"pop-checkbox-helper\" [hidden]=\"config.message || !config.label\" [helpText]=config.helpText></lib-pop-field-item-helper>\n  </div>\n  <div *ngIf=\"config.label\" class=\"pop-checkbox-label\">\n    <h4>{{config.label}}</h4>\n  </div>\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n\n\n\n",
                    styles: [":host{width:100%}.pop-checkbox-container{position:relative;display:flex;flex-direction:row;flex:1;box-sizing:border-box;-moz-box-sizing:border-box;justify-content:flex-start;align-items:center;min-height:40px}.pop-checkbox-reverse{flex-direction:row-reverse!important}.pop-checkbox-sub-container{display:flex;flex-grow:1;max-width:calc(var(--field-max-width) - 40px)}.pop-checkbox-filler{flex:1;flex-grow:1;min-width:10px;min-height:35px}.pop-checkbox-spacer{width:10px;box-sizing:border-box}.pop-checkbox-row{display:flex;padding-top:2px;flex-grow:1;margin-bottom:var(--gap-xxs);text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.pop-checkbox-column{display:flex;flex-direction:column;align-items:center;justify-content:center;max-width:30px;min-width:30px}:host ::ng-deep .pop-checkbox-has-label .pop-checkbox-row{margin-top:var(--gap-xs)}:host ::ng-deep .pop-checkbox-has-label .mat-checkbox-layout{flex-grow:1!important}:host ::ng-deep .pop-checkbox-has-label .mat-checkbox-label{flex-grow:1!important}.pop-checkbox-no-label{margin-left:0!important;margin-right:0!important;padding-left:0!important;padding-right:0!important}:host ::ng-deep .pop-checkbox-no-label .mat-checkbox-inner-container{margin-left:0}:host ::ng-deep .pop-checkbox-no-label.position-left mat-checkbox{float:left}:host ::ng-deep .pop-checkbox-no-label.position-center mat-checkbox{margin:auto}:host ::ng-deep .pop-checkbox-no-label.position-right mat-checkbox{float:right}:host ::ng-deep .pop-checkbox-hover:hover{background:var(--accent-shade)!important}:host ::ng-deep .pop-checkbox-has-label.pop-checkbox-label-before .pop-checkbox-label{padding-right:var(--gap-xs)}:host ::ng-deep .pop-checkbox-has-label.pop-checkbox-label-after .pop-checkbox-label{padding-left:var(--gap-xs);padding-right:var(--gap-xs)}:host ::ng-deep .pop-checkbox-has-label.pop-checkbox-ellipsis-text .pop-checkbox-label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}:host ::ng-deep .pop-checkbox-has-label.pop-checkbox-ellipsis-text .pop-checkbox-label>h4{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;min-width:0}:host ::ng-deep .pop-checkbox-has-label.pop-checkbox-wrap-text .pop-checkbox-label>h4{overflow-wrap:break-spaces!important;word-wrap:break-spaces!important;white-space:normal!important}.pop-checkbox-helper{position:relative;top:3px;left:0;font-size:.7em}.pop-checkbox-error{position:relative;top:2px;left:2px;z-index:2}:host ::ng-deep .pop-checkbox-error .mat-icon{font-size:.9em}.pop-checkbox-no-label-adjust{margin-top:1px}.pop-checkbox-no-pointer{pointer-events:none}:host ::ng-deep h4{margin:0;flex:1}"]
                },] }
    ];
    PopCheckboxComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: i0.ChangeDetectorRef }
    ]; };
    PopCheckboxComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopRadioComponent = /** @class */ (function (_super) {
        __extends(PopRadioComponent, _super);
        function PopRadioComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.name = 'PopRadioComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.asset.storedValue = _this.config.control.value;
                    _this.asset.spinnerRef = _this.el.nativeElement.querySelector('.radio-ajax-spinner'); // would use a @viewChild but it returns a component model instead of an element.. weird
                    _this.config.triggerOnChange = function (value) {
                        _this.dom.setTimeout("config-trigger-change", function () {
                            _this.onChange(value, true);
                        }, 0);
                    };
                    _this.config.clearMessage = function () {
                        _this.dom.setTimeout("config-clear-message", function () {
                            _this.config.message = '';
                            _this.config.control.markAsPristine();
                            _this.config.control.markAsUntouched();
                            // this.cdr.detectChanges();
                        }, 0);
                    };
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopRadioComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopRadioComponent.prototype.onSelection = function (change) {
            this.asset.change = change;
            this.onChange();
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopRadioComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopRadioComponent;
    }(PopFieldItemComponent));
    PopRadioComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-radio',
                    template: "<div class=\"import-field-item-container pop-radio-container {{ config.labelPosition === 'inline' ? 'pop-radio-container-row' : 'pop-radio-container-column'}}\">\n  <div class=\"pop-radio-label-layout\">\n    <div>\n      {{config.label}}\n      <span\n        *ngIf=\"config.helpText\"\n        class=\"pop-radio-helper-icon sw-pointer sw-pop-icon\"\n        (mouseenter)=\"dom.state.helper = true\"\n        (mouseleave)=\"dom.state.helper = false\"\n        matTooltip=\"{{config.helpText}}\"\n        matTooltipPosition=\"right\">X\n      </span>\n    </div>\n    <mat-icon\n      *ngIf=\"config.message\"\n      class=\"pop-radio-error-icon\"\n      matTooltipPosition=\"right\"\n      [matTooltip]=config.message\n      [color]=\"'warn'\">info\n    </mat-icon>\n  </div>\n  <div class=\"{{ config.labelPosition === 'inline' ? 'pop-radio-inline' : '' }}\">\n    <mat-radio-group\n      [formControl]=\"config.control\"\n      [ngClass]=\"{'pop-radio-column-layout': config.layout === 'column', 'pop-radio-row-layout': config.layout === 'row'}\"\n      (change)=\"onSelection($event);\"\n      disableRipple>\n      <mat-radio-button class=\"pop-radio-option\" *ngFor=\"let option of config.options.values\" disableRipple [value]=\"option.value\">\n        <span>{{option.name}}</span>\n      </mat-radio-button>\n    </mat-radio-group>\n  </div>\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n\n\n",
                    styles: [".pop-radio-container-row{display:flex;justify-content:space-between}.pop-radio-container-column{display:flex;flex-direction:column}.pop-radio-inline{display:flex;justify-content:flex-end}.pop-radio-label-layout{display:inline-flex}.pop-radio-row-layout{display:inline-flex;flex-direction:row;align-items:center;justify-content:space-around;overflow-x:auto;overflow-y:hidden;width:100%;box-sizing:border-box}.pop-radio-helper-icon{font-size:.6em}.radio-error-icon{margin-left:5px;padding-top:6px;font-size:16px}.pop-radio-column-layout{display:inline-flex;flex-direction:column}.pop-radio-option{margin:5px;display:flex}.radio-ajax-spinner{position:absolute;cursor:pointer}.pop-radio-error-icon{position:relative;bottom:-2px;left:5px;font-size:16px;cursor:pointer}"]
                },] }
    ];
    PopRadioComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopRadioComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopSwitchComponent = /** @class */ (function (_super) {
        __extends(PopSwitchComponent, _super);
        function PopSwitchComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.events = new i0.EventEmitter();
            _this.name = 'PopSwitchComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.switchRef.checked = !!_this.config.control.value;
                    _this.config.switchRef = _this.switchRef;
                    _this.asset.storedValue = _this.config.control.value;
                    _this.config.triggerOnChange = function (value) {
                        _this.dom.setTimeout("trigger-change", function () {
                            _this.onSelection({ checked: value });
                        }, 0);
                    };
                    _this.config.setValue = function (value) {
                        _this.dom.setTimeout("set-value", function () {
                            _this.asset.change = value;
                            _this.config.control.setValue(value, { emitEvent: false });
                            _this.config.control.updateValueAndValidity();
                            _this.config.control.markAsPristine();
                            _this.switchRef.checked = value;
                        }, 0);
                    };
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopSwitchComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopSwitchComponent.prototype.onEnter = function (event) {
            if (this.config.tabOnEnter) {
                this.dom.focusNextInput(this.el);
            }
        };
        PopSwitchComponent.prototype.onSelection = function (change) {
            this.asset.change = change;
            this.onChange(change.checked);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                    Base Class Overrides                                      *
         *                                    ( Protected Method )                                      *
         *               These are protected instead of private so that they can be overridden          *
         *                                                                                              *
         ************************************************************************************************/
        PopSwitchComponent.prototype._beforePatch = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var patch = _this.config.patch;
                var control = _this.config.control;
                control.disable();
                patch.running = true;
                return resolve(true);
            });
        };
        /**
         * Called after a successful patch
         */
        PopSwitchComponent.prototype._afterPatch = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var patch = _this.config.patch;
                var control = _this.config.control;
                control.enable();
                patch.running = false;
                _this.switchRef.checked = _this.asset.storedValue;
                return resolve(true);
            });
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopSwitchComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopSwitchComponent;
    }(PopFieldItemComponent));
    PopSwitchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-switch',
                    template: "<div class=\"pop-switch-container import-field-item-container\" [title]=\"config?.tooltip ?  config?.tooltip : '' \" [style.padding]=config.padding [ngClass]=\"{ 'pop-switch-has-label':config.label, 'pop-switch-no-label': !config.label, 'pop-switch-label-before': config.label && config.labelPosition === 'before', 'pop-switch-label-after': config.label && config.labelPosition === 'after', 'pop-switch-wrap-text': config.label && config.textOverflow === 'wrap', 'pop-switch-wrap-ellipsis': config.label && config.textOverflow === 'ellipsis'}\">\n  <mat-slide-toggle\n    #switch\n    [ngClass]=\"{'pop-switch-no-pointer': config.patch.running}\"\n    [labelPosition]=\"config.labelPosition\"\n    [disableRipple]=1\n    [disabled]=config?.disabled\n    [name]=\"config.label\"\n    (keyup.enter)=\"onEnter($event)\"\n    (change)=\"onSelection($event)\">\n\n\n    <div class=\"mat-body\">\n      <div class=\"pop-switch-feedback-container\" *ngIf=\"config.label\">\n        <lib-pop-field-item-error class=\"pop-switch-error\" [hidden]=\"!config.message\" [message]=\"config.message\"></lib-pop-field-item-error>\n        <lib-pop-field-item-helper class=\"pop-switch-helper\" [hidden]=\"config.message\" [helpText]=config.helpText></lib-pop-field-item-helper>\n      </div>\n      <h4>{{config.label}}</h4>\n    </div>\n\n  </mat-slide-toggle>\n\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n",
                    styles: [":host{width:100%}.pop-switch-container{position:relative;display:flex;flex-direction:row;width:100%;min-height:40px;align-items:center;box-sizing:border-box}.pop-switch-has-label{justify-content:flex-start}.pop-switch-no-label{justify-content:center}.pop-switch-label{padding:5px 2px}.pop-switch-spacer{position:relative;display:flex;min-width:10px;box-sizing:border-box;background:pink}:host ::ng-deep .pop-switch-has-label .mat-slide-toggle{flex:1}:host ::ng-deep .pop-switch-label-before .mat-slide-toggle-content{display:flex;flex-grow:1;margin-right:5px;width:100%}.pop-switch-feedback-container{position:relative;display:flex;flex-direction:column;justify-content:center;align-items:center;min-width:25px;min-height:35px}:host ::ng-deep .pop-switch-label-before .mat-body{flex-direction:row-reverse!important}:host ::ng-deep .pop-switch-label-after .mat-slide-toggle-bar{margin-right:5px}:host ::ng-deep .pop-switch-label-after .mat-body h4{padding-left:var(--gap-xs)}:host ::ng-deep .pop-switch-has-label .mat-body{display:flex;flex-grow:1;box-sizing:border-box;min-width:0;align-items:center}:host ::ng-deep .pop-switch-wrap-text .mat-body h4{overflow-wrap:break-spaces!important;word-wrap:break-spaces!important;white-space:normal!important}:host ::ng-deep .pop-switch-wrap-ellipsis .mat-body h4{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host ::ng-deep .pop-switch-has-label.pop-switch-wrap-text .mat-slide-toggle{min-height:24px!important;height:auto!important}.pop-switch-ajax-spinner{position:absolute;cursor:pointer;z-index:1}.pop-switch-hover:hover{background:var(--accent-shade)!important}.pop-switch-no-pointer{pointer-events:none}:host ::ng-deep h4{margin:0;flex:1}.pop-switch-error{position:relative;top:2px;left:2px}:host ::ng-deep .pop-switch-error mat-icon{font-size:.98em}.pop-switch-helper{position:relative;top:2px;left:2px;font-size:.7em}"]
                },] }
    ];
    PopSwitchComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopSwitchComponent.propDecorators = {
        switchRef: [{ type: i0.ViewChild, args: ['switch', { static: true },] }],
        feedbackRef: [{ type: i0.ViewChild, args: ['feedback', { static: true },] }],
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var PopTextareaComponent = /** @class */ (function (_super) {
        __extends(PopTextareaComponent, _super);
        function PopTextareaComponent(el, renderer) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.renderer = renderer;
            _this.name = 'PopTextareaComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    if (_this.config.autoSize) {
                        _this.dom.setSubscriber('auto-size', _this.config.control.valueChanges.subscribe(function () {
                            _this.onAutoSize();
                        }));
                    }
                    else {
                        if (+_this.config.height) {
                            _this.renderer.setStyle(_this.textAreaRef.nativeElement, 'height', _this.config.height + 'px');
                        }
                    }
                    resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(this.config.autoSize && this.config.control.value)) return [3 /*break*/, 2];
                                return [4 /*yield*/, Sleep(5)];
                            case 1:
                                _a.sent();
                                this.onAutoSize();
                                _a.label = 2;
                            case 2:
                                resolve(true);
                                return [2 /*return*/];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopTextareaComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Trigger on key up event
         */
        PopTextareaComponent.prototype.onKeyUp = function () {
            this.onBubbleEvent("onKeyUp");
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopTextareaComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopTextareaComponent.prototype.onAutoSize = function () {
            var _this = this;
            this.dom.setTimeout('size-delay', function () {
                _this.renderer.setStyle(_this.textAreaRef.nativeElement, 'height', '0');
                var height = _this.textAreaRef.nativeElement.scrollHeight;
                if (+_this.config.height && height < _this.config.height)
                    height = _this.config.height;
                if (+_this.config.maxHeight && height > _this.config.maxHeight)
                    height = _this.config.maxHeight;
                _this.renderer.setStyle(_this.textAreaRef.nativeElement, 'height', height + 'px');
            }, 250);
        };
        return PopTextareaComponent;
    }(PopFieldItemComponent));
    PopTextareaComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-textarea',
                    template: "<!-- <div class=\"import-field-item-container pop-textarea-container\" [ngClass]=\"{'pop-textarea-container-tooltip-adjust': config.tooltip && dom.state.tooltip}\"> -->\n<div class=\"import-field-item-container pop-textarea-container\" >\n<div class=\"pop-textarea-feedback-container\">\n    <!--<lib-main-spinner-->\n      <!--[ngClass]=\"{'sw-hidden': !config.patch.running || !config.patch.displayIndicator, 'switch-no-pointer': config.patch.running}\"-->\n      <!--[options]=\"{strokeWidth:3, color:'accent', diameter:18}\">-->\n    <!--</lib-main-spinner>-->\n    <!--<mat-icon-->\n      <!--class=\"pop-textarea-error-icon\"-->\n      <!--[ngClass]=\"{'sw-hidden': !config.message || config.patch.running}\"-->\n      <!--[matTooltipPosition]=\"'left'\"-->\n      <!--[matTooltip]=config.message-->\n      <!--[color]=\"'warn'\">info-->\n    <!--</mat-icon>-->\n  <lib-pop-field-item-error class=\"pop-textarea-error-icon\" [hidden]=\"!config.message\" [message]=\"config.message\"></lib-pop-field-item-error>\n    <!--<div-->\n      <!--*ngIf=\"config.helpText && !config.message && ( !config.patch || !config.patch.running )\"-->\n      <!--class=\"sw-pop-icon textarea-helper-icon\"-->\n      <!--(mouseenter)=\"dom.state.helper = true\"-->\n      <!--(mouseleave)=\"dom.state.helper = false\"-->\n      <!--matTooltip=\"{{config.helpText}}\"-->\n      <!--matTooltipPosition=\"left\">X-->\n    <!--</div>-->\n  <lib-pop-field-item-helper class=\"textarea-helper-icon\" [hidden]=\"config.message\" [helpText]=config.helpText></lib-pop-field-item-helper>\n  </div>\n<!--  <div *ngIf=\"config.tooltip && dom.state.tooltip\" class=\"pop-textarea-tooltip-container\" [innerHTML]=config.tooltip></div>-->\n  <mat-form-field appearance=\"outline\" class=\"import-field-item-container-expansion\" [title]=\"config?.tooltip\">\n    <mat-label *ngIf=\"config.label\">{{config.label}}</mat-label>\n    <textarea\n      #textArea\n      matInput\n      [readonly]=config.readonly\n      [formControl]=config.control\n      [maxlength]=config.maxlength\n      spellcheck=\"false\"\n      (focus)=\"dom.state.tooltip=true; onFocus();\"\n      (keyup)=\"onKeyUp();\"\n      (blur)=\"dom.state.tooltip=false; onBlur();\">\n\n    </textarea>\n    <mat-hint *ngIf=\"config.hint\" align=\"end\">{{textArea.value?.length || 0}}/{{config.maxlength}}</mat-hint>\n  </mat-form-field>\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n\n",
                    styles: [".pop-textarea-feedback-container{position:absolute;right:2px;top:4px;width:20px;z-index:2}.pop-textarea-error-icon{position:relative;top:2px;right:-2px;cursor:pointer}:host ::ng-deep .pop-textarea-error-icon mat-icon{font-size:.98em!important}.textarea-helper-icon{position:relative;font-size:.7em;right:-2px;top:4px;cursor:pointer}:host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:0;margin:0!important}:host ::ng-deep .mat-form-field-appearance-outline textarea{resize:none;min-height:40px}"]
                },] }
    ];
    PopTextareaComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    PopTextareaComponent.propDecorators = {
        textAreaRef: [{ type: i0.ViewChild, args: ['textArea', { static: true },] }],
        config: [{ type: i0.Input }]
    };

    var PopLabelComponent = /** @class */ (function (_super) {
        __extends(PopLabelComponent, _super);
        function PopLabelComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.name = 'PopLabelComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config = IsObjectThrowError(_this.config, true, _this.name + ":configure: - this.config") ? _this.config : null;
                    _this.ui.copyLabel = undefined;
                    _this.ui.copyValue = undefined;
                    _this.ui.valueButton = undefined;
                    _this.dom.state.valueButton_theme = 'default';
                    if (_this.config.truncate) {
                        var truncatePipe = new TruncatePipe();
                        _this.config.value = truncatePipe.transform(_this.config.value, [_this.config.truncate]);
                    }
                    if (_this.config.copyLabel)
                        _this.ui.copyLabel = new ButtonConfig({
                            // disabled: !this.config.copyLabelBody ? true : false,
                            disabled: false,
                            icon: _this.config.copyLabelBody ? 'file_copy' : null,
                            value: _this.config.copyLabelDisplay,
                            size: 25,
                            width: 100,
                            radius: 5,
                            text: 12,
                        });
                    if (_this.config.copyValue)
                        _this.ui.copyValue = new ButtonConfig({
                            // disabled: !this.config.copyValueBody ? true : false,
                            disabled: false,
                            icon: _this.config.copyValueBody ? 'file_copy' : null,
                            value: _this.config.copyValueDisplay,
                            size: 25,
                            radius: 5,
                            text: 12,
                        });
                    if (_this.config.valueButton)
                        _this.ui.valueButton = new ButtonConfig({
                            disabled: _this.config.valueButtonDisabled ? true : false,
                            icon: _this.config.icon,
                            value: _this.config.valueButtonDisplay,
                            size: 25,
                            radius: 5,
                            text: 12,
                            bubble: true,
                            event: 'click'
                        });
                    _this._setValueButtonTheme();
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopLabelComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The user can click on a link to route to another part of the app
         */
        PopLabelComponent.prototype.onRouteLink = function () {
            if (this.config.route) {
                var routeApp = String(this.config.route).split('/');
                if (routeApp[1] && routeApp[1] === exports.PopHref) {
                    return exports.ServiceInjector.get(i1.Router).navigate([routeApp.slice(2).join('/')]).catch(function (e) {
                        console.log(e);
                        return false;
                    });
                }
            }
            return this.onBubbleEvent('link');
        };
        /**
         * The user can click on a label button to copy a value into the clipboard
         */
        PopLabelComponent.prototype.onLabelCopy = function () {
            var nav = navigator;
            var strip = ['ID '];
            var body = String(this.config.copyLabelBody).slice();
            strip.map(function (tag) {
                if (body.includes(tag))
                    body = StringReplaceAll(body, tag, '');
            });
            nav.clipboard.writeText(body);
        };
        /**
         * The user can click on a button value and copy a value to the clipboard
         */
        PopLabelComponent.prototype.onValueCopy = function () {
            var nav = navigator;
            var strip = ['ID '];
            var body = String(this.config.copyValueBody).slice();
            strip.map(function (tag) {
                if (body.includes(tag))
                    body = StringReplaceAll(body, tag, '');
            });
            nav.clipboard.writeText(body);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopLabelComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This fx basically checks the label value to sees if it can be associated with a color scheme aka warning, success, error
         */
        PopLabelComponent.prototype._setValueButtonTheme = function () {
            if (this.config.valueButton) {
                if (this.config.valueButtonDisplay) {
                    this.dom.state.valueButton_theme = GetVerbStateTheme(this.config.valueButtonDisplay);
                }
            }
        };
        return PopLabelComponent;
    }(PopFieldItemComponent));
    PopLabelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-label',
                    template: "<div class=\"import-field-item-container pop-label-container\" [ngClass]=\"{'pop-label-container-border': config.border, 'pop-label-ellipsis': config.textOverflow === 'ellipsis'}\" *ngIf=\"dom.state.loaded\">\n  <div class=\"import-flex-column-xs import-flex-grow-xs\">\n    <div class=\"pop-label-text import-flex-row import-flex-start-center\">\n      <div class=\"pop-label-button-copy\" *ngIf=\"config.copyLabel\">\n        <lib-pop-button\n          (click)=\"onLabelCopy()\"\n          [config]=\"ui['copyLabel']\"\n        ></lib-pop-button>\n      </div>\n      <label *ngIf=\"!config.copyLabel\">{{config.label}}<lib-pop-field-item-helper class=\"pop-label-helper-icon\" [hidden]=\"!config.helpText\" [helpText]=config.helpText></lib-pop-field-item-helper></label>\n    </div>\n  </div>\n  <div class=\"import-flex-column-md import-flex-grow-md\" [ngSwitch]=\"config.html\">\n    <div *ngSwitchCase=\"'label'\">\n      <div *ngIf=\"config.copyValue\">\n        <lib-pop-button\n          class=\"pop-label-button-copy\"\n          (click)=\"onValueCopy()\"\n          [config]=\"ui['copyValue']\"\n        ></lib-pop-button>\n      </div>\n      <div *ngIf=\"!config.copyValue\">\n        <div *ngIf=\"config.valueButton\" class=\"pop-label-button-theme-{{dom.state.valueButton_theme}} sw-mar-rgt-sm\">\n          <lib-pop-button class=\"pop-label-button-value\" [config]=\"ui.valueButton\"></lib-pop-button>\n        </div>\n        <div *ngIf=\"!config.valueButton\" class=\"import-flex-row import-flex-end-center\">\n          <span *ngIf=\"!config.icon\" class=\"pop-label-value-text\"><h4>{{config.value}}</h4></span>\n          <div *ngIf=\"config.icon\" [ngSwitch]=\"config.iconType\" class=\"pop-label-icon-container\">\n            <mat-icon *ngSwitchCase=\"'mat'\">{{config.icon}}</mat-icon>\n            <span *ngSwitchCase=\"'sw'\" class=\"sw-pop-icon\">{{config.icon}}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <a class=\"sw-pointer import-flex-row import-flex-end-center\" *ngSwitchCase=\"'link'\" (click)=\"onRouteLink();\" matTooltip=\"{{config.tooltip}}\" matTooltipPosition=\"left\">\n      <div *ngIf=\"!config.icon\" class=\"pop-label-value-text\"><h4>{{config.value}}</h4></div>\n      <div *ngIf=\"config.icon\" [ngSwitch]=\"config.iconType\" class=\"pop-label-icon-container\">\n        <mat-icon *ngSwitchCase=\"'mat'\">{{config.icon}}</mat-icon>\n        <span *ngSwitchCase=\"'sw'\" class=\"sw-pop-icon\">{{config.icon}}</span>\n      </div>\n    </a>\n  </div>\n</div>\n",
                    styles: [".pop-label-container{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:space-between;box-sizing:border-box;-moz-box-sizing:border-box}.pop-label-container-border{border-radius:3px;border:1px solid var(--border);padding:10px}.pop-label-container-border:hover{border-color:currentColor}.pop-label-container-border:focus{border-color:var(--accent)}.pop-label-link-container{position:relative;display:flex;flex-grow:1;flex-direction:row;align-items:center;justify-content:flex-end}.pop-label-icon-container{position:relative;display:flex;flex-direction:column;align-items:center;justify-content:center}.pop-label-helper-icon{position:relative;top:5px;font-size:.8em;z-index:2}.pop-label-text{flex:1 1 100%}.pop-label-value-text{flex:1;padding-left:var(--gap-s);box-sizing:border-box;min-width:0;text-align:right;flex-grow:1}.pop-label-value-text h4{margin:0}:host ::ng-deep .pop-label-ellipsis .pop-label-value-text h4{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.pop-label-button-copy,.pop-label-button-value{min-width:100px!important}:host ::ng-deep .pop-label-button-theme-default button{background:grey;color:#fff;box-shadow:none!important}:host ::ng-deep .pop-label-button-theme-success button{background:#35d18e!important;color:#fff!important;box-shadow:none!important;text-transform:none!important}:host ::ng-deep .pop-label-button-theme-danger button{background:#f8262e!important;color:#fff!important;box-shadow:none!important;text-transform:none!important}:host ::ng-deep .pop-label-button-theme-warn button{background:orange!important;color:#fff!important;box-shadow:none!important;text-transform:none!important}:host ::ng-deep .pop-label-button-theme-info button{background:#4e7fed!important;color:#000!important;text-transform:none!important}:host ::ng-deep .pop-label-icon-container mat-icon{margin-left:var(--gap-xs)!important}"]
                },] }
    ];
    PopLabelComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopLabelComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopSelectFilterComponent = /** @class */ (function (_super) {
        __extends(PopSelectFilterComponent, _super);
        function PopSelectFilterComponent(el, cdr) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            _this.name = 'PopSelectFilterComponent';
            _this.asset = {
                filteredOptions: undefined,
                groups: [],
                onFocusValue: undefined
            };
            _this.ui = {
                selected: {
                    config: undefined,
                    count: 0
                },
                search: {
                    config: undefined,
                    count: 0
                }
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config = IsObjectThrowError(_this.config, true, _this.name + ":configure: - this.config") ? _this.config : null;
                    _this._setInitialDomState();
                    _this._filterOptionsList('');
                    _this._setUpFilterObservable();
                    return resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    return resolve(true);
                });
            };
            return _this;
        }
        PopSelectFilterComponent.prototype.onEscapeHandler = function (event) {
            if (this.dom.state.filterActivated) {
                console.log('esc', event);
                this._closeOptionList();
            }
        };
        PopSelectFilterComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Set the inital dom state of the component
         * @private
         */
        PopSelectFilterComponent.prototype._setInitialDomState = function () {
            var _this = this;
            this.dom.state.filter = undefined;
            this.dom.state.filterActivated = false;
            this.dom.state.above = undefined;
            this.dom.state.below = undefined;
            this.dom.state.list = undefined;
            this.dom.state.position = 'below';
            this.dom.state.active = undefined;
            this.dom.state.checkboxPosition = this.config.checkboxPosition === 'before' ? 'before' : 'after';
            if (!this.config.multiple) {
                this.selectionListRef.selectedOptions = new collections.SelectionModel(false);
            }
            this.ui.selected.config = new InputConfig({
                value: this.config.strVal,
                helpText: this.config.helpText,
                displayErrors: false,
                label: this.config.label,
                readonly: true,
                selectMode: true,
                maxlength: 65000
            });
            this.ui.search.config = new InputConfig({
                value: this.config.strVal,
                helpText: this.config.helpText,
                displayErrors: false,
                label: this.config.label,
                readonly: true,
                maxlength: 255
            });
            if (!this.config.multiple && +this.config.value) {
                var activeOption = IsObject(this.config.options, ['values']) ? this.config.options.values.find(function (option) { return +option.value === +_this.config.value; }) : null;
                if (IsObject(activeOption, ['value', 'name'])) {
                    this.config.selectedOptions = [+activeOption.value];
                    this.asset.onFocusValue = JSON.stringify(this.config.selectedOptions);
                    this.dom.active.optionId = +activeOption.value;
                    this.ui.selected.config.control.setValue(activeOption.name, { emitEvent: false });
                }
            }
            else {
                this.asset.onFocusValue = JSON.stringify(this.config.selectedOptions);
                this._updateSelectedOptions();
            }
            delete this.config.options;
        };
        /**************************************
         * Public methods invoked by the view
         * ************************************/
        /**
         * Turn the dropdown on or off. If it is turned off,
         * it will emit the close event
         * @returns void
         */
        PopSelectFilterComponent.prototype.onToggleFilter = function (event, list) {
            var _this = this;
            if (this.config.patch.running)
                return false;
            this.dom.state.filterActivated = !this.dom.state.filterActivated;
            if (this.dom.state.filterActivated) {
                if (this.config.float) {
                    if (this.config.offsetSession) {
                        this.config.offset = this.config.offsetSession;
                    }
                    else if (this.config.height) {
                        this.config.offset = this.config.height;
                    }
                }
                else {
                    this.config.offset = null;
                }
            }
            else {
                this.config.offset = null;
            }
            this.dom.setTimeout('open-close', function () {
                if (!_this.config.position)
                    _this._setOptionListPosition({ above: event.pageY - 280, below: window.innerHeight - event.pageY - 20, height: list.clientHeight });
                if (!_this.dom.state.filterActivated) {
                    _this.onBubbleEvent('close');
                }
                else {
                    _this.asset.onFocusValue = JSON.stringify(_this.config.selectedOptions);
                    _this.config.message = '';
                    _this.onBubbleEvent('open');
                }
                if (_this.dom.state.filterActivated) {
                    if (_this.config.float) {
                        var offsetHeight = _this.listRef.nativeElement.offsetHeight;
                        if (offsetHeight) {
                            _this.config.offset = offsetHeight * (-1);
                            if (_this.config.offset)
                                _this.config.offsetSession = _this.config.offset;
                        }
                    }
                }
            }, 0);
            return true;
        };
        /**
         * The client user can toggle a specific grouping to be open/close
         * @param group
         */
        PopSelectFilterComponent.prototype.onToggleGroup = function (group) {
            if (this.config.groups.length > 1) {
                group.open = !group.open;
            }
        };
        /**
         * Closes the dropdown if it is active.
         * This method is called from the ClickOutside directive.
         * If the user clicks outside of the component, it will close
         * @param event
         * @returns void
         */
        PopSelectFilterComponent.prototype.onOutsideCLick = function () {
            this._closeOptionList();
        };
        /**
         * Checks/Unchecks all of the filtered options within a specific group
         * @param  FieldOption option
         * @returns boolean
         */
        PopSelectFilterComponent.prototype.onAllChange = function (checked) {
            var _this = this;
            if (!this.config.multiple)
                return false;
            this.config.groups.map(function (group) {
                group.options.values.map(function (option) {
                    option.selected = checked;
                });
                group.all = checked;
                group.indeterminate = false;
            });
            setTimeout(function () {
                _this._updateSelectedOptions();
            }, 0);
            return false;
        };
        /**
         * Checks/Unchecks all of the filtered options within a specific group
         * @param  FieldOption option
         * @returns boolean
         */
        PopSelectFilterComponent.prototype.onGroupChange = function (checked, group) {
            var _this = this;
            if (!this.config.multiple)
                return false;
            group.options.values.map(function (option) {
                if (!option.hidden) {
                    option.selected = checked;
                }
            });
            setTimeout(function () {
                _this._checkGroupState(checked, group);
                _this._updateSelectedOptions();
            }, 0);
            return false;
        };
        /**
         * Update's the list of selected options inside of the config
         * and emits a change event. This method will be called by the view
         * whenever an option is selected
         * @param MatSelectionListChange event
         * @returns void
         */
        PopSelectFilterComponent.prototype.onOptionChange = function (event, option, group) {
            var _this = this;
            setTimeout(function () {
                option.selected = event.target.className.search('mat-pseudo-checkbox-checked') > -1 ? true : false;
                _this._checkGroupState(option.selected, group);
                _this._updateSelectedOptions();
            }, 0);
        };
        PopSelectFilterComponent.prototype.onLink = function () {
            console.log('LINK STUB: Link to Entity', this.config.control.value);
        };
        /**
         * Checks if the given option is in the list of selected options
         * in the config. Used by the view to set the checkbox's on the initial state of the dropdown
         * @param  FieldOption option
         * @returns boolean
         */
        PopSelectFilterComponent.prototype.isOptionSelected = function (option) {
            return option.selected;
        };
        PopSelectFilterComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Observes the value changes to the search and triggers the filter of the options
         * @returns void
         */
        PopSelectFilterComponent.prototype._setUpFilterObservable = function () {
            var _this = this;
            this.ui.search.config.control.valueChanges
                .pipe(operators.debounceTime(200)).subscribe(function (value) {
                _this._filterOptionsList(value);
            });
        };
        /**
         * Close the option list
         * @private
         */
        PopSelectFilterComponent.prototype._closeOptionList = function () {
            if (this.dom.state.filterActivated) {
                // this.config.control.setValue( '', { emitEvent: true } );
                this.dom.state.filterActivated = false;
                this.cdr.detectChanges();
                this._checkSelectedValue(this.dom.state.filterActivated);
                this._filterOptionsList('');
                this.onBubbleEvent('close');
                this.config.offset = null;
            }
        };
        /**
         * Check the selected value to see if it needs to be stored
         * @param open
         * @private
         */
        PopSelectFilterComponent.prototype._checkSelectedValue = function (open) {
            // if( !open ){
            if (this.ui.selected.config.control.invalid) {
                if (this.config.displayErrors)
                    this.config.message = ValidationErrorMessages(this.ui.selected.config.control.errors);
            }
            else if (this.config.patch && (this.config.patch.path || this.config.facade)) {
                if (JSON.stringify(this.config.selectedOptions) !== this.asset.onFocusValue) {
                    this.onChange();
                }
            }
        };
        /**
         * Detects if the list of options should appear above or below the select input
         * @param height
         */
        PopSelectFilterComponent.prototype._setOptionListPosition = function (params) {
            var _this = this;
            if (params.height > 0) {
                this.config.offset = null;
                this.dom.state.above = params.above;
                this.dom.state.below = params.below;
                this.dom.state.list = params.height;
                // if( this.config.allowAll ) this.dom.state.list += 60;
                // if( this.config.filter ) this.dom.state.list += 58;
                this.config.position = this.dom.state.below >= this.dom.state.above ? 'below' : 'above';
                this.config.height = this.config.defaultHeight;
                if (this.config.position === 'above') {
                    if (this.config.height > this.dom.state.above)
                        this.config.height = this.dom.state.above;
                    this.config.minHeight = this.config.height;
                }
                else {
                    if (this.config.height > this.dom.state.below)
                        this.config.height = this.dom.state.below;
                    // this.config.minHeight = this.config.defaultMinHeight;
                    this.config.minHeight = this.config.height;
                }
                this.dom.setTimeout("search-focus", function () {
                    if (_this.searchRef) {
                        _this.searchRef.nativeElement.focus();
                        // this.onBubbleEvent( 'focus' );
                    }
                }, 200);
            }
        };
        /**
         * Detects whether the check all  box for a group should be unchecked, checked, or indeterminate
         * @param checked
         * @param group
         */
        PopSelectFilterComponent.prototype._checkGroupState = function (checked, group) {
            var indeterminate = false;
            var all = true;
            if (!checked) {
                all = false;
                group.options.values.some(function (option) {
                    if (!option.hidden && option.selected) {
                        indeterminate = true;
                        return true;
                    }
                });
            }
            else {
                group.options.values.some(function (option) {
                    if (!option.hidden && !option.selected) {
                        all = false;
                        indeterminate = true;
                        return true;
                    }
                });
            }
            group.all = all;
            group.indeterminate = indeterminate;
        };
        /**
         * Finds only the options from the config's options that match
         * the string passed in, and returns those options.
         * Used as the filter when setting up the filteredOptions observable
         * @param string value
         * @returns FieldItemOption
         */
        PopSelectFilterComponent.prototype._filterOptionsList = function (search) {
            var _this = this;
            this.config.groups.map(function (group) {
                group.options.values.map(function (option) {
                    option.hidden = ObjectContainsTagSearch(option, search) ? false : true;
                });
                group.selected = group.options.values.filter(function (option) {
                    return !option.hidden && option.selected;
                }).length;
                group.visible = group.options.values.filter(function (option) {
                    return !option.hidden;
                }).length;
                var checked = group.visible === group.selected;
                _this._checkGroupState(checked, group);
            });
            this.cdr.detectChanges();
        };
        /**
         * Update's the selection options in config
         * by looping through all of the currently selected items
         * in the selectionListRef.
         * @param number id
         */
        PopSelectFilterComponent.prototype._updateSelectedOptions = function () {
            var e_1, _a, e_2, _b;
            var selected = this.selectionListRef.selectedOptions.selected;
            var str = [];
            if (this.config.multiple) {
                this.config.selectedOptions = [];
                try {
                    for (var selected_1 = __values(selected), selected_1_1 = selected_1.next(); !selected_1_1.done; selected_1_1 = selected_1.next()) {
                        var option = selected_1_1.value;
                        str.push(option._text.nativeElement.innerText);
                        this.config.selectedOptions.push(String(option.value).trim());
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (selected_1_1 && !selected_1_1.done && (_a = selected_1.return)) _a.call(selected_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                str = str.sort();
                this.config.strVal = str.join(', ');
                this.ui.selected.config.control.setValue(this.config.strVal, { emitEvent: false });
                var value = JsonCopy(this.config.selectedOptions);
                this.config.control.setValue(value, { emitEvent: false });
            }
            else {
                var value = void 0;
                try {
                    for (var selected_2 = __values(selected), selected_2_1 = selected_2.next(); !selected_2_1.done; selected_2_1 = selected_2.next()) {
                        var option = selected_2_1.value;
                        str.push(option._text.nativeElement.innerText);
                        value = option.value;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (selected_2_1 && !selected_2_1.done && (_b = selected_2.return)) _b.call(selected_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                str = str.sort();
                this.config.strVal = str.join(', ');
                this.ui.selected.config.control.setValue(this.config.strVal, { emitEvent: false });
                this.dom.active.optionId = value;
                this.config.control.setValue(value, { emitEvent: false });
                this.config.value = value;
                this._closeOptionList();
            }
        };
        return PopSelectFilterComponent;
    }(PopFieldItemComponent));
    PopSelectFilterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-select-filter',
                    template: "<div class=\"pop-select-filter-container import-field-item-container\" [ngClass]=\"{'pop-select-filter-single': !config.multiple, 'pop-select-filter-multiple':config.multiple}\" (libClickOutside)=\"onOutsideCLick();\" [style.marginBottom.px]=\"config.offset\">\n  <lib-pop-input\n    class=\"pop-select-filter-values\"\n    *ngIf=\"ui.selected?.config\"\n    [class.filter-selected]=\"dom.state.filterActivated\"\n    [config]=ui.selected.config\n    (click)=\"onToggleFilter($event, list);\">\n  </lib-pop-input>\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n\n  <!--<div [ngClass]=\"{'sw-hidden':!config.selectedOptions.length}\" class=\"pop-select-filer-count\">{{config.selectedOptions.length}}</div>-->\n\n  <!--<mat-icon class=\"select-filter-button-icon sw-pointer\" (click)=\"onToggleFilter($event, list);\">arrow_drop_down</mat-icon>-->\n\n  <!--<div class=\"pop-select-filter-feedback\">-->\n    <!--<div *ngIf=\"config.message\"-->\n         <!--class=\"pop-select-error\"-->\n         <!--matTooltipPosition=\"left\"-->\n         <!--[matTooltip]=config.message>-->\n      <!--<mat-icon color=\"warn\">info</mat-icon>-->\n    <!--</div>-->\n  <!--</div>-->\n\n  <div class=\"select-filter-content select-filter-items-{{config.position}}\" [ngClass]=\"{'sw-hidden': !dom.state.filterActivated}\" #list>\n\n    <div class=\"pop-select-search-header\">\n      <mat-checkbox\n        *ngIf=\"config.multiple\"\n        [(ngModel)]=\"config.all\"\n        [color]=\"'primary'\"\n        matTooltip=\"Toggle All\"\n        matTooltipPosition=\"above\"\n        (change)=\"onAllChange($event.checked);\">\n      </mat-checkbox>\n\n      <mat-form-field *ngIf=\"config.filter && ui.search.config\" appearance=\"none\" floatLabel=\"never\" class=\"sw-search\">\n        <a matPrefix>\n          <mat-icon>search</mat-icon>\n        </a>\n        <input matInput placeholder=\"Search\"\n               class=\"sw-pointer\"\n               #search\n               type=\"text\"\n               [formControl]=\"ui.search.config.control\">\n        <mat-icon class=\"sw-cursor-pointer sw-pointer\" matSuffix (click)=\"ui.search.config.control.setValue('');\">close</mat-icon>\n      </mat-form-field>\n\n    </div>\n\n    <mat-selection-list [style.minHeight.px]=config.minHeight [style.maxHeight.px]=config.height #selectionList>\n      <div *ngFor=\"let group of config.groups\">\n        <div class=\"pop-select-option-header\" *ngIf=\"group.label && group.visible\">\n          <mat-checkbox\n            *ngIf=\"config.multiple\"\n            [(ngModel)]=\"group.all\"\n            [color]=\"'primary'\"\n            [indeterminate]=group.indeterminate\n            matTooltip=\"Toggle Group\"\n            matTooltipPosition=\"above\"\n            (change)=\"onGroupChange($event.checked, group);\">\n          </mat-checkbox>\n          <div class=\"pop-select-header-label\" (click)=\"onToggleGroup(group);\">{{group.label}} ({{group.options.values.length}})</div>\n\n        </div>\n        <mat-list-option\n          [checkboxPosition]=dom.state.checkboxPosition\n          class=\"pop-select-filter-option\"\n          *ngFor=\"let option of group.options.values\"\n          [ngClass]=\"{'sw-hidden': option.hidden || !group.open, 'pop-select-filter-active': dom.active.optionId && option.value === dom.active.optionId}\"\n          [style.paddingLeft]=\"option.level+'px'\"\n          [selected]=isOptionSelected(option)\n          (click)=\"onOptionChange($event, option, group);\"\n          [value]=\"option.value\">\n          {{option.name}}\n        </mat-list-option>\n      </div>\n      <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n    </mat-selection-list>\n  </div>\n</div>\n",
                    styles: [".pop-select-filter-container{position:relative;display:block;padding:0;margin:var(--gap-s) 0}.select-filter-button{border:1px solid var(--text-2);border-radius:.25em;position:relative;display:flex;justify-content:space-between;height:40px}.select-filter-button .select-filter-button-left-items{display:flex;justify-content:flex-start;align-items:center}.select-filter-button .select-filter-button-left-items .select-filter-button-bar{width:4px;background-color:var(--background-base);height:100%;border-radius:2px 0 0 2px}.select-filter-button .select-filter-button-left-items .select-filter-button-text{display:inline-block;margin-left:var(--gap-sm)}.pop-select-search-header{display:flex;flex-direction:row;min-height:40px;align-items:center;justify-content:stretch;border-bottom:1px solid var(--border)}.sw-search{margin-top:-20px}.sw-search,.sw-search .mat-form-field-flex{display:flex;flex-grow:1}.pop-select-filer-count{position:absolute;bottom:-5px;right:2px;font-size:.7em;text-align:right}.select-filter-button-icon{pointer-events:none;z-index:1;position:absolute;display:flex;top:var(--gap-s);right:7px;color:var(--text-disabled);outline:0}.select-filter-button:hover{background-color:var(--background-base);cursor:pointer}.select-filter-items-above{border:1px solid var(--border);position:absolute;bottom:47px;border-radius:5px}.select-filter-items-above,.select-filter-items-below{left:0;right:0;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;z-index:3;background-color:var(--background-base);min-height:30px}.select-filter-items-below{border:1px solid var(--border);position:relative;top:1px;border-radius:3px;z-index:99}.mat-form-field{display:block;height:30px}.pop-select-filter-option{box-sizing:border-box;background:var(--background-base);height:30px}.expand-to-container{position:absolute!important;top:0;left:0;bottom:0;right:0;box-sizing:border-box!important;-moz-box-sizing:border-box}.pop-select-filter-feedback{z-index:3;position:absolute;top:8px;right:9px;display:flex;flex-flow:row;align-items:center;justify-content:center}.pop-select-option-header{display:flex;flex-direction:row;-webkit-tap-highlight-color:transparent;width:100%;padding:0;justify-content:flex-start;padding-left:var(--xs);align-items:center;box-sizing:border-box;cursor:pointer;height:30px;border-top:1px solid var(--border)!important;border-bottom:1px solid var(--border)!important;outline:0;background:var(--background-2)}.pop-select-option-header:hover{background:var(--bg-1)}.pop-select-header-label{position:relative;display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-style:italic;font-weight:700;font-size:16px;padding-left:5px}.pop-select-filter-active{background:var(--background-2)}.select-filter-error{position:absolute;top:13px;left:0;font-size:.8em}:host ::ng-deep .checkbox-after{direction:rtl}:host ::ng-deep .checkbox-after .mat-checkbox-layout{width:100%}:host ::ng-deep .checkbox-after .mat-checkbox-layout .mat-checkbox-inner-container{margin:0 9px 0 auto}:host ::ng-deep .mat-checkbox-inner-container{margin:0 0 0 var(--gap-sm)}:host ::ng-deep .mat-checkbox-label{padding:0 0 0 var(--gap-sm)}:host ::ng-deep .mat-list-item-content-reverse{padding:0 var(--gap-s) 0 var(--gap-xs)!important}:host ::ng-deep mat-selection-list{overflow-y:auto;overflow-x:hidden;outline:0!important;padding-bottom:var(--gap-xs)}:host ::ng-deep mat-list-option{border:none!important}.pop-select-filter-option:focus,.pop-select-filter-option:hover{background:var(--accent-shade)}.pop-select-all-header:hover{background:var(--bg-1)}:host ::ng-deep .mat-form-field-infix{padding:8px 0 13px!important}:host ::ng-deep .pop-select-filter-values .mat-form-field-infix{padding:8px 40px 13px 0!important}:host ::ng-deep .pop-select-filter-values input{display:flex;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:100%;z-index:2;padding-right:40px}:host ::ng-deep .pop-select-filter-values .mat-form-field-infix{pointer-events:none!important}:host ::ng-deep .pop-select-filter-single mat-pseudo-checkbox{display:none!important}:host ::ng-deep .pop-select-filter-single .mat-list-text{padding-left:0!important}:host ::ng-deep .pop-select-option-header mat-checkbox{margin-left:-1px!important}:host ::ng-deep .pop-select-filter-single .sw-search{padding-left:var(--gap-s)}:host ::ng-deep .pop-select-option-header .mat-checkbox-inner-container{width:16px!important;height:16px!important}:host ::ng-deep .pop-select-option-header .mat-checkbox-label{padding:0 var(--gap-s) 0 0}:host ::ng-deep .pop-input-container{margin:0!important}:host ::ng-deep .filter-option-selected .pop-input-container{background-color:var(--accent-shade)!important}:host ::ng-deep mat-list-base{padding:0!important}:host ::ng-deep .mat-list-text{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}"]
                },] }
    ];
    PopSelectFilterComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PopSelectFilterComponent.propDecorators = {
        config: [{ type: i0.Input }],
        listRef: [{ type: i0.ViewChild, args: ['list', { static: true },] }],
        selectionListRef: [{ type: i0.ViewChild, args: ['selectionList', { static: true },] }],
        searchRef: [{ type: i0.ViewChild, args: ['search',] }],
        onEscapeHandler: [{ type: i0.HostListener, args: ['document:keydown.escape', ['$event'],] }]
    };

    /**
     * This directive was taken from this github repository
     * https://github.com/christianliebel/angular2-click-outside
     * found on stack over flow post
     * https://stackoverflow.com/questions/35712379/how-can-i-close-a-dropdown-on-click-outside
     *
     * Credit goes to github user christianliebel
     */
    var ClickOutsideDirective = /** @class */ (function () {
        function ClickOutsideDirective(_elementRef) {
            this._elementRef = _elementRef;
            this.libClickOutside = new i0.EventEmitter();
        }
        ClickOutsideDirective.prototype.onClick = function (event, targetElement) {
            if (!targetElement) {
                return;
            }
            var clickedInside = this._elementRef.nativeElement.contains(targetElement);
            if (!clickedInside) {
                this.libClickOutside.emit(event);
            }
        };
        return ClickOutsideDirective;
    }());
    ClickOutsideDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[libClickOutside]'
                },] }
    ];
    ClickOutsideDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    ClickOutsideDirective.propDecorators = {
        libClickOutside: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['document:click', ['$event', '$event.target'],] }]
    };

    var ExpansionItemsComponent = /** @class */ (function () {
        function ExpansionItemsComponent(calendar, dateAdapter, dateFormat) {
            this.calendar = calendar;
            this.dateAdapter = dateAdapter;
            this.dateFormat = dateFormat;
        }
        /**
         * Toggle Calendar between Month and Multiple Year
         */
        ExpansionItemsComponent.prototype.toggleCalView = function () {
            this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';
        };
        Object.defineProperty(ExpansionItemsComponent.prototype, "periodLabel", {
            /**
             * Get the date month and year label. Example: May 2021.
             */
            get: function () {
                return this.dateAdapter.format(this.calendar.activeDate, this.dateFormat.display.monthYearLabel);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Change the month or year by -1
         * @param mode month or year
         */
        ExpansionItemsComponent.prototype.previousClicked = function (mode) {
            this.changeDate(mode, -1);
        };
        /**
         * Change the month or year 1
         * @param mode
         */
        ExpansionItemsComponent.prototype.nextClicked = function (mode) {
            this.changeDate(mode, 1);
        };
        /**
         * Change the month or year by -1 or 1
         * @param mode : year or month
         * @param amount -1 or 1
         * @private
         */
        ExpansionItemsComponent.prototype.changeDate = function (mode, amount) {
            this.calendar.activeDate = mode === 'month' ? this.dateAdapter.addCalendarMonths(this.calendar.activeDate, amount)
                : this.dateAdapter.addCalendarYears(this.calendar.activeDate, amount);
        };
        return ExpansionItemsComponent;
    }());
    ExpansionItemsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-custom-header',
                    template: "<lib-custom-panel></lib-custom-panel>\n<div class=\"example-header\">\n  <span class=\"header-label mat-body\" (click)=\"toggleCalView()\">{{ periodLabel }} <mat-icon class=\"view-nav\" >arrow_drop_down</mat-icon></span>\n  <button class=\"nav-button\" mat-icon-button (click)=\"previousClicked('month')\">\n    <mat-icon>keyboard_arrow_left</mat-icon>\n  </button>\n\n  <button class=\"nav-button\" mat-icon-button (click)=\"nextClicked('month')\">\n    <mat-icon>keyboard_arrow_right</mat-icon>\n  </button>\n\n</div>\n<div class=\"date-custom-footer\">\n  <button id=\"datepicker-cancel\" class=\"date-action-button\" mat-raised-button>CANCEL</button>\n  <button id=\"datepicker-apply\" mat-flat-button color=\"accent\" >APPLY</button>\n</div>\n",
                    styles: [".example-header{display:flex;align-items:center;padding:var(--gap-m) var(--gap-m) 0 var(--gap-m)}.nav-button{color:var(--foreground-disabled)}.view-nav{position:relative;top:7px}.header-label{position:relative;top:-5px;flex:1;font-size:14px;color:var(--foreground-disabled);text-align:left;cursor:pointer}.example-double-arrow .mat-icon{color:var(--foreground-disabled);margin:-22%}.date-custom-footer{position:relative;top:320px;float:right;padding-right:var(--gap-m)}.date-action-button{margin-right:var(--gap-s)}"]
                },] }
    ];
    ExpansionItemsComponent.ctorParameters = function () { return [
        { type: datepicker.MatCalendar },
        { type: core.DateAdapter },
        { type: undefined, decorators: [{ type: i0.Inject, args: [core.MAT_DATE_FORMATS,] }] }
    ]; };

    var PopDateComponent = /** @class */ (function (_super) {
        __extends(PopDateComponent, _super);
        function PopDateComponent(el, overlayContainer) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.overlayContainer = overlayContainer;
            _this.config = new DateConfig();
            _this.name = 'PopDateComponent';
            _this.ExpansionItems = ExpansionItemsComponent;
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config.triggerOnChange = function (value, forcePatch) {
                        if (forcePatch === void 0) { forcePatch = false; }
                        _this.dom.setTimeout("config-trigger-change", function () {
                            // this.cdr.detectChanges();
                            _this.onChange(value, forcePatch);
                        }, 0);
                    };
                    _this.config.clearMessage = function () {
                        _this.dom.setTimeout("config-clear-message", function () {
                            _this.config.message = '';
                            _this.config.control.markAsPristine();
                            _this.config.control.markAsUntouched();
                            // this.cdr.detectChanges();
                        }, 0);
                    };
                    _this._setFilter();
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * On init hook
         */
        PopDateComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            if (this.config.type === 'Basic') {
                this.ExpansionItems = null;
            }
        };
        /**
         * After view init hook
         *  Backup picker close method
         */
        PopDateComponent.prototype.ngAfterViewInit = function () {
            this.selfClose = this.picker.close;
        };
        /**
         * on Open Event
         * Overwrite picker close to prevent auto closing
         */
        PopDateComponent.prototype.onOpen = function () {
            var olcClasses = this.overlayContainer.getContainerElement().classList;
            if (this.config.type === 'Expanded') {
                this.picker.close = function () { };
                olcClasses.add('expanded');
            }
            else {
                this.removeExpandedClass();
            }
        };
        /**
         * Removes Expanded Class from the Overlay Container if needed
         */
        PopDateComponent.prototype.removeExpandedClass = function () {
            var olcClasses = this.overlayContainer.getContainerElement().classList;
            if (olcClasses.contains('expanded')) {
                setTimeout(function () { return olcClasses.remove('expanded'); }, 100);
            }
        };
        /**
         * On Change event
         * @param value
         * @param force
         */
        PopDateComponent.prototype.onChange = function (value, force) {
            if (force === void 0) { force = false; }
            if (value) {
                value = exports.PopDate.toIso(value);
            }
            else {
                value = null;
            }
            if (IsObject(this.config, ['control'])) {
                this.log.info("onChange", value);
                var control = this.config.control;
                if (typeof value !== 'undefined') {
                    control.setValue(value);
                    control.markAsDirty();
                    control.updateValueAndValidity();
                }
                if (this._isChangeValid()) {
                    value = typeof value !== 'undefined' ? value : this.config.control.value;
                    value = this._applyTransformation(value);
                    if (this.config.patch && (this.config.patch.path || this.config.facade)) {
                        this._onPatch(value, force);
                    }
                    else {
                        this.onBubbleEvent('onChange');
                    }
                }
                else {
                    this.onBubbleEvent('onInvalidChange');
                }
            }
        };
        /**
         * Reset the Form
         */
        PopDateComponent.prototype.onResetForm = function () {
            var _this = this;
            this.dom.setTimeout("reset-form", function () {
                _this.config.control.setValue(null, { emitEvent: true });
                _this.config.control.updateValueAndValidity();
                _this.onChange();
            }, 0);
        };
        /**
         * Determine where the click happened. Return picker close to original state
         * @param $click
         */
        PopDateComponent.prototype.onOutsideCLick = function ($click) {
            var isDatepickerAreaClick = $click.path.some(function (path) {
                if (path.className) {
                    return path.className.includes('mat-datepicker');
                }
            });
            if (isDatepickerAreaClick) {
                var r = $click.path.some(function (path) {
                    if (path.className) {
                        return path.className.includes('mat-overlay');
                    }
                });
                if (r) {
                    isDatepickerAreaClick = false;
                }
            }
            var isDatepickerCancel = $click.path.some(function (ele) {
                if (ele.id) {
                    return ele.id.includes('datepicker-cancel');
                }
            });
            var isDatepickerApply = $click.path.some(function (ele) {
                if (ele.id) {
                    return ele.id.includes('datepicker-apply');
                }
            });
            if (!isDatepickerAreaClick || isDatepickerCancel || isDatepickerApply) {
                this.picker.close = this.selfClose;
                this.picker.close();
                this.removeExpandedClass();
            }
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopDateComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.removeExpandedClass();
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopDateComponent.prototype._setFilter = function () {
            if (typeof this.config.filterPredicate === 'string') {
                switch (String(this.config.filterPredicate).toLowerCase()) {
                    case 'weekday':
                        this.config.filterPredicate = function (d) {
                            var day = d.getDay();
                            // Prevent Saturday and Sunday from being selected.
                            return day !== 0 && day !== 6;
                        };
                        break;
                    case 'weekday':
                        this.config.filterPredicate = function (d) {
                            var day = d.getDay();
                            // Prevent Saturday and Sunday from being selected.
                            return day >= 1 && day <= 5;
                        };
                        break;
                    case 'monday':
                        this.config.filterPredicate = function (d) {
                            var day = d.getDay();
                            // monday
                            return day === 1;
                        };
                        break;
                    default:
                        this.config.filterPredicate = null;
                        break;
                }
            }
        };
        return PopDateComponent;
    }(PopFieldItemComponent));
    PopDateComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-date',
                    template: "\n<div\n  class=\"import-field-item-container pop-date-container\"\n  (libClickOutside)=\"onOutsideCLick($event);\"\n>\n  <mat-form-field appearance=\"outline\" color=\"accent\" class=\"import-field-item-container-expansion\">\n    <mat-label *ngIf=\"config.label\">{{config.label}}</mat-label>\n    <div *ngIf=\"config.tooltip && config.showTooltip\" class=\"field-tooltip-msg\" [innerHTML]=config.tooltip></div>\n    <input\n      type=\"text\"\n      matTooltipClass=\"input-tooltip-background\"\n      matInput\n      [matDatepicker]=\"datePicker\"\n      [readonly]=\"config.disabled\"\n      [min]=config.min\n      [max]=config.max\n      [matDatepickerFilter]=config.filterPredicate\n      [formControl]=config.control\n      (blur)=\"config.showTooltip=false; onBlur();\"\n      (focus)=\"config.showTooltip=true; onFocus();\"\n      (dateChange)=\"onChange($event.value);\"\n      placeholder=\"\"\n    >\n  </mat-form-field>\n\n    <mat-datepicker #datePicker  [ngClass]=\"{'expanded': config?.type === 'Expanded' }\" [calendarHeaderComponent]=\"ExpansionItems\"  (opened)=\"onOpen()\" >\n    </mat-datepicker >\n\n<!--  <ng-container *ngIf=\"config.type === 'Basic'\">-->\n<!--    <mat-datepicker #datePicker  >-->\n<!--    </mat-datepicker >-->\n<!--  </ng-container>-->\n\n\n  <mat-icon *ngIf=\"!config.disabled\" class=\"sw-pointer date-clear-icon\" (click)=\"onResetForm();\">clear</mat-icon>\n  <mat-datepicker-toggle class=\"date-toggle-icon\"  [for]=\"datePicker\"></mat-datepicker-toggle>\n  <lib-pop-field-item-helper class=\"date-helper-icon\" [hidden]=\"!config.helpText\" [helpText]=config.helpText></lib-pop-field-item-helper>\n\n  <div class=\"date-feedback-container\">\n    <lib-pop-field-item-error class=\"date-error-icon\" [hidden]=\"!config.message\" [message]=\"config.message\"></lib-pop-field-item-error>\n  </div>\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n",
                    styles: [".pop-date-container{position:relative;display:block;padding:0;margin:var(--gap-s) 0}.pop-date-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{display:none}.pop-date-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:0;margin:0!important}.date-feedback-container{position:absolute;top:var(--gap-xxs);right:var(--gap-xxs);width:var(--gap-m);bottom:var(--gap-xxs);display:flex;padding-top:2px;flex-flow:row;align-items:center;justify-content:center;pointer-events:none}.date-clear-icon{right:42px;top:13px;font-size:1em}.date-clear-icon,.date-toggle-icon{position:absolute!important;width:25px;height:25px;z-index:1}.date-toggle-icon{right:24px;top:8px}.date-toggle-icon ::ng-deep .mat-icon-button{line-height:25px!important}.date-toggle-icon ::ng-deep button{width:25px;height:25px}.date-toggle-icon ::ng-deep button mat-icon{font-size:.9em}.date-error-icon{position:relative;pointer-events:all;left:4px}.date-error-icon ::ng-deep .mat-icon{font-size:1em!important}.date-helper-icon{position:absolute!important;width:25px;height:25px;right:67px;pointer-events:all;font-size:.8em;top:11px}.date-helper-icon ::ng-deep .mat-icon{font-size:.9em!important}.date-ajax-spinner{position:absolute;z-index:1}.field-tooltip-msg{position:absolute;display:block;bottom:50px;width:100%;right:-10px;left:-10px;background:#3d72ea!important;border-radius:.25em;padding:.75em;z-index:2;color:#fff;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;overflow:hidden;text-align:center}::ng-deep .expanded .mat-datepicker-content{position:relative;left:200px;border-radius:0!important;height:425px;background:var(--background-base);border-top:1px solid #d3d3d3;border-right:1px solid #d3d3d3;border-bottom:1px solid #d3d3d3}::ng-deep .mat-datepicker-content{background:var(--background-base);border:1px solid #d3d3d3}"]
                },] }
    ];
    PopDateComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: overlay.OverlayContainer }
    ]; };
    PopDateComponent.propDecorators = {
        config: [{ type: i0.Input }],
        picker: [{ type: i0.ViewChild, args: ['datePicker',] }]
    };

    var DateRangeExpansionItemsComponent = /** @class */ (function () {
        function DateRangeExpansionItemsComponent(calendar, dateAdapter, dateFormat) {
            this.calendar = calendar;
            this.dateAdapter = dateAdapter;
            this.dateFormat = dateFormat;
        }
        /**
         * Toggle Calendar between Month and Multiple Year
         */
        DateRangeExpansionItemsComponent.prototype.toggleCalView = function () {
            this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';
        };
        Object.defineProperty(DateRangeExpansionItemsComponent.prototype, "periodLabel", {
            /**
             * Get the date month and year label. Example: May 2021.
             */
            get: function () {
                return this.dateAdapter.format(this.calendar.activeDate, this.dateFormat.display.monthYearA11yLabel);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Change the month or year by -1
         * @param mode month or year
         */
        DateRangeExpansionItemsComponent.prototype.previousClicked = function (mode) {
            this.changeDate(mode, -1);
        };
        /**
         * Change the month or year 1
         * @param mode
         */
        DateRangeExpansionItemsComponent.prototype.nextClicked = function (mode) {
            this.changeDate(mode, 1);
        };
        /**
         * Change the month or year by -1 or 1
         * @param mode : year or month
         * @param amount -1 or 1
         * @private
         */
        DateRangeExpansionItemsComponent.prototype.changeDate = function (mode, amount) {
            this.calendar.activeDate = mode === 'month' ? this.dateAdapter.addCalendarMonths(this.calendar.activeDate, amount)
                : this.dateAdapter.addCalendarYears(this.calendar.activeDate, amount);
        };
        return DateRangeExpansionItemsComponent;
    }());
    DateRangeExpansionItemsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-custom-header',
                    template: "<lib-date-range-panel></lib-date-range-panel>\n<div class=\"example-header\">\n  <span class=\"header-label mat-body\" (click)=\"toggleCalView()\">{{ periodLabel }} <mat-icon class=\"view-nav\" >arrow_drop_down</mat-icon></span>\n  <button class=\"nav-button\" mat-icon-button (click)=\"previousClicked('month')\">\n    <mat-icon>keyboard_arrow_left</mat-icon>\n  </button>\n\n  <button class=\"nav-button\" mat-icon-button (click)=\"nextClicked('month')\">\n    <mat-icon>keyboard_arrow_right</mat-icon>\n  </button>\n\n</div>\n<div class=\"date-custom-footer\">\n  <button id=\"datepicker-cancel\" class=\"date-action-button\" mat-raised-button>CANCEL</button>\n  <button id=\"datepicker-apply\" mat-flat-button color=\"accent\" >APPLY</button>\n</div>\n",
                    styles: [".example-header{display:flex;align-items:center;padding:var(--gap-m) var(--gap-m) 0 var(--gap-m)}.nav-button{color:var(--foreground-disabled)}.view-nav{position:relative;top:7px}.header-label{position:relative;top:-5px;flex:1;font-size:14px;color:var(--foreground-disabled);text-align:left;cursor:pointer}.example-double-arrow .mat-icon{color:var(--foreground-disabled);margin:-22%}.date-custom-footer{position:relative;top:320px;float:right;padding-right:var(--gap-m)}.date-action-button{margin-right:var(--gap-s)}::ng-deep .mat-calendar-body-in-range:not(.mat-calendar-body-range-start):not(.mat-calendar-body-range-end):before{background:var(--accent-selected)}::ng-deep td.mat-calendar-body-cell.mat-calendar-body-in-range.ng-star-inserted:last-child:before{border-top-right-radius:999px;border-bottom-right-radius:999px}::ng-deep tr:last-child td.mat-calendar-body-cell.mat-calendar-body-in-range.ng-star-inserted:last-child:before{border-top-right-radius:999px;border-bottom-right-radius:999px}::ng-deep td.mat-calendar-body-cell.mat-calendar-body-in-range.ng-star-inserted[data-mat-col=\"0\"]:before{border-top-left-radius:999px;border-bottom-left-radius:999px}::ng-deep .mat-calendar-body-range-start:before{border-top-left-radius:999px;border-bottom-left-radius:999px;background:var(--accent-selected)}::ng-deep .mat-calendar-body-range-end:before{border-top-right-radius:999px;border-bottom-right-radius:999px;background:var(--accent-selected)}"]
                },] }
    ];
    DateRangeExpansionItemsComponent.ctorParameters = function () { return [
        { type: datepicker.MatCalendar },
        { type: core.DateAdapter },
        { type: undefined, decorators: [{ type: i0.Inject, args: [core.MAT_DATE_FORMATS,] }] }
    ]; };

    var DateRangeConfig = /** @class */ (function () {
        function DateRangeConfig(params) {
            // Defaults
            this.type = 'Expanded';
            this.bubble = false;
            this.displayErrors = true;
            this.disabled = false;
            this.filterPredicate = null;
            this.helpText = '';
            this.id = '';
            this.label = '';
            this.min = null;
            this.max = null;
            this.message = '';
            this.name = 'name';
            this.noInitialValue = false;
            this.showTooltip = false;
            this.tooltip = '';
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (this.valueStart)
                this.valueStart = new Date(this.valueStart);
            if (this.valueEnd)
                this.valueEnd = new Date(this.valueEnd);
            if (typeof this.min === 'string') {
                this.min = new Date(this.min);
            }
            if (typeof this.max === 'string') {
                this.max = new Date(this.max);
            }
            // if( isNaN( this.max ) === false ){
            //   const maxDate = new Date();
            //   // maxDate.setDate(maxDate.getDate() - 1);
            //   maxDate.setDate( maxDate.getDate() + parseInt( this.max, 10 ) );
            //   this.max = new Date( maxDate );
            // }
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.noInitialValue)
                this.valueStart = '';
            if (this.noInitialValue)
                this.valueEnd = '';
            if (!this.formGroup)
                this.setControl();
        }
        DateRangeConfig.prototype.setControl = function () {
            if (this.disabled) {
                this.formGroup =
                    new forms.FormGroup({
                        start: new forms.FormControl({ value: this.valueStart, disabled: true }),
                        end: new forms.FormControl({ value: this.valueEnd, disabled: true }),
                    });
            }
            else {
                this.formGroup =
                    new forms.FormGroup({
                        start: new forms.FormControl(this.valueStart, (this.validators ? this.validators : [])),
                        end: new forms.FormControl(this.valueEnd, (this.validators ? this.validators : []))
                    });
            }
        };
        return DateRangeConfig;
    }());

    var PopDateRangeComponent = /** @class */ (function (_super) {
        __extends(PopDateRangeComponent, _super);
        function PopDateRangeComponent(el, overlayContainer) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.overlayContainer = overlayContainer;
            _this.config = new DateRangeConfig();
            _this.apply = new i0.EventEmitter();
            _this.ExpansionItems = DateRangeExpansionItemsComponent;
            _this.name = 'PopDateRangeComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config.triggerOnChange = function (value, forcePatch) {
                        if (forcePatch === void 0) { forcePatch = false; }
                        _this.dom.setTimeout("config-trigger-change", function () {
                            // this.cdr.detectChanges();
                            _this.onChange('start', value.start, forcePatch);
                            _this.onChange('end', value.end, forcePatch);
                        }, 0);
                    };
                    _this.config.clearMessage = function () {
                        _this.dom.setTimeout("config-clear-message", function () {
                            _this.config.message = '';
                            _this.config.formGroup.get('start').markAsPristine();
                            _this.config.formGroup.get('start').markAsPristine();
                            _this.config.formGroup.get('end').markAsPristine();
                            _this.config.formGroup.get('end').markAsPristine();
                            // this.cdr.detectChanges();
                        }, 0);
                    };
                    _this._setFilter();
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * On init hook
         */
        PopDateRangeComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            if (this.config.type === 'Basic') {
                this.ExpansionItems = null;
            }
        };
        /**
         * After view init hook
         *  Backup picker close method
         */
        PopDateRangeComponent.prototype.ngAfterViewInit = function () {
            this.selfClose = this.picker.close;
        };
        /**
         * Get the date control name for start or end
         * @param type: start or end
         */
        PopDateRangeComponent.prototype.getDateControlName = function (type) {
            if (type === 'start')
                return Object.keys(this.config.formGroup.controls)[0];
            else if (type === 'end')
                return Object.keys(this.config.formGroup.controls)[1];
        };
        /**
         * on Open Event
         * Overwrite picker close to prevent auto closing
         */
        PopDateRangeComponent.prototype.onOpen = function () {
            var olcClasses = this.overlayContainer.getContainerElement().classList;
            if (this.config.type === 'Expanded') {
                this.picker.close = function () { };
                olcClasses.add('expanded');
            }
            else {
                this.removeExpandedClass();
            }
        };
        /**
         * Removes Expanded Class from the Overlay Container if needed
         */
        PopDateRangeComponent.prototype.removeExpandedClass = function () {
            var olcClasses = this.overlayContainer.getContainerElement().classList;
            if (olcClasses.contains('expanded')) {
                setTimeout(function () { return olcClasses.remove('expanded'); }, 100);
            }
        };
        /**
         * Determine where the click happened. Return picker close to original state
         * @param $click
         */
        PopDateRangeComponent.prototype.onOutsideCLick = function ($click) {
            var isDatepickerAreaClick = $click.path.some(function (path) {
                if (path.className) {
                    return path.className.includes('mat-datepicker');
                }
            });
            if (isDatepickerAreaClick) {
                var r = $click.path.some(function (path) {
                    if (path.className) {
                        return path.className.includes('mat-overlay');
                    }
                });
                if (r) {
                    isDatepickerAreaClick = false;
                }
            }
            var isDatepickerCancel = $click.path.some(function (ele) {
                if (ele.id) {
                    return ele.id.includes('datepicker-cancel');
                }
            });
            var isDatepickerApply = $click.path.some(function (ele) {
                if (ele.id) {
                    return ele.id.includes('datepicker-apply');
                }
            });
            if (isDatepickerCancel || isDatepickerApply) {
                this.onChange('start');
                this.onChange('end');
                this.picker.close = this.selfClose;
                this.picker.close();
                this.removeExpandedClass();
                if (isDatepickerApply) {
                    this.apply.emit({ start: this.config.formGroup.get('start').value, end: this.config.formGroup.get('end').value });
                }
            }
            else if (!isDatepickerAreaClick) {
                this.picker.close = this.selfClose;
                this.picker.close();
                this.removeExpandedClass();
            }
        };
        /**
         * On Change event
         * @param controlName
         * @param value
         * @param force
         */
        PopDateRangeComponent.prototype.onChange = function (controlName, value, force) {
            if (force === void 0) { force = false; }
            value = this.config.formGroup.get(this.getDateControlName(controlName)).value;
            if (value) {
                value = exports.PopDate.toIso(value);
            }
            else {
                value = null;
            }
            if (IsObject(this.config, ['formGroup'])) {
                this.log.info("onChange", value);
                var control = this.config.formGroup.get(controlName);
                if (typeof value !== 'undefined') {
                    control.setValue(value);
                    control.markAsDirty();
                    control.updateValueAndValidity();
                }
                if (this.isChangeValid(controlName)) {
                    value = typeof value !== 'undefined' ? value : this.config.formGroup.get(this.getDateControlName(controlName)).value;
                    value = this._applyTransformation(value);
                    if (this.config.patch && (this.config.patch.path || this.config.facade)) {
                        this._onPatch(value, force);
                    }
                    else {
                        this.onBubbleEvent('onChange');
                    }
                }
                else {
                }
            }
        };
        /**
         * Check to see if change is valid
         * @param controlName: start or end
         * @protected
         */
        PopDateRangeComponent.prototype.isChangeValid = function (controlName) {
            var control = this.config.formGroup.get(this.getDateControlName(controlName)).value;
            if (control) {
                if (control.invalid) {
                    if (this.config.displayErrors)
                        this._setMessage(ValidationErrorMessages(control.errors));
                    return false;
                }
            }
            return this._checkPrevent();
        };
        /**
         * Reset Form event
         */
        PopDateRangeComponent.prototype.onResetForm = function () {
            var _this = this;
            this.dom.setTimeout("reset-form", function () {
                _this.config.formGroup.get('start').setValue(null, { emitEvent: true });
                _this.config.formGroup.get('start').updateValueAndValidity();
                _this.config.formGroup.get('end').setValue(null, { emitEvent: true });
                _this.config.formGroup.get('end').updateValueAndValidity();
                _this.onChange('start');
                _this.apply.emit({ start: null, end: null });
            }, 0);
        };
        PopDateRangeComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.removeExpandedClass();
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopDateRangeComponent.prototype._setFilter = function () {
            if (typeof this.config.filterPredicate === 'string') {
                switch (String(this.config.filterPredicate).toLowerCase()) {
                    case 'weekday':
                        this.config.filterPredicate = function (d) {
                            var day = d.getDay();
                            // Prevent Saturday and Sunday from being selected.
                            return day !== 0 && day !== 6;
                        };
                        break;
                    case 'weekday':
                        this.config.filterPredicate = function (d) {
                            var day = d.getDay();
                            // Prevent Saturday and Sunday from being selected.
                            return day >= 1 && day <= 5;
                        };
                        break;
                    case 'monday':
                        this.config.filterPredicate = function (d) {
                            var day = d.getDay();
                            // monday
                            return day === 1;
                        };
                        break;
                    default:
                        this.config.filterPredicate = null;
                        break;
                }
            }
        };
        return PopDateRangeComponent;
    }(PopFieldItemComponent));
    PopDateRangeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-date-range',
                    template: "<div\n  class=\"import-field-item-container pop-date-container\"\n  [ngClass]=\"{'disabled': config.disabled, 'ng-invalid': this.config.formGroup.status === 'INVALID' }\"\n  (libClickOutside)=\"onOutsideCLick($event);\">\n  <mat-form-field   appearance=\"outline\" color=\"accent\" class=\"import-field-item-container-expansion\">\n    <mat-label *ngIf=\"config?.label\">{{config?.label}}</mat-label>\n    <div *ngIf=\"config.tooltip && config.showTooltip\" class=\"field-tooltip-msg\" [innerHTML]=config.tooltip></div>\n\n    <mat-date-range-input\n      [ngClass]=\"{'disabled': config.disabled}\"\n      [rangePicker]=\"dateRangePicker\"\n      [formGroup]=\"config.formGroup\"\n      [min]=config.min\n      [max]=config.max\n      matTooltipClass=\"input-tooltip-background\"\n      (change)=\"onChange('start')\"\n    >\n      <input\n        matStartDate\n        [formControlName]=\"getDateControlName('start')\"\n        [readonly]=\"config.disabled\"\n        (focus)=\"config.showTooltip=true; onFocus();\"\n        (blur)=\"config.showTooltip=false; onBlur();\"\n        placeholder=\"\"\n         >\n      <input\n        type=\"text\"\n        matEndDate\n        [formControlName]=\"getDateControlName('end')\"\n        (focus)=\"config.showTooltip=true; onFocus();\"\n        (blur)=\"config.showTooltip=false; onBlur();\"\n        [readonly]=\"config.disabled\"\n\n        placeholder=\"\"\n        >\n    </mat-date-range-input>\n    <mat-icon *ngIf=\"!config.disabled\" class=\"sw-pointer date-clear-icon\" (click)=\"onResetForm();\">clear</mat-icon>\n    <mat-date-range-picker #dateRangePicker [ngClass]=\"{'expanded': config?.type === 'Expanded' }\" [calendarHeaderComponent]=\"ExpansionItems\" (opened)=\"onOpen()\"    ></mat-date-range-picker>\n    <lib-pop-field-item-helper class=\"date-helper-icon\" [hidden]=\"!config.helpText\" [helpText]=config.helpText></lib-pop-field-item-helper>\n\n\n    <mat-datepicker-toggle  class=\"date-toggle-icon\"  [for]=\"dateRangePicker\" [disabled]=\"config.disabled\" ></mat-datepicker-toggle>\n    <div class=\"date-feedback-container\">\n      <lib-pop-field-item-error class=\"date-error-icon\" [hidden]=\"!config.message\" [message]=\"config.message\"></lib-pop-field-item-error>\n    </div>\n    <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n  </mat-form-field>\n</div>\n\n\n",
                    styles: [".disabled,div.disabled ::ng-deep .mat-date-range-input-inner,div.disabled ::ng-deep div.mat-date-range-input-inner mat-datepicker-toggle,div.disabled mat-datepicker-toggle,div.disabled mat-datepicker-toggle ::ng-deep .mat-icon-button,div.disabled mat-datepicker-toggle ::ng-deep div.mat-icon-button ::ng-deep .mat-date-range-input-inner,div.disabled mat-datepicker-toggle ::ng-deep div.mat-icon-button mat-datepicker-toggle{cursor:not-allowed!important;color:var(--foreground-disabled)!important}div.disabled ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline{color:var(--background-border)}div.ng-invalid ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline{color:red}.pop-date-container{position:relative;display:block;padding:0;margin:var(--gap-s) 0}.pop-date-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{display:none}.pop-date-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:0;margin:0!important}.date-feedback-container{position:absolute;top:var(--gap=xxs);right:var(--gap=xxs);width:var(--gap-m);bottom:var(--gap=xxs);display:flex;padding-top:2px;flex-flow:row;align-items:center;justify-content:center;pointer-events:none}.date-clear-icon{right:31px;top:6px}.date-clear-icon,.date-toggle-icon{position:absolute!important;width:25px;height:25px;z-index:1;font-size:16px}.date-toggle-icon{right:10px;top:0}.date-toggle-icon ::ng-deep .mat-icon-button{line-height:25px!important}.date-toggle-icon ::ng-deep button{width:25px;height:25px}.date-toggle-icon ::ng-deep button mat-icon{font-size:.9em}.date-error-icon{position:relative;pointer-events:all;left:2px}.date-error-icon ::ng-deep .mat-icon{font-size:1em!important}.date-helper-icon{position:absolute!important;width:25px;height:25px;right:55px;pointer-events:all;font-size:12px;top:5px}.date-helper-icon ::ng-deep .mat-icon{font-size:16px!important}.date-ajax-spinner{position:absolute;z-index:1}.field-tooltip-msg{position:absolute;display:block;bottom:50px;width:100%;right:-10px;left:-10px;background:#3d72ea!important;border-radius:.25em;padding:.75em;z-index:2;color:#fff;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;overflow:hidden;text-align:center}::ng-deep .expanded .mat-datepicker-content{position:relative;left:200px;border-radius:0!important;height:425px;background:var(--background-base);border-top:1px solid #d3d3d3;border-right:1px solid #d3d3d3;border-bottom:1px solid #d3d3d3}::ng-deep .mat-datepicker-content{background:var(--background-base);border:1px solid #d3d3d3}"]
                },] }
    ];
    PopDateRangeComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: overlay.OverlayContainer }
    ]; };
    PopDateRangeComponent.propDecorators = {
        config: [{ type: i0.Input }],
        apply: [{ type: i0.Output }],
        picker: [{ type: i0.ViewChild, args: ['dateRangePicker',] }]
    };

    var datePresets$1 = [
        'Today',
        'Last',
        'Previous',
        'Next',
        'Last Month',
        'Next Month',
        'Last Year',
        'Next Year',
        'Custom'
    ];
    var CustomPanelComponent = /** @class */ (function () {
        function CustomPanelComponent(dateAdapter, datePicker, calendar) {
            this.dateAdapter = dateAdapter;
            this.datePicker = datePicker;
            this.calendar = calendar;
            this.presets = datePresets$1;
            this.selected = 'Today';
            // Get the day of the week to add to preset. Example: Next Monday
            switch (new Date().getDay()) {
                case 0:
                    this.dayOfWeek = "Sunday";
                    break;
                case 1:
                    this.dayOfWeek = "Monday";
                    break;
                case 2:
                    this.dayOfWeek = "Tuesday";
                    break;
                case 3:
                    this.dayOfWeek = "Wednesday";
                    break;
                case 4:
                    this.dayOfWeek = "Thursday";
                    break;
                case 5:
                    this.dayOfWeek = "Friday";
                    break;
                case 6:
                    this.dayOfWeek = "Saturday";
            }
        }
        /**
         * Apply the preset to Datepicker and Calendar
         * @param datePreset: Example: Today
         */
        CustomPanelComponent.prototype.selectDatePreset = function (datePreset) {
            this.selected = datePreset;
            var date = this.calculateDate(datePreset);
            this.datePicker.select(date);
            this.calendar.activeDate = date;
        };
        /**
         * Calculate date Preset
         * @param datePreset: Example: Today.
         */
        CustomPanelComponent.prototype.calculateDate = function (datePreset) {
            var today = this.today;
            switch (datePreset) {
                case 'Today':
                    return today;
                case 'Last':
                    return this.dateAdapter.addCalendarDays(today, -7);
                case 'Previous':
                    return this.dateAdapter.addCalendarDays(today, -14);
                case 'Next':
                    return this.dateAdapter.addCalendarDays(today, 7);
                case 'Last Month':
                    return this.dateAdapter.addCalendarMonths(today, -1);
                case 'Next Month':
                    return this.dateAdapter.addCalendarMonths(today, 1);
                case 'Last Year':
                    return this.dateAdapter.addCalendarYears(today, -1);
                case 'Next Year':
                    return this.dateAdapter.addCalendarYears(today, 1);
            }
        };
        Object.defineProperty(CustomPanelComponent.prototype, "today", {
            /**
             * Get Today
             * @private
             */
            get: function () {
                var today = this.dateAdapter.today();
                if (today === null) {
                    throw new Error('date creation failed');
                }
                return today;
            },
            enumerable: false,
            configurable: true
        });
        return CustomPanelComponent;
    }());
    CustomPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-custom-panel',
                    template: "\n<mat-card class=\"pop-datepicker-panel\">\n  <button\n    class=\"date-preset-button\"\n    [ngClass]=\"{'selected': item === selected}\"\n    *ngFor=\"let item of presets\"\n    mat-button\n    color=\"accent\"\n    (click)=\"selectDatePreset(item)\"\n  >\n    {{ item }} <span *ngIf=\"item === 'Last' || item === 'Previous' || item === 'Next'\">{{dayOfWeek}}</span>\n  </button>\n</mat-card>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [":host{position:absolute;width:200px;left:-200px}.pop-datepicker-panel{position:relative;top:-1px;border-left:1px solid #d3d3d3;border-bottom:1px solid #d3d3d3;border-top:1px solid #d3d3d3;border-radius:0;padding:var(--gap-s);height:405px}.date-preset-button,.selected{width:100%;text-align:left}.selected{background:var(--background-side-menu)}"]
                },] }
    ];
    CustomPanelComponent.ctorParameters = function () { return [
        { type: core.DateAdapter },
        { type: datepicker.MatDatepicker },
        { type: datepicker.MatCalendar }
    ]; };

    var PopTimeComponent = /** @class */ (function (_super) {
        __extends(PopTimeComponent, _super);
        function PopTimeComponent(el, cdr) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            _this.config = new TimeConfig();
            _this.name = 'PopTimeComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config.time = 12;
                    _this.ui.time = {
                        12: {
                            hours: [],
                            minutes: [],
                            periods: ['AM', 'PM']
                        },
                        24: {
                            hours: [],
                            minutes: [],
                            periods: []
                        },
                        selectedHour: '12',
                        selectedMinute: '00',
                        selectedPeriod: 'AM',
                    };
                    _this.setHoursAndMinutes();
                    _this.setSelectedValues();
                    _this.config.triggerOnChange = function (value) {
                        _this.cdr.detectChanges();
                        _this.onChange(value, true);
                    };
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopTimeComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopTimeComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopTimeComponent.prototype.setSelectedValues = function () {
            var time = this.ui.time;
            var timeValue = this.config.control.value;
            var minuteValue = timeValue.slice(2, 5).replace(/[^a-zA-Z0-9]/g, '').padStart(2, '0');
            var hourValue = timeValue.slice(0, 2).replace(/[^a-zA-Z0-9]/g, '').padStart(2, '0');
            hourValue = ((hourValue % 12) || 12).toString(10).padStart(2, '0');
            if (Number(hourValue) > 12 && this.config.time === 12)
                time.selectedPeriod = 'PM';
            if (timeValue)
                time.selectedHour = hourValue;
            time.selectedMinute = minuteValue;
        };
        PopTimeComponent.prototype.setHoursAndMinutes = function () {
            var i;
            var hourLimit = this.config.time === 12 ? 12 : 23;
            for (i = 1; i <= hourLimit; i++) {
                this.ui.time[this.config.time].hours.push(i.toString().padStart(2, '0'));
            }
            for (i = 0; i < 60; i += this.config.interval) {
                this.ui.time[this.config.time].minutes.push(i.toString().padStart(2, '0'));
            }
        };
        PopTimeComponent.prototype.setTimeValue = function () {
            var selectedHour = this.ui.time.selectedHour;
            if (this.ui.time.selectedPeriod === 'AM' && Number(selectedHour) === 12)
                selectedHour = '00';
            if (this.ui.time.selectedPeriod === 'PM' && Number(selectedHour) > 12)
                selectedHour = (12 + Number(selectedHour)).toString(10);
            var selectedTime = selectedHour + ':' + this.ui.time.selectedMinute + ':00';
            this.config.control.setValue(selectedTime, { emitEvent: false });
        };
        return PopTimeComponent;
    }(PopFieldItemComponent));
    PopTimeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-time',
                    template: "<div class=\"pop-time-container\">\n  <div *ngIf=\"config.label\" class=\"pop-time-container-legend import-field-item-container\">{{config.label}}</div>\n  <div class=\"pop-time-row-container\">\n    <mat-label class=\"time-column column-height\">\n      <mat-icon>schedule</mat-icon>\n    </mat-label>\n    <mat-form-field class=\"time-column align-column\">\n      <mat-select [(value)]=\"ui.time.selectedHour\"\n                  (selectionChange)=\"onChange();\">\n        <mat-option *ngFor=\"let hour of ui.time[config.time].hours\" [value]=hour>\n          {{hour}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-label class=\"time-column column-height\">:</mat-label>\n    <mat-form-field class=\"time-column align-column\">\n      <mat-select [(value)]=\"ui.time.selectedMinute\"\n                  (selectionChange)=\"onChange();\">\n        <mat-option *ngFor=\"let minute of ui.time[config.time].minutes\" [value]=minute>\n          {{minute}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field *ngIf=\"ui.time[config.time].periods.length\" class=\"time-column align-column\">\n      <mat-select [(value)]=\"ui.time.selectedPeriod\"\n                  (selectionChange)=\"onChange();\">\n        <mat-option *ngFor=\"let period of ui.time[config.time].periods\" [value]=period>\n          {{period}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n</div>\n\n",
                    styles: [".pop-time-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{display:none}.pop-time-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:0;margin:0!important}.pop-time-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-infix{padding:8px 20px 13px 0}.pop-time-container ::ng-deep .mat-form-field-underline{display:none}.pop-time-container ::ng-deep .date-column .mat-form-field-infix{padding-left:3px}:host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:unset}.pop-time-container-legend{font-size:11px;position:relative;margin-top:-15px;margin-bottom:-5px;clear:both;z-index:1;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;color:var(--text-2);background:var(--bg-3)}.pop-time-row-container{text-align:center;position:relative;display:flex;flex:1 1 100%;padding:0;flex-direction:row;justify-content:flex-start;align-items:center}.time-column{position:relative;display:flex;top:-8px;flex-direction:column;width:26%;flex-grow:1;margin-right:2px}.column-height{height:27px}.align-column{text-align:center}"]
                },] }
    ];
    PopTimeComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PopTimeComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopSelectListComponent = /** @class */ (function (_super) {
        __extends(PopSelectListComponent, _super);
        function PopSelectListComponent(el, cdr) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            // emitted every time there is an option selection, search focus, or the filter options close
            _this.events = new i0.EventEmitter();
            _this.name = 'PopSelectListComponent';
            _this.asset = {
                filteredOptions: undefined,
                groups: [],
                onFocusValue: undefined,
                filterActivated: false,
                disabled: {}
            };
            _this.ui = {
                search: {
                    config: undefined,
                },
                all: {
                    overlay: undefined,
                }
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this._setInitialDomState();
                    _this._setUpFilterObservable();
                    _this._setListPosition();
                    _this._filterOptionList('');
                    _this._setConfigHooks();
                    return resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this._setInitialValue();
                    return resolve(true);
                });
            };
            return _this;
        }
        PopSelectListComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopSelectListComponent.prototype.triggerOnChange = function (wait) {
            var _this = this;
            if (wait === void 0) { wait = 1000; }
            this.dom.setTimeout('api-fetch', function () {
                _this.onChange();
            }, wait);
        };
        /**
         * Checks/Unchecks all of the filtered options within a specific group
         * @param  FieldOption option
         * @returns boolean
         */
        PopSelectListComponent.prototype.onGroupChange = function (checked, group) {
            var _this = this;
            if (!this.config.multiple)
                return false;
            if (!checked)
                this.config.all = false;
            group.options.values.map(function (option) {
                if (!option.hidden)
                    option.selected = checked;
            });
            setTimeout(function () {
                _this._checkGroupState(checked, group);
                _this._updateSelectedOptions();
                _this.onBubbleEvent('groupAllChange', 'Group Change', { data: group });
                _this.onBubbleEvent('groupChange', 'Group Change', { data: group });
            }, 0);
            return false;
        };
        /**
         * Checks/Unchecks all of the filtered options within a specific group
         * @param  FieldOption option
         * @returns boolean
         */
        PopSelectListComponent.prototype.onAllChange = function (checked) {
            var _this = this;
            if (!this.config.multiple)
                return false;
            this.config.groups.map(function (group) {
                group.options.values.map(function (option) {
                    option.selected = checked;
                });
                group.all = checked;
                group.indeterminate = false;
            });
            setTimeout(function () {
                _this._updateSelectedOptions();
            }, 0);
            return false;
        };
        /**
         * Allow the user to clear the search text
         */
        PopSelectListComponent.prototype.onClearSearch = function () {
            this.ui.search.config.control.setValue('');
        };
        /**
         * Update's the list of selected options inside of the config
         * and emits a change event. This method will be called by the view
         * whenever an option is selected
         * @param MatSelectionListChange event
         * @returns void
         */
        PopSelectListComponent.prototype.onOptionChange = function (event, option, group) {
            var _this = this;
            if (this.config.multiple) {
                // option.selected = event.target.className.search( 'mat-pseudo-checkbox-checked' ) > -1 ? true : false;
                option.selected = !option.selected;
                if (!option.selected)
                    this.config.all = false;
                this._checkGroupState(option.selected, group);
                this._updateSelectedOptions();
                this.onBubbleEvent('optionChange', 'Option Change', { data: option });
                setTimeout(function () {
                    _this.onBubbleEvent('groupChange', 'Group Change', { data: group });
                }, 0);
            }
            else {
                this.dom.active.optionId = option.value;
                this.config.control.setValue(option.value);
                this.config.strVal = option.name;
                this.triggerOnChange(0);
            }
        };
        /**
         * Add on to set toggle special custom property
         * @param event
         * @param option
         */
        PopSelectListComponent.prototype.onOptionModeChange = function (event, option) {
            var _this = this;
            if (this.config.multiple) {
                setTimeout(function () {
                    _this.onBubbleEvent('optionModeChange', 'Option Mode Change', { data: option });
                }, 0);
            }
        };
        /**
         * On link click stub
         */
        PopSelectListComponent.prototype.onLinkClick = function () {
            console.log('LINK STUB: Link to Entity', this.config.control.value);
        };
        /**
         * Allow user to open close a group section
         * @param group
         */
        PopSelectListComponent.prototype.onToggleGroup = function (group) {
            if (this.config.groups.length > 1) {
                group.open = !group.open;
            }
        };
        /**
         * Checks if the given option is in the list of selected options
         * in the config. Used by the view to set the checkboxe's on the
         * initial state of the dropdown
         * @param  FieldOption option
         * @returns boolean
         */
        PopSelectListComponent.prototype.isOptionSelected = function (option) {
            return option.selected;
        };
        PopSelectListComponent.prototype.isSearchValue = function () {
            if (IsObject(this.ui.search.config, ['control']) && this.ui.search.config.control.value) {
                return true;
            }
            return false;
        };
        /**
         * Template logic to determine if a option is hidden
         * @param option
         */
        PopSelectListComponent.prototype.isOptionHidden = function (group, option) {
            if (!group.open && !(this.isSearchValue())) {
                return true;
            }
            if (option.hidden) {
                return true;
            }
            return false;
        };
        /**
         * Template logic to determine if a option is active
         * @param option
         */
        PopSelectListComponent.prototype.isOptionActive = function (option) {
            return this.dom.active.optionId && option.value === this.dom.active.optionId;
        };
        /**
         * Template logic to determine if a option is disabled
         * @param option
         */
        PopSelectListComponent.prototype.isOptionDisabled = function (option) {
            return this.asset.disabled[option.value];
        };
        PopSelectListComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopSelectListComponent.prototype._setConfigHooks = function () {
            var _this = this;
            this.config.triggerOnChange = function (value) {
                _this.config.control.setValue(value);
                _this.config.control.markAsPristine();
                _this.config.message = '';
                _this.config.control.updateValueAndValidity();
                _this.onChange();
            };
            this.config.disableOption = function (optionId) {
                if (IsDefined(optionId)) {
                    _this.asset.disabled[optionId] = true;
                }
            };
            this.config.enableOption = function (optionId) {
                if (IsDefined(optionId)) {
                    delete _this.asset.disabled[optionId];
                }
            };
            this.config.setDisabled = function (optionsIds) {
                if (optionsIds === void 0) { optionsIds = null; }
                _this.dom.setTimeout("set-disabled", function () {
                    _this.config.disabledIds = optionsIds;
                    _this._setDisabledIds();
                }, 0);
            };
            this.config.focusSearch = function () {
                _this.dom.setTimeout("search-focus", function () {
                    if (_this.searchRef) {
                        _this.searchRef.nativeElement.focus();
                        // this.onBubbleEvent( 'focus' );
                    }
                }, 200);
            };
            this.config.setActive = function (optionId) {
                _this.dom.setTimeout("set-disabled", function () {
                    if (+optionId) {
                        _this.dom.active.optionId = optionId;
                        delete _this.asset.disabled[optionId];
                    }
                }, 5);
            };
            this.config.setHeight = function (height) {
                _this.dom.setTimeout("set-height", function () {
                    if (+height) {
                        _this.config.minHeight = height;
                        _this.config.height = height;
                    }
                }, 5);
            };
            this.config.clearSelected = function () {
                _this.dom.setTimeout("clear-selected", function () {
                    _this.onAllChange(false);
                }, 0);
            };
        };
        /**
         * Set the inital dom state of the component
         * @private
         */
        PopSelectListComponent.prototype._setInitialDomState = function () {
            var _this = this;
            this.dom.state.helper = false;
            this.dom.state.filter = undefined;
            this.dom.state.allOverlayEnabled = this.config.allOverlayEnabled ? true : false;
            this.dom.state.filterActivated = false;
            this.dom.state.above = undefined;
            this.dom.state.below = undefined;
            this.dom.state.list = undefined;
            this.asset.filterActivated = false;
            this.dom.state.checkboxPosition = this.config.checkboxPosition === 'left' ? 'before' : 'after';
            this.ui.search.config = new InputConfig({
                value: '',
                helpText: this.config.helpText,
                displayErrors: false,
                label: this.config.label,
                readonly: true,
                maxlength: 255
            });
            this.ui.all.overlay = this.config.allOverlay ? new SwitchConfig({
                value: this.config.allOverlayEnabled,
                displayErrors: false,
                label: this.config.allOverlayLabel,
                disabled: this.config.disabled,
                facade: true,
                labelPosition: this.config.checkboxPosition === 'after' ? 'before' : 'after',
                patch: {
                    path: '',
                    field: '',
                    callback: function (core, event) {
                        _this.dom.setTimeout("overlay-callback", function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.dom.state.allOverlayEnabled = event.config.control.value === true;
                                        if (!IsCallableFunction(this.config.allOverlayCallback)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.config.allOverlayCallback(core, event)];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        }); }, 0);
                    }
                }
            }) : null;
            if (!this.config.multiple) {
                this.selectionListRef.selectedOptions = new collections.SelectionModel(false);
            }
            this.asset.onFocusValue = JSON.stringify(this.config.selectedOptions);
            this._setDisabledIds();
        };
        /**
         * Set the lead mapping options that are disabled;
         * @private
         */
        PopSelectListComponent.prototype._setDisabledIds = function () {
            var _this = this;
            this.asset.disabled = {};
            if (IsArray(this.config.disabledIds)) {
                this.config.disabledIds.map(function (optionId) {
                    if (IsNumber(optionId)) {
                        _this.asset.disabled[optionId] = true;
                    }
                });
            }
        };
        PopSelectListComponent.prototype._setInitialValue = function () {
            if (!this.config.multiple && !this.dom.active.optionId) {
                if (IsDefined(this.config.value, false)) {
                    this.dom.active.optionId = this.config.value;
                    if (!(IsDefined(this.config.control.value, false))) {
                        this.config.control.setValue(this.config.value);
                    }
                }
            }
            else {
                if (!(IsArray(this.config.control.value))) {
                    this.config.control.setValue([]);
                }
            }
        };
        /**
         * Observes the value changes to the search and triggers the filter of the options
         * @returns void
         */
        PopSelectListComponent.prototype._setUpFilterObservable = function () {
            var _this = this;
            this.ui.search.config.control.valueChanges
                .pipe(operators.debounceTime(200)).subscribe(function (value) {
                _this._filterOptionList(value);
            });
        };
        /**
         * Detects if the list of options should appear above or below the select input
         * @param height
         */
        PopSelectListComponent.prototype._setListPosition = function () {
            // this.config.minHeight = this.config.minHeight;
            // this.config.minHeight = 200;
            // this.config.height = this.config.defaultHeight;
        };
        /**
         * Detects where the check all  box for a group should be unchecked, checked, or indeterminate
         * @param checked
         * @param group
         */
        PopSelectListComponent.prototype._checkGroupState = function (checked, group) {
            var indeterminate = false;
            var all = true;
            if (!checked) {
                all = false;
                group.options.values.some(function (option) {
                    if (!option.hidden && option.selected) {
                        indeterminate = true;
                        return true;
                    }
                });
            }
            else {
                group.options.values.some(function (option) {
                    if (!option.hidden && !option.selected) {
                        all = false;
                        indeterminate = true;
                        return true;
                    }
                });
            }
            group.all = all;
            group.indeterminate = indeterminate;
        };
        /**
         * Finds only the options from the config's options that match
         * the string passed in, and returns those options.
         * Used as the filter when setting up the filteredOptions observable
         * @param string value
         * @returns FieldItemOption
         */
        PopSelectListComponent.prototype._filterOptionList = function (search) {
            var _this = this;
            this.config.groups.map(function (group) {
                group.options.values.map(function (option) {
                    option.hidden = ObjectContainsTagSearch(option, search) ? false : true;
                });
                group.selected = group.options.values.filter(function (option) {
                    return !option.hidden && option.selected;
                }).length;
                group.visible = group.options.values.filter(function (option) {
                    return !option.hidden;
                }).length;
                var checked = group.visible === group.selected;
                _this._checkGroupState(checked, group);
                try {
                    _this.cdr.detectChanges();
                }
                catch (e) {
                }
            });
        };
        /**
         * Update's the selection options in config
         * by looping through all of the currently selected items
         * in the selectionListRef.
         * @param number id
         */
        PopSelectListComponent.prototype._updateSelectedOptions = function () {
            var _this = this;
            this.dom.setTimeout('update-selected-options', function () {
                var e_1, _a;
                var selected = _this.selectionListRef.selectedOptions.selected;
                var str = [];
                _this.config.selectedOptions = [];
                try {
                    for (var selected_1 = __values(selected), selected_1_1 = selected_1.next(); !selected_1_1.done; selected_1_1 = selected_1.next()) {
                        var option = selected_1_1.value;
                        str.push(option._text.nativeElement.innerText);
                        _this.config.selectedOptions.push(option.value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (selected_1_1 && !selected_1_1.done && (_a = selected_1.return)) _a.call(selected_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                _this.config.control.setValue(_this.config.selectedOptions.slice());
                str = str.sort();
                _this.config.strVal = str.join(', ');
                _this.triggerOnChange();
            }, 50);
        };
        /**
         * Set up the body of the api patch
         * @param value
         * @private
         */
        PopSelectListComponent.prototype._getPatchBody = function (value) {
            var _this = this;
            var patch = this.config.patch;
            var body = {};
            if (this.config.all) {
                if (typeof this.config.allValue !== 'undefined') {
                    body[this.config.patch.field] = this.config.allValue;
                }
                else if (this.config.patchGroupFk) {
                    body[this.config.patch.field] = [];
                    this.config.groups.map(function (group) {
                        body[_this.config.patch.field].push("0:" + group.groupFk);
                    });
                }
                else {
                    body[this.config.patch.field] = this.config.selectedOptions.length ? this.config.selectedOptions : [];
                }
            }
            else {
                if (this.config.multiple) {
                    if (!this.config.control.value.length && typeof this.config.emptyValue !== 'undefined') {
                        body[this.config.patch.field] = this.config.emptyValue;
                    }
                    else if (this.config.patchGroupFk) {
                        body[this.config.patch.field] = [];
                        this.config.groups.map(function (group) {
                            if (group.all) {
                                body[_this.config.patch.field].push("0:" + group.groupFk);
                            }
                            else {
                                group.options.values.filter(function (option) {
                                    return option.selected;
                                }).map(function (option) {
                                    body[_this.config.patch.field].push(option.value + ":" + group.groupFk);
                                });
                            }
                        });
                    }
                    else {
                        body[this.config.patch.field] = this.config.control.value.length ? this.config.control.value : [];
                    }
                }
                else {
                    value = typeof value !== 'undefined' ? value : this.config.control.value;
                    body[this.config.patch.field] = value;
                }
                if (patch && patch.metadata) {
                    for (var i in patch.metadata) {
                        if (!patch.metadata.hasOwnProperty(i))
                            continue;
                        body[i] = patch.metadata[i];
                    }
                }
            }
            if (IsArray(body[this.config.patch.field], true))
                body[this.config.patch.field].sort(function (a, b) {
                    return a - b;
                });
            if (this.config.patch.metadata) {
                for (var i in this.config.patch.metadata) {
                    if (!this.config.patch.metadata.hasOwnProperty(i))
                        continue;
                    body[i] = this.config.patch.metadata[i];
                }
            }
            if (this.config.patch.json)
                body[this.config.patch.field] = JSON.stringify(body[this.config.patch.field]);
            return body;
        };
        return PopSelectListComponent;
    }(PopFieldItemComponent));
    PopSelectListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-select-list',
                    template: "<div class=\"pop-select-list-container import-field-item-container\">\n  <div class=\"pop-select-list-label\" *ngIf=\"config.label\">\n    {{config.label}}\n  </div>\n  <div *ngIf=\"config.helpText && !config.message && ( !config.patch || !config.patch.running )\"\n       class=\"sw-pop-icon sw-pointer pop-select-list-helper-icon\"\n       (mouseenter)=\"dom.state.helper = true\"\n       (mouseleave)=\"dom.state.helper = false\"\n       matTooltip=\"{{config.helpText}}\"\n       matTooltipPosition=\"above\">X\n  </div>\n  <div class=\"pop-select-list-feedback\">\n    <div *ngIf=\"config.message\"\n         class=\"pop-select-error-icon\"\n         matTooltipPosition=\"left\"\n         [matTooltip]=config.message>\n      <mat-icon color=\"warn\">info</mat-icon>\n    </div>\n  </div>\n  <div class=\"pop-select-list-items\" #list>\n\n    <div class=\"import-flex-row pop-select-list-overlay pop-select-list-option-header-open\" *ngIf=\"ui.all.overlay\">\n      <lib-pop-switch [config]=\"ui.all.overlay\"></lib-pop-switch>\n    </div>\n\n    <div class=\"pop-select-search-header\">\n      <mat-checkbox\n        *ngIf=\"config.multiple && config.allowAll && config.checkboxPosition === 'before'\"\n        class=\"pop-select-list-checkbox-before\"\n        [ngClass]=\"{'sw-hidden': dom.state.allOverlayEnabled}\"\n        [(ngModel)]=\"config.all\"\n        [disabled]=\"config.disabled\"\n        [color]=\"'primary'\"\n        matTooltip=\"Toggle All\"\n        matTooltipPosition=\"above\"\n        (change)=\"onAllChange($event.checked);\">\n      </mat-checkbox>\n\n      <mat-form-field *ngIf=\"config.filter && ui.search.config\" appearance=\"none\" floatLabel=\"never\" class=\"sw-search\"\n                      [ngClass]=\"{'sw-hidden': dom.state.allOverlayEnabled}\">\n        <a matPrefix>\n          <mat-icon>search</mat-icon>\n        </a>\n        <input matInput placeholder=\"Search\"\n               #search\n               type=\"text\"\n               [formControl]=\"ui.search.config.control\">\n        <mat-icon *ngIf=\"ui.search.config.control.value\" class=\"pop-select-list-clear sw-pointer\" matSuffix\n                  (click)=\"onClearSearch();\">\n          close\n        </mat-icon>\n      </mat-form-field>\n\n      <mat-checkbox\n        *ngIf=\"config.multiple && config.allowAll && config.checkboxPosition === 'after'\"\n        class=\"pop-select-list-checkbox-after\"\n        [ngClass]=\"{'sw-hidden': dom.state.allOverlayEnabled}\"\n        [(ngModel)]=\"config.all\"\n        [color]=\"'primary'\"\n        [disabled]=\"config.disabled\"\n        matTooltip=\"Toggle All\"\n        matTooltipPosition=\"above\"\n        (change)=\"onAllChange($event.checked);\">\n      </mat-checkbox>\n      <div *ngIf=\"dom.state.allOverlayEnabled && config.allOverlayMessage\" class=\"pop-select-list-overlay-message\"\n           [innerHTML]=config.allOverlayMessage></div>\n    </div>\n\n\n    <mat-selection-list [style.minHeight.px]=config.minHeight [style.maxHeight.px]=config.height #selectionList [multiple]=config.multiple>\n      <div *ngFor=\"let group of config.groups\" [ngClass]=\"{'sw-hidden': dom.state.allOverlayEnabled}\">\n        <div class=\"pop-select-list-option-header\" [ngClass]=\"{'pop-select-list-option-header-open': group.open, 'pop-select-list-option-header-before': config.checkboxPosition === 'before', 'pop-select-list-option-header-after': config.checkboxPosition !== 'before'}\" *ngIf=\"group.label && group.visible\">\n          <mat-checkbox\n            *ngIf=\"config.multiple && config.checkboxPosition === 'before'\"\n            [ngClass]=\"{'sw-disabled': !config.allowGroupAll}\"\n            [(ngModel)]=\"group.all\"\n            [color]=\"'primary'\"\n            [indeterminate]=group.indeterminate\n            matTooltip=\"Toggle Group\"\n            matTooltipPosition=\"above\"\n            (change)=\"onGroupChange($event.checked, group);\">\n          </mat-checkbox>\n          <div class=\"pop-select-list-header-label\" (click)=\"onToggleGroup(group);\">{{group.label}}\n            ({{group.options.values.length}})\n          </div>\n          <mat-checkbox\n            *ngIf=\"config.multiple && config.checkboxPosition === 'after'\"\n            [ngClass]=\"{'sw-disabled': !config.allowGroupAll}\"\n            [(ngModel)]=\"group.all\"\n            [color]=\"'primary'\"\n            [indeterminate]=group.indeterminate\n            matTooltip=\"Toggle Group\"\n            matTooltipPosition=\"above\"\n            (change)=\"onGroupChange($event.checked, group);\">\n          </mat-checkbox>\n        </div>\n\n        <mat-list-option\n          *ngFor=\"let option of group.options.values\"\n          [checkboxPosition]=config.checkboxPosition\n          [disabled]=\"config.disabled\"\n          class=\"pop-select-list-option\"\n          [ngClass]=\"{'pop-select-list-active': isOptionActive(option), 'sw-disabled': isOptionDisabled(option),'sw-hidden': isOptionHidden(group, option), 'pop-select-list-checkbox-before': config.checkboxPosition === 'before', 'pop-select-list-checkbox-after': config.checkboxPosition === 'after'}\"\n          [style.paddingLeft]=\"option.indentation+'px'\"\n          [selected]=isOptionSelected(option)\n          (click)=\"onOptionChange($event, option, group);\"\n          [value]=\"option.value\">\n          {{option.name}}\n          <div *ngIf=\"config.multiple && config.mode\" class=\"pop-select-list-mode-toggle\"\n               (click)=\"$event.stopPropagation()\">\n            <mat-button-toggle-group [(ngModel)]=\"option.mode\" (ngModelChange)=\"onOptionModeChange($event, option)\"\n                                     name=\"model\" aria-label=\"Mode\">\n              <mat-button-toggle *ngFor=\"let mode of config.mode\"\n                                 value=\"{{mode.value}}\">{{mode.name}}</mat-button-toggle>\n            </mat-button-toggle-group>\n          </div>\n        </mat-list-option>\n\n      </div>\n      <lib-pop-field-item-loader\n        [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n    </mat-selection-list>\n  </div>\n</div>\n",
                    styles: [".pop-select-list-container{position:relative;display:block;padding:5px 0 0;margin:10px 0 0;box-sizing:border-box;border-top-style:none;border-radius:3px}.pop-select-list-items{border:1px solid var(--border)}.pop-select-list-label{height:15px;margin-bottom:var(--gap-s)}.pop-select-search-header{display:flex;flex-direction:row;min-height:40px;align-items:center;justify-content:stretch;border-bottom:1px solid var(--border);background:var(--background-base);padding-left:5px}.mat-form-field{padding:0 10px}.sw-search{margin-top:-16px}.sw-search,.sw-search .mat-form-field-flex{display:flex;flex-grow:1}.pop-select-all-header{display:flex;flex-direction:row;-webkit-tap-highlight-color:transparent;width:100%;justify-content:space-between;align-items:center;box-sizing:border-box;padding:0 10px 0 15px;cursor:pointer;height:30px;outline:0;background:var(--bg-3)}.pop-select-header-label{position:relative;display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-style:italic;font-weight:700;font-size:16px}.pop-select-list-helper-icon{position:absolute;right:1px;top:4px;font-size:.7em;z-index:2}.mat-form-field{display:block;height:30px}.pop-select-list-option{box-sizing:border-box;background:var(--background-2);height:30px;padding:0 5px}.expand-to-container{position:absolute!important;top:0;left:0;bottom:0;right:0;box-sizing:border-box!important;-moz-box-sizing:border-box}.pop-select-list-feedback{z-index:4;position:absolute;top:0;right:0;display:flex;flex-flow:row;align-items:center;justify-content:center}.pop-select-list-option-header{display:flex;flex-direction:row;-webkit-tap-highlight-color:transparent;padding:0;justify-content:flex-start;align-items:center;box-sizing:border-box;cursor:pointer;height:30px;border-top:1px solid var(--border)!important;background:var(--background-item-menu);outline:0}.pop-select-list-option-header ::ng-deep .mat-checkbox{margin-right:1px!important}.pop-select-list-option-header-before{padding:0 4px 0 20px!important}.pop-select-list-option-header-after{padding:0 4px!important}.pop-select-list-option-header-open{border-bottom:1px solid var(--border)!important}.pop-select-option-header:hover{background:var(--background-hover)}.pop-select-list-header-label{position:relative;flex:1;display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-weight:700;font-size:16px;padding-left:var(--gap-xs)}.pop-select-list-clear{position:relative;top:3px}.pop-select-list-overlay{background:var(--background-base);padding:0 var(--gap-xs)!important}.pop-select-list-overlay ::ng-deep .import-field-item-container{margin:0}.pop-select-list-overlay:hover:not(:focus){background:var(--accent-shade)!important}.pop-select-list-overlay-message{display:flex;align-items:center;justify-content:center;height:40px;width:100%}.select-list-error-icon{position:absolute;top:13px;left:2px}.pop-select-list-mode-toggle{position:absolute;top:5px;min-width:50px;padding:2px;right:40px}.pop-select-list-mode-toggle ::ng-deep .mat-button-toggle-group{height:20px;background:var(--background-base)}.pop-select-list-mode-toggle ::ng-deep .mat-button-toggle-label-content{line-height:12px;font-size:12px;color:var(--foreground-base)!important}.pop-select-list-mode-toggle ::ng-deep .mat-button-toggle-checked{background:var(--accent-background)!important}.select-ajax-spinner{position:absolute;z-index:2}.pop-select-list-active{background:var(--background-code)!important;color:var(--background-base)!important}.pop-select-list-checkbox-after{margin-right:-2px}:host ::ng-deep .checkbox-after{direction:rtl}:host ::ng-deep .checkbox-after .mat-checkbox-layout{width:100%}:host ::ng-deep .checkbox-after .mat-checkbox-layout .mat-checkbox-inner-container{margin:0 9px 0 auto}:host ::ng-deep .mat-checkbox-inner-container{margin:0 0 0 16px}:host ::ng-deep .pop-select-search-header .mat-checkbox-inner-container{margin:0 0 0 16px!important}:host ::ng-deep .mat-checkbox-label{padding:0 0 0 16px}:host ::ng-deep .mat-list-item-content-reverse{padding:0 10px 0 5px!important}:host ::ng-deep mat-selection-list{overflow-y:scroll;overflow-x:hidden;outline:0!important;background:transparent!important}:host ::ng-deep mat-list-option{border:none!important}.pop-select-list-option:hover:not(:focus){background:var(--accent-shade)!important}:host ::ng-deep .pop-select-list-checkbox-before .mat-pseudo-checkbox{margin-right:16px}:host ::ng-deep .pop-select-list-checkbox-before .mat-list-text{flex:1}:host ::ng-deep .pop-select-list-option-header .mat-checkbox-inner-container{width:16px!important;height:16px!important;margin:0 0 0 1px!important}:host ::ng-deep .pop-select-list-option-header .mat-checkbox-label{padding:0 10px 0 0}:host ::ng-deep .filter-selected .pop-input-container{background-color:var(--bg-3)!important}:host ::ng-deep .pop-input-container{margin:0!important}:host ::ng-deep .filter-option-selected .pop-input-container{background-color:var(--accent-shade)!important}:host ::ng-deep .mat-list-base{padding:0!important;margin:0!important;border:0!important}:host ::ng-deep .mat-list-text{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;padding:0!important;padding-left:var(--gap-s)}"]
                },] }
    ];
    PopSelectListComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PopSelectListComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }],
        selectionListRef: [{ type: i0.ViewChild, args: ['selectionList', { static: true },] }],
        searchRef: [{ type: i0.ViewChild, args: ['search',] }]
    };

    var PopSelectModalDialogComponent = /** @class */ (function (_super) {
        __extends(PopSelectModalDialogComponent, _super);
        function PopSelectModalDialogComponent(el, dialog, data) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.dialog = dialog;
            _this.data = data;
            _this.name = 'PopSelectModalDialogComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.dom.height.outer = 570;
                    _this.dom.height.inner = 520;
                    _this.config.list.minHeight = 400;
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopSelectModalDialogComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopSelectModalDialogComponent.prototype.confirm = function () {
            var _this = this;
            // this.config.list.control.setValue('', { emitEvent: false });
            this.dom.setTimeout("dialog-confirm", function () {
                _this.dialog.close(_this.config.list);
            }, 0);
        };
        PopSelectModalDialogComponent.prototype.cancel = function () {
            var _this = this;
            // this.config.list.control.setValue('', { emitEvent: false });
            this.dom.setTimeout("dialog-close", function () {
                _this.dialog.close(null);
            }, 0);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopSelectModalDialogComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopSelectModalDialogComponent;
    }(PopFieldItemComponent));
    PopSelectModalDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-select-modal-dialog',
                    template: "<div class=\"pop-select-modal-container import-field-item-container\" [style.height.px]=dom.height.outer>\n  <mat-progress-bar [ngClass]=\"{'sw-hidden': dom.state.loaded}\" mode=\"determinate\" [value]=dom.state.progress></mat-progress-bar>\n  <div class=\"pop-select-modal-wrapper\" [style.height.px]=dom.height.inner *ngIf=\"dom.state.loaded\">\n    <div class=\"mat-h2 pop-select-modal-header\">{{config.header}}</div>\n    <div class=\"pop-select-modal-content\">\n      <lib-pop-select-list [config]=config.list></lib-pop-select-list>\n    </div>\n  </div>\n  <div class=\"pop-select-modal-actions\">\n    <button class=\"pop-select-modal-btn\" mat-raised-button (click)=\"cancel()\" cdkFocusInitial>Cancel</button>\n    <button class=\"pop-select-modal-btn\" [disabled]=\"!config.list.control.value\" mat-raised-button (click)=\"confirm()\">Ok</button>\n  </div>\n</div>\n",
                    styles: [":host{flex-direction:column}.pop-select-modal-container{position:absolute;top:0;left:0;right:0;padding:0 var(--gap-s);overflow-y:hidden;box-sizing:border-box}.pop-select-modal-wrapper{display:flex;flex-direction:column}.pop-select-modal-wrapper>div{flex:1}.pop-select-modal-header{text-align:center;max-height:35px}.pop-select-modal-content{flex:1 1 100%;flex-direction:column;overflow-y:auto;overflow-x:hidden}.pop-select-modal-actions{display:flex;flex-flow:row;align-items:center;justify-content:flex-end;padding:var(--gap-xs) var(--gap-s);max-height:50px;box-sizing:border-box}.pop-select-modal-btn{min-width:120px;margin-left:var(--gap-s)}:host ::ng-deep .mat-dialog-container{padding:2px!important;border:1px solid!important}"]
                },] }
    ];
    PopSelectModalDialogComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1$2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] }
    ]; };
    PopSelectModalDialogComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopSelectModalComponent = /** @class */ (function (_super) {
        __extends(PopSelectModalComponent, _super);
        function PopSelectModalComponent() {
            var _this = _super.call(this) || this;
            _this.events = new i0.EventEmitter();
            _this.name = 'PopSelectModalComponent';
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
            };
            _this.asset = {
                original: undefined,
                dialogRef: undefined
            };
            _this.ui = {
                anchorInput: undefined,
                dialogRef: undefined
            };
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config.triggerOpen = function () {
                        _this.dom.setTimeout("", function () {
                            _this.onChangeOptions();
                        }, 0);
                    };
                    _this.ui.anchorInput = new InputConfig({
                        label: _this.config.label,
                        value: _this.config.list.strVal,
                        selectMode: true,
                        maxlength: 2048,
                    });
                    return resolve(true);
                });
            };
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopSelectModalComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopSelectModalComponent.prototype.onChangeOptions = function () {
            var _this = this;
            this.dom.active.storedValue = this.config.list.strVal;
            this.asset.dialogRef = this.srv.dialog.open(PopSelectModalDialogComponent, {
                width: "450px",
                height: "600px",
                panelClass: 'sw-relative',
                data: {}
            });
            this.asset.original = {
                all: JsonCopy(this.config.list.all),
                selectedOptions: this.config.list.multiple ? JsonCopy(this.config.control.value) : [],
                groups: JsonCopy(this.config.list.groups),
                strVal: JsonCopy(this.config.list.strVal),
            };
            this.asset.dialogRef.componentInstance.config = this.config;
            this.dom.setSubscriber("select-dialog", this.asset.dialogRef.beforeClosed().subscribe(function (list) {
                if (list && list.strVal !== _this.dom.active.storedValue) {
                    _this.config.control.setValue(list.control.value);
                    if (!list.multiple)
                        list.value = list.control.value;
                    // console.log('list', list);
                    _this.ui.anchorInput.triggerOnChange(list.strVal);
                    _this.ui.anchorInput.message = '';
                    _this.onChange();
                }
                else {
                    _this.config.list.all = _this.asset.original.all;
                    _this.config.list.selectedOptions = _this.asset.original.selectedOptions;
                    _this.config.list.value = _this.asset.original.selectedOptions;
                    _this.config.list.groups = _this.asset.original.groups;
                    _this.config.list.strVal = _this.asset.original.strVal;
                }
                _this.asset.dialogRef = null;
            }));
            this.dom.setTimeout("search-focus", function () {
                if (IsCallableFunction(_this.asset.dialogRef.componentInstance.config.list.focusSearch))
                    _this.asset.dialogRef.componentInstance.config.list.focusSearch();
            }, 200);
        };
        // displaySuccess(): void{
        //   this.ui.anchorInput.message = '';
        //   this.ui.anchorInput.patch.success = true;
        //   setTimeout(() => {
        //     this.ui.anchorInput.patch.success = false;
        //   }, 1000);
        // }
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopSelectModalComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Protected Method )                                      *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Set up the body of the api patch
         * @param value
         * @private
         */
        PopSelectModalComponent.prototype._getPatchBody = function (value) {
            var _this = this;
            var body = {};
            if (!value)
                value = this.config.list.multiple ? (this.config.list.control.value.length ? this.config.list.control.value : []) : this.config.list.control.value;
            if (this.config.list.all) {
                if (typeof this.config.list.allValue !== 'undefined') {
                    body[this.config.patch.field] = this.config.list.allValue;
                }
                else if (this.config.list.patchGroupFk) {
                    body[this.config.patch.field] = [];
                    this.config.list.groups.map(function (group) {
                        body[_this.config.patch.field].push("0:" + group.groupFk);
                    });
                }
                else {
                    body[this.config.patch.field] = value;
                }
            }
            else {
                if (!this.config.list.selectedOptions.length && typeof this.config.list.emptyValue !== 'undefined') {
                    body[this.config.patch.field] = this.config.list.emptyValue;
                }
                else if (this.config.list.patchGroupFk) {
                    body[this.config.patch.field] = [];
                    this.config.list.groups.map(function (group) {
                        if (group.all) {
                            body[_this.config.patch.field].push("0:" + group.groupFk);
                        }
                        else {
                            group.options.values.filter(function (option) {
                                return option.selected;
                            }).map(function (option) {
                                body[_this.config.patch.field].push(option.value + ":" + group.groupFk);
                            });
                        }
                    });
                }
                else {
                    body[this.config.patch.field] = value;
                }
            }
            if (IsArray(body[this.config.patch.field], true)) {
                body[this.config.patch.field] = ArrayOnlyUnique(body[this.config.patch.field]);
                body[this.config.patch.field].sort(function (a, b) {
                    return a - b;
                });
            }
            if (this.config.patch.metadata) {
                for (var i in this.config.patch.metadata) {
                    if (!this.config.patch.metadata.hasOwnProperty(i))
                        continue;
                    body[i] = this.config.patch.metadata[i];
                }
            }
            if (this.config.patch.json)
                body[this.config.patch.field] = JSON.stringify(body[this.config.patch.field]);
            return body;
        };
        return PopSelectModalComponent;
    }(PopFieldItemComponent));
    PopSelectModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-select-modal',
                    template: "<div class=\"pop-select-modal-container import-field-item-container\" *ngIf=\"dom.state.loaded\">\n  <lib-pop-input class=\"pop-select-modal-values\" (click)=\"onChangeOptions();\" [config]=\"ui.anchorInput\"></lib-pop-input>\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n",
                    styles: [".pop-select-modal-container{position:relative;box-sizing:border-box;margin:10px 0}:host ::ng-deep .pop-input-container{margin:0!important}:host ::ng-deep .pop-select-modal-values .mat-form-field-infix{padding:8px 20px 13px 0!important}:host ::ng-deep .pop-select-modal-values input{display:flex;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:100%;pointer-events:none!important;box-sizing:border-box}:host ::ng-deep .pop-select-modal-values .mat-form-field-infix{pointer-events:none!important}"]
                },] }
    ];
    PopSelectModalComponent.ctorParameters = function () { return []; };
    PopSelectModalComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var PopButtonComponent = /** @class */ (function () {
        function PopButtonComponent() {
            this.config = new ButtonConfig();
            this.events = new i0.EventEmitter();
            this.name = 'PopButtonComponent';
        }
        PopButtonComponent.prototype.ngOnInit = function () {
        };
        PopButtonComponent.prototype.onClick = function (event) {
            this.emitInputEvent(this.config.event);
        };
        PopButtonComponent.prototype.emitInputEvent = function (name, message) {
            if (message === void 0) { message = null; }
            if (this.config.bubble)
                this.events.emit({ source: this.name, type: 'field', name: name, config: this.config, message: message });
        };
        PopButtonComponent.prototype.ngOnDestroy = function () {
        };
        return PopButtonComponent;
    }());
    PopButtonComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-button',
                    template: "<!--<div class=\"pop-button-container\" [ngClass]=\"{'sw-hidden': config.hidden}\">-->\n<!--  <button [type]=config.type-->\n<!--          matTooltipClass=\"button-tooltip-background\"-->\n<!--          [hidden]=config.hidden>-->\n<!--    {{config.label}}-->\n<!--  </button>-->\n<!--</div>-->\n\n<div class=\"pop-button-container\" [ngClass]=\"{'sw-hidden': config.hidden}\">\n  <button *ngIf=\"config.type !== 'mat-flat-button'\"\n      [style.borderRadius.px]=\"config.radius\"\n      mat-raised-button\n      [style.height.px]=\"config.size\"\n      [style.minWidth.px]=\"config.width\"\n      matTooltipClass=\"button-tooltip-background\"\n      [hidden]=config.hidden\n      [disabled]=config.disabled\n      [color]=config.color\n      (click)=\"onClick($event)\">\n    <div class=\"pop-button-content\"\n         [style.fontSize.px]=\"config.text\"\n         [style.lineHeight.px]=\"config.text\">\n      <span *ngIf=\"config.value\">{{ config.value }}</span>\n      <div *ngIf=\"config.icon && config.value\" class=\"sw-mar-hrz-xs\"></div>\n      <mat-icon\n          *ngIf=\"config.icon\"\n          [style.fontSize.px]=\"config.text\"\n          [color]=config.iconColor>\n        {{ config.icon }}\n      </mat-icon>\n    </div>\n  </button>\n  <button *ngIf=\"config.type === 'mat-flat-button'\"\n          [style.borderRadius.px]=\"config.radius\"\n          mat-flat-button\n          [style.height.px]=\"config.size\"\n          [style.minWidth.px]=\"config.width\"\n          matTooltipClass=\"button-tooltip-background\"\n          [hidden]=config.hidden\n          [disabled]=config.disabled\n          [color]=config.color\n          (click)=\"onClick($event)\">\n    <div class=\"pop-button-content\"\n         [style.fontSize.px]=\"config.text\"\n         [style.lineHeight.px]=\"config.text\">\n      <span *ngIf=\"config.value\">{{ config.value }}</span>\n      <div *ngIf=\"config.icon && config.value\" class=\"sw-mar-hrz-xs\"></div>\n      <mat-icon\n        *ngIf=\"config.icon\"\n        [style.fontSize.px]=\"config.text\"\n        [color]=config.iconColor>\n        {{ config.icon }}\n      </mat-icon>\n    </div>\n  </button>\n</div>\n",
                    styles: [":host ::ng-deep .mat-raised-button{min-width:0;padding:0 5px!important;line-height:normal!important}:host ::ng-deep .mat-raised-button mat-icon{width:auto;line-height:normal}:host ::ng-deep button{flex:1;justify-content:space-around;align-items:center;font-size:1em!important;line-height:normal;outline:0;border:1px solid var(--border)!important}.pop-button-content{display:flex;align-items:center;justify-content:space-between;padding:5px;box-sizing:border-box}:host ::ng-deep .mat-icon{height:auto!important;width:auto!important}"]
                },] }
    ];
    PopButtonComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var PopMinMaxComponent = /** @class */ (function (_super) {
        __extends(PopMinMaxComponent, _super);
        function PopMinMaxComponent(el, cdr) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            _this.name = 'PopMinMaxComponent';
            _this.asset.delay = 250;
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config = IsObjectThrowError(_this.config, true, _this.name + ":configure: - this.config") ? _this.config : null;
                    _this.config.triggerOnChange = function (value) {
                        _this._setControlValue();
                        _this.cdr.detectChanges();
                        _this.onChange(value, true);
                    };
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopMinMaxComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopMinMaxComponent.prototype.onIsMaxEvent = function (event) {
            if (this._isFieldChange(event)) {
                this.config.maxConfig.control.setValue((event.config.control.value ? (+this.config.control.value[this.config.minColumn] ? +this.config.control.value[this.config.minColumn] : +this.config.maxDefaultValue) : null));
                this._triggerMaxChange();
            }
        };
        PopMinMaxComponent.prototype.onIsMinEvent = function (event) {
            if (this._isFieldChange(event)) {
                console.log('onIsMinEvent', event.config.control.value);
                this.config.minConfig.control.setValue((event.config.control.value ? +this.config.minDefaultValue : null));
            }
        };
        PopMinMaxComponent.prototype.onMinEvent = function (event) {
            // console.log('onMinEvent', event);
            if (this._isFieldChange(event)) {
                this._triggerMinChange();
            }
        };
        PopMinMaxComponent.prototype.onMaxEvent = function (event) {
            // console.log('onMaxEvent', event);
            if (this._isFieldChange(event)) {
                this._triggerMaxChange();
            }
        };
        PopMinMaxComponent.prototype.onDecrementMin = function () {
            var control = this.config.minConfig.control;
            var newVal = +this.config.minConfig.control.value - 1;
            if ((newVal) >= 1) {
                control.setValue(newVal);
                this._triggerMinChange();
            }
        };
        PopMinMaxComponent.prototype.onIncrementMin = function () {
            var _this = this;
            var control = this.config.minConfig.control;
            var newVal = +this.config.minConfig.control.value + 1;
            var maxVal = +this.config.maxConfig.control.value;
            if ((newVal) <= maxVal) {
                control.setValue(newVal);
                this.dom.setTimeout('on-change', function () {
                    _this._clearMessage();
                    _this._setControlValue();
                    _this.onChange(undefined, true);
                }, this.asset.delay);
            }
        };
        PopMinMaxComponent.prototype.onDecrementMax = function () {
            var control = this.config.maxConfig.control;
            var newVal = +this.config.maxConfig.control.value - 1;
            if ((newVal) >= 1) {
                control.setValue(newVal);
                this._triggerMaxChange();
            }
        };
        PopMinMaxComponent.prototype.onIncrementMax = function () {
            var control = this.config.maxConfig.control;
            var newVal = +this.config.maxConfig.control.value + 1;
            if ((newVal) <= this.config.limit) {
                control.setValue(newVal);
                this._triggerMaxChange();
            }
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopMinMaxComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopMinMaxComponent.prototype._triggerMinChange = function () {
            var _this = this;
            this.dom.setTimeout('on-change', function () {
                _this._clearMessage();
                _this._setControlValue();
                _this.onChange(undefined, true);
            }, this.asset.delay);
        };
        PopMinMaxComponent.prototype._triggerMaxChange = function () {
            var _this = this;
            this.dom.setTimeout('on-change', function () {
                _this._clearMessage();
                _this._updateMinOptions();
                _this._setControlValue();
                _this.onChange(undefined, true);
            }, this.asset.delay);
        };
        PopMinMaxComponent.prototype._updateMinOptions = function () {
            // let minLimit = this.config.maxConfig.control.value;
            // const minOptions = [];
            // while( minLimit ){
            //   minOptions.push({ value: minLimit, name: minLimit, sort: minLimit });
            //   minLimit--;
            // }
            // this.config.minConfig.options = minOptions;
        };
        PopMinMaxComponent.prototype._setControlValue = function () {
            var maxValue = this.config.maxConfig.control.value;
            var minValue = this.config.minConfig.control.value;
            if (!this.config.allowNegative && minValue < 0) {
                minValue = 0;
                this.config.minConfig.control.setValue(minValue);
            }
            if (maxValue && +minValue > +maxValue) {
                minValue = maxValue;
                this.config.minConfig.control.setValue(minValue);
            }
            var value = {};
            value[this.config.minColumn] = (minValue ? +minValue : minValue);
            value[this.config.maxColumn] = (maxValue ? +maxValue : maxValue);
            this.config.control.value = value;
        };
        return PopMinMaxComponent;
    }(PopFieldItemComponent));
    PopMinMaxComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-min-max',
                    template: "<div class=\"pop-minmax-container import-field-item-container import-flex-column\">\n  <div class=\"pop-minmax-feedback\" *ngIf=\"!config.minimal\">\n    <div class=\"pop-minmax-error-icon sw-pointer\"\n      [ngClass]=\"{'sw-hidden': !config.message}\"\n      matTooltipPosition=\"left\"\n      [matTooltip]=config.message>\n      <mat-icon color=\"warn\">info</mat-icon>\n    </div>\n  </div>\n  <div class=\"import-flex-row\">\n    {{config.label}}\n    <span\n      *ngIf=\"config.helpText\"\n      class=\"pop-minmax-helper-icon sw-pointer sw-pop-icon\"\n      (mouseenter)=\"dom.state.helper = true\"\n      (mouseleave)=\"dom.state.helper = false\"\n      matTooltip=\"{{config.helpText}}\"\n      matTooltipPosition=\"right\">X\n      </span>\n  </div>\n  <div class=\"import-flex-column pop-minmax-content\" [ngClass]=\"{'sw-disabled': config.patch.running}\">\n    <div class=\"import-flex-row import-flex-item-full\">\n      <div class=\"import-flex-item-md import-flex-grow-xs\">\n        <lib-pop-switch [config]=config.isMinConfig (events)=\"onIsMinEvent($event);\"></lib-pop-switch>\n      </div>\n      <div class=\"import-flex-item-xs sw-relative\">\n      </div>\n      <div class=\"import-flex-item-sm\">\n        <lib-pop-number *ngIf=\"config.isMinConfig.control.value\" [config]=config.minConfig (events)=\"onMaxEvent($event);\"></lib-pop-number>\n      </div>\n      <div class=\"import-flex-item-xs sw-relative\">\n      </div>\n    </div>\n\n    <div class=\"import-flex-row import-flex-item-full\">\n      <div class=\"import-flex-item-md import-flex-grow-xs\">\n        <lib-pop-switch [config]=config.isMaxConfig (events)=\"onIsMaxEvent($event);\"></lib-pop-switch>\n      </div>\n\n      <div class=\"import-flex-item-xs sw-relative\">\n      </div>\n\n      <div class=\"import-flex-item-sm\">\n        <lib-pop-number [ngClass]=\"{'sw-disabled': !config.isMaxConfig.control.value}\" [config]=config.maxConfig (events)=\"onMaxEvent($event);\"></lib-pop-number>\n      </div>\n      <div class=\"import-flex-item-xs sw-relative\">\n      </div>\n    </div>\n  </div>\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n",
                    styles: [".import-text-xs{font-size:.8em}.import-text-sm{font-size:.9em}.import-text-md{font-size:1em}.import-text-lg{font-size:1.1em}.import-text-xlg{font-size:1.2em}.sw-pad-xs{padding:var(--xs)}.sw-pad-md,.sw-pad-sm{padding:var(--md)}.sw-pad-lg{padding:var(--lg)}.sw-pad-xlg{padding:var(--xlg)}.sw-pad-hrz-xs{padding-left:var(--xs);padding-right:var(--xs)}.sw-pad-hrz-sm{padding-left:var(--sm);padding-right:var(--sm)}.sw-pad-hrz-md{padding-left:var(--md);padding-right:var(--md)}.sw-pad-hrz-lg{padding-left:var(--lg);padding-right:var(--lg)}.sw-pad-hrz-xlg{padding-left:var(--xlg);padding-right:var(--xlg)}.sw-pad-vrt-xs{padding-top:var(--xs);padding-bottom:var(--xs)}.sw-pad-vrt-md,.sw-pad-vrt-sm{padding-top:var(--md);padding-bottom:var(--md)}.sw-pad-vrt-lg{padding-top:var(--lg);padding-bottom:var(--lg)}.sw-pad-vrt-xlg{padding-top:var(--xlg);padding-bottom:var(--xlg)}.sw-pad-lft-xs{padding-left:var(--xs)}.sw-pad-lft-sm{padding-left:var(--sm)}.sw-pad-lft-md{padding-left:var(--md)}.sw-pad-lft-lg{padding-left:var(--lg)}.sw-pad-lft-xlg{padding-left:var(--xlg)}.sw-pad-rgt-xs{padding-right:var(--xs)}.sw-pad-rgt-sm{padding-right:var(--sm)}.sw-pad-rgt-md{padding-right:var(--md)}.sw-pad-rgt-lg{padding-right:var(--lg)}.sw-pad-rgt-xlg{padding-right:var(--xlg)}.sw-pad-btm-xs{padding-bottom:var(--xs)}.sw-pad-btm-sm{padding-bottom:var(--sm)}.sw-pad-btm-md{padding-bottom:var(--md)}.sw-pad-btm-lg{padding-bottom:var(--lg)}.sw-pad-btm-xlg{padding-bottom:var(--xlg)}.sw-pad-top-xs{padding-top:var(--xs)}.sw-pad-top-sm{padding-top:var(--sm)}.sw-pad-top-md{padding-top:var(--md)}.sw-pad-top-lg{padding-top:var(--lg)}.sw-pad-top-xlg{padding-top:var(--xlg)}.sw-mar-xs{margin:var(--xs)}.sw-mar-sm{margin:var(--sm)}.sw-mar-md{margin:var(--md)}.sw-mar-lg{margin:var(--lg)}.sw-mar-xlg{margin:var(--xlg)}.sw-mar-hrz-xs{margin-left:var(--xs);margin-right:var(--xs)}.sw-mar-hrz-md,.sw-mar-hrz-sm{margin-left:var(--md);margin-right:var(--md)}.sw-mar-hrz-lg{margin-left:var(--lg);margin-right:var(--lg)}.sw-mar-hrz-xlg{margin-left:var(--xlg);margin-right:var(--xlg)}.sw-mar-vrt-xs{margin-top:var(--xs);margin-bottom:var(--xs)}.sw-mar-vrt-md,.sw-mar-vrt-sm{margin-top:var(--md);margin-bottom:var(--md)}.sw-mar-vrt-lg{margin-top:var(--lg);margin-bottom:var(--lg)}.sw-mar-vrt-xlg{margin-top:var(--xlg);margin-bottom:var(--xlg)}.sw-mar-lft-xs{margin-left:var(--xs)}.sw-mar-lft-sm{margin-left:var(--sm)}.sw-mar-lft-md{margin-left:var(--md)}.sw-mar-lft-lg{margin-left:var(--lg)}.sw-mar-lft-xlg{margin-left:var(--xlg)}.sw-mar-rgt-xs{margin-right:var(--xs)}.sw-mar-rgt-sm{margin-right:var(--sm)}.sw-mar-rgt-md{margin-right:var(--md)}.sw-mar-rgt-lg{margin-right:var(--lg)}.sw-mar-rgt-xlg{margin-right:var(--xlg)}.sw-mar-btm-xs{margin-bottom:var(--xs)}.sw-mar-btm-sm{margin-bottom:var(--sm)}.sw-mar-btm-md{margin-bottom:var(--md)}.sw-mar-btm-lg{margin-bottom:var(--lg)}.sw-mar-btm-xlg{margin-bottom:var(--xlg)}.sw-mar-top-xs{margin-top:var(--xs)}.sw-mar-top-sm{margin-top:var(--sm)}.sw-mar-top-md{margin-top:var(--md)}.sw-mar-top-lg{margin-top:var(--lg)}.sw-mar-top-xlg{margin-top:var(--xlg)}:host{position:relative;display:block;width:100%;box-sizing:border-box}.pop-minmax-container ::ng-deep .mat-slide-toggle-content{padding-right:5px!important}.pop-minmax-container ::ng-deep .pop-minmax-content .mat-form-field-infix{width:auto;padding:6px 0!important;margin-top:6px!important;border:0!important;font-size:.9em}.pop-minmax-label{display:flex;justify-content:flex-start;align-items:center}.pop-minmax-content{min-height:40px;clear:both;font-size:.9em}.pop-minmax-content-section{min-height:40px}.pop-minmax-helper-icon{position:relative;top:4px;margin-left:5px;font-size:.7em;z-index:2}.pop-minmax-feedback{position:absolute;top:0;right:5px;width:20px;height:20px}.pop-minmax-error-icon{position:relative;z-index:2;top:-2px}"]
                },] }
    ];
    PopMinMaxComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PopMinMaxComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var SliderConfig = /** @class */ (function () {
        function SliderConfig(params) {
            this.autoTicks = false;
            this.bubble = false;
            this.column = 'column';
            this.displayErrors = true;
            this.disabled = false;
            this.facade = false;
            this.helpText = '';
            this.label = '';
            this.message = '';
            this.max = 100;
            this.min = 1;
            this.noInitialValue = false;
            this.options = [];
            this.step = 1;
            this.showTooltip = false;
            this.showTicks = true;
            this.thumbLabel = true;
            this.tickInterval = 1;
            this.tooltip = '';
            this.value = null;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!this.patch)
                this.patch = { field: '', duration: 750, path: '', disabled: false, businessId: 0 };
            if (this.patch.displayIndicator !== false)
                this.patch.displayIndicator = true;
            if (this.min > this.max) {
                this.min = this.max;
            }
            if (this.noInitialValue)
                this.value = '';
            if (!this.control)
                this.setControl();
        }
        SliderConfig.prototype.setControl = function () {
            this.control = (this.disabled ? new forms.FormControl({
                value: this.value,
                disabled: true
            }) : new forms.FormControl(this.value, (this.validators ? this.validators : [])));
        };
        return SliderConfig;
    }());

    var PopSliderComponent = /** @class */ (function (_super) {
        __extends(PopSliderComponent, _super);
        function PopSliderComponent() {
            var _this = _super.call(this) || this;
            _this.config = new SliderConfig();
            _this.events = new i0.EventEmitter();
            _this.name = 'PopSliderComponent';
            _this.dom.state.helper = false;
            _this.dom.state.tooltip = false;
            return _this;
        }
        PopSliderComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * On Change event
         * @param value
         * @param force
         */
        PopSliderComponent.prototype.onChange = function (value, force) {
            if (force === void 0) { force = false; }
            var control = this.config.control;
            if (typeof value !== 'undefined') {
                control.setValue(value);
                control.markAsDirty();
                control.updateValueAndValidity();
            }
            if (this._isChangeValid()) {
                value = typeof value !== 'undefined' ? value : this.config.control.value;
                value = this._applyTransformation(value);
                if (this.config.patch && this.config.patch && (this.config.patch.path || this.config.facade)) {
                    this._onPatch(value, false);
                }
                else {
                    this.onBubbleEvent('onChange');
                }
            }
        };
        PopSliderComponent.prototype.getSliderTickInterval = function () {
            if (this.config.showTicks) {
                return this.config.autoTicks ? 'auto' : this.config.tickInterval;
            }
            return 0;
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopSliderComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopSliderComponent;
    }(PopFieldItemComponent));
    PopSliderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-slider',
                    template: "<div class=\"pop-slider-container import-field-item-container\">\n  <mat-label>Maxlength</mat-label>\n  <div class=\"pop-slider-display\">{{config.value}}</div>\n  <div class=\"pop-slider-feedback-container\">\n    <div class=\"pop-slider-error-icon\"\n         [ngClass]=\"{'sw-hidden': !config.message}\"\n         matTooltipPosition=\"left\"\n         [matTooltip]=config.message>\n      <mat-icon color=\"warn\">info</mat-icon>\n    </div>\n    <!--<lib-main-spinner-->\n      <!--class=\"pop-slider-ajax-spinner\"-->\n      <!--[ngClass]=\"{'sw-hidden': !config.patch || !config.patch.displayIndicator || !config.patch.running}\"-->\n      <!--[options]=\"{strokeWidth:3, color:'accent', diameter:19}\">-->\n    <!--</lib-main-spinner>-->\n  </div>\n  <mat-slider [min]=config.min [step]=config.step (change)=\"onChange($event.value);\" [tickInterval]=\"getSliderTickInterval()\" [max]=config.max [(ngModel)]=\"config.value\" [thumbLabel]=\"config.thumbLabel\"></mat-slider>\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n",
                    styles: [".pop-slider-container{display:flex;flex-direction:row;flex-grow:1;justify-content:flex-start;align-items:center;width:100%;box-sizing:border-box;height:40px}:host ::ng-deep mat-label{width:75px}.pop-slider-display{display:flex;min-width:10px;padding:0 2px;text-align:right}.pop-slider-error-icon{position:absolute;z-index:2;margin-top:3px}.pop-slider-feedback-container{position:relative;display:flex;width:30px;height:20px;padding-top:2px;flex-flow:row;align-items:center;justify-content:center}:host ::ng-deep mat-slider{padding:0;vertical-align:top;display:block}:host ::ng-deep .mat-slider-horizontal{display:flex;flex-grow:1}"]
                },] }
    ];
    PopSliderComponent.ctorParameters = function () { return []; };
    PopSliderComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var PopNumberComponent = /** @class */ (function (_super) {
        __extends(PopNumberComponent, _super);
        function PopNumberComponent(el, cdr) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            _this.config = new NumberConfig();
            _this.name = 'PopNumberComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config.triggerOnChange = function (value, forcePatch) {
                        if (forcePatch === void 0) { forcePatch = false; }
                        _this.cdr.detectChanges();
                        _this.onChange(value, forcePatch);
                    };
                    _this.config.triggerDirectPatch = function (value) {
                        _this._onPatch(value, true);
                    };
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopNumberComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Test
         * @param event
         */
        PopNumberComponent.prototype.onKeyUp = function (event) {
            if (event.code === 'Enter') {
                if (this.config.control.invalid) {
                    if (this.config.displayErrors)
                        this._setMessage(ValidationErrorMessages(this.config.control.errors));
                }
                else {
                    if (this.config.patch && (this.config.patch.path || this.config.facade)) {
                        if (this.config.control.value !== this.asset.storedValue) {
                            if (this._isFieldPatchable()) {
                                this.onChange();
                            }
                        }
                    }
                }
            }
            else {
                this.onBubbleEvent('onKeyUp');
            }
        };
        /**
         * Hook that is called right before a patch
         */
        PopNumberComponent.prototype._beforePatch = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var patch = _this.config.patch;
                var control = _this.config.control;
                _this._checkValue();
                control.disable();
                patch.running = true;
                return resolve(true);
            });
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopNumberComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        PopNumberComponent.prototype._checkValue = function () {
            var control = this.config.control;
            if (control.value > this.config.max) {
                control.setValue(this.config.max, { emitEvent: false });
            }
            else if (control.value < this.config.min) {
                control.setValue(this.config.min, { emitEvent: false });
            }
        };
        return PopNumberComponent;
    }(PopFieldItemComponent));
    PopNumberComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-number',
                    template: "<div class=\"import-field-item-container pop-number-container\" [ngClass]=\"{'sw-hidden': config.hidden, 'pop-number-minimal': config.minimal, 'pop-number-container-tooltip-adjust': config.tooltip && dom.state.tooltip}\">\n  <div *ngIf=\"config.tooltip && dom.state.tooltip\" [@slideInOut] class=\"pop-number-tooltip-container\" [innerHTML]=config.tooltip></div>\n  <mat-form-field appearance=\"outline\" color=\"accent\" class=\"import-field-item-container-expansion\">\n    <mat-label *ngIf=\"config.label\">{{config.label}}</mat-label>\n\n    <input\n      type=\"number\"\n      matInput\n      matTooltipClass=\"pop-number-tooltip-background\"\n      [hidden]=config.hidden\n      [min]=config.min\n      [max]=config.max\n      [step]=config.step\n      [formControl]=config.control\n      (keyup)=\"onKeyUp($event);\"\n      (blur)=\"dom.state.tooltip=false; onBlur();\"\n      (focus)=\"dom.state.tooltip= true; onFocus();\"\n      [maxlength]=config.maxlength\n    >\n    <div class=\"pop-number-feedback-container\" matSuffix *ngIf=\"!config.minimal && ( config.message || config.helpText)\">\n      <lib-pop-field-item-error class=\"pop-number-error-icon\" [hidden]=\"!config.message\" [message]=\"config.message\"></lib-pop-field-item-error>\n      <lib-pop-field-item-helper class=\"pop-number-helper-icon\" [hidden]=\"config.message\" [helpText]=config.helpText></lib-pop-field-item-helper>\n    </div>\n  </mat-form-field>\n\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n",
                    styles: [".pop-number-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-infix{padding:8px 0 13px}.pop-number-container ::ng-deep .pop-number-container-minimal .mat-form-field-appearance-outline .mat-form-field-infix{padding:8px 0 13px}.pop-number-container .pop-number-container-minimal .mat-form-field-appearance-outline .mat-form-field-wrapper,.pop-number-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:0;margin:0!important}.pop-number-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{display:none}.pop-number-container ::ng-deep input[type=number]{text-align:left;min-width:40px;padding-right:5px}.pop-number-feedback-container{top:-4px}.pop-number-error-icon,.pop-number-feedback-container{position:relative;display:flex;justify-content:center;align-items:center;width:20px;height:20px}.pop-number-error-icon{top:5px;font-size:.8em}.pop-number-helper-icon{position:relative;font-size:.8em;top:3px;z-index:2}.pop-number-select-icon{position:absolute;z-index:2;margin-top:3px;color:var(--text-disabled)}.pop-number-ajax-spinner{position:absolute;z-index:1}.pop-number-container-tooltip-adjust{padding-top:45px}.pop-number-tooltip-container{position:absolute;display:block;right:0;left:0;top:0;height:40px;background:var(--accent);border-radius:.25em;padding:.75em;z-index:2;color:var(--primary-text);height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;overflow:hidden;text-align:center}:host ::ng-deep .pop-number-minimal .mat-form-field-infix{padding-right:2px!important}"]
                },] }
    ];
    PopNumberComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PopNumberComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopFieldItemLoaderComponent = /** @class */ (function () {
        function PopFieldItemLoaderComponent() {
            this.show = false;
        }
        PopFieldItemLoaderComponent.prototype.ngOnInit = function () {
        };
        return PopFieldItemLoaderComponent;
    }());
    PopFieldItemLoaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-field-item-loader',
                    template: "\n    <mat-progress-bar\n      class=\"pop-field-item-loader\"\n      *ngIf=\"show\"\n      [style.height.px]=\"1\"\n      [mode]=\"'query'\"\n    >\n    </mat-progress-bar>\n  ",
                    styles: [':host { position: absolute; bottom:0; left: 0; right: 0 }']
                },] }
    ];
    PopFieldItemLoaderComponent.propDecorators = {
        show: [{ type: i0.Input }]
    };

    var PopFieldItemHelperComponent = /** @class */ (function () {
        function PopFieldItemHelperComponent() {
            this.hidden = false;
            if (!this.helpText)
                this.helpText = '';
        }
        PopFieldItemHelperComponent.prototype.ngOnInit = function () {
        };
        return PopFieldItemHelperComponent;
    }());
    PopFieldItemHelperComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-field-item-helper',
                    template: "\n    <span class=\"pop-field-item-help-text material-icons sw-pointer\"\n          *ngIf=\"!hidden && helpText\"\n          (mouseenter)=\"helper = true\"\n          (mouseleave)=\"helper = false\"\n          matTooltip=\"{{helpText}}\"\n          matTooltipPosition=\"above\">help_outline\n    </span>\n  ",
                    styles: ["\n    .pop-field-item-help-text {\n      position: relative;\n      font-size: 1.5em;\n      color: var(--text-disabled);\n      z-index: 2;\n    }"]
                },] }
    ];
    PopFieldItemHelperComponent.ctorParameters = function () { return []; };
    PopFieldItemHelperComponent.propDecorators = {
        helpText: [{ type: i0.Input }],
        hidden: [{ type: i0.HostBinding, args: ['class.sw-hidden',] }, { type: i0.Input }]
    };

    var PopFieldItemErrorComponent = /** @class */ (function () {
        function PopFieldItemErrorComponent() {
            this.hidden = false;
            if (!this.message)
                this.message = '';
        }
        PopFieldItemErrorComponent.prototype.ngOnInit = function () {
        };
        return PopFieldItemErrorComponent;
    }());
    PopFieldItemErrorComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-field-item-error',
                    template: "\n    <div class=\"sw-pointer pop-field-item-error\"\n         *ngIf=\"!hidden && message\"\n         matTooltipPosition=\"left\"\n         [matTooltip]=message>\n      <mat-icon color=\"warn\">error</mat-icon>\n    </div>\n  ",
                    styles: [".pop-field-item-error {\n    width: 20px;\n    height: 20px;\n    font-size: 1.1em;\n    z-index: 2;\n  }"]
                },] }
    ];
    PopFieldItemErrorComponent.ctorParameters = function () { return []; };
    PopFieldItemErrorComponent.propDecorators = {
        message: [{ type: i0.Input }],
        hidden: [{ type: i0.HostBinding, args: ['class.sw-hidden',] }, { type: i0.Input }]
    };

    var PopTextComponent = /** @class */ (function (_super) {
        __extends(PopTextComponent, _super);
        function PopTextComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.name = 'PopTextComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopTextComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopTextComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopTextComponent;
    }(PopExtendComponent));
    PopTextComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-text',
                    template: "<div class=\"import-field-item-container pop-text-container\" [style.padding.px]=\"config.padding\" [ngClass]=\"{'pop-text-border': config.border, 'pop-text-header': config.header, 'pop-text-warning': config.warning, 'pop-text-ellipsis': config.textOverflow === 'ellipsis'}\" *ngIf=\"dom.state.loaded\">\n  <div class=\"import-flex-row import-flex-start-center\">\n    <mat-icon *ngIf=\"config.warning\" class=\"theme-error\">warning_amber</mat-icon>\n    <div class=\"pop-text-value {{config.className}}\" [innerHTML]=\"config.value\"></div>\n  </div>\n</div>\n",
                    styles: [".pop-text-container{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:space-between;box-sizing:border-box;-moz-box-sizing:border-box}.pop-text-container .import-flex-row{min-width:0}.pop-text-border{border-radius:3px;border:1px solid var(--border);padding:var(--gap-s)}:host ::ng-deep .pop-text-header .pop-text-value{font-weight:700;font-size:18px}:host ::ng-deep .pop-text-ellipsis .pop-text-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host ::ng-deep .import-field-item-container{margin:0!important}:host ::ng-deep mat-icon{margin-right:var(--gap-xs)}"]
                },] }
    ];
    PopTextComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopTextComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var datePresets = [
        'Today',
        'So Far This Week',
        'This Week',
        'Last Week',
        'Previous Week',
        'Rest of This Week',
        'Next Week',
        'This Month',
        'Last Month',
        'Next Month'
    ];
    var DateRangePanelComponent = /** @class */ (function () {
        function DateRangePanelComponent(dateAdapter, datePicker, calendar) {
            this.dateAdapter = dateAdapter;
            this.datePicker = datePicker;
            this.calendar = calendar;
            this.presets = datePresets;
            this.selected = '';
        }
        /**
         * Apply the preset to Datepicker and Calendar
         * @param datePreset: Example: This week
         */
        DateRangePanelComponent.prototype.selectDatePreset = function (datePreset) {
            this.selected = datePreset;
            var _a = __read(this.calculateDateRange(datePreset), 2), start = _a[0], end = _a[1];
            // @ts-ignore
            // if only start is selected we need to set end to clear out start and end.
            if ((this.selected.start !== undefined && !this.calendar.selected.end) || (this.calendar.selected.start && !this.calendar.selected.end)) {
                this.datePicker.select(start);
            }
            this.datePicker.select(start);
            this.datePicker.select(end);
            this.calendar.activeDate = end;
        };
        /**
         * Fix calulations to make monday first day of week instead of sunday
         * @param today
         * @private
         */
        DateRangePanelComponent.prototype.adjDayOfWeekToStartOnMonday = function (today) {
            var dayOfWeek = this.dateAdapter.getDayOfWeek(today);
            dayOfWeek = dayOfWeek === 0 ? 6 : (dayOfWeek - 1);
            return dayOfWeek;
        };
        /**
         * Calculate date range preset
         * @param datePreset: Example: This week.
         */
        DateRangePanelComponent.prototype.calculateDateRange = function (datePreset) {
            var today = this.today;
            switch (datePreset) {
                case 'Today':
                    return [today, today];
                case 'So Far This Week': {
                    var dayOfWeek = this.adjDayOfWeekToStartOnMonday(today);
                    var start = this.dateAdapter.addCalendarDays(today, -(dayOfWeek));
                    return [start, today];
                }
                case 'This Week': return this.calculateWeek(today);
                case 'Last Week': return this.calculateWeek(this.dateAdapter.addCalendarDays(today, -7));
                case 'Previous Week': return this.calculateWeek(this.dateAdapter.addCalendarDays(today, -14));
                case 'Rest of This Week': {
                    var dayOfWeek = this.adjDayOfWeekToStartOnMonday(today);
                    var end = this.dateAdapter.addCalendarDays(today, (6 - dayOfWeek));
                    return [today, end];
                }
                case 'Next Week': {
                    var dayOfWeek = this.adjDayOfWeekToStartOnMonday(today);
                    var start = this.dateAdapter.addCalendarDays(today, (7 - dayOfWeek));
                    return this.calculateWeek(start);
                }
                case 'This Month': return this.calculateMonth(today);
                case 'Last Month': {
                    var thisDayLastMonth = this.dateAdapter.addCalendarMonths(today, -1);
                    return this.calculateMonth(thisDayLastMonth);
                }
                case 'Next Month': {
                    var thisDayLastMonth = this.dateAdapter.addCalendarMonths(today, 1);
                    return this.calculateMonth(thisDayLastMonth);
                }
            }
        };
        /**
         * calculate start and end for week
         * @param forDay
         * @private
         */
        DateRangePanelComponent.prototype.calculateWeek = function (forDay) {
            var deltaStart = this.dateAdapter.getFirstDayOfWeek() -
                this.dateAdapter.getDayOfWeek(forDay);
            var start = this.dateAdapter.addCalendarDays(forDay, deltaStart);
            var end = this.dateAdapter.addCalendarDays(start, 6);
            return [start, end];
        };
        /**
         * Calculate start and end for month
         * @param forDay
         * @private
         */
        DateRangePanelComponent.prototype.calculateMonth = function (forDay) {
            var year = this.dateAdapter.getYear(forDay);
            var month = this.dateAdapter.getMonth(forDay);
            var start = this.dateAdapter.createDate(year, month, 1);
            var end = this.dateAdapter.addCalendarDays(start, this.dateAdapter.getNumDaysInMonth(forDay) - 1);
            return [start, end];
        };
        Object.defineProperty(DateRangePanelComponent.prototype, "today", {
            /**
             * Get Today
             * @private
             */
            get: function () {
                var today = this.dateAdapter.today();
                if (today === null) {
                    throw new Error('date creation failed');
                }
                return today;
            },
            enumerable: false,
            configurable: true
        });
        return DateRangePanelComponent;
    }());
    DateRangePanelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-date-range-panel',
                    template: "\n<mat-card class=\"pop-datepicker-panel\" >\n  <button\n    class=\"date-preset-button\"\n    [ngClass]=\"{'selected': item === selected}\"\n    *ngFor=\"let item of presets\"\n    mat-button\n    color=\"accent\"\n    (click)=\"selectDatePreset(item)\"\n  >\n    {{ item }}\n  </button>\n</mat-card>\n",
                    styles: [":host{position:absolute;width:200px;left:-200px}.pop-datepicker-panel{position:relative;top:-1px;border-left:1px solid #d3d3d3;border-bottom:1px solid #d3d3d3;border-top:1px solid #d3d3d3;border-radius:0;padding:var(--gap-s);height:405px}.date-preset-button,.selected{width:100%;text-align:left}.selected{background:var(--background-side-menu)}"]
                },] }
    ];
    DateRangePanelComponent.ctorParameters = function () { return [
        { type: core.DateAdapter },
        { type: datepicker.MatDateRangePicker },
        { type: datepicker.MatCalendar }
    ]; };

    var PopDatePickerComponent = /** @class */ (function (_super) {
        __extends(PopDatePickerComponent, _super);
        function PopDatePickerComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.config = new DatePickerConfig();
            _this.name = 'PopDateComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.config.max = null;
                    _this.config.triggerOnChange = function (value, forcePatch) {
                        if (forcePatch === void 0) { forcePatch = false; }
                        _this.dom.setTimeout("config-trigger-change", function () {
                            // this.cdr.detectChanges();
                            _this.onChange(value, forcePatch);
                        }, 0);
                    };
                    _this.config.clearMessage = function () {
                        _this.dom.setTimeout("config-clear-message", function () {
                            _this.config.message = '';
                            _this.config.control.markAsPristine();
                            _this.config.control.markAsUntouched();
                            // this.cdr.detectChanges();
                        }, 0);
                    };
                    // this.config.helpText = 'sdfsdafsadf';
                    _this._setFilter();
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopDatePickerComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * On Change event
         * @param value
         * @param force
         */
        PopDatePickerComponent.prototype.onChange = function (value, force) {
            if (force === void 0) { force = false; }
            if (value) {
                value = exports.PopDate.toIso(value);
            }
            else {
                value = null;
            }
            if (IsObject(this.config, ['control'])) {
                this.log.info("onChange", value);
                var control = this.config.control;
                if (typeof value !== 'undefined') {
                    control.setValue(value);
                    control.markAsDirty();
                    control.updateValueAndValidity();
                }
                if (this._isChangeValid()) {
                    value = typeof value !== 'undefined' ? value : this.config.control.value;
                    value = this._applyTransformation(value);
                    if (this.config.patch && (this.config.patch.path || this.config.facade)) {
                        this._onPatch(value, force);
                    }
                    else {
                        this.onBubbleEvent('onChange');
                    }
                }
                else {
                    // console.log( 'invalid change', this.config.control.value );
                }
            }
        };
        PopDatePickerComponent.prototype.onResetForm = function () {
            var _this = this;
            this.dom.setTimeout("reset-form", function () {
                _this.config.control.setValue(null, { emitEvent: true });
                _this.config.control.updateValueAndValidity();
                _this.onChange();
            }, 0);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopDatePickerComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopDatePickerComponent.prototype._setFilter = function () {
            if (typeof this.config.filterPredicate === 'string') {
                switch (String(this.config.filterPredicate).toLowerCase()) {
                    case 'weekday':
                        this.config.filterPredicate = function (d) {
                            var day = d.getDay();
                            // Prevent Saturday and Sunday from being selected.
                            return day !== 0 && day !== 6;
                        };
                        break;
                    case 'weekday':
                        this.config.filterPredicate = function (d) {
                            var day = d.getDay();
                            // Prevent Saturday and Sunday from being selected.
                            return day >= 1 && day <= 5;
                        };
                        break;
                    case 'monday':
                        this.config.filterPredicate = function (d) {
                            var day = d.getDay();
                            // monday
                            return day === 1;
                        };
                        break;
                    default:
                        this.config.filterPredicate = null;
                        break;
                }
            }
        };
        return PopDatePickerComponent;
    }(PopFieldItemComponent));
    PopDatePickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-datepicker',
                    template: "<div class=\"import-field-item-container pop-date-container\">\n\n  <mat-form-field appearance=\"outline\" color=\"accent\" class=\"import-field-item-container-expansion\">\n    <mat-label *ngIf=\"config.label\">{{config.label}}</mat-label>\n    <div *ngIf=\"config.tooltip && config.showTooltip\" class=\"field-tooltip-msg\" [innerHTML]=config.tooltip></div>\n    <input\n      type=\"text\"\n      matTooltipClass=\"input-tooltip-background\"\n      matInput\n      [matDatepicker]=\"datePicker\"\n      [readonly]=\"config.disabled\"\n      [min]=config.min\n      [max]=config.max\n      [matDatepickerFilter]=config.filterPredicate\n      [formControl]=config.control\n      (blur)=\"config.showTooltip=false; onBlur();\"\n      (focus)=\"config.showTooltip=true; onFocus();\"\n      (dateChange)=\"onChange($event.value);\"\n      placeholder=\"\"\n    >\n  </mat-form-field>\n  <mat-datepicker #datePicker></mat-datepicker>\n  <mat-icon *ngIf=\"!config.disabled\" class=\"sw-pointer date-clear-icon\" (click)=\"onResetForm();\">clear</mat-icon>\n  <mat-datepicker-toggle class=\"date-toggle-icon\" [for]=\"datePicker\"></mat-datepicker-toggle>\n  <lib-pop-field-item-helper class=\"date-helper-icon\" [hidden]=\"!config.helpText\" [helpText]=config.helpText></lib-pop-field-item-helper>\n\n  <div class=\"date-feedback-container\">\n    <lib-pop-field-item-error class=\"date-error-icon\" [hidden]=\"!config.message\" [message]=\"config.message\"></lib-pop-field-item-error>\n  </div>\n  <lib-pop-field-item-loader [show]=\"config.patch.displayIndicator && config.patch.running\"></lib-pop-field-item-loader>\n</div>\n",
                    styles: [".pop-date-container{position:relative;display:block;padding:0;margin:10px 0}.pop-date-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{display:none}.pop-date-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-wrapper{padding-bottom:0;margin:0!important}.pop-date-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-infix{padding:8px 20px 13px 0}.date-feedback-container{position:absolute;top:5px;right:5px;width:20px;bottom:5px;display:flex;padding-top:2px;flex-flow:row;align-items:center;justify-content:center;pointer-events:none}.date-clear-icon{right:42px;top:13px;font-size:1em}.date-clear-icon,.date-toggle-icon{position:absolute!important;width:25px;height:25px;z-index:1}.date-toggle-icon{right:20px;top:8px}.date-toggle-icon ::ng-deep .mat-icon-button{line-height:25px!important}.date-toggle-icon ::ng-deep button{width:25px;height:25px}.date-toggle-icon ::ng-deep button mat-icon{font-size:.9em}.date-error-icon{position:relative;pointer-events:all;left:2px}.date-error-icon ::ng-deep .mat-icon{font-size:1em!important}.date-helper-icon{position:absolute!important;width:25px;height:25px;right:67px;pointer-events:all;font-size:.8em;top:11px}.date-helper-icon ::ng-deep .mat-icon{font-size:.9em!important}.date-ajax-spinner{position:absolute;z-index:1}.field-tooltip-msg{position:absolute;display:block;bottom:50px;width:100%;right:-10px;left:-10px;background:#3d72ea!important;border-radius:.25em;padding:.75em;z-index:2;color:#fff;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;overflow:hidden;text-align:center}:host ::ng-deep .mat-datepicker-content{position:relative;left:150px!important;border-radius:0!important;height:425px;background:var(--background-base);border:1px solid #d3d3d3!important}"]
                },] }
    ];
    PopDatePickerComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopDatePickerComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    // Angular
    var options = undefined;
    var PopFieldItemModule = /** @class */ (function () {
        function PopFieldItemModule() {
        }
        return PopFieldItemModule;
    }());
    PopFieldItemModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        PopIndicatorsModule,
                        MaterialModule,
                        forms.FormsModule,
                        ngxMask.NgxMaskModule.forRoot(options)
                    ],
                    declarations: [
                        PopFieldItemLoaderComponent,
                        PopFieldItemHelperComponent,
                        PopFieldItemErrorComponent,
                        PopFieldItemComponent,
                        PopButtonComponent,
                        PopInputComponent,
                        PopNumberComponent,
                        PopSelectComponent,
                        PopCheckboxComponent,
                        PopSelectMultiComponent,
                        PopSelectFilterComponent,
                        PopSelectListComponent,
                        PopSelectModalComponent,
                        PopSelectModalDialogComponent,
                        PopRadioComponent,
                        PopSwitchComponent,
                        PopTextareaComponent,
                        PopLabelComponent,
                        PopDateComponent,
                        PopDateRangeComponent,
                        DateRangeExpansionItemsComponent,
                        ExpansionItemsComponent,
                        CustomPanelComponent,
                        DateRangePanelComponent,
                        PopTimeComponent,
                        ClickOutsideDirective,
                        PopButtonComponent,
                        PopMinMaxComponent,
                        PopSliderComponent,
                        PopTextComponent,
                        PopDatePickerComponent
                    ],
                    exports: [
                        PopFieldItemLoaderComponent,
                        PopFieldItemHelperComponent,
                        PopFieldItemErrorComponent,
                        PopFieldItemComponent,
                        PopButtonComponent,
                        PopInputComponent,
                        PopNumberComponent,
                        PopSelectComponent,
                        PopSelectMultiComponent,
                        PopSelectFilterComponent,
                        PopSelectListComponent,
                        PopSelectModalComponent,
                        PopSelectModalDialogComponent,
                        PopCheckboxComponent,
                        PopRadioComponent,
                        PopSwitchComponent,
                        PopTextareaComponent,
                        PopDateComponent,
                        PopDateRangeComponent,
                        DateRangeExpansionItemsComponent,
                        ExpansionItemsComponent,
                        DateRangePanelComponent,
                        CustomPanelComponent,
                        PopTimeComponent,
                        PopLabelComponent,
                        PopButtonComponent,
                        PopMinMaxComponent,
                        PopSliderComponent,
                        PopTextComponent,
                        PopDatePickerComponent
                    ],
                    providers: [],
                },] }
    ];

    var PopCacFilterComponent = /** @class */ (function (_super) {
        __extends(PopCacFilterComponent, _super);
        function PopCacFilterComponent(el, APP_GLOBAL) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.hidden = false;
            _this.name = 'PopCacFilterComponent';
            // this represents the data to be filtered and given to the filter bar view.
            _this.srv = {
                filter: exports.ServiceInjector.get(PopCacFilterBarService),
            };
            _this.asset = {
                filter: undefined // the current filter applied to all columns, this is the (finished product) that we want to be stored in the base service
            };
            _this.ui = {
                config: undefined,
                entities: []
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.ui.config = _this.srv.filter.getConfig();
                    if (!(IsObject(_this.ui.config)))
                        _this.ui.config = {};
                    _this.srv.filter.register(el);
                    if (IsObject(exports.PopBusiness, ['id']) && _this.APP_GLOBAL.isFilterBar()) {
                        if (_this.ui.config.active) {
                            _this.asset.filter = _this.srv.filter.getFilter();
                            _this.srv.filter.setActive(!_this.hidden);
                        }
                    }
                    else {
                        _this.hidden = true;
                        _this.ui.config.active = false;
                        // this.srv.filter.setFilter({});
                    }
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopCacFilterComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Event Emitter
         */
        PopCacFilterComponent.prototype.onBubbleEvent = function (event) {
            var _this = this;
            if (event.type === 'filter') {
                switch (event.name) {
                    case 'apply':
                        this.srv.filter.setFilter(event.data);
                        break;
                    case 'clear':
                        this.srv.filter.setFilter({});
                        break;
                    case 'state':
                        if (event.model === 'open') {
                            SetSessionSiteVar("Business." + exports.PopBusiness.id + ".Filter.open", event.data);
                            this.dom.setTimeout("set-filter-height", function () {
                                var height = _this.srv.filter.getElHeight();
                                if (height) {
                                    SetSessionSiteVar("Business." + exports.PopBusiness.id + ".Filter.height", height);
                                }
                            }, 0);
                        }
                        break;
                    default:
                        break;
                }
            }
            this.srv.filter.onChange(event);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopCacFilterComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopCacFilterComponent;
    }(PopExtendComponent));
    PopCacFilterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-cac-filter',
                    template: "\n    <div class=\"pop-client-filter-container\">\n      <lib-pop-cac-filter-view *ngIf=\"ui.config?.active\" (events)=\"onBubbleEvent($event)\"></lib-pop-cac-filter-view>\n    </div>\n  ",
                    styles: ["\n    .pop-client-filter-container {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      box-sizing: border-box;\n      /*align-items: center;*/\n      padding: 0;\n    }\n  "]
                },] }
    ];
    PopCacFilterComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] }
    ]; };
    PopCacFilterComponent.propDecorators = {
        hidden: [{ type: i0.HostBinding, args: ['class.sw-hidden',] }, { type: i0.Input }],
        config: [{ type: i0.Input }]
    };

    var PopCacFilterViewComponent = /** @class */ (function (_super) {
        __extends(PopCacFilterViewComponent, _super);
        function PopCacFilterViewComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.name = 'PopCacFilterViewComponent';
            _this.ui = {
                config: undefined,
                entities: undefined,
                map: {}
            };
            _this.asset = {
                filter: undefined // the current filter applied to all columns, this is the (finished product) that we want to be stored in the base service
            };
            _this.srv = {
                filter: exports.ServiceInjector.get(PopCacFilterBarService),
                pipe: exports.ServiceInjector.get(PopPipeService),
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.asset.filter = _this.srv.filter.getFilter();
                    _this.ui.entities = _this.srv.filter.getEntities();
                    _this.ui.map.entities = ArrayMapSetter(_this.ui.entities, 'internal_name');
                    _this.ui.config = _this.srv.filter.getConfig();
                    _this._setDefaultState();
                    _this._setEntityConfig();
                    _this.dom.setSubscriber("data-reset", _this.srv.filter.event.data.subscribe(function (caller) {
                        _this.dom.setTimeout("data-reset", function () {
                            if (IsArray(_this.ui.entities, true)) {
                                var first_1 = _this.ui.entities[0];
                                first_1.options.map(function (option) {
                                    first_1.display[option.id] = true;
                                });
                                _this._checkVisibleForAll(first_1);
                                _this._updateEntitySelectedText(first_1);
                                _this._onEntityFeedUpdate(first_1);
                            }
                            _this.ui.entities.map(function (entity, index) {
                                entity.totalOptions = entity.options.length;
                                entity.filter = Object.keys(entity.selected).filter(function (id) { return entity.selected[id]; });
                                entity.totalSelected = entity.filter.length;
                            });
                            _this.onUpdateOptionsDisplay(0);
                        }, 0);
                    }));
                    _this.dom.setTimeout('init', function () {
                        _this.events.emit({ source: _this.name, type: 'filter', name: 'init', data: _this.asset.filter });
                    });
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopCacFilterViewComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Trigger an entity column to apply search
         * @param entity
         */
        PopCacFilterViewComponent.prototype.onApplySearch = function (entity) {
            var _this = this;
            if (this.dom.state.searchDelay)
                clearTimeout(this.dom.state.searchDelay);
            this.dom.setTimeout("search-delay", function () {
                entity.options.map(function (option) {
                    entity.hidden[option.id] = ObjectContainsTagSearch(option, entity.search) ? false : true;
                });
                _this._onEntityFeedUpdate(entity);
                _this._checkVisibleForAll(entity);
            }, 200);
        };
        /**
         * Checks/Unchecks all the options within an entity column
         * @param entity
         */
        PopCacFilterViewComponent.prototype.onCheckAll = function (entity) {
            if (IsObject(entity, true) && !entity.single) {
                entity.options.filter(function (option) { return !entity.hidden[option.id]; }).map(function (option) {
                    entity.selected[option.id] = +entity.display[option.id] ? entity.checkAll : false;
                });
                entity.filter = Object.keys(entity.selected).filter(function (id) { return entity.selected[id]; });
                entity.totalSelected = entity.filter.length;
                entity.allSelected = entity.totalSelected === entity.totalAvailable;
                this._checkVisibleForAll(entity);
                this._updateEntitySelectedText(entity);
                this.onUpdateOptionsDisplay(this.ui.map.entities[entity.internal_name]);
                this.dom.state.filterNeedsApplied = true;
            }
        };
        /**
         * Handle when an option selection has changed
         * Detects progmatic changes
         * @param entity
         */
        PopCacFilterViewComponent.prototype.onCheckboxChange = function (event, entity, id) {
            var _this = this;
            event.preventDefault();
            entity.selected[id] = !entity.selected[id];
            this.dom.setTimeout("update-" + entity.internal_name + "-column", function () {
                entity.filter = Object.keys(entity.selected).filter(function (key) { return entity.selected[key]; });
                entity.totalSelected = entity.filter.length;
                entity.allSelected = entity.totalSelected === entity.totalAvailable;
                _this._checkVisibleForAll(entity);
                _this._updateEntitySelectedText(entity);
                _this.onUpdateOptionsDisplay(_this.ui.map.entities[entity.internal_name]);
                _this.dom.state.filterNeedsApplied = true;
            }, 100);
        };
        /**
         * Handle when an option selection has changed
         * Detects manual changes
         * @param entity
         */
        PopCacFilterViewComponent.prototype.onRadioChange = function (event, entity, id) {
            event.preventDefault();
            if (entity.single) {
                entity.checkAll = false;
                entity.allSelected = false;
                entity.indeterminate = false;
                entity.filter = [String(id)];
                entity.totalSelected = entity.filter.length;
                entity.options.map(function (option) {
                    if (+option.id !== +id) {
                        entity.selected[option.id] = false;
                    }
                    else {
                        entity.selected[option.id] = true;
                        entity.selectedText = option.name;
                    }
                });
                this.onUpdateOptionsDisplay(this.ui.map.entities[entity.internal_name]);
                this.dom.state.filterNeedsApplied = true;
            }
        };
        /**
         * The menu bar has been opened or closed
         * @param entity
         */
        PopCacFilterViewComponent.prototype.onToggleOpen = function (entity) {
            var _this = this;
            if (entity === void 0) { entity = null; }
            this.dom.state.open = !this.dom.state.open;
            if (this.dom.state.open && entity) {
                setTimeout(function () {
                    _this.el.nativeElement.querySelector("#" + entity + "-search-input").focus();
                });
            }
            this.events.emit({ source: this.name, type: 'filter', name: 'state', model: 'open', data: this.dom.state.open });
        };
        /**
         * Event handler for the click of the reset button
         * @returns void
         */
        PopCacFilterViewComponent.prototype.resetFilter = function () {
            var _this = this;
            this.asset.filter = {};
            this.ui.entities.map(function (entity, index) {
                if (entity.single) {
                    _this._setSingleEntityConfig(entity, index);
                }
                else {
                    _this._setMultipleEntityConfig(entity, index);
                }
            });
            this.asset.filter = this._getCurrentFilter();
            this.dom.state.filterNeedsApplied = false;
            this.dom.state.currentFilterRelevant = false;
            this.events.emit({ source: this.name, type: 'filter', name: 'clear', data: this.asset.filter });
        };
        /**
         * Emits the apply filter event, called
         * when the apply filter button is clicked.
         * @returns void
         */
        PopCacFilterViewComponent.prototype.applyFilter = function () {
            if (!this.ui.config.invalid) {
                this.asset.filter = this._getCurrentFilter();
                this.dom.state.currentFilterRelevant = this._isCurrentFilterRelevant();
                this.dom.state.filterNeedsApplied = false;
                this.events.emit({ source: this.name, type: 'filter', name: 'apply', data: this.asset.filter });
                // close on apply ?
                if (this.ui.config.display !== 'static') {
                    this.dom.state.open = false;
                    this.events.emit({ source: this.name, type: 'filter', name: 'state', model: 'open', data: this.dom.state.open });
                }
            }
        };
        PopCacFilterViewComponent.prototype.trackByFn = function (index, item) {
            if (!item)
                return null;
            return item.id;
        };
        PopCacFilterViewComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Determne if all the visible options are either all checked or unchecked
         * @param entity
         * @private
         */
        PopCacFilterViewComponent.prototype._checkForIndeterminate = function (entity) {
            var selectedVisible = entity.options.filter(function (option) { return !entity.hidden[option.id] && entity.display[option.id] && entity.selected[option.id]; }).length;
            entity.indeterminate = selectedVisible && selectedVisible < entity.totalVisible ? true : false;
        };
        /**
         * Trigger the column list to update with filtered options
         * @param entity
         */
        PopCacFilterViewComponent.prototype._onEntityFeedUpdate = function (entity) {
            var list = entity.options.filter(function (option) { return entity.display[option.id] && !entity.hidden[option.id]; });
            if (!entity.allSelected) {
                list.sort(function (a, b) {
                    if (entity.selected[a.id] && !entity.selected[b.id])
                        return -1;
                    if (!entity.selected[a.id] && entity.selected[b.id])
                        return 1;
                });
            }
            entity.feed.next(list);
        };
        /**
         * Updates the select configurations based on the filter bar configurations
         * @returns void
         */
        PopCacFilterViewComponent.prototype._setEntityConfig = function () {
            var _this = this;
            this.dom.state.loading = true;
            this.ui.entities.map(function (entity, index) {
                if (entity.single) {
                    _this._setSingleEntityConfig(entity, index);
                }
                else {
                    _this._setMultipleEntityConfig(entity, index);
                }
                entity.totalAvailable = entity.options.length;
                entity.totalOptions = entity.options.length;
                entity.totalVisible = Object.keys(entity.display).filter(function (id) { return entity.display[id] && !entity.hidden[id]; }).length;
            });
            this.dom.state.filterNeedsApplied = false;
            this.dom.state.currentFilterRelevant = this._isCurrentFilterRelevant();
            if (!this.dom.state.currentFilterRelevant) {
                this.srv.filter.clearFilters();
            }
        };
        /**
         * Configure a radio enity config
         * @param entity
         * @param index
         * @private
         */
        PopCacFilterViewComponent.prototype._setSingleEntityConfig = function (entity, index) {
            var first = entity.options[0];
            entity.checkAll = false;
            entity.indeterminate = false;
            if (IsArray(this.asset.filter[entity.internal_name], true)) {
                var asset = this.srv.filter.getAsset(entity.internal_name, +this.asset.filter[entity.internal_name][0]);
                first = { id: this.asset.filter[entity.internal_name][0], name: IsObject(asset, ['name']) ? asset.name : 'Name' };
            }
            entity.filter = [first.id];
            entity.selectedText = first.name;
            entity.totalSelected = 1;
            entity.hidden = {};
            if (index === 0) {
                entity.options.map(function (option) {
                    entity.display[option.id] = true;
                    entity.hidden[option.id] = false;
                    entity.selected[option.id] = false;
                });
                entity.selected[first.id] = true;
            }
            else {
                var prevIndex = +index - 1;
                var prevEntity_1 = this.ui.entities[prevIndex];
                entity.options.map(function (option) {
                    entity.display[option.id] = prevEntity_1.selected[option.id];
                    entity.hidden[option.id] = false;
                    entity.selected[option.id] = false;
                });
                entity.selected[first.id] = true;
            }
            this._onEntityFeedUpdate(entity);
        };
        /**
         * Configure a multiple checkbox entity config
         * @param entity
         * @param index
         * @private
         */
        PopCacFilterViewComponent.prototype._setMultipleEntityConfig = function (entity, index) {
            var existingFilter = IsArray(this.asset.filter[entity.internal_name], true);
            entity.filter = existingFilter ? JsonCopy(this.asset.filter[entity.internal_name]) : [];
            // console.log('_setMultipleEntityConfig', entity.name, index, entity.filter.length);
            if (entity.filter.length) {
                entity.checkAll = false;
                entity.indeterminate = true;
            }
            else {
                entity.checkAll = true;
                entity.indeterminate = false;
            }
            entity.totalSelected = entity.checkAll ? entity.options.length : entity.filter.length;
            if (index === 0) {
                entity.options.map(function (option) {
                    entity.selected[option.id] = entity.checkAll ? true : entity.filter.includes(String(option.id));
                    entity.display[option.id] = true;
                    entity.hidden[option.id] = false;
                });
                entity.totalAvailable = entity.options.length;
                entity.totalSelected = existingFilter ? entity.filter.length : entity.options.length;
                entity.allSelected = entity.totalSelected === entity.totalAvailable;
                this._checkVisibleForAll(entity);
                this._updateEntitySelectedText(entity);
            }
            else {
                var prevIndex = +index - 1;
                var prevEntity_2 = this.ui.entities[prevIndex];
                entity.options.map(function (option) {
                    entity.selected[option.id] = entity.checkAll ? true : prevEntity_2.filter.includes(String(option[prevEntity_2.child_link]));
                    entity.display[option.id] = prevEntity_2.selected[option[prevEntity_2.child_link]];
                    entity.hidden[option.id] = false;
                });
                entity.totalAvailable = entity.options.length;
                entity.totalSelected = existingFilter ? entity.filter.length : entity.options.length;
                entity.allSelected = entity.totalSelected === entity.totalAvailable;
                this._checkVisibleForAll(entity);
                this._updateEntitySelectedText(entity);
            }
            this._onEntityFeedUpdate(entity);
        };
        /**
         * Cascade changes to all columns of the right of the column that made changes
         * @param entityName
         */
        PopCacFilterViewComponent.prototype.onUpdateOptionsDisplay = function (changedIndex) {
            var _this = this;
            this.dom.setTimeout("options-update-" + changedIndex, function () {
                var invalid = false;
                _this.ui.entities.map(function (entity, index) {
                    var inView = _this.ui.config.view.includes(entity.internal_name);
                    if (!entity.totalSelected && inView)
                        invalid = true;
                    if (index > changedIndex) {
                        var prevIndex = +index - 1;
                        var prevEntity_3 = _this.ui.entities[prevIndex];
                        entity.options.map(function (option) {
                            entity.display[option.id] = prevEntity_3.allSelected ? true : prevEntity_3.filter.includes(String(option[prevEntity_3.child_link]));
                            if (!entity.display[option.id]) {
                                entity.selected[option.id] = false;
                            }
                        });
                        _this._onEntityFeedUpdate(entity);
                        if (!(inView)) {
                            entity.options.filter(function (option) { return !entity.hidden[option.id]; }).map(function (option) {
                                entity.selected[option.id] = +entity.display[option.id] ? true : false;
                            });
                        }
                        entity.filter = Object.keys(entity.selected).filter(function (id) { return entity.selected[id]; });
                        entity.totalSelected = entity.filter.length;
                        if (!entity.totalSelected && _this.ui.config.view.includes(entity.internal_name))
                            invalid = true;
                        _this._checkVisibleForAll(entity);
                        _this._updateEntitySelectedText(entity);
                    }
                });
                _this.ui.config.invalid = invalid;
            }, 50);
        };
        PopCacFilterViewComponent.prototype._setDefaultState = function () {
            if (this.ui.config.display === 'static')
                this.dom.state.open = true;
            this.dom.state = Object.assign(Object.assign({}, this.dom.state), {
                differentEntities: false,
                searchDelay: undefined,
                loading: false,
                open: false,
                loaded: false,
                currentFilterRelevant: false,
                filterNeedsApplied: false, // flags when user needs to apply changes to the filter
            });
            this.dom.state.open = IsObject(exports.PopBusiness, ['id']) ? GetSessionSiteVar("Business." + exports.PopBusiness.id + ".Filter.open", false) : false;
        };
        /**
         * Update the text appears in the header of each entity column
         * @param entity
         */
        PopCacFilterViewComponent.prototype._updateEntitySelectedText = function (entity) {
            entity.totalText = entity.totalAvailable + " " + entity.name + " available.";
            if (this.ui.map.entities[entity.internal_name] > 0) {
                var index = this.ui.map.entities[entity.internal_name];
                var prevIndex = index - 1;
                while (prevIndex > 0) {
                    if (this.ui.entities[prevIndex].indeterminate) {
                        break;
                    }
                    else {
                        prevIndex--;
                    }
                }
                if (entity.totalAvailable < entity.totalOptions) {
                    entity.totalText += "  " + (entity.totalOptions - entity.totalAvailable) + " filtered out by " + this.ui.entities[prevIndex].name + ".";
                }
            }
            entity.allSelected = entity.totalSelected === entity.totalAvailable;
            if (entity.allSelected || !entity.totalSelected) {
                entity.selectedText = entity.allSelected ? 'All' : 'None';
            }
            else {
                var selectedOptions = entity.options.filter(function (option) {
                    return entity.display[option.id] && entity.selected[option.id];
                }).map(function (option) {
                    return option.name;
                });
                entity.selectedText = selectedOptions.length > 4 ? selectedOptions.slice(0, 4).join(', ') + (", ... " + (selectedOptions.length - 4) + " more") : selectedOptions.join(', ');
            }
        };
        /**
         * Determine if all the visible options in an entity column have been selected
         * @param entity
         */
        PopCacFilterViewComponent.prototype._checkVisibleForAll = function (entity) {
            if (IsObject(entity, true) && !entity.single) {
                var all_1 = true;
                var visible = Object.keys(entity.display).filter(function (id) { return entity.display[id] && !entity.hidden[id]; });
                entity.totalVisible = visible.length;
                if (visible.length) {
                    visible.some(function (id) {
                        if (!entity.selected[id]) {
                            all_1 = false;
                            return true;
                        }
                    });
                }
                else {
                    all_1 = false;
                }
                entity.checkAll = all_1;
                this._checkForIndeterminate(entity);
            }
        };
        /**
         * Create a payload for what the filter has generated
         */
        PopCacFilterViewComponent.prototype._getCurrentFilter = function () {
            var _this = this;
            var currentFilter = {};
            this.ui.entities.map(function (entity) {
                if (!entity.allSelected) {
                    if (entity.filter.length) {
                        currentFilter[entity.internal_name] = entity.filter.filter(function (id) { return +id > 0; });
                        console.log(entity.internal_name, entity.filter);
                        _this._onEntityFeedUpdate(entity);
                    }
                }
            });
            console.log('currentFilter', currentFilter);
            return currentFilter;
        };
        /**
         * Determine which entity columns are having a filtering effect
         */
        PopCacFilterViewComponent.prototype._isCurrentFilterRelevant = function () {
            var _this = this;
            var relevant = false;
            Object.keys(this.asset.filter).some(function (internal_name) {
                if (Array.isArray(_this.asset.filter[internal_name]) && _this.asset.filter[internal_name].length) {
                    if (internal_name in _this.ui.map.entities && _this.ui.entities[_this.ui.map.entities[internal_name]].totalAvailable) {
                        if (_this.asset.filter[internal_name].length < _this.ui.entities[_this.ui.map.entities[internal_name]].totalAvailable) {
                            relevant = true;
                            return true;
                        }
                    }
                }
            });
            return relevant;
        };
        return PopCacFilterViewComponent;
    }(PopExtendComponent));
    PopCacFilterViewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-cac-filter-view',
                    template: "<div class=\"cac-filter-container theme-background-base\" *ngIf=\"ui.config\" [ngClass]=\"{'sw-hidden': !ui.config.active, 'cac-filter-container-open': dom.state.open && ui.config.display === 'default'}\">\n  <div class=\"cac-filter-loader\">\n    <mat-progress-bar *ngIf=\"ui.config.loader\" mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n\n  <div class=\"cac-filter-header\" [ngClass]=\"{'sw-hidden':dom.state.loading}\">\n\n    <div class=\"cac-filter-header-column theme-background-base\" [style.minWidth.px]=\"125\" [style.maxWidth.px]=\"125\">\n      <div class=\"cac-filter-label-text\">\n        FILTERS\n      </div>\n      <mat-icon class=\"cac-filter-label-icon sw-pointer\" [ngClass]=\"{'sw-hidden':dom.state.open}\" (click)=\"onToggleOpen();\">\n        arrow_right\n      </mat-icon>\n      <mat-icon class=\"cac-filter-label-icon sw-pointer\" [ngClass]=\"{'sw-hidden':!dom.state.open}\" (click)=\"onToggleOpen();\">\n        arrow_drop_down\n      </mat-icon>\n    </div>\n    <div class=\"cac-filter-header-column theme-background-base\" *ngFor=\"let entity of ui.entities\" [ngClass]=\"{'sw-hidden': !entity.visible}\">\n      <div class=\"cac-select-filter-button\">\n        <div class=\"cac-select-filter-button-bar\" [ngClass]=\"{'filter-selected':entity.indeterminate}\"></div>\n        <mat-form-field appearance=\"none\">\n          <mat-label>{{entity.name}}</mat-label>\n          <input\n            matInput\n            [matTooltip]=\"entity.selectedText\"\n            [readonly]=true\n            type=\"text\"\n            [(ngModel)]=\"entity.selectedText\"\n          >\n          <div class=\"sw-pointer cac-select-filter-icon\" matSuffix matTooltipPosition=\"below\" [matTooltipShowDelay]=\"500\" [matTooltip]=\"entity.totalText\">\n            <mat-icon class=\"sw-pointer\" (click)=\"onToggleOpen(entity.internal_name);\">\n              filter_list\n            </mat-icon>\n          </div>\n        </mat-form-field>\n      </div>\n    </div>\n    <div class=\"cac-filter-header-menu\" [style.minWidth.px]=\"125\" [style.maxWidth.px]=\"125\">\n      <div class=\"cac-filter-header-row\">\n        <div class=\"cac-filter-action-text\" [ngClass]=\"{'sw-disabled': ui.config.invalid, 'sw-pointer': !ui.config.invalid}\" *ngIf=\"dom.state.filterNeedsApplied\" (click)=\"applyFilter();\">\n          APPLY\n        </div>\n        <div class=\"cac-filter-action-text sw-pointer\" *ngIf=\"dom.state.currentFilterRelevant && !dom.state.filterNeedsApplied\" (click)=\"resetFilter();\">\n          RESET\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Toggle Container-->\n  <div class=\"cac-filter-body\" *ngIf=\"dom.state.open\" [@slideInOut] [ngClass]=\"{'cac-filter-body-float theme-background-base': ui.config.display === 'float'}\">\n    <div class=\"cac-filter-header-column\" [style.border]=\"0\" [style.minWidth.px]=\"125\" [style.maxWidth.px]=\"125\">\n      <!--Filler to reserve space to match headers-->\n    </div>\n    <div class=\"cac-filter-body-column\" *ngFor=\"let entity of ui.entities\" [ngClass]=\"{'sw-hidden': !entity.visible}\">\n\n      <div class=\"cac-filter-body-column-header\">\n\n        <div class=\"cac-filter-option-select-container\" *ngIf=\"!entity.single\" [style.marginLeft.px]=\"3\">\n\n          <mat-checkbox class=\"cac-filter-check-all\" [(ngModel)]=\"entity.checkAll\"\n                        [style.marginRight.px]=\"1\"\n                        [disabled]=!entity.totalVisible\n                        [indeterminate]=\"entity.indeterminate\"\n                        (change)=\"onCheckAll(entity);\">\n          </mat-checkbox>\n        </div>\n\n        <mat-form-field class=\"sw-search\" appearance=\"none\" color=\"accent\">\n          <a matPrefix>\n            <mat-icon>search</mat-icon>\n          </a>\n          <input id=\"{{entity.internal_name}}-search-input\" matInput [(ngModel)]=\"entity.search\" (keyup)=\"onApplySearch(entity)\">\n        </mat-form-field>\n        <mat-icon class=\"sw-pointer cac-filter-clear-icon\"\n                  [ngClass]=\"{'sw-transparent': !entity.search }\"\n                  matTooltip=\"Clear Search\"\n                  (click)=\"onApplySearch(entity); entity.search = '';\"\n        >\n          close\n        </mat-icon>\n      </div>\n      <mat-divider></mat-divider>\n      <cdk-virtual-scroll-viewport [@fadeInOut] itemSize=\"25\" minBufferPx=\"125\" maxBufferPx=\"250\" class=\"cac-filter-body-column-contents\">\n        <div class=\"cac-filter-body-column-row pop-checkbox-container checkbox-has-label cac-filter-option-hover\" *cdkVirtualFor=\"let option of entity.feed | async ; trackBy: trackByFn\"\n        >\n          <div class=\"cac-filter-option-select-container\">\n            <mat-checkbox\n              [ngClass]=\"{'sw-hidden':entity.single}\"\n              [(ngModel)]=\"entity.selected[option.id]\"\n              [labelPosition]=\"'before'\"\n              (click)=\"onCheckboxChange($event, entity, option.id)\"\n            ></mat-checkbox>\n            <div class=\"cac-filter-option-radio\" [ngClass]=\"{'sw-hidden':!entity.single}\">\n              <mat-icon class=\"sw-pointer\" [ngClass]=\"{'sw-hidden': entity.selected[option.id]}\" (click)=\"onRadioChange($event, entity, option.id)\">\n                radio_button_unchecked\n              </mat-icon>\n              <mat-icon class=\"sw-pointer cac-filter-option-checked\" [ngClass]=\"{'sw-hidden': !entity.selected[option.id]}\" (click)=\"onRadioChange($event, entity, option.id)\">\n                radio_button_checked\n              </mat-icon>\n            </div>\n          </div>\n          <div class=\"cac-filter-option-select-text\" *ngIf=\"entity.single\" (click)=\"onRadioChange($event, entity, option.id)\">\n            {{option.name}}\n            <small class=\"cac-filter-option-select-id\">{{option.id}}</small>\n          </div>\n          <div class=\"cac-filter-option-select-text\" *ngIf=\"!entity.single\" (click)=\"onCheckboxChange($event, entity, option.id);\">\n            {{option.name}}\n            <small class=\"cac-filter-option-select-id\">{{option.id}}</small>\n          </div>\n\n        </div>\n      </cdk-virtual-scroll-viewport>\n\n    </div>\n    <div class=\"cac-filter-header-menu\" [style.minWidth.px]=\"125\" [style.maxWidth.px]=\"125\">\n      <!--Filler to reserve space to match headers-->\n    </div>\n  </div>\n</div>\n",
                    animations: [slideInOut, fadeInOut],
                    styles: [".cac-filter-container{display:flex;flex-direction:column;justify-content:stretch;align-items:stretch;border:1px solid var(--border);min-height:35px;padding:5px 10px 13px;margin:30px 30px 5px;border-radius:3px;transition:height .5s}.cac-filter-container ::ng-deep .cac-filter-option-select-container .mat-checkbox-inner-container{margin-left:0!important}.cac-filter-container ::ng-deep .cac-filter-option-checked.mat-icon{color:var(--background-focused-button)!important}.cac-filter-container ::ng-deep .pop-checkbox-container{min-height:25px!important}.cac-filter-container ::ng-deep .cac-filter-body-column-header mat-form-field,.cac-filter-container mat-form-field input{width:100%;font-weight:700}.cac-filter-container ::ng-deep .cac-filter-body-column-header .mat-form-field-infix{padding-top:2px}.cac-filter-container ::ng-deep .cac-filter-body-column-row .mat-checkbox-label{width:100%}.cac-filter-container-open{min-height:220px!important;transition:height .5s}.cac-filter-loader{position:relative;display:block;width:100%;height:2px;overflow:hidden;clear:both;margin-bottom:8px}.cac-filter-header{display:flex;flex-direction:row;justify-content:flex-start;align-items:center;height:36px}.cac-filter-header-column{position:relative;display:flex;flex-direction:row;margin-left:10px;flex-basis:75%;max-width:400px;box-sizing:border-box}.cac-filter-header-column ::ng-deep .mat-form-field{width:100%;box-sizing:border-box}.cac-filter-header-column ::ng-deep .mat-form-field-infix{top:-8px;padding:2px 5px!important;margin:0 0 0 5px}.cac-filter-header-column ::ng-deep .mat-form-field-outline{color:transparent;display:none}.cac-filter-header-column ::ng-deep .mat-form-field-wrapper{padding-bottom:0!important;margin:0!important;min-width:100%;box-sizing:border-box}.cac-filter-header-column ::ng-deep input{position:relative;top:6px;white-space:nowrap;text-overflow:ellipsis;height:20px;line-height:20px;overflow:hidden;max-width:100%;pointer-events:none!important;background:var(--background-base)!important}.cac-filter-header-column ::ng-deep mat-label{background:var(--background-base)!important;font-size:1.2em;padding:0 5px}.cac-filter-header-column ::ng-deep .mat-form-field-subscript-wrapper{display:none}.cac-filter-header-menu{flex-direction:column;flex-basis:25%;flex-grow:1}.cac-filter-header-menu,.cac-filter-header-row{position:relative;display:flex;justify-content:flex-end}.cac-filter-header-row{flex-direction:row;margin-left:10px;flex-basis:100%;align-self:flex-end}.cac-filter-label-text{position:relative;text-decoration:none;margin-left:5px;margin-right:20px;color:var(--accent-900)!important;top:2px}.cac-filter-label-icon{position:relative}.cac-filter-body-column{margin-left:10px;flex-basis:75%;height:180px;width:75%;box-sizing:border-box;max-width:400px;border:1px solid var(--border)}.cac-filter-body-column,.cac-filter-body-menu{position:relative;display:flex;flex-direction:column}.cac-filter-body-menu{flex-basis:25%;overflow-x:hidden;justify-content:flex-end;align-items:center;flex-grow:1}.cac-filter-body-row{margin-left:10px;justify-content:flex-end;align-self:flex-end}.cac-filter-body-row,.cac-select-filter-button{position:relative;display:flex;flex-direction:row;flex-basis:100%}.cac-select-filter-button{height:36px;border:1px solid var(--border);border-radius:3px;justify-content:flex-start;align-items:center;cursor:pointer}.cac-select-filter-button .cac-select-filter-button-bar{width:5px;height:100%;border-radius:2px 0 0 2px}.cac-select-filter-button .cac-select-filter-button-text{display:flex;flex-direction:row;justify-content:flex-start;flex-basis:100%;padding:0}.cac-select-filter-button .cac-select-filter-button-icon{display:flex;flex-basis:10%;align-items:center;margin-right:10px}.cac-filter-clear-icon{position:relative;font-size:.9em;top:5px;right:2px}.cac-select-filter-icon{position:relative;left:-5px;font-size:1.2em}.cac-filter-body{display:flex;flex-direction:row;justify-content:flex-start;align-items:flex-start;min-height:178px}.cac-filter-body-float{position:absolute;margin-top:46px;left:0;right:0;border:1px solid var(--border);border-top:none;z-index:999999}.cac-filter-body-column-contents{position:relative;flex:1 1;height:140px;overflow-y:auto;overflow-x:hidden;margin:0}.cac-filter-body-column-header{position:relative;display:flex;flex-direction:row;justify-content:flex-start;align-items:center;min-height:25px;clear:both;padding:0 4px;border-radius:3px;border-bottom:1px solid transparent}.cac-filter-option-select-text{display:flex;flex-grow:1;box-sizing:border-box;height:25px;cursor:pointer;padding-left:2px;padding-top:5px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.cac-filter-option-select-id{display:flex;padding-right:10px;padding-top:5px;justify-content:flex-end;flex-grow:1;text-align:right;font-size:.6em;opacity:.5}.cac-filter-option-hover:hover{background:var(--background-hover)!important}.cac-filter-body-column-row{position:relative;display:flex;height:25px;clear:both;align-items:center;padding:0 4px}.cac-filter-option-select-container{width:25px;height:25px;display:flex;align-items:center;justify-content:center;margin-right:5px}.cac-filter-action-text{text-decoration:none;margin:0 20px;color:var(--accent-900);font-size:.9em}.cac-filter-option-radio{padding-top:4px!important}:host ::ng-deep .mat-ripple-element{display:none!important}.filter-selected{background-color:var(--primary)!important}"]
                },] }
    ];
    PopCacFilterViewComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopCacFilterViewComponent.propDecorators = {
        channel: [{ type: i0.Input }]
    };

    var PopCacFilterModule = /** @class */ (function () {
        function PopCacFilterModule() {
        }
        return PopCacFilterModule;
    }());
    PopCacFilterModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        i1.RouterModule,
                        forms.FormsModule,
                        scrolling.ScrollingModule,
                        formField.MatFormFieldModule,
                        input.MatInputModule,
                        checkbox.MatCheckboxModule,
                        icon.MatIconModule,
                        tooltip.MatTooltipModule,
                        PopFieldItemModule,
                        progressBar.MatProgressBarModule,
                        divider.MatDividerModule
                    ],
                    declarations: [
                        PopCacFilterComponent,
                        PopCacFilterViewComponent,
                    ],
                    exports: [
                        PopCacFilterComponent,
                        PopCacFilterViewComponent,
                    ],
                    providers: [],
                },] }
    ];

    var PopTemplateModule = /** @class */ (function () {
        function PopTemplateModule() {
        }
        return PopTemplateModule;
    }());
    PopTemplateModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        i1.RouterModule,
                        i1$1.HttpClientModule,
                        PopMenuModule,
                        PopLeftMenuModule,
                        PopWidgetBarModule,
                        PopCacFilterModule,
                        i2.MatSnackBarModule,
                        progressBar.MatProgressBarModule,
                        PopIndicatorsModule
                    ],
                    declarations: [
                        PopTemplateComponent,
                        PopTemplateAjaxLoaderComponent,
                        PopTemplateWelcomeComponent,
                        PopTemplateGoodByeComponent,
                        PopTemplateErrorComponent,
                        PopTemplateBufferComponent
                    ],
                    entryComponents: [
                        PopTemplateAjaxLoaderComponent,
                        PopTemplateWelcomeComponent,
                        PopTemplateGoodByeComponent,
                        PopTemplateErrorComponent,
                        PopTemplateBufferComponent
                    ],
                    exports: [
                        PopMenuModule,
                        PopLeftMenuModule,
                        PopWidgetBarModule,
                        PopTemplateComponent,
                        PopCacFilterModule
                    ]
                },] }
    ];

    // https://medium.com/angular-in-depth/here-is-how-to-get-viewcontainerref-before-viewchild-query-is-evaluated-f649e51315fb
    var PopContainerService = /** @class */ (function () {
        function PopContainerService() {
            var _this = this;
            this.createListeners = [];
            this.destroyListeners = [];
            this.onContainerCreated = function (fn) {
                _this.createListeners.push(fn);
            };
            this.onContainerDestroyed = function (fn) {
                _this.destroyListeners.push(fn);
            };
            this.registerContainer = function (container) {
                _this.createListeners.forEach(function (fn) {
                    fn(container);
                });
            };
            this.destroyContainer = function (container) {
                _this.destroyListeners.forEach(function (fn) {
                    fn(container);
                });
            };
        }
        return PopContainerService;
    }());
    PopContainerService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopContainerService_Factory() { return new PopContainerService(); }, token: PopContainerService, providedIn: "root" });
    PopContainerService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var LibContainerDirective = /** @class */ (function () {
        function LibContainerDirective(vc) {
            this.templateContainerRepo = exports.ServiceInjector.get(PopContainerService);
            this.templateContainerRepo.registerContainer(vc);
        }
        return LibContainerDirective;
    }());
    LibContainerDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[libContainer]',
                },] }
    ];
    LibContainerDirective.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };

    var LibOutsideClickDirective = /** @class */ (function () {
        function LibOutsideClickDirective(_elementRef) {
            this._elementRef = _elementRef;
            this.clickOutside = new i0.EventEmitter();
        }
        LibOutsideClickDirective.prototype.onMouseEnter = function (targetElement) {
            var clickedInside = this._elementRef.nativeElement.contains(targetElement);
            if (!clickedInside) {
                this.clickOutside.emit(null);
            }
        };
        return LibOutsideClickDirective;
    }());
    LibOutsideClickDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[libOutsideClick]'
                },] }
    ];
    LibOutsideClickDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    LibOutsideClickDirective.propDecorators = {
        clickOutside: [{ type: i0.Output, args: ['clickOutside',] }],
        onMouseEnter: [{ type: i0.HostListener, args: ['document:click', ['$event.target'],] }]
    };

    var LibTrackCapsLockDirective = /** @class */ (function () {
        function LibTrackCapsLockDirective() {
            this.capsLock = new i0.EventEmitter();
        }
        LibTrackCapsLockDirective.prototype.onKeyDown = function (event) {
            var capsOn = event.getModifierState && event.getModifierState('CapsLock');
            this.capsLock.emit(capsOn);
        };
        LibTrackCapsLockDirective.prototype.onKeyUp = function (event) {
            var capsOn = event.getModifierState && event.getModifierState('CapsLock');
            this.capsLock.emit(capsOn);
        };
        return LibTrackCapsLockDirective;
    }());
    LibTrackCapsLockDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[libTrackCapsLock]' },] }
    ];
    LibTrackCapsLockDirective.propDecorators = {
        capsLock: [{ type: i0.Output, args: ['capsLock',] }],
        onKeyDown: [{ type: i0.HostListener, args: ['window:keydown', ['$event'],] }],
        onKeyUp: [{ type: i0.HostListener, args: ['window:keyup', ['$event'],] }]
    };

    var PopCommonModule = /** @class */ (function () {
        function PopCommonModule() {
        }
        PopCommonModule.forRoot = function (environment) {
            return {
                ngModule: PopCommonModule,
                providers: [
                    {
                        provide: 'env',
                        useValue: environment
                    },
                ]
            };
        };
        return PopCommonModule;
    }());
    PopCommonModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        PopTemplateModule
                    ],
                    declarations: [
                        LabelPipe,
                        PhonePipe,
                        ToYesNoPipe,
                        ToActiveOrArchivedPipe,
                        TruncatePipe,
                        LibOutsideClickDirective,
                        LibContainerDirective,
                        LibTrackCapsLockDirective,
                    ],
                    exports: [
                        PopTemplateModule,
                        LabelPipe,
                        PhonePipe,
                        ToYesNoPipe,
                        ToActiveOrArchivedPipe,
                        TruncatePipe,
                        LibOutsideClickDirective,
                        LibContainerDirective,
                        LibTrackCapsLockDirective,
                    ],
                },] }
    ];

    var PopDatetimeService = /** @class */ (function () {
        function PopDatetimeService() {
            this.timezone = 'America/Denver';
            this.hourFormat = 12;
            this.dateFormat = "dd/mm/yyyy";
            this.srv = {
                spacetime: spacetime__namespace
            };
        }
        PopDatetimeService.prototype.transform = function (value, format, seconds) {
            if (format === void 0) { format = 'date'; }
            if (seconds === void 0) { seconds = true; }
            return this._display({ timestamp: value, format: format, seconds: seconds });
        };
        PopDatetimeService.prototype.toIso = function (timestamp) {
            var dt = this.srv.spacetime(timestamp, this.timezone);
            return dt.format('iso');
        };
        PopDatetimeService.prototype.toIsoShort = function (timestamp) {
            var dt = this.srv.spacetime(timestamp, this.timezone);
            return dt.format('iso-short');
        };
        PopDatetimeService.prototype.getTommorow = function (date) {
            return this.srv.spacetime(date).add(1, 'day').format('iso');
        };
        PopDatetimeService.prototype.add = function (date, direction, unit) {
            if (direction === void 0) { direction = 1; }
            if (unit === void 0) { unit = 'day'; }
            return this.srv.spacetime(date).add(direction, unit).format('iso');
        };
        PopDatetimeService.prototype.subtract = function (date, direction, unit) {
            if (direction === void 0) { direction = 1; }
            if (unit === void 0) { unit = 'day'; }
            return this.srv.spacetime(date).subtract(direction, unit).format('iso');
        };
        PopDatetimeService.prototype.getYesterday = function (date) {
            return this.srv.spacetime(date).subtract(1, 'day').format('iso');
        };
        PopDatetimeService.prototype.getLatest = function (dates) {
            var _this = this;
            var latest = null;
            if (IsArray(dates, true)) {
                latest = dates.reduce(function (a, b) { return (_this.toIso(a) > _this.toIso(b) ? a : b); });
                return this.toIso(latest);
            }
        };
        PopDatetimeService.prototype.getEarliest = function (dates) {
            var _this = this;
            var latest = null;
            if (IsArray(dates, true)) {
                latest = dates.reduce(function (a, b) { return (_this.toIso(a) < _this.toIso(b) ? a : b); });
                return this.toIso(latest);
            }
        };
        PopDatetimeService.prototype.setCurrentBusinessUnitSettings = function () {
            if (IsObject(exports.PopBusiness, true)) {
                if (IsNumber(exports.PopBusiness.hour_format, true))
                    this.hourFormat = +exports.PopBusiness.hour_format;
                if (IsString(exports.PopBusiness.date_format, true))
                    this.dateFormat = exports.PopBusiness.date_format;
                if (!(IsNumber(exports.PopBusiness.timezone)) && IsString(exports.PopBusiness.timezone, true))
                    this.timezone = exports.PopBusiness.timezone;
            }
            if (IsObject(exports.PopUser, ['setting'])) {
                if (IsNumber(exports.PopUser.setting.hour_format, true))
                    this.hourFormat = +exports.PopUser.setting.hour_format;
                if (IsString(exports.PopUser.setting.date_format, true))
                    this.dateFormat = exports.PopUser.setting.date_format;
                if (IsNumber(exports.PopUser.setting.timezone)) {
                    var transformToName = exports.PopPipe.transform(exports.PopUser.setting.timezone, { type: 'timezone' });
                    if (IsString(transformToName, true)) {
                        this.timezone = transformToName;
                    }
                }
                else {
                    if (!(IsNumber(exports.PopUser.setting.timezone)) && IsString(exports.PopUser.setting.timezone, true))
                        this.timezone = exports.PopUser.setting.timezone;
                }
            }
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Formats a datetime string to the correct datetime according to the timezone and formats for the user.
         *  - format enum: [date, time, datetime]
         */
        PopDatetimeService.prototype._display = function (datetime) {
            var hourFormat = (this.hourFormat == 24 ? 'HH:mm' + (datetime.seconds ? ':ss' : '') : 'h:mm' + (datetime.seconds ? ':ss' : '') + ' a');
            var dt = this.srv.spacetime(datetime.timestamp);
            if (IsString(this.timezone, true) && String(this.timezone).length > 10) {
                dt = dt.goto(this.timezone);
            }
            switch (datetime.format) {
                case 'datetime':
                    return dt.format(this._displayFormat()) + (['full', 'full-short'].includes(this.dateFormat) ? ', ' : ' ') + dt.unixFmt(hourFormat);
                case 'date':
                    return dt.format(this._displayFormat());
                case 'time':
                    return dt.unixFmt(hourFormat);
                default:
                    return dt.format(this._displayFormat() + ' ' + hourFormat);
            }
        };
        PopDatetimeService.prototype._displayFormat = function () {
            switch (this.dateFormat) {
                case 'yyyymmdd':
                    return '{year}{month-pad}{date-pad}';
                case 'yyyy-mm-dd':
                    return 'iso-short';
                case 'dd/mm/yyyy':
                    return 'numeric-uk';
                case 'mm/dd/yyyy':
                    return 'numeric-us';
                case 'yyyy/mm/dd':
                    return '{year}/{month-pad}/{date-pad}';
                case 'dd-mm-yyyy':
                    return '{date-pad}-{month-pad}-{year}';
                case 'yyyy/dd/mm':
                    return '{year}/{date-pad}/{month-pad}';
                case 'yyyy-dd-mm':
                    return '{year}-{date-pad}-{month-pad}';
                case 'mm-dd-yyyy':
                    return '{month-pad}-{date-pad}-{year}';
                case 'full':
                    return '{month} {date-pad}, {year}';
                case 'full-short':
                    return '{month-short} {date-pad}, {year}';
                default:
                    return 'iso-short';
            }
        };
        return PopDatetimeService;
    }());
    PopDatetimeService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopDatetimeService_Factory() { return new PopDatetimeService(); }, token: PopDatetimeService, providedIn: "root" });
    PopDatetimeService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopDatetimeService.ctorParameters = function () { return []; };

    var environment = {
        production: false,
        // apiBaseUrl: ' http://127.0.0.1:8899',
        apiBaseUrl: ' https://api.dev.popcx.com',
        baseHref: '/lib/',
        username: 'josh',
        password: 'Secret@2020',
        debug: true,
        debugLevel: 1,
        debugCache: 0,
        debugComponents: 'PopEntityListComponent',
        debugTypes: ['warn'],
        entities: true
    };

    var PopLogService = /** @class */ (function () {
        function PopLogService(env) {
            this.env = env;
            this.name = 'PopLogService';
            if (this.enabled('init', this.name))
                console.log(this.message(this.name + ":init"), this.color('init'));
        }
        PopLogService.prototype.message = function (message) {
            return "%c" + message;
        };
        PopLogService.prototype.color = function (type) {
            var color = 'aqua';
            switch (type) {
                case 'warn':
                    color = 'orange';
                    break;
                case 'force':
                case 'error':
                case 'destroy':
                    color = 'red';
                    break;
                case 'info':
                    color = 'aqua';
                    break;
                case 'event':
                    color = 'yellow';
                    break;
                case 'onSession':
                case 'event-trigger':
                    color = 'gold';
                    break;
                case 'cache-in':
                    color = 'green';
                    break;
                case 'cache-out':
                    color = 'darkgreen';
                    break;
                case 'dom':
                    color = 'brown';
                    break;
                case 'debug':
                    color = 'pink';
                    break;
                case 'api':
                    color = 'darkgreen';
                    break;
                case 'config':
                    color = 'pink';
                    break;
                case 'theme':
                    color = 'purple';
                    break;
                default:
                    color = 'aqua';
                    break;
            }
            return "color: " + color;
        };
        PopLogService.prototype.enabled = function (type, component) {
            if (type === void 0) { type = ''; }
            if (component === void 0) { component = null; }
            if (this.env.debug) {
                if (type && Array.isArray(this.env.debugTypes)) {
                    if (this.env.debugTypes.includes(type))
                        return true;
                }
                if (typeof this.env.debugLevel === 'number') {
                    if (['error', 'onSession'].includes(type) && this.env.debug >= 1) {
                        return true;
                    }
                    if (['warning', 'info'].includes(type) && this.env.debug >= 2) {
                        return true;
                    }
                    if (['events'].includes(type) && this.env.debug >= 2) {
                        return true;
                    }
                }
                if (component && typeof this.env.debugComponents === 'string') {
                    return this.env.debugComponents.search(component) > -1;
                }
            }
            return false;
        };
        PopLogService.prototype.init = function (componentName, message, data, force) {
            if (data === void 0) { data = ''; }
            if (force === void 0) { force = false; }
            var type = 'init';
            if (this.enabled(type, componentName) || force)
                console.log(this.message(componentName + ":" + message), this.color((force ? 'force' : type)), data);
        };
        PopLogService.prototype.debug = function (componentName, message, data, force) {
            if (data === void 0) { data = ''; }
            if (force === void 0) { force = false; }
            var type = 'debug';
            if (this.enabled(type, componentName) || force)
                console.log(this.message(componentName + ":" + message), this.color((force ? 'force' : type)), data);
        };
        PopLogService.prototype.cache = function (componentName, message, set, force) {
            if (set === void 0) { set = true; }
            if (force === void 0) { force = false; }
            var type = 'cache';
            if (this.enabled(type, componentName) || force) {
                type = set ? 'cache-in' : 'cache-out';
                console.log(this.message(componentName + ":" + message), this.color((force ? 'force' : type)));
            }
        };
        PopLogService.prototype.warn = function (componentName, message, data, force) {
            if (data === void 0) { data = ''; }
            if (force === void 0) { force = false; }
            var type = 'warn';
            if (this.enabled(type, componentName) || force)
                console.log(this.message(componentName + ":" + message), this.color((force ? 'force' : type)), data);
        };
        PopLogService.prototype.info = function (componentName, message, data, force) {
            if (data === void 0) { data = ''; }
            if (force === void 0) { force = false; }
            var type = 'info';
            if (this.enabled(type, componentName) || force)
                console.log(this.message(componentName + ":" + message), this.color((force ? 'force' : type)), data);
        };
        PopLogService.prototype.theme = function (componentName, message, data, force) {
            if (data === void 0) { data = ''; }
            if (force === void 0) { force = false; }
            var type = 'theme';
            if (this.enabled(type, componentName) || force)
                console.log(this.message(componentName + ":" + message), this.color((force ? 'force' : type)), data);
        };
        PopLogService.prototype.event = function (componentName, message, event, force) {
            if (force === void 0) { force = false; }
            var type = 'event';
            if (this.enabled(type, componentName) || force)
                console.log(this.message(componentName + ":" + message), this.color((force ? 'force' : type)), event);
        };
        PopLogService.prototype.error = function (componentName, message, data, force) {
            if (data === void 0) { data = ''; }
            if (force === void 0) { force = false; }
            var type = 'error';
            if (this.enabled(type, componentName) || force) {
                console.log(this.message(componentName + ":" + message), this.color((force ? 'force' : type)), data);
                // throw new Error('message');
            }
        };
        return PopLogService;
    }());
    PopLogService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopLogService_Factory() { return new PopLogService(i0__namespace.ɵɵinject("env")); }, token: PopLogService, providedIn: "root" });
    PopLogService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopLogService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: ['env',] }] }
    ]; };

    var PopDisplayService = /** @class */ (function () {
        function PopDisplayService() {
            this.aliases = [];
        }
        /**
         * Provides the actual name we want displayed to the user.
         * field - The field name coming from the DB.
         * displayInfo - Either a string or object. If object then will look for property display or label. Takes aliases into account. IE: account:ID
         * set - If passed will look in the displayInfo object for this field before falling back to the display or label field.
         * returns {string}
         */
        PopDisplayService.prototype.set = function (text, displayInfo, displayField) {
            var e_1, _a;
            if (displayInfo === void 0) { displayInfo = ''; }
            if (displayField === void 0) { displayField = ''; }
            var displayString = '';
            if (displayInfo && typeof displayInfo === 'string') {
                displayString = displayInfo;
            }
            else if (displayInfo && displayField && displayInfo[displayField]) {
                displayString = displayInfo[displayField];
            }
            else if (displayInfo && displayInfo.display) {
                displayString = displayInfo.display;
            }
            else if (displayInfo && displayInfo.label) {
                displayString = displayInfo.label;
            }
            // Check for aliases.
            if (displayString) {
                if (displayString.includes('alias:')) {
                    var aliasArray = displayString.split(':');
                    aliasArray.shift();
                    var alias = this.alias(aliasArray.shift()).toLocaleLowerCase();
                    displayString = alias.charAt(0).toUpperCase() + alias.slice(1) + ' ';
                    var tempString = '';
                    while (tempString = aliasArray.shift())
                        displayString += ' ' + tempString;
                }
            }
            else {
                // Format the string base on the field name.
                var words = text.split('_');
                try {
                    for (var words_1 = __values(words), words_1_1 = words_1.next(); !words_1_1.done; words_1_1 = words_1.next()) {
                        var word = words_1_1.value;
                        if (word === 'id' || word === 'fk') {
                            displayString += 'ID ';
                        }
                        else {
                            displayString += word.charAt(0).toUpperCase() + word.slice(1) + ' ';
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (words_1_1 && !words_1_1.done && (_a = words_1.return)) _a.call(words_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return displayString.trim();
        };
        PopDisplayService.prototype.alias = function (entity) {
            return (this.aliases[entity] ? this.aliases[entity] : entity);
        };
        return PopDisplayService;
    }());
    PopDisplayService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopDisplayService_Factory() { return new PopDisplayService(); }, token: PopDisplayService, providedIn: "root" });
    PopDisplayService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopDisplayService.ctorParameters = function () { return []; };

    var PopRequestService = /** @class */ (function () {
        function PopRequestService(http, env) {
            this.http = http;
            this.env = env;
            this.offsetLimit = 2000;
            // if( +this.env.offsetLimit ) this.offsetLimit = this.env.offsetLimit;
            if (!this.baseUrl) {
                var envUrl = i0.isDevMode() && this.env && this.env.apiBaseUrl ? this.env.apiBaseUrl : null;
                this.baseUrl = (envUrl ? envUrl : window.location.protocol + "//api." + window.location.host);
            }
        }
        PopRequestService.prototype.getHeaders = function (version, businessId) {
            if (businessId === void 0) { businessId = 0; }
            return {
                'X-Popcx-Business': +businessId ? String(businessId) : exports.PopBusiness ? String(exports.PopBusiness.id) : String(0),
                'Content-Type': 'application/json',
                'Api-Version': (typeof version !== 'undefined' ? version : 1).toString()
            };
        };
        PopRequestService.prototype.getBaseUrl = function () {
            return this.baseUrl.slice();
        };
        PopRequestService.prototype.setBaseUrl = function (baseUrl) {
            if (IsString(baseUrl, true)) {
                this.baseUrl = baseUrl;
            }
        };
        PopRequestService.prototype.getOffsetLimit = function () {
            return this.offsetLimit;
        };
        PopRequestService.prototype.doGet = function (url, params, version, ignore401, businessId) {
            if (params === void 0) { params = {}; }
            if (version === void 0) { version = 1; }
            if (ignore401 === void 0) { ignore401 = false; }
            if (businessId === void 0) { businessId = 0; }
            var options = {
                headers: new i1$1.HttpHeaders(this.getHeaders(version, businessId)),
                params: this._setParams(params)
            };
            if (ignore401)
                options.headers.set('SkipResponse401Interceptor', '1');
            if (url[0] !== '/')
                url = "/" + url;
            return this.http.get("" + this.getBaseUrl() + url, options);
        };
        PopRequestService.prototype.doDelete = function (url, body, version, ignore401, businessId) {
            if (body === void 0) { body = null; }
            if (version === void 0) { version = 1; }
            if (ignore401 === void 0) { ignore401 = null; }
            if (businessId === void 0) { businessId = 0; }
            var options = {
                headers: new i1$1.HttpHeaders(this.getHeaders(version, businessId)),
                body: body,
            };
            if (ignore401)
                options.headers.set('SkipResponse401Interceptor', '1');
            if (url[0] !== '/')
                url = "/" + url;
            // if( data ) options.params = new HttpParams(data);
            return this.http.delete("" + this.getBaseUrl() + url, options);
        };
        PopRequestService.prototype.doPatch = function (url, data, version, ignore401, businessId) {
            if (version === void 0) { version = 1; }
            if (ignore401 === void 0) { ignore401 = false; }
            if (businessId === void 0) { businessId = 0; }
            var headers = new i1$1.HttpHeaders(this.getHeaders(version, businessId));
            if (ignore401)
                headers.set('SkipResponse401Interceptor', '1');
            if (url[0] !== '/')
                url = "/" + url;
            return this.http.patch(this.getBaseUrl() + url, JSON.stringify(data), { headers: headers });
        };
        PopRequestService.prototype.doPost = function (url, data, version, ignore401, businessId) {
            if (version === void 0) { version = 1; }
            if (ignore401 === void 0) { ignore401 = false; }
            if (businessId === void 0) { businessId = 0; }
            var headers = new i1$1.HttpHeaders(this.getHeaders(version, businessId));
            if (ignore401)
                headers.set('SkipResponse401Interceptor', '1');
            if (url[0] !== '/')
                url = "/" + url;
            return this.http.post("" + this.getBaseUrl() + url, JSON.stringify(data), { headers: headers });
        };
        PopRequestService.prototype.transform = function (value, transformation) {
            if (IsArray(transformation, true)) {
                transformation.map(function (transKey) {
                    // value = this.commonRepo.transform(value, transKey);
                });
            }
            else if (IsString(transformation, true)) {
                // value = this.commonRepo.transform(value, transformation);
            }
            return value;
        };
        PopRequestService.prototype._setParams = function (body) {
            var e_1, _a;
            var params = new i1$1.HttpParams();
            var _loop_1 = function (key) {
                if (body[key]) {
                    if (body[key] instanceof Array) {
                        body[key].forEach(function (item) {
                            params = params.append(key.toString() + "[]", item);
                        });
                    }
                    else {
                        params = params.append(key.toString(), body[key]);
                    }
                }
            };
            try {
                for (var _b = __values(Object.keys(body)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _loop_1(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return params;
        };
        return PopRequestService;
    }());
    PopRequestService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopRequestService_Factory() { return new PopRequestService(i0__namespace.ɵɵinject(i1__namespace.HttpClient), i0__namespace.ɵɵinject("env")); }, token: PopRequestService, providedIn: "root" });
    PopRequestService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopRequestService.ctorParameters = function () { return [
        { type: i1$1.HttpClient },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['env',] }] }
    ]; };

    var PopContextMenuConfig = /** @class */ (function () {
        function PopContextMenuConfig(config) {
            var e_1, _a;
            this.emitter = new i0.EventEmitter();
            this.toggle = new rxjs.Subject();
            this.x = 0;
            this.y = 0;
            this.options = [];
            this.newTabUrl = '';
            if (config != undefined && config.newTabUrl) {
                var newTabOption = {
                    label: 'Open Link in new tab',
                    type: 'new_tab',
                    url: config.newTabUrl,
                };
                this.options.push(newTabOption);
            }
            if (config != undefined && config.options !== undefined && config.options.length != 0) {
                try {
                    for (var _b = __values(config.options), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var option = _c.value;
                        this.options.push(option);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        PopContextMenuConfig.prototype.addNewTabOption = function (url) {
            var newTabOption = {
                label: 'Open Link in new tab',
                type: 'new_tab',
                url: url,
            };
            this.options.push(newTabOption);
        };
        PopContextMenuConfig.prototype.addPortalOption = function (internal_name, id) {
            if (internal_name === void 0) { internal_name = ''; }
            var label = TitleCase(exports.PopPipe.transform(internal_name, { type: 'entity', arg1: 'alias', arg2: 'singular' })).replace(/_/g, ' ').trim();
            var newTabOption = {
                label: "View " + label,
                type: 'portal',
                metadata: {
                    internal_name: internal_name,
                    id: id
                }
            };
            this.options.push(newTabOption);
        };
        PopContextMenuConfig.prototype.addOption = function (option) {
            this.options.push(option);
        };
        PopContextMenuConfig.prototype.resetOptions = function () {
            this.options = [];
        };
        return PopContextMenuConfig;
    }());

    var EntityFieldSetting = {
        show_name: {
            name: 'show_name',
            label: 'Show Name',
            helpText: 'Show the name of the field as a Header',
            type: 'boolean',
            defaultValue: false,
        },
        edit_label: {
            name: 'edit_label',
            label: 'Allow Label Changes',
            helpText: 'The User will be able to see the label, but should they be allowed to change it?',
            type: 'boolean',
            group: 'label',
            defaultValue: true
        },
        custom_label: {
            name: 'custom_label',
            label: 'Allow Custom Label',
            helpText: 'The user will be able to select \'Custom\' from the dropdown and enter their own label',
            type: 'boolean',
            group: 'label',
            defaultValue: false,
        },
        unique_label: {
            name: 'unique_label',
            label: 'Require Unique Label',
            helpText: 'Each Value entry will be required to use a select a different label',
            type: 'boolean',
            group: 'label',
            defaultValue: false,
        },
    };

    var PopEntityFieldService = /** @class */ (function (_super) {
        __extends(PopEntityFieldService, _super);
        function PopEntityFieldService() {
            var _this = _super.call(this) || this;
            _this.name = 'PopEntityFieldService';
            _this.srv = {
                request: exports.ServiceInjector.get(PopRequestService)
            };
            exports.PopLog.init(_this.name, 'init', _this);
            return _this;
        }
        // /**
        //  * Ensure that at least 1 label exists
        //  * @param field
        //  */
        // setFieldEntries(field: FieldInterface): Promise<boolean>{
        //   return new Promise<boolean>((resolve) => {
        //     if( !( IsArray(field.entries, true) ) ){
        //       const entry = {
        //         name: TitleCase(`${field.fieldgroup.name} 1`),
        //         type: 'provided'
        //       };
        //       this.srv.request.doPost(`fields/${field.id}/entries`, entry, 1, false).subscribe((res) => {
        //         res = res.data ? res.data : res;
        //         field.entries = [ res ];
        //         return resolve(true);
        //       }, (err) => {
        //         PopLog.error(this.name, `_setFieldEntryValues`, GetHttpErrorMsg(err));
        //         return resolve(false);
        //       });
        //     }else{
        //       return resolve(true);
        //     }
        //   });
        // }
        // /**
        //  * Ensure that the field has the correct amount of values
        //  * @param field
        //  */
        // setFieldValues(field: FieldInterface): Promise<boolean>{
        //   return new Promise<boolean>((resolve) => {
        //
        //     if( IsArray(field.entries, true) ){
        //       const realDataKeys = Object.keys(field.data).filter((id) => +id > 0);
        //       const api = [];
        //       if( !realDataKeys.length ){
        //         console.log('create default value for  ', realDataKeys, field);
        //         api.push(1);
        //       }
        //       if(field.multiple){
        //         let neededValues = field.multiple_min - realDataKeys.length;
        //         console.log('needed', neededValues);
        //         while(neededValues){
        //           api.push(1);
        //           neededValues--;
        //         }
        //
        //       }
        //       console.log('should have values', api)
        //
        //       return resolve(true);
        //     }else{
        //       return resolve(false);
        //     }
        //   });
        // }
        PopEntityFieldService.prototype.addEntryValue = function (core, field) {
            var dataIndex = field.data_keys.length;
            var entry = dataIndex in field.entries ? field.entries[dataIndex] : null;
            if (IsObject(entry, ['id'])) {
                console.log('entry', entry);
                var item_1 = {
                    data: {},
                    entry: entry,
                    config: {},
                    index: dataIndex
                };
                Object.keys(field.children).map(function (name) {
                    var fieldItem = JsonCopy(field.children[name]);
                    fieldItem.model.value = null; // clear any value that might have been stored from previous entry
                    item_1.data[name] = null;
                    fieldItem.model.facade = true;
                    item_1.config[name] = FieldItemModelConfig(core, fieldItem.model);
                });
                return item_1;
            }
            else {
                console.log('fail', entry);
                return null;
            }
        };
        PopEntityFieldService.prototype.removeEntryValue = function (core, field, dataKey) {
            var _this = this;
            return new Promise(function (resolve) {
                console.log('removeEntryValue', core, field, dataKey);
                var data = field.data[dataKey];
                if (IsObject(data, ['id'])) {
                    var body = {};
                    var path = StringReplaceAll(ParseUrlForParams("#path/#entityId", core.params), '//', '/');
                    body[field.name] = {
                        field_entry_id: dataKey,
                        id: data.id
                    };
                    _this.srv.request.doDelete(path, body, 1, false).subscribe(function (res) {
                        if (res.data)
                            res = res.data;
                        console.log('removeEntryValue', res);
                        return resolve(true);
                    }, function () {
                        return resolve(false);
                    });
                }
                else {
                    return resolve(true);
                }
            });
        };
        /**
         * Update a value for a single field item column of a field record
         * @param core
         * @param field
         * @param event
         */
        PopEntityFieldService.prototype.updateFieldItem = function (core, field, event) {
            var _this = this;
            return new Promise(function (resolve) {
                if (IsValidFieldPatchEvent(core, event)) {
                    var patch = {};
                    var path = StringReplaceAll(ParseUrlForParams("#path/#entityId", core.params), '//', '/');
                    patch[field.name] = {
                        field_entry_id: +event.data_key,
                        field_id: +field.id,
                        id: field.data[event.data_key].id ? field.data[event.data_key].id : null
                    };
                    patch[field.name][event.column] = event.config.control.value;
                    _this.srv.request.doPatch(path, patch, 1, false).subscribe(function (res) {
                        if (res.data)
                            res = res.data;
                        var value = res[field.name].record[event.column];
                        field.data[event.data_key].id = res[field.name].record.id;
                        field.data[event.data_key][event.column] = value;
                        // if( IsObject(core.entity[ field.name ], true) ){
                        //   core.entity[ field.name ][ event.column ] = value;
                        // }else if( IsArray(core.entity[ field.name ], true) ){
                        //   console.log('session the data', core.entity[ field.name ], value);
                        // }
                        return resolve(true);
                    }, function (err) {
                        var fieldPatch = event.config.patch;
                        var control = event.config.control;
                        fieldPatch.running = false;
                        control.markAsDirty();
                        control.setValue(_this.asset.storedValue);
                        control.setErrors({ server: true });
                        event.config.message = GetHttpErrorMsg(err);
                        return resolve(false);
                    });
                }
            });
        };
        /**
         * Set any field settings for this field & field items, and apply and stored values
         * @param field
         * @param settings
         */
        PopEntityFieldService.prototype.setFieldCustomSetting = function (field, settings) {
            var _this = this;
            var stored = field.configs;
            if (IsObject(field, ['fieldgroup', 'configs']) && IsObject(settings)) {
                settings = JSON.parse(JSON.stringify(Object.assign(Object.assign({}, EntityFieldSetting), settings)));
                Object.keys(settings).map(function (name) {
                    var setting = settings[name];
                    if (IsObject(setting, true)) {
                        var value = IsDefined(setting.value, false) ? setting.value : setting.defaultValue;
                        setting.value = value;
                        if (setting.item && IsObject(field.children, [setting.item])) {
                            field.children[setting.item].custom_setting[name] = setting;
                            field.children[setting.item].setting[name] = value;
                        }
                        else {
                            field.custom_setting[name] = setting;
                            field.setting[name] = value;
                        }
                    }
                });
                var childrenIdLookup_1 = {};
                Object.keys(field.children).map(function (name) {
                    childrenIdLookup_1[field.children[name].id] = name;
                });
                if (IsArray(stored.field_configs, true)) {
                    stored.field_configs.map(function (setting) {
                        if (!field.custom_setting[setting.name]) {
                            // ToDo:: Do We want to allow the database to pass in configs that are not local?
                            exports.PopLog.warn(_this.name, "setFieldCustomSettingDefaults: setting no longer defined", setting);
                            // field.custom_setting[ setting.name ] = setting;
                        }
                        else {
                            field.custom_setting[setting.name].id = setting.id;
                            field.custom_setting[setting.name].value = setting.value;
                        }
                        field.setting[setting.name] = setting.value;
                    });
                }
                if (IsObject(stored.item_configs, true)) {
                    Object.keys(stored.item_configs).map(function (fieldItemId) {
                        var fieldItemConfigs = stored.item_configs[fieldItemId];
                        if (IsArray(fieldItemConfigs, true)) {
                            fieldItemConfigs.map(function (setting) {
                                if (setting.field_id in childrenIdLookup_1) {
                                    var item = field.children[childrenIdLookup_1[setting.field_id]];
                                    // if( !item.custom_setting ) item.custom_setting = {};
                                    if (!item.custom_setting[setting.name]) {
                                        // ToDo:: Do We want to allow the database to pass in configs that are not local
                                        exports.PopLog.warn(_this.name, "setFieldCustomSettingDefaults: setting no longer defined", setting);
                                        // item.custom_setting[ setting.name ] = setting;
                                    }
                                    else {
                                        item.custom_setting[setting.name].id = setting.id;
                                        item.custom_setting[setting.name].value = setting.value;
                                    }
                                    // if( !item.setting ) item.setting = {};
                                    item.setting[setting.name] = setting.value;
                                    console.log('here', setting.name, { item: item, setting: setting });
                                }
                            });
                        }
                    });
                }
            }
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntityFieldService.prototype._my = function () {
            return true;
        };
        return PopEntityFieldService;
    }(PopExtendService));
    PopEntityFieldService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntityFieldService_Factory() { return new PopEntityFieldService(); }, token: PopEntityFieldService, providedIn: "root" });
    PopEntityFieldService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    PopEntityFieldService.ctorParameters = function () { return []; };

    var PopEntityFieldComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldComponent, _super);
        function PopEntityFieldComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.name = 'PopEntityFieldComponent';
            _this.srv = {
                field: exports.ServiceInjector.get(PopEntityFieldService),
                router: exports.ServiceInjector.get(i1.Router),
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    // #1 Check Required Data:
                    _this.field = IsObjectThrowError(_this.field, ['id'], _this.name + ":configure: - this.field") ? _this.field : null;
                    _this.id = _this.field.id;
                    // #2 Attach a context menu
                    _this._attachContextMenu();
                    // #3 Handle Bubble events
                    _this.dom.handler.bubble = function (core, event) { return _this.onBubbleEvent('handler', null, event); };
                    _this.trait.bubble = true; // leave this on
                    // #5: Render the dynamic field
                    _this.template.attach('container'); // 'container' references the @viewChild at top of file
                    _this.template.render([{
                            type: _this.field.component,
                            inputs: {
                                core: _this.core,
                                field: _this.field,
                            }
                        }]);
                    // set states
                    _this._setFieldState();
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a purpose
         */
        PopEntityFieldComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The user can call actions on this field
         * @param event
         */
        PopEntityFieldComponent.prototype.onActionButtonClick = function (event) {
            this.log.event("onActionButtonClick", event);
            if (event.type === 'field') {
                if (event.name === 'add') {
                    this.onAdd(event);
                }
                else if (event.name === 'remove') {
                    // this.onRemove(event);
                }
                else if (event.name === 'close') {
                    // this.onClose(event);
                }
            }
            return true;
        };
        /**
         * User wants to add a value entry into the field
         * @param event
         */
        PopEntityFieldComponent.prototype.onAdd = function (event) {
            this.log.event("onAdd", event);
            if (this.field.facade) {
                this.onBubbleEvent('onAdd', null, event);
            }
            else {
                var childEmitter = StorageGetter(this.template, ['refs', '0', 'instance', 'events']);
                if (childEmitter) {
                    childEmitter.emit(event);
                    this._setFieldState();
                }
            }
            return true;
        };
        /**
         * User wants to make edits to the value entries
         * @param event
         */
        PopEntityFieldComponent.prototype.onEdit = function (event, dataKey) {
            this.log.event("onEdit", event);
            return true;
        };
        /**
         * User wants to remove a value entry
         * @param event
         */
        PopEntityFieldComponent.prototype.onRemove = function (event) {
            this.log.event("onRemove", event);
            console.log('here');
            if (this.field.facade) {
                this.onBubbleEvent('onRemove', null, event);
            }
            else {
                console.log('real delete action');
            }
            this._setFieldState();
            return true;
        };
        /**
         * User closes the edit ability of the value entries
         * @param event
         */
        PopEntityFieldComponent.prototype.onClose = function (event) {
            this.log.event("onClose", event);
            return true;
        };
        /**
         * The user can click on a link to view the config setup of this field
         */
        PopEntityFieldComponent.prototype.onNavigateToField = function () {
            this.srv.router.navigate(['entities', 'fields', this.field.id]).catch(function (e) { return true; });
        };
        /**
         * Handle the bubble events that come up
         * @param event
         */
        PopEntityFieldComponent.prototype.onBubbleEvent = function (name, extension, event) {
            this.log.event("onBubbleEvent", event);
            this._setFieldState();
            this.events.emit(event);
            return true;
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityFieldComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Set internal state flags of a field
         * @private
         */
        PopEntityFieldComponent.prototype._setFieldState = function () {
            var _this = this;
            this.dom.setTimeout("allow-template-changes", function () {
                // this.field.canAdd = this.field.multiple && this.field.data_keys.length < this.field.multiple_max;
                _this.field.canAdd = _this.field.multiple && _this.field.data_keys.length < _this.field.entries.length;
                _this.field.canRemove = _this.field.multiple && _this.field.data_keys.length > _this.field.multiple_min;
            }, 100);
        };
        /**
         * Interept the mouse right click to show a context menu for this field
         * @param event
         */
        PopEntityFieldComponent.prototype._attachContextMenu = function () {
            var _this = this;
            this.dom.contextMenu.config = new PopContextMenuConfig();
            //
            this.dom.contextMenu.configure = function (event) {
                var hasAccess = true; // TBD
                if (hasAccess && _this.dom.contextMenu.config) {
                    event.preventDefault(); // prevent the default behavior of the right click.
                    // reset the context menu, and configure it to load at the position clicked.
                    _this.dom.contextMenu.config.resetOptions();
                    _this.dom.contextMenu.config.addPortalOption('field', _this.field.id);
                    _this.dom.contextMenu.config.addNewTabOption("entities/fields/" + _this.field.id);
                    _this.dom.contextMenu.config.x = event.clientX;
                    _this.dom.contextMenu.config.y = event.clientY;
                    _this.dom.contextMenu.config.toggle.next(true);
                }
            };
            this.dom.setSubscriber('context-menu', this.dom.contextMenu.config.emitter.subscribe(function (event) {
                _this.events.emit(event);
            }));
        };
        return PopEntityFieldComponent;
    }(PopExtendDynamicComponent));
    PopEntityFieldComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field',
                    template: "<!--<div class=\"pop-entity-field-container sw-field-main-wrapper-boundary\" (contextmenu)=\"dom.contextMenu.configure($event);\">-->\n<div class=\"pop-entity-field-container sw-field-main-wrapper-boundary\">\n<!--<div class=\"pop-entity-field-container sw-field-main-wrapper-boundary\">-->\n  <div class=\"import-field-header\" *ngIf=\"field.multiple || field.setting.show_name\">\n    <div class=\"import-field-header-title\" [ngClass]=\"{'sw-field-main-container-header-title-link sw-pointer sw-hover': true}\" (click)=\"onNavigateToField();\">\n      {{field.label}}\n    </div>\n    <!--<lib-pop-field-btn *ngIf=\"field.canAdd\" class=\"sw-mar-hrz-sm\" action=\"add\" [field]=\"field\" (events)=\"onActionButtonClick($event);\"></lib-pop-field-btn>-->\n  </div>\n  <div class=\"import-field-container\">\n    <ng-container #container></ng-container>\n  </div>\n  <!--<lib-pop-context-menu *ngIf=\"dom.contextMenu.config\" [config]=\"dom.contextMenu.config\"></lib-pop-context-menu>-->\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".sw-mar-xs{margin:var(--xs)}.sw-mar-sm{margin:var(--sm)}.sw-mar-md{margin:var(--md)}.sw-mar-lg{margin:var(--lg)}.sw-mar-xlg{margin:var(--xlg)}.sw-mar-hrz-xs{margin-left:var(--xs);margin-right:var(--xs)}.sw-mar-hrz-md,.sw-mar-hrz-sm{margin-left:var(--md);margin-right:var(--md)}.sw-mar-hrz-lg{margin-left:var(--lg);margin-right:var(--lg)}.sw-mar-hrz-xlg{margin-left:var(--xlg);margin-right:var(--xlg)}.sw-mar-vrt-xs{margin-top:var(--xs);margin-bottom:var(--xs)}.sw-mar-vrt-md,.sw-mar-vrt-sm{margin-top:var(--md);margin-bottom:var(--md)}.sw-mar-vrt-lg{margin-top:var(--lg);margin-bottom:var(--lg)}.sw-mar-vrt-xlg{margin-top:var(--xlg);margin-bottom:var(--xlg)}.sw-mar-lft-xs{margin-left:var(--xs)}.sw-mar-lft-sm{margin-left:var(--sm)}.sw-mar-lft-md{margin-left:var(--md)}.sw-mar-lft-lg{margin-left:var(--lg)}.sw-mar-lft-xlg{margin-left:var(--xlg)}.sw-mar-rgt-xs{margin-right:var(--xs)}.sw-mar-rgt-sm{margin-right:var(--sm)}.sw-mar-rgt-md{margin-right:var(--md)}.sw-mar-rgt-lg{margin-right:var(--lg)}.sw-mar-rgt-xlg{margin-right:var(--xlg)}.sw-mar-btm-xs{margin-bottom:var(--xs)}.sw-mar-btm-sm{margin-bottom:var(--sm)}.sw-mar-btm-md{margin-bottom:var(--md)}.sw-mar-btm-lg{margin-bottom:var(--lg)}.sw-mar-btm-xlg{margin-bottom:var(--xlg)}.sw-mar-top-xs{margin-top:var(--xs)}.sw-mar-top-sm{margin-top:var(--sm)}.sw-mar-top-md{margin-top:var(--md)}.sw-mar-top-lg{margin-top:var(--lg)}.sw-mar-top-xlg{margin-top:var(--xlg)}.sw-pad-xs{padding:var(--xs)}.sw-pad-md,.sw-pad-sm{padding:var(--md)}.sw-pad-lg{padding:var(--lg)}.sw-pad-xlg{padding:var(--xlg)}.sw-pad-hrz-xs{padding-left:var(--xs);padding-right:var(--xs)}.sw-pad-hrz-sm{padding-left:var(--sm);padding-right:var(--sm)}.sw-pad-hrz-md{padding-left:var(--md);padding-right:var(--md)}.sw-pad-hrz-lg{padding-left:var(--lg);padding-right:var(--lg)}.sw-pad-hrz-xlg{padding-left:var(--xlg);padding-right:var(--xlg)}.sw-pad-vrt-xs{padding-top:var(--xs);padding-bottom:var(--xs)}.sw-pad-vrt-md,.sw-pad-vrt-sm{padding-top:var(--md);padding-bottom:var(--md)}.sw-pad-vrt-lg{padding-top:var(--lg);padding-bottom:var(--lg)}.sw-pad-vrt-xlg{padding-top:var(--xlg);padding-bottom:var(--xlg)}.sw-pad-lft-xs{padding-left:var(--xs)}.sw-pad-lft-sm{padding-left:var(--sm)}.sw-pad-lft-md{padding-left:var(--md)}.sw-pad-lft-lg{padding-left:var(--lg)}.sw-pad-lft-xlg{padding-left:var(--xlg)}.sw-pad-rgt-xs{padding-right:var(--xs)}.sw-pad-rgt-sm{padding-right:var(--sm)}.sw-pad-rgt-md{padding-right:var(--md)}.sw-pad-rgt-lg{padding-right:var(--lg)}.sw-pad-rgt-xlg{padding-right:var(--xlg)}.sw-pad-btm-xs{padding-bottom:var(--xs)}.sw-pad-btm-sm{padding-bottom:var(--sm)}.sw-pad-btm-md{padding-bottom:var(--md)}.sw-pad-btm-lg{padding-bottom:var(--lg)}.sw-pad-btm-xlg{padding-bottom:var(--xlg)}.sw-pad-top-xs{padding-top:var(--xs)}.sw-pad-top-sm{padding-top:var(--sm)}.sw-pad-top-md{padding-top:var(--md)}.sw-pad-top-lg{padding-top:var(--lg)}.sw-pad-top-xlg{padding-top:var(--xlg)}.import-text-xs{font-size:.8em}.import-text-sm{font-size:.9em}.import-text-md{font-size:1em}.import-text-lg{font-size:1.1em}.import-text-xlg{font-size:1.2em}:host ::ng-deep .mat-form-field .mat-form-field-infix{width:0!important}:host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-flex{margin-top:0!important}.pop-entity-field-container{position:relative;display:block;min-height:30px;width:100%;box-sizing:border-box;max-width:var(--field-max-width);margin-top:10px;clear:both}.pop-entity-field-container .import-field-item-container{margin-top:5px!important}.pop-entity-field-container ::ng-deep .mat-form-field-infix{width:0!important}.pop-entity-field-container ::ng-deep .mat-form-field-flex{margin-top:0!important}"]
                },] }
    ];
    PopEntityFieldComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopEntityFieldComponent.propDecorators = {
        field: [{ type: i0.Input }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }]
    };

    var PopDomService = /** @class */ (function () {
        function PopDomService() {
            this.id = PopUid();
            this.name = 'PopDomService';
            this.asset = {
                sessionKeys: { height: 1, width: 1, state: 1, active: 1, session: 1 },
                map: {}
            };
            this.ui = {
                active: {},
                fields: new Map(),
                map: {}
            };
            this.position = {};
            this.map = {};
            this.components = {};
        }
        PopDomService.prototype.onRegister = function (component) {
            if (component.name && typeof component.id !== 'undefined' && component.dom) {
                if (this.components[component.name] && this.components[component.name][component.id]) {
                    this.applyDomKeys(component);
                }
                else {
                    this.createDomSession(component);
                }
            }
        };
        PopDomService.prototype.onSession = function (dom, key) {
            if (key === void 0) { key = null; }
            if (dom.name && dom.id) {
                this.sessionDomKeys(dom, key);
            }
        };
        PopDomService.prototype.getComponentHeight = function (component, componentId) {
            if (componentId === void 0) { componentId = 1; }
            return this.components[component] && this.components[component][componentId] && IsObject(this.components[component][componentId].height, true) ? this.components[component][componentId].height : null;
        };
        PopDomService.prototype.getComponentWidth = function (component, componentId) {
            if (componentId === void 0) { componentId = 1; }
            return this.components[component] && this.components[component][componentId] && IsObject(this.components[component][componentId].width, true) ? this.components[component][componentId].width : null;
        };
        PopDomService.prototype.getComponentSession = function (component, componentId) {
            if (componentId === void 0) { componentId = 1; }
            return this.components[component] && this.components[component][componentId] && IsObject(this.components[component][componentId].onSession, true) ? this.components[component][componentId].onSession : null;
        };
        PopDomService.prototype.onDetach = function (name, id) {
            if (name && id) {
                if (this.components[name] && this.components[name][id]) {
                    delete this.components[name][id];
                }
            }
        };
        PopDomService.prototype.ngOnDestroy = function () {
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopDomService.prototype.createDomSession = function (component) {
            if (component.name && typeof component.id !== 'undefined') {
                if (!this.components[component.name])
                    this.components[component.name] = {};
                if (!this.components[component.name][component.id])
                    this.components[component.name][component.id] = {};
                // if( dom.emitter instanceof EventEmitter ) this.components[ dom.name ][ dom.entityId ].emitter = dom.emitter;
                this.sessionDomKeys(component);
            }
        };
        PopDomService.prototype.applyDomKeys = function (component) {
            var _this = this;
            if (this.components[component.name] && this.components[component.name][component.id]) {
                Object.keys(this.components[component.name][component.id]).map(function (key) {
                    if (key && _this.asset.sessionKeys[key]) {
                        component.dom[key] = _this.components[component.name][component.id][key];
                    }
                });
            }
        };
        PopDomService.prototype.sessionDomKeys = function (component, key) {
            var _this = this;
            if (key === void 0) { key = null; }
            if (this.components[component.name] && this.components[component.name][component.id]) {
                if (key && key in this.asset.sessionKeys) {
                    if (IsObject(component.dom[key], true)) {
                        this.components[component.name][component.id][key] = component.dom[key];
                    }
                }
                else {
                    Object.keys(this.asset.sessionKeys).map(function (sessionKey) {
                        if (IsObject(component.dom[sessionKey], true)) {
                            _this.components[component.name][component.id][sessionKey] = component.dom[sessionKey];
                        }
                    });
                }
            }
        };
        return PopDomService;
    }());
    PopDomService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopDomService_Factory() { return new PopDomService(); }, token: PopDomService, providedIn: "root" });
    PopDomService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopDomService.ctorParameters = function () { return []; };

    var PopTableDialogComponent$1 = /** @class */ (function () {
        function PopTableDialogComponent(dialog, data) {
            this.dialog = dialog;
            this.data = data;
            this.ui = {
                table: undefined,
            };
            this._buildTable();
        }
        PopTableDialogComponent.prototype.ngOnInit = function () {
        };
        PopTableDialogComponent.prototype._buildTable = function () {
            var tableData = this.data.data;
            this.data.table.data = tableData;
            this.ui.table = this.data.table;
        };
        PopTableDialogComponent.prototype.onClose = function () {
            this.dialog.close(null);
        };
        return PopTableDialogComponent;
    }());
    PopTableDialogComponent$1.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-table-dialog',
                    template: "<div class=\"container\">\n  <!-- <h2 class=\"confirmation-header\"> {{data.display}} </h2>\n  <div class=\"cpcup-body\"> {{data.body}} </div>\n  <div class=\"pull-right\">\n      <button mat-raised-button class=\"mat-raised-button\" (click)=\"onClose()\" role=\"button\"> CLOSE </button>\n  </div> -->\n  <h1 class=\"cpc-confirmation-dialog-header\">{{data.header}}</h1>\n  <!-- <div [ngClass]=\"{'sw-hidden': !data.body}\" class=\"cpc-confirmation-body pt-10\" [innerHTML]=\"data.body\"></div> -->\n  <p class=\"cpc-confirmation-body\">{{data.message}}</p>\n  <div>\n    <lib-pop-table [config]=\"ui.table\"></lib-pop-table>\n  </div>\n\n  <div class=\"cpc-confirmation-dialog-footer cpc-pull-right\">\n    <button mat-raised-button class=\"mat-raised-button\" (click)=\"onClose()\" role=\"button\"> CLOSE</button>\n  </div>\n</div>\n",
                    styles: [".cpc-pull-right{margin-top:var(--gap-lm);float:right}.cpc-pull-right button{margin-right:var(--radius-xl)}:host ::ng-deep .pop-table-container{overflow-y:scroll}.cpc-confirmation-dialog-header{margin-top:0;text-align:center}.cpc-confirmation-body{margin:var(--gap-s) 0 var(--gap-lm) 0;padding:var(--gap-m);overflow-y:auto}.cpc-confirmation-dialog-footer{display:flex;justify-content:space-between;align-items:center}:host ::ng-deep .pop-table-footer{display:none!important}"]
                },] }
    ];
    PopTableDialogComponent$1.ctorParameters = function () { return [
        { type: i1$2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] }
    ]; };

    var PopSideBySideComponent = /** @class */ (function (_super) {
        __extends(PopSideBySideComponent, _super);
        function PopSideBySideComponent(el, _domRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopSideBySideComponent';
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                param: exports.ServiceInjector.get(PopEntityUtilParamService),
                router: exports.ServiceInjector.get(i1.Router),
            };
            _this.availableFilterValue = '';
            _this.assignedFilterValue = '';
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.id = this.config.id ? this.config.id : PopUid();
                        this._trackAssignedOptions();
                        this._setHooks();
                        this._setContextMenu();
                        this._checkForAssignedOptions();
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this._setHeight()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * This component should have a purpose
         */
        PopSideBySideComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Filter Utility
         * @param type
         * @param filter
         */
        PopSideBySideComponent.prototype.onApplyFilter = function (type, filter) {
            var _this = this;
            this.dom.setTimeout('apply-filter', function () {
                if (_this.config.filterBoth) {
                    _this.onFilterBoth(filter);
                    _this.assignedFilterValue = filter;
                    _this.availableFilterValue = filter;
                }
                else {
                    if (type === 'assigned') {
                        _this._filterAssignedOptions(filter);
                        _this.assignedFilterValue = filter;
                    }
                    else {
                        _this._filterAvailableOptions(filter);
                        _this.availableFilterValue = filter;
                    }
                }
                _this.onBubbleEvent('apply-filter', null, { method: type, value: filter });
            }, 200);
        };
        /**
         * Filter both columns
         */
        PopSideBySideComponent.prototype.onFilterBoth = function (filter) {
            this.config.options.values.map(function (option) {
                option.assignedFilter = option.optionFilter = !ObjectContainsTagSearch(option, filter);
            });
        };
        /**
         * Assign a specific option
         */
        PopSideBySideComponent.prototype.onOptionAssign = function (option, confirmed) {
            var _this = this;
            if (confirmed === void 0) { confirmed = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.config.disabled) return [3 /*break*/, 5];
                            if (!(IsObject(option, true) && !this.ui.assigned[option.value] && !option.optionBlock && !option.optionFilter)) return [3 /*break*/, 4];
                            if (!this.config.facadeEvent) return [3 /*break*/, 1];
                            this.onBubbleEvent('facadeEvent', 'Facade Event has been triggered', {
                                method: 'remove',
                                options: [option],
                                ids: [+option.value]
                            }, true);
                            return [2 /*return*/, resolve(true)];
                        case 1: return [4 /*yield*/, this._assign([option], confirmed)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                        case 3: return [3 /*break*/, 5];
                        case 4: return [2 /*return*/, resolve(true)];
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Assign all options
         */
        PopSideBySideComponent.prototype.onAssignAllOptions = function (confirmed) {
            var _this = this;
            if (confirmed === void 0) { confirmed = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var options;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = this.config.options.values.filter(function (option) {
                                return !_this.ui.assigned[option.value] && !option.optionBlock && !option.optionFilter;
                            });
                            if (!options.length) {
                                return [2 /*return*/, resolve(true)];
                            }
                            if (!this.config.facadeEvent) return [3 /*break*/, 1];
                            this.onBubbleEvent('facadeEvent', 'Facade Event has been triggered', {
                                method: 'assign',
                                options: options,
                                ids: options.map(function (o) { return +o.value; })
                            }, true);
                            return [2 /*return*/, resolve(true)];
                        case 1: return [4 /*yield*/, this._assign(options, confirmed)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * Remove an option that is assigned
         * @param option
         * @param confirmed
         */
        PopSideBySideComponent.prototype.onRemoveOption = function (option, confirmed) {
            var _this = this;
            if (confirmed === void 0) { confirmed = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.config.disabled) return [3 /*break*/, 5];
                            if (!IsObject(option)) return [3 /*break*/, 4];
                            if (!this.config.facadeEvent) return [3 /*break*/, 1];
                            this.onBubbleEvent('facadeEvent', 'Facade Event has been triggered', {
                                method: 'remove',
                                options: [option],
                                ids: [+option.value]
                            }, true);
                            return [2 /*return*/, resolve(true)];
                        case 1: return [4 /*yield*/, this._remove([option], confirmed)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                        case 3: return [3 /*break*/, 5];
                        case 4: return [2 /*return*/, resolve(true)];
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Remove all options that are assigned
         */
        PopSideBySideComponent.prototype.onRemoveAllOptions = function (confirmed) {
            var _this = this;
            if (confirmed === void 0) { confirmed = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var options;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.config.patch.removeErrMessage = '';
                            options = [];
                            this.config.options.values.map(function (option) {
                                if (_this.ui.assigned[option.value] && !option.assignedFilter) {
                                    option.patching = true;
                                    options.push(option);
                                }
                            });
                            if (!options.length) {
                                return [2 /*return*/, resolve(true)];
                            }
                            if (!this.config.facadeEvent) return [3 /*break*/, 1];
                            this.onBubbleEvent('facadeEvent', 'Facade Event has been triggered', {
                                method: 'remove',
                                options: options,
                                ids: options.map(function (o) { return +o.value; })
                            }, true);
                            return [2 /*return*/, resolve(true)];
                        case 1: return [4 /*yield*/, this._remove(options, confirmed)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * Go to linked route of option
         * @param option
         */
        PopSideBySideComponent.prototype.onNavigateToOptionRoute = function (option) {
            var _this = this;
            if (this.config.route) {
                var route_1 = this.config.route.slice();
                route_1 = String(route_1).replace(/:value/g, '' + option.value).replace(/:name/g, option.name);
                this.srv.router.navigateByUrl(route_1).then(function (data) {
                })
                    .catch(function (e) {
                    // const errMessage = 'Route not found:' + route;
                    // console.log(e);
                    _this.events.emit({ source: _this.name, type: 'context_menu', name: 'portal', data: route_1, config: _this.config });
                    // option.errMessage = errMessage;
                    // setTimeout(() => {
                    //   if( option.errMessage === errMessage ) option.errMessage = '';
                    // }, 2000);
                });
            }
        };
        /**
         * Intercept the user right mouse click to show a context menu for this component
         * @param option
         * @param event
         */
        PopSideBySideComponent.prototype.onMouseRightClick = function (option, event) {
            var route = this.config.route.slice();
            route = String(route).replace(/:value/g, '' + option.value).replace(/:name/g, option.name);
            if (!route)
                return false;
            // if we haven't returned, prevent the default behavior of the right click.
            event.preventDefault();
            var context = this.dom.contextMenu.config;
            // reset the context menu, and configure it to load at the position clicked.
            context.resetOptions();
            // if(this.config.internal_name) this.dom.contextMenu.addPortalOption(this.config.internal_name, +row.entityId);
            var api_path = route.split('/')[0];
            var entityParams = this.srv.param.getEntityParamsWithPath(api_path, option.value);
            if (entityParams)
                context.addPortalOption(entityParams.internal_name, entityParams.entityId);
            context.addNewTabOption(route);
            context.x = event.clientX;
            context.y = event.clientY;
            context.toggle.next(true);
        };
        PopSideBySideComponent.prototype.onBubbleEvent = function (eventName, message, extend, force) {
            if (message === void 0) { message = null; }
            if (extend === void 0) { extend = {}; }
            if (force === void 0) { force = false; }
            var event = {
                type: 'field',
                name: eventName,
                source: this.name
            };
            if (this.config)
                event.config = this.config;
            if (message)
                event.message = message;
            Object.keys(extend).map(function (key) {
                event[key] = extend[key];
            });
            this.log.event("onBubbleEvent", event);
            if (this.config.bubble || force) {
                this.events.emit(event);
            }
            return event;
        };
        /**
         * Clean up the dom of this component
         */
        PopSideBySideComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopSideBySideComponent.prototype._assign = function (options, confirmed) {
            var _this = this;
            if (confirmed === void 0) { confirmed = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var request;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._beforePatch(options);
                            if (!this.config.facade) return [3 /*break*/, 2];
                            return [4 /*yield*/, Sleep(500)];
                        case 1:
                            _a.sent();
                            this._onAssignSuccess(options);
                            return [2 /*return*/, resolve(true)];
                        case 2:
                            if (this.config.patch.path && this.config.patch.field) {
                                request = this._getRequest('assign', this._getRequestBody('assign', options, confirmed));
                                request.subscribe(function (res) { return __awaiter(_this, void 0, void 0, function () {
                                    var isConfirmed;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (res.data)
                                                    res = res.data;
                                                if (!res.confirmation) return [3 /*break*/, 2];
                                                return [4 /*yield*/, this._confirmAction(res.confirmation)];
                                            case 1:
                                                isConfirmed = _a.sent();
                                                if (isConfirmed) {
                                                    this._assign(options, true).then(function () { return true; });
                                                }
                                                return [3 /*break*/, 3];
                                            case 2:
                                                this._onAssignSuccess(options);
                                                this.onBubbleEvent('patch', 'Patched', {
                                                    success: true,
                                                    method: 'assign',
                                                    ids: options.map(function (o) { return o.value; }),
                                                    value: this.config.assigned
                                                }, true);
                                                _a.label = 3;
                                            case 3: return [2 /*return*/, resolve(res)];
                                        }
                                    });
                                }); }, function (err) {
                                    _this._handleAssignError(err);
                                    _this._onAssignFail(options);
                                    return resolve(false);
                                });
                            }
                            else {
                                this._onAssignSuccess(options);
                                return [2 /*return*/, resolve(true)];
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        };
        PopSideBySideComponent.prototype._remove = function (options, confirmed) {
            var _this = this;
            if (options === void 0) { options = []; }
            if (confirmed === void 0) { confirmed = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var value, path, request;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._beforePatch(options);
                            if (!this.config.facade) return [3 /*break*/, 2];
                            return [4 /*yield*/, Sleep(500)];
                        case 1:
                            _a.sent();
                            this._onRemoveSuccess(options);
                            return [2 /*return*/, resolve(true)];
                        case 2:
                            if (this.config.patch.path && this.config.patch.field) {
                                if (!confirmed && this.config.patch.conflictPath) {
                                    value = options[0].value;
                                    path = InterpolateString(this.config.patch.conflictPath, { value: value });
                                    // users/{entityId}/roles/{value}/conflicts
                                    exports.PopRequest.doPost(path, {}).subscribe(function (res) { return __awaiter(_this, void 0, void 0, function () {
                                        var isConfirmed;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (res.data)
                                                        res = res.data;
                                                    if (!IsArray(res, true)) return [3 /*break*/, 2];
                                                    options.map(function (option) {
                                                        option.patching = false;
                                                    });
                                                    return [4 /*yield*/, this._confirmAction(res[0])];
                                                case 1:
                                                    isConfirmed = _a.sent();
                                                    if (isConfirmed) {
                                                        this._remove(options, true).then(function () { return true; });
                                                    }
                                                    return [3 /*break*/, 3];
                                                case 2:
                                                    this._remove(options, true).then(function () { return true; });
                                                    _a.label = 3;
                                                case 3: return [2 /*return*/];
                                            }
                                        });
                                    }); });
                                }
                                else {
                                    request = this._getRequest('remove', this._getRequestBody('remove', options, confirmed));
                                    request.subscribe(function (res) { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            if (res.data)
                                                res = res.data;
                                            this._onRemoveSuccess(options);
                                            this.onBubbleEvent('patch', 'Patched', {
                                                success: true,
                                                method: 'remove',
                                                ids: options.map(function (o) { return o.value; }),
                                                value: this.config.assigned
                                            }, true);
                                            return [2 /*return*/, resolve(res)];
                                        });
                                    }); }, function (err) {
                                        _this._handleRemoveError(err);
                                        _this._onRemoveFail(options);
                                    });
                                }
                            }
                            else {
                                this._onRemoveSuccess(options);
                                return [2 /*return*/, resolve(true)];
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        };
        PopSideBySideComponent.prototype._getRequestBody = function (method, options, confirmed) {
            if (confirmed === void 0) { confirmed = false; }
            if (this.config.patch.field) {
            }
            var body = {};
            if (this.config.patch.metadata) {
                for (var i in this.config.patch.metadata) {
                    if (!this.config.patch.metadata.hasOwnProperty(i))
                        continue;
                    body[i] = this.config.patch.metadata[i];
                }
            }
            body[this.config.patch.field] = options.map(function (o) { return o.value; });
            body['method'] = method;
            body['confirmed'] = confirmed;
            return body;
        };
        PopSideBySideComponent.prototype._getRequest = function (method, body) {
            if (body === void 0) { body = {}; }
            var path = this.config.patch.path;
            var ignore401 = (this.config.patch.ignore401 ? true : null);
            var version = (this.config.patch.version ? this.config.patch.version : 1);
            var post = {};
            if (this.config.patch.metadata) {
                for (var i in this.config.patch.metadata) {
                    if (!this.config.patch.metadata.hasOwnProperty(i))
                        continue;
                    post[i] = this.config.patch.metadata[i];
                }
            }
            if (this.config.patch.addId) {
                var id = body[this.config.patch.field][0];
                path = InterpolateString(this.config.patch.path, { id: id });
            }
            if (method === 'assign') {
                switch (String(this.config.patch.assignMethod).toLowerCase()) {
                    case 'patch':
                        return exports.PopRequest.doPatch("" + path, body, version, ignore401);
                        break;
                    case 'post':
                        return exports.PopRequest.doPost("" + path, body, version, ignore401);
                        break;
                    default:
                        return exports.PopRequest.doPost("" + path, body, version, ignore401);
                        break;
                }
            }
            else {
                switch (String(this.config.patch.removedMethod).toLowerCase()) {
                    case 'patch':
                        return exports.PopRequest.doPatch("" + path, body, version, ignore401);
                        break;
                    case 'post':
                        return exports.PopRequest.doPost("" + path, body, version, ignore401);
                        break;
                    case 'delete':
                        return exports.PopRequest.doDelete("" + path, body, version, ignore401);
                        break;
                    default:
                        return exports.PopRequest.doDelete("" + path, body, version, ignore401);
                        break;
                }
                return exports.PopRequest.doDelete("" + path, body, version, ignore401);
            }
        };
        PopSideBySideComponent.prototype._handleAssignError = function (err) {
            this.config.patch.assignErrMessage = GetHttpErrorMsg(err);
            this.config.patch.running = false;
        };
        PopSideBySideComponent.prototype._handleRemoveError = function (err) {
            this.config.patch.removeErrMessage = GetHttpErrorMsg(err);
            this.config.patch.running = false;
        };
        PopSideBySideComponent.prototype._onAssignSuccess = function (options) {
            var _this = this;
            if (options === void 0) { options = []; }
            this.config.patch.running = false;
            options.map(function (option) {
                _this.ui.assigned[option.value] = 1;
                option.patching = false;
            });
            this._checkForAssignedOptions();
            var event = this.onBubbleEvent('assign', 'Assigned', {
                method: 'assign',
                ids: options.map(function (o) { return o.value; }),
                value: this.config.assigned
            });
            if (IsCallableFunction(this.config.patch.callback)) {
                this.config.patch.callback(this.core, event);
            }
        };
        PopSideBySideComponent.prototype._beforePatch = function (options) {
            if (options === void 0) { options = []; }
            this.config.patch.removeErrMessage = '';
            this.config.patch.running = true;
            options.map(function (option) {
                option.patching = true;
                option.errMessage = '';
            });
        };
        PopSideBySideComponent.prototype._formatConflictData = function (conflictData) {
            var tableData = conflictData.map(function (pods) {
                return { pod: pods.name, title: pods.pivot.is_leader ? 'Leader' : 'Member' };
            });
            return tableData;
        };
        PopSideBySideComponent.prototype._confirmAction = function (conflictData) {
            var _this = this;
            return new Promise(function (resolve) {
                var tableData = _this._formatConflictData(conflictData);
                _this.srv.dialog.open(PopTableDialogComponent$1, {
                    width: '500px',
                    data: {
                        data: tableData,
                        type: 'sideBySide',
                        table: _this.config.patch.conflictTableConfig,
                        message: _this.config.patch.conflictMessage,
                        header: _this.config.patch.conflictHeader ? _this.config.patch.conflictHeader : ''
                    }
                }).afterClosed().subscribe(function (res) {
                    return resolve(res ? true : false);
                });
            });
        };
        PopSideBySideComponent.prototype._onAssignFail = function (options) {
            var _this = this;
            if (options === void 0) { options = []; }
            this.config.patch.running = false;
            options.map(function (option) {
                delete _this.ui.assigned[option.value];
                option.patching = false;
            });
            this._checkForAssignedOptions();
        };
        PopSideBySideComponent.prototype._onRemoveFail = function (options) {
            var _this = this;
            if (options === void 0) { options = []; }
            this.config.patch.running = false;
            options.map(function (option) {
                _this.ui.assigned[option.value] = 1;
                option.patching = false;
            });
            this._checkForAssignedOptions();
        };
        PopSideBySideComponent.prototype._onRemoveSuccess = function (options) {
            var _this = this;
            if (options === void 0) { options = []; }
            this.config.patch.running = false;
            options.map(function (option) {
                delete _this.ui.assigned[option.value];
                option.patching = false;
            });
            this._checkForAssignedOptions();
            var event = this.onBubbleEvent('remove', 'Removed', {
                method: 'remove',
                ids: options.map(function (o) { return o.value; }),
                value: this.config.assigned
            });
            if (IsCallableFunction(this.config.patch.callback)) {
                this.config.patch.callback(this.core, event);
            }
        };
        /**
         * Helper function that naivgates the complexity of the setting the heights needed in this component
         */
        PopSideBySideComponent.prototype._setHeight = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.dom.overhead = 2;
                if (_this.config.hasHeader)
                    _this.dom.overhead += 38;
                if (_this.config.hasFilterRow)
                    _this.dom.overhead += 49;
                if (_this.config.hasLabelRow)
                    _this.dom.overhead += 45;
                if (!_this.config.height)
                    _this.config.height = exports.PopTemplate.getContentHeight(false, 270);
                var tabColumnHeight = _this.dom.repo.getComponentHeight('PopEntityTabColumnComponent', _this.position);
                if (!tabColumnHeight)
                    tabColumnHeight = _this.dom.repo.getComponentHeight('PopTabMenuComponent', 1);
                if (tabColumnHeight && tabColumnHeight.inner) {
                    _this.dom.height.default = tabColumnHeight.inner - 20;
                }
                else {
                    _this.dom.height.default = exports.PopTemplate.getContentHeight(false, _this.dom.overhead);
                }
                if (_this.config.parentClassName) {
                    _this.dom.overhead = _this.dom.overhead + (Math.abs(_this.el.nativeElement.offsetTop) + 100);
                    _this.dom.setHeightWithParent(_this.config.parentClassName, _this.dom.overhead, _this.dom.height.default).then(function (res) {
                        _this.log.info("setHeight with " + _this.config.parentClassName);
                        return resolve(true);
                    });
                }
                else {
                    if (_this.config.height) {
                        // if( this.config.height < ( this.dom.overhead * 2 ) ) this.config.height = this.dom.overhead * 2;
                        _this.dom.setHeight(_this.config.height, _this.dom.overhead);
                        _this.log.info("setHeight with config.height:" + _this.config.height + " - overhead:" + _this.dom.overhead);
                    }
                    else if (_this.config.bucketHeight) {
                        _this.config.height = _this.config.bucketHeight + _this.dom.overhead;
                        _this.dom.setHeight(+_this.config.height, _this.dom.overhead);
                        _this.log.info("setHeight with config.bucketHeight:" + _this.config.bucketHeight + " - overhead:" + _this.dom.overhead);
                    }
                    else if (_this.config.bucketLimit) {
                        _this.config.bucketLimit = _this.config.bucketLimit > _this.config.options.values.length ? _this.config.options.values.length : _this.config.bucketLimit;
                        _this.config.bucketHeight = (_this.config.bucketLimit * 30.5);
                        _this.config.height = _this.config.bucketHeight + _this.dom.overhead;
                        _this.dom.setHeight(+_this.config.height, _this.dom.overhead);
                        _this.log.info("setHeight with config.bucketLimit:" + _this.config.bucketLimit + " - overhead:" + _this.dom.overhead);
                    }
                    else {
                        _this.log.info("setHeight with defaultHeight:" + _this.dom.height.default + " - overhead:" + _this.dom.overhead);
                        _this.dom.setHeight(_this.dom.height.default, _this.dom.overhead);
                    }
                    return resolve(true);
                }
            });
        };
        /**
         * This will block certain options from being available
         * @param bucket
         * @param ids
         */
        PopSideBySideComponent.prototype._blockBucketOptions = function (bucket, ids) {
            var _this = this;
            if (['assign', 'option', 'both'].includes(bucket)) {
                var map_1 = ArrayMapSetter(this.config.options.values, 'value');
                ids.map(function (id) {
                    if (id in map_1) {
                        if (bucket === 'assign') {
                            _this.config.options.values[map_1[id]].assignBlock = true;
                        }
                        else if (bucket === 'option') {
                            _this.config.options.values[map_1[id]].optionBlock = true;
                        }
                        else {
                            _this.config.options.values[map_1[id]].assignBlock = true;
                            _this.config.options.values[map_1[id]].optionBlock = true;
                        }
                    }
                });
            }
        };
        /**
         * This will un-block certain options from being available
         * @param bucket
         * @param ids
         */
        PopSideBySideComponent.prototype._unblockBucketOptions = function (bucket, ids) {
            var _this = this;
            if (['assign', 'option', 'both'].includes(bucket)) {
                var map_2 = ArrayMapSetter(this.config.options.values, 'value');
                ids.map(function (id) {
                    if (id in map_2) {
                        if (bucket === 'assign') {
                            _this.config.options.values[map_2[id]].assignBlock = false;
                        }
                        else if (bucket === 'option') {
                            _this.config.options.values[map_2[id]].optionBlock = false;
                        }
                        else {
                            _this.config.options.values[map_2[id]].assignBlock = false;
                            _this.config.options.values[map_2[id]].optionBlock = false;
                        }
                    }
                });
            }
        };
        /**
         * Allow other modules to trigger certain functionality
         * @param option
         * @param event
         */
        PopSideBySideComponent.prototype._setHooks = function () {
            var _this = this;
            this.config.assign = function (options, confirmed) {
                if (confirmed === void 0) { confirmed = false; }
                return _this._assign(options, confirmed);
            };
            this.config.remove = function (options, confirmed) {
                if (confirmed === void 0) { confirmed = false; }
                return _this._remove(options, confirmed);
            };
            this.config.removeAllOptions = function () {
                return rxjs.of(_this.onRemoveAllOptions());
            };
            this.config.addAllOptions = function () {
                return rxjs.of(_this.onAssignAllOptions());
            };
            this.config.applyFilter = function (type, filter) {
                _this.onApplyFilter(type, filter);
            };
            this.config.getAssigned = function () {
                return _this.config.assigned.slice();
            };
            this.config.block = function (bucket, ids) {
                _this._blockBucketOptions(bucket, ids);
            };
            this.config.unblock = function (bucket, ids) {
                _this._unblockBucketOptions(bucket, ids);
            };
        };
        /**
         * Intercept the user right mouse click to show a context menu for this component
         * @param option
         * @param event
         */
        PopSideBySideComponent.prototype._setContextMenu = function () {
            var _this = this;
            this.dom.contextMenu.config = new PopContextMenuConfig();
            this.dom.setSubscriber('context-menu', this.dom.contextMenu.config.emitter.subscribe(function (event) {
                _this.log.event("context-menu", event);
                _this.events.emit(event);
            }));
        };
        /**
         * Get the count of assigned options
         */
        PopSideBySideComponent.prototype._checkForAssignedOptions = function () {
            this.config.assigned = Object.keys(this.ui.assigned);
            this.ui.assignedCount = this.config.assigned.length;
            this.ui.optionsCount = this.config.options.values.length;
            if (this.ui.assignedCount == this.ui.optionsCount)
                this.ui.optionsCount = 0;
        };
        /**
         * Filter assigned options
         * @param filter
         */
        PopSideBySideComponent.prototype._filterAssignedOptions = function (filter) {
            this.config.options.values.map(function (option) {
                option.assignedFilter = !ObjectContainsTagSearch(option, filter);
            });
        };
        /**
         * Filter un-assigned options
         * @param filter
         */
        PopSideBySideComponent.prototype._filterAvailableOptions = function (filter) {
            this.config.options.values.map(function (option) {
                option.optionFilter = !ObjectContainsTagSearch(option, filter);
            });
        };
        /**
         * Set the intial state of the assigned options
         */
        PopSideBySideComponent.prototype._trackAssignedOptions = function () {
            var _this = this;
            this.ui.assigned = {};
            this.config.assigned.map(function (optionID) {
                _this.ui.assigned[optionID] = 1;
            });
        };
        return PopSideBySideComponent;
    }(PopExtendComponent));
    PopSideBySideComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-side-by-side',
                    template: "<div class=\"sbs-container\" [style.height.px]=dom.height.outer *ngIf=\"dom.state.loaded\">\n  <div *ngIf=\"config.display && config.displayTitle\" class=\"sbs-row-container\">\n    <div class=\"sbs-title\">{{config.display}}</div>\n  </div>\n\n  <div class=\"sbs-row-container sbs-border-top sbs-border-r sbs-border-l\" *ngIf=\"config.hasLabelRow\">\n    <div class=\"sbs-column-container sbs-border-r sbs-header\">\n      <div class=\"sbs-column-content sbs-center-text-vert\" >\n        <div class=\"sbs-row-container\">\n          <div class=\"sbs-error-container sbs-assigned-error-container\" *ngIf=\"config.patch.removeErrMessage\">\n            <div class=\"sw-pointer options-error\" matTooltipPosition=\"right\" [matTooltip]=\"config.patch.removeErrMessage\">\n              <mat-icon class=\"sbs-error-icon\" color=\"warn\">info</mat-icon>\n            </div>\n        </div>\n\n        <div class=\"sbs-item-toggle-container sw-pointer sbs-item-toggle-container-left\" *ngIf=\"config.removeAll\">\n          <div class=\"sw-push-button-label\"\n\n               [ngClass]=\"{'sw-disabled': config.disabled || config.patch.running}\"\n               (click)=\"onRemoveAllOptions();\"\n               matTooltipPosition=\"above\"\n               [matTooltip]=\"'Remove All'\"\n               [matTooltipShowDelay]=\"750\"\n               [matTooltipHideDelay]=\"250\">\n            <p>S</p>\n            <div class=\"sw-push-button-inner-label\">\n            </div>\n          </div>\n        </div>\n\n        <div class=\"sbs-row-container sbs-flex sbs-title-left\"\n             [ngClass]=\"{'sw-hidden': !config.assignedLabel, 'sw-disabled': config.disabled}\">\n            <div class=\"sbs-flex mat-body-2 sbs-label header-label\">{{config.assignedLabel}}</div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"sbs-column-container sbs-header\">\n      <div class=\"sbs-column-content sbs-center-text-vert\">\n        <div class=\"sbs-row-container\">\n\n          <div class=\"sbs-item-toggle-container\"\n               *ngIf=\"config.assignAll\">\n            <div class=\"sw-push-button-label sw-pointer\"\n                 [ngClass]=\"{'sw-disabled': config.disabled || config.patch.running}\"\n                 (click)=\"onAssignAllOptions();\"\n                 matTooltipPosition=\"above\"\n                 [matTooltipShowDelay]=\"750\"\n                 [matTooltipHideDelay]=\"250\"\n                 [matTooltip]=\"'Assign All'\">\n              <p class=\"rotate\">S</p>\n              <div class=\"sw-push-button-inner-label\">\n              </div>\n            </div>\n\n          </div>\n          <div class=\"sbs-row-container sbs-flex sbs-title-left\"\n               [ngClass]=\"{'sw-hidden': !config.optionsLabel,'sw-disabled': config.disabled}\">\n            <div class=\"sbs-label sbs-flex sbs-header-label mat-body-2 header-label\">{{config.optionsLabel}}</div>\n          </div>\n          <div class=\"sbs-error-container sbs-options-error-container\" *ngIf=\"config.patch.assignErrMessage\">\n            <div class=\"sw-pointer options-error\"\n                 matTooltipPosition=\"left\"\n                 [matTooltip]=\"config.patch.assignErrMessage\">\n              <mat-icon class=\"sbs-error-icon\" color=\"warn\">info</mat-icon>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"sbs-row-container \" *ngIf=\"config.hasFilterRow && !config.filterBoth\">\n    <div class=\"sbs-column-container sbs-search-header sbs-border-l sbs-border-top \">\n      <div class=\"sbs-column-content sbs-center-text-vert\">\n        <div class=\"sbs-row-container\">\n          <mat-icon matPrefix class=\"sbs-search-icon\">search</mat-icon>\n          <input #assignedFilter class=\"sbs-flex sbs-filter mat-body-2\" placeholder=\"Search\"\n                 (keyup)=\"onApplyFilter('assigned', $event.target['value'])\">\n          <mat-icon class=\"sw-pointer sbs-clear-filter\"  class=\"sw-pointer sbs-clear-filter\" [ngClass]=\"{'hide-clear-icon': !this.assignedFilterValue, 'show-clear-icon': this.assignedFilterValue}\"\n                    (click)=\"assignedFilter.value = ''; assignedFilter.focus(); onApplyFilter('assigned', '');\">clear\n          </mat-icon>\n        </div>\n      </div>\n    </div>\n    <div class=\"sbs-column-container sbs-border-l sbs-border-r sbs-border-top\">\n      <div class=\"sbs-column-content  sbs-center-text-vert\">\n        <div class=\"sbs-row-container\">\n          <mat-icon matPrefix class=\"sbs-search-icon\">search</mat-icon>\n          <input #optionFilter class=\"sbs-flex sbs-filter\" placeholder=\"Search\"\n                 (keyup)=\"onApplyFilter('options', $event.target['value'])\">\n          <mat-icon class=\"sw-pointer sbs-clear-filter\" [ngClass]=\"{'hide-clear-icon': !this.availableFilterValue, 'show-clear-icon': this.availableFilterValue}\" (click)=\"optionFilter.value = ''; optionFilter.focus(); onApplyFilter('options', '');\">\n            clear\n          </mat-icon>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"sbs-row-container sbs-border-l sbs-border-r sbs-border-top sbs-content-pad sbs-search-header\" *ngIf=\"config.hasFilterRow && config.filterBoth\">\n\n    <div class=\"sbs-column-content  sbs-center-text-vert\">\n      <div class=\"sbs-row-container\">\n\n    <mat-icon matPrefix class=\"sbs-search-icon\">search</mat-icon>\n    <input #bothFilter class=\"sbs-flex sbs-filter\" placeholder=\"Search\" (keyup)=\"onApplyFilter('both', $event.target.value)\">\n    <mat-icon class=\"sw-pointer sbs-clear-filter\" [ngClass]=\"{'hide-clear-icon': !this.availableFilterValue, 'show-clear-icon': this.availableFilterValue}\" (click)=\"bothFilter.value = ''; bothFilter.focus(); onApplyFilter('both', '');\">\n      clear\n    </mat-icon>\n      </div></div>\n  </div>\n\n  <div class=\"sbs-row-container sbs-border-top sbs-border-r sbs-border-l sbs-border-bottom\" [style.height.px]=\"dom.height.inner\">\n    <div class=\"sbs-column-container sbs-border-r sbs-column-left\">\n      <div class=\"sbs-column-container sbs-flex\" *ngIf=\"!ui.optionsCount && config.displayHelper ? '': !ui.assignedCount && config.displayHelper\">\n        <div class=\"sbs-column-content\">\n          <div class=\"sbs-row-container\">\n            <mat-icon class=\"sbs-helper-icon\">sentiment_dissatisfied</mat-icon>\n          </div>\n          <div class=\"sbs-row-container \">\n            <label class=\"help-text sbs-align-center\">{{config.helpText}}</label>\n          </div>\n          <div class=\"sbs-row-container \">\n          <p class=\"help-caption mat-caption sbs-align-center\">Use the arrows <span class=\"left-arrow\">S</span> to make assignments</p>\n          </div>\n        </div>\n      </div>\n      <mat-list class=\"sbs-bucket sbs-assigned-bucket\" [style.height.px]=\"dom.height.inner\" *ngIf=\"ui.assignedCount || !config.displayHelper\">\n        <!--<mat-list-item class=\"sbs-assigned-item\" *ngFor=\"let option of config.options.values\" [ngClass]=\"{'sw-disabled': config.disabled, 'sw-hidden': !ui.assigned[option.value] || option.assignedFilter || option.assignBlock }\" (contextmenu)=onMouseRightClick(option,$event)>-->\n        <mat-list-item class=\"sbs-assigned-item\" *ngFor=\"let option of config.options.values\" [ngClass]=\"{'sw-disabled': config.disabled, 'sw-hidden': !ui.assigned[option.value] || option.assignedFilter || option.assignBlock }\">\n          <div class=\"sbs-item-toggle-container sbs-align-left\">\n            <div class=\"sw-push-button sw-pointer\"\n                 [ngClass]=\"{'sw-hidden': option.patching}\"\n                 matTooltipPosition=\"above\"\n                 [matTooltipShowDelay]=\"750\"\n                 [matTooltipHideDelay]=\"250\"\n                 [matTooltip]=\"'Remove'\"\n                 (click)=\"onRemoveOption(option);\">\n              <p>S</p>\n              <div class=\"sw-push-button-inner\">\n              </div>\n            </div>\n            <div class=\"sbs-feedback-container\"\n                 [ngClass]=\"{'sw-hidden': !option.patching || !config.patch.displayIndicator}\">\n              <lib-main-spinner\n                [options]=\"{strokeWidth:3, color:'accent', diameter:19}\">\n              </lib-main-spinner>\n            </div>\n          </div>\n\n          <div class=\"sw-circle-ID\" *ngIf=\"config.displayCircleID\">\n            {{ option.name | characterIcon }}\n          </div>\n\n          <div class=\"sbs-item-label-container\">\n              <span class=\"sbs-label sbs-flex\">\n                <div [ngSwitch]=\"config.optionHtml\">\n                  <span *ngSwitchCase=\"'label'\" class=\"mat-body-2 sbs-right-bucket-label\">{{option.name}}</span>\n                  <a *ngSwitchCase=\"'route'\" (click)=\"onNavigateToOptionRoute(option);\" class=\"mat-body-2 sbs-right-bucket-label sw-pointer\">{{option.name}}</a></div></span>\n            <div class=\"sw-pointer\"\n                 *ngIf=\"option.errMessage\"\n                 matSuffix=\"\"\n                 matTooltipPosition=\"left\"\n                 [matTooltip]=option.errMessage>\n              <mat-icon color=\"warn\">info</mat-icon>\n            </div>\n          </div>\n\n        </mat-list-item>\n      </mat-list>\n    </div>\n    <div class=\"sbs-column-container  sbs-column-left \">\n      <mat-list class=\"sbs-bucket\" [style.height.px]=\"dom.height.inner\">\n\n        <div class=\"sbs-column-container sbs-flex\" *ngIf=\"!ui.optionsCount && config.displayHelper\">\n          <div class=\"sbs-column-content sbs-mar-btm \">\n            <div class=\"sbs-row-container\">\n              <mat-icon class=\"sbs-helper-icon\">sentiment_dissatisfied</mat-icon>\n            </div>\n            <div class=\"sbs-row-container\">\n              <label class=\"help-text h2 sbs-align-center\">{{config.helpTextRight}}</label>\n            </div>\n            <!--<div class=\"sbs-row-container sbs-align-center\">-->\n            <!--<p class=\"sbs-helper-text sbs-align-center\">Use the arrows <span class=\"sw-push-button-sample\">S</span>to make assignments</p>-->\n            <!--</div>-->\n          </div>\n        </div>\n\n        <!--<mat-list-item *ngFor=\"let option of config.options.values\" [ngClass]=\"{'sw-disabled': config.disabled, 'sw-hidden': ui.assigned[option.value] || option.optionFilter || option.optionBlock}\" (contextmenu)=onMouseRightClick(option,$event)>-->\n        <mat-list-item class=\"sbs-item\" *ngFor=\"let option of config.options.values\" [ngClass]=\"{'sw-disabled': config.disabled, 'sw-hidden': ui.assigned[option.value] || option.optionFilter || option.optionBlock}\">\n          <div class=\"sbs-item-toggle-container\">\n            <div class=\"sw-push-button sw-pointer\"\n                 [ngClass]=\"{'sw-hidden': option.patching}\"\n                 matTooltipPosition=\"above\"\n                 [matTooltipShowDelay]=\"750\"\n                 [matTooltipHideDelay]=\"250\"\n                 [matTooltip]=\"'Assign'\"\n                 (click)=\"onOptionAssign(option);\">\n              <p class=\"rotate\">S</p>\n              <div class=\"sw-push-button-inner\">\n              </div>\n            </div>\n            <div class=\"sbs-feedback-container\"\n                 [ngClass]=\"{'sw-hidden': !option.patching || !config.patch.displayIndicator}\">\n              <lib-main-spinner\n                [options]=\"{strokeWidth:3, color:'accent', diameter:19}\">\n              </lib-main-spinner>\n            </div>\n          </div>\n\n          <div class=\"sw-circle-ID\" *ngIf=\"config.displayCircleID\">\n            {{ option.name | characterIcon }}\n          </div>\n\n          <div class=\"sbs-item-label-container\">\n              <span class=\"sbs-label sbs-flex\">\n                <div [ngSwitch]=\"config.optionHtml\">\n                  <span *ngSwitchCase=\"'label'\" class=\"mat-body-2 sbs-right-bucket-label\">{{option.name}}</span>\n                  <a *ngSwitchCase=\"'route'\" (click)=\"onNavigateToOptionRoute(option);\" class=\"mat-body-2 sbs-right-bucket-label sw-pointer\">{{option.name}}</a>\n                </div>\n              </span>\n            <div class=\"sw-pointer\"\n                 *ngIf=\"option.errMessage\"\n                 matSuffix=\"\"\n                 matTooltipPosition=\"left\"\n                 [matTooltip]=option.errMessage>\n              <mat-icon color=\"warn\">info</mat-icon>\n            </div>\n          </div>\n        </mat-list-item>\n      </mat-list>\n    </div>\n  </div>\n  <!--<lib-pop-context-menu *ngIf=\"dom.contextMenu\" [config]=\"dom.contextMenu.config\"></lib-pop-context-menu>-->\n</div>\n",
                    styles: [".sbs-container{flex:1}.sbs-row-container{display:flex;flex-direction:row;clear:both}.sbs-align-center{align-items:center}.sbs-flex{display:flex;min-width:1%;flex-basis:1%;flex-grow:1}.sbs-column-container{display:flex;flex-direction:column;flex-basis:50%;overflow:hidden}.sbs-column-content{position:relative;display:block}.sbs-title{position:relative;font-size:1em;overflow:hidden;text-overflow:ellipsis;margin:var(--mar-md) 0}.sbs-header{height:46px;background-color:var(--background-main-menu)}.sbs-search-header{height:46px}.header-label{color:var(--foreground-disabled)}.sbs-center-text-vert{margin:auto;width:100%}.sbs-label{position:relative;margin-left:var(--gap-m)}.sbs-label>span{position:relative;font-size:var(--text-md);line-height:var(--gap-m);margin:var(--mar-sm) 0;font-weight:lighter;text-overflow:ellipsis;justify-content:space-between;white-space:nowrap}.sbs-label-null{font-size:var(--text-lg);font-weight:500}.sbs-align-left{text-align:left!important}.sbs-align-center{width:100%;text-align:center!important}.sbs-search-container{position:relative;display:flex;flex-direction:row;align-items:center;height:var(--gap-m)}.sbs-bucket{min-height:var(--gap-lm);height:100%;overflow-y:scroll;overflow-x:hidden;padding-bottom:var(--mar-sm)}.sbs-bucket::-webkit-scrollbar{width:6px}.sbs-left-bucket-label,.sbs-right-bucket-label{position:absolute;left:0;top:-8px;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.sbs-right-bucket-label{min-width:0;color:var(--foreground-header)}.sbs-right-bucket-label:hover{text-decoration:underline;color:var(--foreground-icon);opacity:1}.sbs-bucket::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 var(--gap-lm) var(--darken02);border-radius:var(--border-s)}.sbs-bucket::-webkit-scrollbar-thumb{border-radius:var(--border-s);-webkit-box-shadow:inset 0 0 var(--gap-lm) var(--darken06)}.sbs-assigned-item{position:relative;direction:ltr;height:var(--gap-lm)}.sbs-item{padding-top:px}.sbs-filter{border:0;outline:0;background:none;color:var(--text);padding:0}.sbs-filter::-moz-placeholder{color:var(--foreground-disabled)}.sbs-filter:-ms-input-placeholder{color:var(--foreground-disabled)}.sbs-filter::placeholder{color:var(--foreground-disabled)}.sbs-search-icon,.search-icon{margin-left:var(--gap-m)}.sbs-search-icon{margin-right:var(--gap-xs);font-weight:700}.sbs-clear-filter{position:relative;font-size:24px;text-align:center;margin-right:var(--gap-m)}.sbs-all-icon{outline:0}p.sbs-helper-text{margin:0}.sbs-helper-text{line-height:24px;min-height:24px;font-size:var(---text-sm)}.sbs-helper-icon{width:var(--gap-xxl);height:var(--gap-xxl);font-size:var(--gap-xxl);color:var(--accent);margin:0 auto;padding-top:112px}.sbs-container ::ng-deep .mat-form-field-infix{max-width:100%!important;margin:0 auto!important}.sbs-container ::ng-deep mat-list{padding-top:var(--gap-xxs)!important;border:0!important}.sbs-container ::ng-deep mat-list-item{box-sizing:border-box;height:38px;border-left:0!important}.sbs-container ::ng-deep .mat-list-item-content{padding:0!important;justify-content:space-between;box-sizing:border-box}a{text-decoration:none}.sbs-feedback-container{position:relative;display:flex;height:var(--gap-lm);padding-top:var(--mar-xs);flex-flow:column;align-items:center;justify-content:center}.sbs-item-label-container{display:flex;flex-grow:1;min-width:0;align-items:center}.sbs-item-toggle-container{padding-left:var(--gap-m)}.sbs-error-container,.sbs-item-toggle-container{display:flex;flex-direction:column;align-items:center;justify-content:center}.sbs-error-container{height:var(--gap-lm);width:var(--gap-lm);padding-top:var(--mar-xs)}.sbs-assigned-error-container{top:0}.sbs-assigned-error-container,.sbs-options-error-container{position:absolute;right:0;z-index:2}.options-error{position:relative;top:-6px;left:-5px}.mat-list .mat-list-item,.mat-nav-list .mat-list-item,.mat-selection-list .mat-list-item{background-color:var(--bg-3)}.sbs-border-l{border-left:1px solid var(--border)}.sbs-border-r{border-right:1px solid var(--border)}.sbs-border-top{border-top:1px solid var(--border)}.sbs-border-bottom{border-bottom:1px solid var(--border)}.sw-circle-ID{margin-left:var(--gap-sm);height:24px!important;width:24px!important;line-height:24px}.sw-push-button-label p.rotate{top:-var(--gap-xs)!important}.sw-push-button-label{margin-left:var(--gap-m);position:relative}.sbs-mar-btm{margin-bottom:50px}.left-arrow{display:inline-block;height:10px;width:10px;border-radius:2px;position:relative;text-align:center;background-color:var(--background-code);margin:0;line-height:1.8em;color:#fff;font-size:5px;font-family:pop-icon,sans-serif;transform:rotate(180deg);top:-2px}.help-text{font-size:18px;margin-top:var(--gap-sm)}.help-caption{color:var(--foreground-disabled)}.hide-clear-icon{visibility:hidden}.show-clear-icon{visibility:visible}"]
                },] }
    ];
    PopSideBySideComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopSideBySideComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopConfirmationDialogComponent = /** @class */ (function () {
        function PopConfirmationDialogComponent(config, dialog) {
            this.config = config;
            this.dialog = dialog;
        }
        PopConfirmationDialogComponent.prototype.ngOnInit = function () {
            if (!this.config.display)
                this.config.display = 'Confirmation';
            if (!this.config.option)
                this.config.option = { confirmed: 1 };
            if (!this.config.align)
                this.config.align = 'center';
        };
        PopConfirmationDialogComponent.prototype.onConfirm = function () {
            this.dialog.close(this.config.option);
        };
        PopConfirmationDialogComponent.prototype.onCancel = function () {
            this.dialog.close(null);
        };
        return PopConfirmationDialogComponent;
    }());
    PopConfirmationDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-confirmation-dialog',
                    template: "<h1 class=\"pop-confirmation-dialog-header\">{{config.display}}</h1>\n\n<div [ngClass]=\"{'sw-hidden': !config.body}\" class=\"pop-confirmation-body pop-confirmation-align-{{config.align}}\" [innerHTML]=\"config.body\"></div>\n\n<mat-divider [style.width.%]=100 [style.marginBottom.px]=15></mat-divider>\n\n<div class=\"pop-confirmation-dialog-footer\">\n  <button class=\"pop-confirmation-btn\" mat-raised-button (click)=\"onCancel()\" cdkFocusInitial>Cancel</button>\n  <button class=\"pop-confirmation-btn\" color=\"accent\" mat-raised-button (click)=\"onConfirm()\">Confirm</button>\n</div>\n\n",
                    styles: [".pop-confirmation-dialog-header{margin-top:0;text-align:center}.pop-confirmation-body{margin:var(--gap-s) 0 var(--gap-lm) 0;padding:var(--gap-m);min-height:30px;max-height:400px;overflow-y:auto}.pop-confirmation-align-left{text-align:left}.pop-confirmation-align-center{text-align:center}.pop-confirmation-align-right{text-align:right}.pop-confirmation-dialog-footer{display:flex;min-height:var(--gap-m);justify-content:flex-end;align-items:center}.pop-confirmation-btn{margin-left:var(--gap-s)}"]
                },] }
    ];
    PopConfirmationDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] },
        { type: i1$2.MatDialogRef }
    ]; };

    var PopEntityFieldModalComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldModalComponent, _super);
        function PopEntityFieldModalComponent(dialog, data) {
            var _this = _super.call(this) || this;
            _this.dialog = dialog;
            _this.data = data;
            _this.name = 'PopEntityFieldModalComponent';
            return _this;
        }
        PopEntityFieldModalComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntityFieldModalComponent.prototype.onFormSubmit = function () {
            if (this.dom.state.validated) {
            }
        };
        PopEntityFieldModalComponent.prototype.onFormCancel = function () {
            var _this = this;
            this.dom.state.loaded = false;
            this.dom.setTimeout("close-modal", function () {
                _this.dialog.close(-1);
            }, 500);
        };
        PopEntityFieldModalComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityFieldModalComponent;
    }(PopExtendDynamicComponent));
    PopEntityFieldModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field-modal',
                    template: "<div *ngIf=\"dom.state.loaded\" [@slideInOut]>\n  <div class=\"pop-field-dialog-title\" >{{data.field.name}}</div>\n  <div class=\"pop-field-dialog-fields\">\n    <!--<form [formGroup]=\"ui.form\" (keydown.enter)=\"onEnterPress($event)\" (ngSubmit)=\"onFormSubmit()\" [className]=\"dom.state.pending ? 'in-dialog-field-lock' : ''\">-->\n      <!--<lib-group [ngClass]=\"{'in-dialog-disabled': dom.state.pending}\" [config]=\"config\" (events)=\"onBubbleEvent($event);\"></lib-group>-->\n    <!--</form>-->\n  </div>\n  <div class=\"pop-field-dialog-buttons\">\n    <button class=\"pop-field-dialog-cancel\" mat-raised-button (click)=\"onFormCancel();\" [disabled]=\"dom.state.pending\">\n      Cancel\n    </button>\n    <button class=\"pop-field-dialog-other\" mat-raised-button color=\"accent\" (click)=\"onFormSubmit()\" [disabled]=\"!dom.state.validated || dom.state.pending\">\n      <span *ngIf=\"!dom.state.pending\">OK</span>\n      <div *ngIf=\"dom.state.pending\">\n        <mat-spinner diameter=\"20\"></mat-spinner>\n      </div>\n    </button>\n  </div>\n  <div class=\"pop-field-dialog-message-layout\" *ngIf=\"dom.state.success || dom.error?.message\" [@slideInOut]>\n    <div *ngIf=\"dom.state.success\" class=\"pop-field-dialog-success\">{{dom.state.success}}</div>\n    <div *ngIf=\"dom.error.message\" class=\"pop-field-dialog-errors\">{{dom.error.message}}</div>\n  </div>\n</div>\n",
                    animations: [
                        slideInOut
                    ],
                    styles: [".import-field-item-container{position:relative;min-height:var(--field-min-height);max-width:var(--field-max-width);margin:var(--field-margin-l)}.import-field-item-container-expansion{position:relative;width:100%;height:100%;box-sizing:border-box!important;-moz-box-sizing:border-box}.import-field-item-tooltip-msg{position:absolute;display:block;bottom:50px;width:100%;right:-10px;left:-10px;background:var(--field-tooltip-bg);border-radius:var(--field-tooltip-radius);padding:var(--field-tooltip-padding);color:var(--field-tooltip-color);height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;overflow:hidden;text-align:center;z-index:2}.import-field-item-container .mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.import-field-item-container .mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap,.import-field-item-container .mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start{border-width:1px}.import-field-item-container .mat-form-field-appearance-outline .mat-form-field-outline:not(:focus){background-color:var(--background-base)}:host{position:relative;display:block;min-width:400px}:host .pop-field-dialog-title{font-weight:500;text-align:center;margin-bottom:10px}:host .pop-field-dialog-fields{position:relative;display:block;width:100%;margin-bottom:10px}:host .pop-field-dialog-fields .pop-field-dialog-field{margin-bottom:10px}:host .pop-field-dialog-fields .pop-field-dialog-field-lock{opacity:90%}:host .pop-field-dialog-fields .pop-field-dialog-field-spinner{position:absolute;left:50%;top:50%;margin-left:-22px;margin-top:-40px}:host .pop-field-dialog-buttons{margin-top:20px;margin-bottom:10px;display:flex;justify-content:space-between}:host .pop-field-dialog-buttons .pop-field-dialog-cancel{order:1;display:flex;align-items:center;justify-content:center;min-height:35px;min-width:100px}:host .pop-field-dialog-buttons .pop-field-dialog-other{order:2;display:flex;align-items:center;justify-content:center;margin-left:10px;min-width:100px;min-height:35px}:host .pop-field-dialog-errors{color:var(--warn);text-align:center;word-break:break-word}:host .pop-field-dialog-success{color:var(--success);text-align:center;word-break:break-word}:host .pop-field-dialog-message-layout{display:flex;flex-direction:row;min-height:40px;align-items:center;justify-content:center;text-align:center}:host .pop-field-dialog-disabled{pointer-events:none}"]
                },] }
    ];
    PopEntityFieldModalComponent.ctorParameters = function () { return [
        { type: i1$2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] }
    ]; };

    var PopEntityFieldBoilerComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldBoilerComponent, _super);
        function PopEntityFieldBoilerComponent(el, _domRepo, custom_setting) {
            if (custom_setting === void 0) { custom_setting = {}; }
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.custom_setting = custom_setting;
            _this.name = 'PopEntityFieldBoilerComponent';
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                field: exports.ServiceInjector.get(PopEntityFieldService),
            };
            _this.ui = {
                actionBtnWidth: 0,
                asset: undefined,
            };
            /**
             * This should transformValue and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    // #1: Enforce a CoreConfig
                    _this.field = IsObjectThrowError(_this.field, ['id', 'data_keys'], _this.name + ":configureDom: - this.field") ? _this.field : null;
                    _this.id = _this.field.id;
                    _this.ui.asset = {};
                    _this._setInitialConfig();
                    _this._transformChildren();
                    _this.field.data_keys.map(function (dataKey, index) {
                        _this.dom.session[dataKey] = {};
                        _this.dom.session[dataKey].display = {};
                        _this.dom.state[dataKey] = {
                            open: false,
                            template: _this.field.state,
                            footer_adjust: _this.field.state,
                            customLabel: false
                        };
                    });
                    _this.dom.setSubscriber("parent-event-handler", _this.events.subscribe(function (event) {
                        if (IsObject(event, true)) {
                            if (event.name === 'add') {
                                _this.onAdd(event);
                            }
                        }
                    }));
                    // this.srv.field.setFieldEntries(this.field).then(() => {
                    //   this.srv.field.setFieldValues(this.field).then(() => {
                    //     return resolve(true);
                    //   });
                    // });
                    return resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this._restoreDomSession();
                    _this._setAssetConfigs();
                    _this._setFieldAttributes();
                    return resolve(true);
                });
            };
            return _this;
        }
        PopEntityFieldBoilerComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Handle click of action button
         * @param event
         * @param dataKey
         */
        PopEntityFieldBoilerComponent.prototype.onActionEvent = function (event, dataKey) {
            if (event.type === 'field') {
                switch (String(event.name).toLowerCase()) {
                    // case 'add':
                    //   this.onAdd(event);
                    //   break;
                    case 'remove':
                        this.onRemove(event, dataKey);
                        break;
                    case 'edit':
                        this.onEdit(event, dataKey);
                        break;
                    case 'close':
                        this.onClose(event, dataKey);
                        break;
                    default:
                        break;
                }
            }
            return true;
        };
        /**
         * handle Input Changes from the field items
         * @param event
         * @param dataKey
         * @param name
         */
        PopEntityFieldBoilerComponent.prototype.onFieldItemEvent = function (event, dataKey, name) {
            if (dataKey === void 0) { dataKey = null; }
            if (name === void 0) { name = null; }
            if (IsValidFieldPatchEvent(this.core, event)) {
                this.onPatch(event, dataKey, name);
            }
            else if (event.type === 'field') {
                if (event.name === 'close') {
                    this.onClose(event, dataKey);
                }
            }
            return true;
        };
        /**
         * User wants to add a value entry  into the field
         * @param event
         */
        PopEntityFieldBoilerComponent.prototype.onAdd = function (event) {
            var _this = this;
            // console.log('add lower', this.field.data_keys.length < this.field.entries.length, this.field.entries);
            this.log.event("onAdd", event);
            if (this.field.data_keys.length < this.field.entries.length) {
                var index = this.field.entries.length - 1;
                var item_1 = this.srv.field.addEntryValue(this.core, this.field);
                var data = item_1.data;
                delete item_1.data;
                this.field.data[item_1.entry.id] = data;
                this.field.items[item_1.entry.id] = item_1;
                this.field.data_keys.push(item_1.entry.id + '');
                this._setFieldItemAttribute(item_1.entry.id, index);
                this._setAssetConfig(item_1.entry.id, index);
                this.dom.setTimeout('open-new', function () {
                    _this._updateState(item_1.entry.id, 'open', true);
                }, 0);
                // this.dom.session[ value.entry.id ] = {};
                // this.dom.session[ value.entry.id ].display = {};
                // this.dom.state[ value.entry.id ] = {
                //   open: true,
                //   template: this.field.state,
                //   footer_adjust: this.field.state,
                //   customLabel: false
                // };
            }
            return true;
        };
        /**
         * User wants to open the value entry and make edits
         * @param event
         */
        PopEntityFieldBoilerComponent.prototype.onEdit = function (event, dataKey) {
            var _this = this;
            this.log.event("onEdit", event);
            if (this.field.modal) {
                console.log('has modal');
                var dialogRef = this.srv.dialog.open(PopEntityFieldModalComponent, {
                    width: window.innerWidth * .50 + "px",
                    height: window.innerHeight * .50 + "px",
                    panelClass: 'sw-relative',
                    data: {
                        core: this.core,
                        field: this.field
                    }
                });
                this.dom.subscriber.dialog = dialogRef.beforeClosed().subscribe(function (changed) {
                    if (changed || _this.dom.state.refresh) {
                        // this._configureTable();up
                    }
                    _this.dom.state.blockModal = false;
                });
            }
            else {
                this.dom.state.template = 'template_edit';
                this.dom.state.open = true;
                if (IsDefined(dataKey) && this.dom.state[dataKey]) {
                    this.dom.state[dataKey].template = 'template_edit';
                    this.dom.state[dataKey].open = true;
                }
                else {
                    Object.keys(this.dom.state).map(function (key) {
                        if (IsNumber(key)) {
                            _this.dom.state[key].template = 'template_edit';
                            _this.dom.state[key].open = true;
                        }
                    });
                }
                this.dom.store('state');
                return true;
            }
        };
        /**
         * User wants to remove a value entry
         * @param event
         */
        PopEntityFieldBoilerComponent.prototype.onRemove = function (event, dataKey) {
            var _this = this;
            this.log.event("onRemove", event);
            if (this.field.facade) {
                this.onBubbleEvent('remove', { dataKey: dataKey });
            }
            else {
                this.srv.dialog.open(PopConfirmationDialogComponent, {
                    width: '350px',
                    data: {
                        option: null,
                        body: "Delete this field value?"
                    }
                }).afterClosed().subscribe(function (option) {
                    if (option && option.confirmed) {
                        _this.srv.field.removeEntryValue(_this.core, _this.field, dataKey).then(function (res) {
                            delete _this.field.data[dataKey];
                            delete _this.field.items[dataKey];
                            _this.field.data_keys.pop();
                            delete _this.dom.state[dataKey];
                            delete _this.ui.asset[dataKey];
                            delete _this.dom.session[dataKey];
                            _this.dom.store('session');
                            _this.onBubbleEvent('remove', { dataKey: dataKey });
                        });
                    }
                });
            }
            return true;
        };
        /**
         * User closes the edit ability of the value entries
         * @param event
         */
        PopEntityFieldBoilerComponent.prototype.onClose = function (event, dataKey) {
            var _this = this;
            this.log.event("onClose", event);
            this.dom.state.open = false;
            this.dom.state.template = 'template_readonly';
            if (dataKey) {
                this.dom.state[dataKey].template = 'template_readonly';
                this.dom.state[dataKey].open = false;
            }
            else {
                Object.keys(this.dom.state).map(function (key) {
                    if (IsNumber(key)) {
                        _this.dom.state[key].template = 'template_readonly';
                        _this.dom.state[key].open = false;
                    }
                });
            }
            this.onBubbleEvent('close');
            return true;
        };
        /**
         * A method to remove an additional values from this field
         * @param id
         * @param archive
         */
        PopEntityFieldBoilerComponent.prototype.onPatch = function (event, dataKey, name) {
            var _this = this;
            if (dataKey === void 0) { dataKey = null; }
            if (name === void 0) { name = null; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            event.data_key = dataKey;
                            event.column = name;
                            if (!this.field.facade) return [3 /*break*/, 1];
                            this.onBubbleEvent('onPatch', null, event);
                            return [3 /*break*/, 3];
                        case 1:
                            if (!true) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.srv.field.updateFieldItem(this.core, this.field, event)];
                        case 2:
                            _a.sent();
                            this.field.data[dataKey][name] = event.config.control.value;
                            this._triggerUpdateAssetDisplay(dataKey);
                            _a.label = 3;
                        case 3: return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * Handle the bubble events that come up
         * @param event
         */
        PopEntityFieldBoilerComponent.prototype.onBubbleEvent = function (name, extension, event) {
            if (!event)
                event = { source: this.name, type: 'field', name: name };
            if (extension)
                event = Object.assign(Object.assign({}, event), extension);
            this.log.event("bubbleEvent", event);
            this.events.emit(event);
            return true;
        };
        /**
         * Clean up dom subscribers, interval, timeouts, ..etc
         */
        PopEntityFieldBoilerComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                   Base Protected Methods                                     *
         *                                    ( Protected Method )                                      *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Set the initial config
         * Intended to be overridden per field
         */
        PopEntityFieldBoilerComponent.prototype._setInitialConfig = function () {
        };
        /**
         * Pass in any session changes
         * The user may change tabs and the state should be restored
         */
        PopEntityFieldBoilerComponent.prototype._restoreDomSession = function () {
            var _this = this;
            this.field.data_keys.map(function (dataKey, index) {
                if (IsObject(_this.dom.session[dataKey], true)) {
                    var item = _this.field.items[dataKey];
                    var session = _this.dom.session[dataKey];
                    if (IsObject(session.entry, ['id'])) {
                        item.entry = session.entry;
                    }
                }
            });
        };
        /**
         * Build the default configs that are across all the fieelds
         */
        PopEntityFieldBoilerComponent.prototype._setAssetConfigs = function () {
            var _this = this;
            this.srv.field.setFieldCustomSetting(this.field, this.custom_setting);
            delete this.custom_setting;
            this.field.data_keys.map(function (dataKey, index) {
                _this._setAssetConfig(+dataKey, index);
            });
        };
        /**
         * Labels are a built in method that all fields should need
         * @param dataKey
         * @param index
         * @private
         */
        PopEntityFieldBoilerComponent.prototype._setAssetConfig = function (dataKey, index) {
            var _this = this;
            var customEntries = DeepCopy(this.field.entries).filter(function (entry) {
                return entry.type === 'custom';
            });
            var providedEntries = DeepCopy(this.field.entries).filter(function (entry) {
                return entry.type !== 'custom';
            });
            var entries = __spreadArray([], __read(providedEntries));
            var item = this.field.items[dataKey];
            if (!item.entry) {
                item.entry = this.field.entries[0];
            }
            this._updateDisplayField(dataKey, 'label', item.entry.name);
            var customLabel = this.field.setting.edit_label && this.field.setting.custom_label && item.entry.type === 'custom' ? true : false;
            this._updateState(dataKey, 'custom_label', customLabel);
            if (this.field.setting.custom_label && IsArray(customEntries, true))
                entries.push(customEntries[customEntries.length - 1]);
            // ToDo:: Add api calls to store values for these configs
            if (!IsObject(this.ui.asset[dataKey], true)) {
                this.ui.asset[dataKey] = {
                    display: new InputConfig({
                        readonly: true,
                        label: item.entry.name,
                        value: this._getAssetDisplayStr(dataKey),
                        // minimal: true,
                    }),
                    entry: new SelectConfig({
                        label: 'Label',
                        value: item.entry ? item.entry.id : null,
                        options: { values: ConvertArrayToOptionList(entries) },
                        minimal: true,
                        facade: true,
                        patch: {
                            field: "",
                            path: "",
                            callback: function (core, event) {
                                if (IsValidFieldPatchEvent(core, event)) {
                                    _this._updateFieldEntry(dataKey, +event.config.control.value);
                                }
                            }
                        }
                    }),
                    customLabel: new InputConfig({
                        label: 'Custom Label',
                        value: this.dom.session[dataKey].customLabel ? this.dom.session[dataKey].customLabel : '',
                        required: true,
                        validators: [forms.Validators.required],
                        maxlength: 24,
                        // minimal: true,
                        facade: true,
                        patch: {
                            field: "",
                            path: "",
                            callback: function (core, event) {
                                if (IsValidFieldPatchEvent(core, event)) {
                                    _this._updateCustomEntryLabel(dataKey, event.config.control.value);
                                }
                            }
                        }
                    })
                };
            }
            this._updateCustomLabelState(dataKey, item.entry);
        };
        /**
         * Updates when a values changes it label/entry
         * @param dataKey
         * @param entryId
         */
        PopEntityFieldBoilerComponent.prototype._updateFieldEntry = function (dataKey, entryId) {
            var item = this.field.items[dataKey];
            if (IsObject(item, true)) {
                var entryLookup = ArrayMapSetter(this.field.entries, 'id');
                var entry = this.field.entries[entryLookup[entryId]];
                item.entry = entry;
                this.dom.session[dataKey].entry = entry;
                this.dom.store('session');
                this._updateCustomLabelState(dataKey, entry);
            }
        };
        /**
         * Updates the custom label if the user chooses to make a custom entry label
         * @param dataKey
         * @param value
         */
        PopEntityFieldBoilerComponent.prototype._updateCustomEntryLabel = function (dataKey, value) {
            var item = this.field.items[dataKey];
            if (IsObject(item, true)) {
                this._updateDisplayField(dataKey, 'label', value);
                if (IsObject(this.dom.session[dataKey], true)) {
                    this.dom.session[dataKey].customLabel = value;
                    this.dom.store('session');
                }
                this._updateDisplayLabel(dataKey, value);
                // ToDo:: Figure where to save this
            }
        };
        /**
         * Ensure the state of the view matches up according to the stored entry/label
         * Custom Labels need special handling
         * @param dataKey
         * @param entry
         */
        PopEntityFieldBoilerComponent.prototype._updateCustomLabelState = function (dataKey, entry) {
            if (dataKey && IsObject(entry, ['id', 'type', 'name'])) {
                var isCustom = entry.type === 'custom';
                if (isCustom) {
                    this._updateState(dataKey, 'customLabel', (this.field.setting.edit_label && isCustom ? true : false));
                    if (!this.ui.asset[dataKey].customLabel.control.value) {
                        this.ui.asset[dataKey].customLabel.control.setValue('Custom', { emitEvent: true });
                        this._updateDisplayField(dataKey, 'label', 'Custom');
                    }
                    else {
                        var previousCustomLabel = this.ui.asset[dataKey].customLabel.control.value;
                        this._updateDisplayField(dataKey, 'label', previousCustomLabel);
                        if (this.dom.session.entry) {
                            this.dom.session.entry.name = previousCustomLabel;
                        }
                    }
                    this._updateDisplayLabel(dataKey, this.ui.asset[dataKey].customLabel.control.value);
                }
                else {
                    this._updateState(dataKey, 'customLabel', false);
                    this._updateDisplayField(dataKey, 'label', entry.name);
                    this._updateDisplayLabel(dataKey, entry.name);
                }
            }
        };
        /**
         * Update the display label of the value config
         * Some fields only use a single field item that is defaulted to the value column
         * @param dataKey
         * @param value
         */
        PopEntityFieldBoilerComponent.prototype._updateDisplayLabel = function (dataKey, value) {
            var item = this.field.items[dataKey];
            if (IsObject(item, true)) {
                var configs = item.config;
                var valueConfig = IsObject(item.config, ['value']) ? configs.value : null;
                if (IsObject(valueConfig, true)) { // this means that it a a simple field,
                    valueConfig.label = value;
                }
                this.ui.asset[dataKey].display.label = value;
            }
        };
        /**
         * Set the Display of a specific value entry
         * Sometime a display input is used to combine all the values into one, it appears in the readonly state
         * @param dataKey
         */
        PopEntityFieldBoilerComponent.prototype._updateAssetDisplay = function (dataKey) {
            if (this.ui.asset && this.ui.asset[dataKey]) {
                var display_1 = this.ui.asset[dataKey].display;
                display_1.value = this._getAssetDisplayStr(dataKey);
                this.dom.setTimeout("display-update-" + dataKey, function () {
                    display_1.control.value = display_1.value;
                }, 0);
            }
        };
        /**
         * Debounce requests for set phone display
         * @param dataKey
         */
        PopEntityFieldBoilerComponent.prototype._triggerUpdateAssetDisplay = function (dataKey) {
            var _this = this;
            this.dom.setTimeout("field-display-" + dataKey, function () {
                _this._updateAssetDisplay(dataKey);
            }, 100);
        };
        /**
         * Session the display value for a field item change
         * In some cases the value that is selected is not necessarily what should be presented, so we track it separately just in case
         * Ie ... when an id is selected when need to show the appropriate label that should go with it not the id itself
         * @param dataKey
         * @param field
         * @param value
         */
        PopEntityFieldBoilerComponent.prototype._updateDisplayField = function (dataKey, field, value) {
            if (IsDefined(dataKey) && IsObject(this.dom.session)) {
                if (!IsObject(this.dom.session[dataKey]))
                    this.dom.session[dataKey] = {};
                if (!IsObject(this.dom.session[dataKey].display))
                    this.dom.session[dataKey].display = {};
                this.dom.session[dataKey].display[field] = value;
                // this.dom.store('session');
            }
        };
        /**
         * Get the actual data object for a specific key
         * Pass in a field key if you want a only a certain field value
         * @param dataKey
         * @param fieldKey
         */
        PopEntityFieldBoilerComponent.prototype._getDataKey = function (dataKey, fieldKey) {
            var data = IsObjectThrowError(this.field.data, true, this.name + ":getDataKey") ? this.field.data[dataKey] : null;
            if (data && fieldKey) {
                data = fieldKey in data ? data[fieldKey] : null;
            }
            return data;
        };
        /**
         * Builds the display string
         * Override in each field component as necessary
         * @param dataKey
         */
        PopEntityFieldBoilerComponent.prototype._getAssetDisplayStr = function (dataKey) {
            var str = '';
            var configs = this._getDataKeyItemConfig(dataKey);
            Object.keys(configs).map(function (name) {
                var config = configs[name];
                if (config.control && config.control.value) {
                    str += (' ' + config.control.value);
                }
            });
            return String(str).trim();
        };
        /**
         * This will be different for each type of field group
         * Intended to be overridden in each class, gives the mutate/transform resources if needed
         */
        PopEntityFieldBoilerComponent.prototype._transformChildren = function () {
        };
        /**
         * This will be different for each type of field group
         * Intended to be overridden in each class
         */
        PopEntityFieldBoilerComponent.prototype._setFieldAttributes = function () {
            return true;
        };
        /**
         * This will be different for each type of field group
         * Intended to be overridden in each class
         */
        PopEntityFieldBoilerComponent.prototype._setFieldItemAttribute = function (dataKey, index) {
            return true;
        };
        /**
         * Get the item configs for a of a dataKey
         * Pass in a fieldKey if you only want the item config of a certain field
         * @param dataKey
         * @param fieldKey
         */
        PopEntityFieldBoilerComponent.prototype._getDataKeyItemConfig = function (dataKey, fieldKey) {
            var data = IsObjectThrowError(this.field.items[dataKey], true, this.name + ":_getDataKeyItem") ? this.field.items[dataKey] : null;
            if (fieldKey) {
                var config = IsObjectThrowError(data.config[fieldKey], true, this.name + ":_getDataKeyItem:" + fieldKey) ? data.config[fieldKey] : null;
                return config;
            }
            return data.config;
        };
        /**
         * Resolve a value to the name that goes with it from the option list
         * @param value
         * @param index
         */
        PopEntityFieldBoilerComponent.prototype._getTypeOptionName = function (value, index) {
            var typeConfig = this._getDataKeyItemConfig(this.field.data_keys[index], 'type');
            if (typeConfig.options) {
                var optionsMap = ArrayMapSetter(typeConfig.options.values, 'value');
                var option = value in optionsMap ? typeConfig.options.values[optionsMap[value]] : null;
                if (option) {
                    return option.name;
                }
                return value;
            }
            return '';
        };
        /**
         * Resolve a value to the name that goes with it from the option list
         * @param value
         * @param index
         */
        PopEntityFieldBoilerComponent.prototype._getEntryOptionName = function (value, index) {
            var titleConfig = this._getDataKeyItemConfig(this.field.data_keys[index], 'title');
            if (titleConfig.options) {
                var optionsMap = ArrayMapSetter(titleConfig.options.values, 'value');
                var option = value in optionsMap ? titleConfig.options.values[optionsMap[value]] : null;
                if (option) {
                    return option.name;
                }
                return value;
            }
            return '';
        };
        /**
         * Get the value entry of a specific index
         * @param index
         */
        PopEntityFieldBoilerComponent.prototype._getValueEntry = function (index) {
            if (IsArray(this.field.entries, true)) {
                return IsObject(this.field.entries[index], true) ? this.field.entries[index] : this.field.entries[0];
            }
            return null;
        };
        /**
         * Helper method to update a state variable, and make sure that a state object exits for each data key
         * @param dataKey
         * @param field
         * @param value
         */
        PopEntityFieldBoilerComponent.prototype._updateState = function (dataKey, field, value) {
            if (IsDefined(dataKey) && IsObject(this.dom.state)) {
                if (!IsObject(this.dom.state[dataKey])) {
                    this.dom.state[dataKey] = {
                        open: false,
                        template: this.field.state,
                        footer_adjust: this.field.state,
                        customLabel: false
                    };
                }
                this.dom.state[dataKey][field] = value;
            }
        };
        return PopEntityFieldBoilerComponent;
    }(PopExtendComponent));
    PopEntityFieldBoilerComponent.decorators = [
        { type: i0.Component, args: [{
                    template: '<div>Boiler</div>'
                },] }
    ];
    PopEntityFieldBoilerComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [FIELD_CUSTOM_SETTING,] }] }
    ]; };
    PopEntityFieldBoilerComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityNameComponent = /** @class */ (function (_super) {
        __extends(PopEntityNameComponent, _super);
        function PopEntityNameComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, NameFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityNameComponent';
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityNameComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityNameComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityNameComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntityNameComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-name',
                    template: "<div class=\"pop-entity-name import-field-container\">\n  <div class=\"import-flex-column import-field-flex-row-offset\" *ngFor=\"let dataKey of field.data_keys\">\n    <div *ngIf=\"field.items[dataKey].config; let items;\">\n      <div *ngIf=\"dom.state.loaded && ui.asset[dataKey]; let asset\">\n        <div *ngIf=\"dom.state[dataKey]; let state;\">\n\n          <div class=\"import-flex-row import-field-flex-row-offset\">\n            <div class=\"import-flex-row-wrap\">\n              <div class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">\n                <lib-pop-input class=\"pop-entity-name-display\" [config]=\"asset.display\"></lib-pop-input>\n              </div>\n              <div *ngIf=\"true\" class=\"import-field import-flex-item-icon\">\n                <lib-pop-entity-field-edit-icon\n                  (events)=\"onActionEvent($event, dataKey);\" [field]=\"this.field\"\n                  [dom]=\"dom\"\n                ></lib-pop-entity-field-edit-icon>\n              </div>\n            </div>\n          </div>\n\n\n          <div *ngIf=\"state.open\" class=\"import-flex-row-wrap pt-02 sw-pad-lft-sm sw-pad-rgt-sm  sw-mar-top-sm\">\n\n            <!--<div *ngIf=\"field.multiple && field.setting.edit_label && asset.entry; let entry;\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">-->\n              <!--<lib-pop-select [config]=\"entry\"></lib-pop-select>-->\n            <!--</div>-->\n            <!--<div *ngIf=\"state.customLabel && asset.customLabel; let item;\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">-->\n              <!--<lib-pop-input [config]=\"item\"></lib-pop-input>-->\n            <!--</div>-->\n            <!--<div class=\"import-flex-row-break\"></div>-->\n\n\n            <div *ngIf=\"items['prefix']\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-md\">\n              <lib-pop-input [config]=\"items['prefix']\" (events)=\"onFieldItemEvent($event, dataKey, 'prefix');\"></lib-pop-input>\n            </div>\n\n            <div *ngIf=\"items['first']\" class=\"import-field import-field-spacing import-flex-item-md import-flex-grow-lg\">\n              <lib-pop-input [config]=\"items['first']\" (events)=\"onFieldItemEvent($event, dataKey, 'first');\"></lib-pop-input>\n            </div>\n\n            <div class=\"import-flex-row-break\" *ngIf=\"items['prefix'] && field.items['middle']\"></div>\n\n            <div *ngIf=\"items['middle']\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-md\">\n              <lib-pop-input [config]=\"items['middle']\" (events)=\"onFieldItemEvent($event, dataKey, 'middle');\"></lib-pop-input>\n            </div>\n\n            <div class=\"import-flex-row-break\" *ngIf=\"!field.items['prefix'] && !field.items['middle']\"></div>\n\n            <div *ngIf=\"items['last']\" class=\"import-field import-field-spacing import-flex-item-md import-flex-grow-lg\">\n              <lib-pop-input [config]=\"items['last']\" (events)=\"onFieldItemEvent($event, dataKey, 'last');\"></lib-pop-input>\n            </div>\n\n            <div class=\"import-flex-row-break\" *ngIf=\"items['prefix'] && field.items['first'] && field.items['middle'] && field.items['last']\"></div>\n\n            <div *ngIf=\"items['suffix']\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-md\">\n              <lib-pop-input [config]=\"items['suffix']\" (events)=\"onFieldItemEvent($event, dataKey, 'suffix');\"></lib-pop-input>\n            </div>\n\n            <div *ngIf=\"items['suffix']\" class=\"import-field import-field-spacing import-flex-item-md import-flex-grow-lg\"></div>\n\n            <!--<div class=\"import-field-footer\" [ngClass]=\"{'import-field-footer-adjust': !field.multiple || field.items['first'] && field.items['middle'] && field.items['last'] && field.items['suffix']}\">-->\n            <div class=\"import-field-footer sw-mar-top-md\" *ngIf=\"field.canRemove\">\n              <lib-pop-field-btn class=\"sw-mar-rgt-lg\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n            </div>\n\n            <div class=\"import-flex-row-wrap import-flex-end sw-mar-top-lg sw-pad-rgt-lg sw-pad-btm-sm\">\n              <lib-pop-button\n                [config]=\"{value:'Close', size: 30, color: 'accent', bubble: true, event: 'close'}\"\n                (events)=\"onActionEvent($event, dataKey);\"\n              ></lib-pop-button>\n            </div>\n\n          </div>\n\n        </div>\n\n\n      </div>\n\n    </div>\n  </div>\n</div>\n\n",
                    styles: [""]
                },] }
    ];
    PopEntityNameComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntityNameComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityDatetimeComponent = /** @class */ (function (_super) {
        __extends(PopEntityDatetimeComponent, _super);
        function PopEntityDatetimeComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.name = 'PopEntityDatetimeComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.id = _this.field.id;
                    _this.trait.bubble = true;
                    _this.dom.state.open = false;
                    _this.dom.state.footer_adjust = false;
                    _this.dom.state.row1 = {
                        first: true,
                        visible: true,
                    };
                    _this.setDateItem();
                    _this.setTimeItem();
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityDatetimeComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntityDatetimeComponent.prototype.setDateItem = function () {
            var dateValue = this.field.items['datetime'].value ? ConvertDateFormat(this.field.items['datetime'].value, 'mm/dd/yyyy') : null;
            dateValue = dateValue === '12/31/1969' ? null : dateValue;
            // console.log(dateValue, 'dateValue');
            this.field.items['date'] = new DateConfig({
                label: 'Date',
                value: dateValue,
            });
        };
        PopEntityDatetimeComponent.prototype.setTimeItem = function () {
            var timeValue = this.field.items['datetime'].value ? ConvertDateToTimeFormat(this.field.items['datetime'].value) : null;
            this.field.items['time'] = new TimeConfig({
                label: 'Time',
                time: 12,
                interval: 1,
                value: timeValue,
            });
        };
        PopEntityDatetimeComponent.prototype.emitInputEvent = function (name, config, message, success) {
            if (message === void 0) { message = null; }
            if (success === void 0) { success = null; }
            if (this.field.options.bubble)
                this.events.emit({ source: this.name, type: 'field', name: name, config: config, success: success, message: message });
        };
        PopEntityDatetimeComponent.prototype.handleDateEvent = function (event) {
            var items = this.field.items;
            if (items['datetime'] && items['time'] && items['time'].value) {
                var datetimeValue = ConvertDateFormat(items['date'].control.value, 'yyyy-mm-dd') + ' ' + items['time'].control.value;
                // console.log(datetimeValue, 'datetimeValue');
                items['datetime'].triggerOnChange(datetimeValue);
            }
            if (this.field.options.bubble) {
                this.emitInputEvent(event.name, this.field.items['date']);
            }
            // this.events.emit(event);
        };
        PopEntityDatetimeComponent.prototype.handleEvent = function (event) {
            // console.log(event, 'handleEventEmail');
            this.events.emit(event);
        };
        PopEntityDatetimeComponent.prototype.handleTimeEvent = function (event) {
            if (event.type === 'field' && event.name === 'onChange') {
                var items = this.field.items;
                if (items['datetime'] && items['date'] && items['date'].value) {
                    var datetimeValue = ConvertDateFormat(items['date'].control.value, 'yyyy-mm-dd') + ' ' + items['time'].control.value;
                    console.log(datetimeValue, 'datetimeValue');
                    items['datetime'].triggerOnChange(datetimeValue);
                }
            }
            if (this.field.options.bubble) {
                this.emitInputEvent(event.name, this.field.items['time']);
            }
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityDatetimeComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityDatetimeComponent;
    }(PopExtendComponent));
    PopEntityDatetimeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-datetime',
                    template: "<div class=\"pop-entity-datetime-field pop-datetime-container\" [ngClass]=\"{'pop-datetime-container-wrapper': field.options.legend}\">\n  <div *ngIf=\"field.options.legend\" class=\"pop-datetime-container-legend\">{{field.name}}</div>\n  <div *ngIf=\"dom.state.row1.visible\" class=\"pop-datetime-row-container\"\n       [ngClass]=\"{'pop-datetime-first-row': dom.state.row1.first}\">\n    <div *ngIf=\"field.items['date']\" class=\"pop-datetime-date-wrapper\">\n      <lib-pop-date [config]=\"field.items['date']\" (events)=\"handleDateEvent($event);\"></lib-pop-date>\n    </div>\n    <div *ngIf=\"field.items['time']\" class=\"pop-datetime-time-wrapper\">\n      <lib-pop-time [config]=\"field.items['time']\" (events)=\"handleTimeEvent($event);\"></lib-pop-time>\n    </div>\n  </div>\n  <div class=\"pop-datetime-row-container\">\n    <div *ngIf=\"field.items['timezone']\" class=\"pop-datetime-time-zone-wrapper\">\n      <lib-pop-select [config]=\"field.items['timezone']\"></lib-pop-select>\n    </div>\n    <lib-pop-input [config]=\"field.items['datetime']\" (events)=\"handleEvent($event);\"></lib-pop-input>\n  </div>\n</div>\n",
                    styles: [":host{position:relative;display:block;width:100%;margin:10px 0}.pop-datetime-container{position:relative;display:block;padding:0;min-height:40px}.pop-datetime-container-wrapper{border:1px solid var(--darken4);padding:5px;border-radius:3px}.pop-datetime-container-legend{position:relative;margin-top:-15px;margin-bottom:-5px;clear:both;z-index:1;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;color:var(--darken4);background:var(--bg-3)}.pop-datetime-row-container{position:relative;display:flex;flex:1 1 100%;margin-top:10px;padding:0;flex-direction:row;justify-content:flex-start;align-items:center;background:var(--bg-3)}.pop-datetime-first-row{margin-top:10px!important}.pop-datetime-date-wrapper{width:25%}.pop-datetime-date-wrapper,.pop-datetime-time-wrapper{position:relative;display:flex;flex-direction:column;flex-grow:1;margin-right:2px}.pop-datetime-time-wrapper{width:27%;height:31px;border:1px solid var(--text-2);padding:5px;border-radius:3px}.pop-datetime-datetime-wrapper,.pop-datetime-time-zone-wrapper{position:relative;display:flex;flex-direction:column;width:25%;flex-grow:1;margin-right:2px}"]
                },] }
    ];
    PopEntityDatetimeComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopEntityDatetimeComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityEmailComponent = /** @class */ (function (_super) {
        __extends(PopEntityEmailComponent, _super);
        function PopEntityEmailComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, EmailFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityEmailComponent';
            _this.asset = {
                extensionKeys: ['action'],
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityEmailComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityEmailComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /**
         * This will setup this field to handle changes and transformations
         */
        PopEntityEmailComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    _this._setFieldItemAttribute(+dataKey, index);
                });
            }
            return true;
        };
        /**
         * This will be different for each type of field group
         * Intended to be overridden in each class
         */
        PopEntityEmailComponent.prototype._setFieldItemAttribute = function (dataKey, index) {
            var _this = this;
            var item = this.field.items[dataKey];
            var configKeys = Object.keys(item.config);
            this.dom.state.has_extension = configKeys.some(function (r) { return _this.asset.extensionKeys.includes(r); });
            if ('action' in item.config) {
                this.ui.actionBtnWidth = 50;
                item.config['action'] = new ButtonConfig({
                    icon: 'email',
                    size: 42,
                    value: null,
                    // disabled: true
                });
            }
            if ('address' in item.config) {
                var child = this.field.children['address'];
                var addressConfig = item.config['address'];
                addressConfig.pattern = 'Email';
                addressConfig.type = 'email';
                var validators = [];
                validators.push(forms.Validators.email);
                if (+child.rule.required)
                    validators.push(forms.Validators.required);
                if (+child.rule.maxlength)
                    validators.push(forms.Validators.maxLength(+child.rule.maxlength));
                addressConfig.validators = validators;
                if (this.field.multiple)
                    addressConfig.label = this.field.entries[index].name;
                addressConfig.patch.callback = function () {
                    _this._updateAddress(+dataKey, index);
                };
                this._updateAddress(+dataKey, index);
            }
            return true;
        };
        PopEntityEmailComponent.prototype._updateAddress = function (dataKey, index) {
            var addressConfig = this._getDataKeyItemConfig(dataKey, 'address');
            if (addressConfig.metadata.source) {
                var value = addressConfig.control.value;
                addressConfig.value = value;
                this._triggerUpdateAssetDisplay(dataKey);
            }
        };
        return PopEntityEmailComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntityEmailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-email',
                    template: "<div class=\"pop-entity-input-field import-field-container\">\n  <div *ngFor=\"let dataKey of field.data_keys; let i = index;  last as isLast\">\n    <div *ngIf=\"field.items[dataKey].config; let items;\" class=\"import-flex-column import-flex-item-full\">\n      <div class=\"import-flex-row import-field-flex-row-offset\">\n        <div class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-md\" *ngIf=\"items['address']; let item;\">\n          <lib-pop-input [config]=\"item\" (events)=\"onFieldItemEvent($event, dataKey, 'address');\"></lib-pop-input>\n        </div>\n\n        <div *ngIf=\"items['action']; let item;\" class=\"pop-entity-email-btn-container\">\n          <div class=\"import-field import-flex-item-icon\">\n            <lib-pop-button\n              [config]=\"item\"\n              (events)=\"onActionEvent($event, dataKey);\"\n            ></lib-pop-button>\n          </div>\n        </div>\n\n      </div>\n      <div class=\"import-field-footer sw-mar-top-sm sw-pad-rgt-md\" *ngIf=\"field.canRemove && isLast\">\n        <lib-pop-field-btn class=\"sw-mar-rgt-sm\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: [".pop-entity-email-btn-container{position:relative;display:flex;top:9px;left:-7px;flex-direction:row;max-height:40px;align-items:center;justify-content:flex-end}.pop-entity-email-btn-container div{margin-left:5px}"]
                },] }
    ];
    PopEntityEmailComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntityEmailComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityPhoneComponent = /** @class */ (function (_super) {
        __extends(PopEntityPhoneComponent, _super);
        function PopEntityPhoneComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, PhoneFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityPhoneComponent';
            _this.asset = {
                extensionKeys: ['type', 'voice_button', 'sms_button', 'do_not_call', 'do_not_sms', 'country_id'],
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityPhoneComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityPhoneComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                  Override Inherited Methods                                  *
         *                                    ( Protected Methods )                                     *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Builds the display string
         * @param dataKey
         */
        PopEntityPhoneComponent.prototype._getAssetDisplayStr = function (dataKey) {
            var str = '';
            var display = this.dom.session[dataKey].display;
            var items = this._getDataKeyItemConfig(dataKey);
            if ('country_id' in items && display['country_id']) {
                str += "+" + display['country_id'] + " ";
            }
            if (display['number']) {
                str += "" + display['number'];
            }
            if ('extension' in items && display['extension']) {
                str += " Ext. " + display['extension'] + " ";
            }
            return str;
        };
        /**
         * This will setup this field to handle changes and transformations
         */
        PopEntityPhoneComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    _this._setFieldItemAttribute(+dataKey, index);
                });
            }
            return true;
        };
        PopEntityPhoneComponent.prototype._setFieldItemAttribute = function (dataKey, index) {
            var _this = this;
            this.ui.actionBtnWidth = 50;
            var hasCallBtn = false;
            var hasTextBtn = false;
            var item = this.field.items[dataKey];
            var configKeys = Object.keys(item.config);
            this.dom.state.has_extension = configKeys.some(function (r) { return _this.asset.extensionKeys.includes(r); });
            this.ui.asset[dataKey].canCallBtn = new ButtonConfig({
                icon: 'local_phone',
                value: null,
                // disabled: true
            });
            this.ui.asset[dataKey].canTextBtn = new ButtonConfig({
                icon: 'textsms',
                value: null,
                // disabled: true
            });
            if ('type' in item.config) {
                // If type is set, use as the label of the phone number
                var typeConfig = item.config['type'];
                this._updateNumberLabel(+dataKey, index);
                typeConfig.patch.callback = function () {
                    _this._updateNumberLabel(+dataKey, index);
                };
                // If value entry exists, disable type
                // if( this.field.multiple && index in this.field.entries ){
                //   typeConfig.control.disable();
                // }else{
                //   typeConfig.control.enable();
                // }
            }
            if ('stop_call_at' in item.config) {
                // ToDo:: Figure out what this button will actually do
                hasCallBtn = true;
            }
            if ('stop_text_at' in item.config) {
                // ToDo:: Figure out what this button will actually do
                hasTextBtn = true;
            }
            if ('country_id' in item.config) {
                var countryConfig = item.config['country_id'];
                countryConfig.patch.callback = function () {
                    _this._updateCountry(+dataKey, index);
                };
                this._updateCountry(+dataKey, index);
            }
            if ('number' in item.config) {
                var numberConfig = item.config['number'];
                numberConfig.mask = '(000) 000-0000';
                numberConfig.dropSpecial = false;
                numberConfig.patch.callback = function () {
                    _this._updateNumber(+dataKey, index);
                };
                this._updateNumber(+dataKey, index);
            }
            if ('extension' in item.config) {
                var extConfig = item.config['extension'];
                extConfig.mask = '0*00000';
                extConfig.patch.callback = function () {
                    _this._updateExtension(+dataKey, index);
                };
                this._updateExtension(+dataKey, index);
            }
            // if( itemKeys.includes('number') ){
            // if( itemKeys.includes('country_code') || itemKeys.includes('ext') ){
            //   this.dom.state.merged = true;
            //   const items = [ this.field.items[ dataId ][ 'number' ] ];
            //   if( itemKeys.includes('country_code') ) items.unshift(this.field.items[ dataId ][ 'country_code' ]);
            //   if( itemKeys.includes('ext') ) items.push(this.field.items[ dataId ][ 'ext' ]);
            //   this.field.items[ dataId ][ 'number' ] = this._getMergedPhone(items);
            //
            //   this.dom.setSubscriber('phone', this.field.items[ dataId ][ 'number' ].control.valueChanges
            //     .pipe(
            //       distinctUntilChanged(),
            //       debounceTime(500),
            //     )
            //     .subscribe((value: string) => {
            //       if( value ) this._validatePhone(dataId, value);
            //     }));
            // }
            // }
            if (hasCallBtn)
                this.ui.actionBtnWidth += 50;
            if (hasTextBtn)
                this.ui.actionBtnWidth += 50;
            return true;
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntityPhoneComponent.prototype._updateCountry = function (dataKey, index) {
            var countryConfig = this._getDataKeyItemConfig(dataKey, 'country_id');
            if (countryConfig.metadata.source) {
                var source = countryConfig.metadata.source;
                var sourceMap = countryConfig.metadata.map.source;
                var value = countryConfig.control.value;
                var option = value in sourceMap ? source[sourceMap[value]] : null;
                countryConfig.value = value;
                console.log('_updateCountry option', option);
                if (IsObject(option, ['phone_country_code'])) {
                    this._updateDisplayField(dataKey, 'country_id', option.phone_country_code);
                }
                this._triggerUpdateAssetDisplay(dataKey);
            }
        };
        PopEntityPhoneComponent.prototype._updateNumber = function (dataKey, index) {
            var numberConfig = this._getDataKeyItemConfig(dataKey, 'number');
            var value = numberConfig.control.value;
            this._updateDisplayField(dataKey, 'number', value);
            numberConfig.value = value;
            this._triggerUpdateAssetDisplay(dataKey);
        };
        PopEntityPhoneComponent.prototype._updateExtension = function (dataKey, index) {
            var extConfig = this._getDataKeyItemConfig(dataKey, 'extension');
            var value = extConfig.control.value;
            this._updateDisplayField(dataKey, 'extension', value);
            this._triggerUpdateAssetDisplay(dataKey);
        };
        PopEntityPhoneComponent.prototype._updateNumberLabel = function (dataKey, index) {
            if (this.field.multiple && IsArray(this.field.entries, true)) {
                this._updateNumberLabelToMatchEntry(index);
            }
            else {
                this._updateNumberLabelToMatchType(+dataKey);
            }
            this._triggerUpdateAssetDisplay(dataKey);
        };
        PopEntityPhoneComponent.prototype._updateNumberLabelToMatchEntry = function (index) {
            var entry = this._getValueEntry(index);
            var typeConfig = this._getDataKeyItemConfig(this.field.data_keys[index], 'type');
            var numberConfig = this._getDataKeyItemConfig(this.field.data_keys[index], 'number');
            var stored = this._getDataKey(this.field.data_keys[index], 'type');
            var display = this.ui.asset[this.field.data_keys[index]].display;
            if (entry && entry.type && !stored) {
                typeConfig.control.setValue(entry.type);
            }
            var value = entry ? (entry.name ? entry.name : this._getTypeOptionName(entry.type, index)) : (numberConfig.label ? numberConfig.label : '');
            if (value) {
                numberConfig.label = value;
                display.label = value;
            }
        };
        /**
         * The label of value entry should match the type
         * @param dataKey
         */
        PopEntityPhoneComponent.prototype._updateNumberLabelToMatchType = function (dataKey) {
            var typeConfig = this._getDataKeyItemConfig(dataKey, 'type');
            var numberConfig = this._getDataKeyItemConfig(dataKey, 'number');
            var optionsMap = ArrayMapSetter(typeConfig.options.values, 'value');
            var value = typeConfig.control.value;
            var display = this.ui.asset[dataKey].display;
            var option = value in optionsMap ? typeConfig.options.values[optionsMap[value]] : null;
            numberConfig.label = option ? option.name : TitleCase(SnakeToPascal(value));
            display.label = numberConfig.label;
        };
        return PopEntityPhoneComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntityPhoneComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-phone',
                    template: "<div class=\"pop-entity-phone-field import-field-container\">\n  <div *ngFor=\"let dataKey of field.data_keys\">\n    <div *ngIf=\"field.items[dataKey].config; let items;\">\n      <div *ngIf=\"dom.state.loaded && ui.asset[dataKey]; let asset\">\n        <div *ngIf=\"dom.state[dataKey]; let state;\">\n\n          <div class=\"import-flex-row import-field-flex-row-offset\" [ngClass]=\"{'sw-disabled':state.open}\">\n            <div class=\"import-flex-row-wrap\">\n              <div class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">\n                <lib-pop-input class=\"pop-entity-phone-display\" [config]=\"asset.display\"></lib-pop-input>\n              </div>\n\n              <div class=\"pop-entity-phone-btn-container\" [style.width.px]=\"ui.actionBtnWidth\">\n                <div *ngIf=\"items['stop_call_at'] && !items['stop_call_at'].control.value\" class=\"import-field import-flex-item-icon\">\n                  <lib-pop-button\n                    [config]=\"asset.canCallBtn\"\n                    (events)=\"onActionEvent($event, dataKey);\"\n                  ></lib-pop-button>\n                </div>\n\n                <div *ngIf=\"items['stop_text_at'] && !items['stop_text_at'].control.value\" class=\"import-field import-flex-item-icon\">\n                  <lib-pop-button\n                    [config]=\"asset.canTextBtn\"\n                    (events)=\"onActionEvent($event, dataKey);\"\n                  ></lib-pop-button>\n                </div>\n\n                <div *ngIf=\"true\" class=\"import-field import-flex-item-icon sw-pad-rgt-md\">\n                  <lib-pop-entity-field-edit-icon\n                    (events)=\"onActionEvent($event, dataKey);\" [field]=\"this.field\"\n                    [dom]=\"dom\"\n                  ></lib-pop-entity-field-edit-icon>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- extension box -->\n\n          <div [ngClass]=\"{'sw-hidden':!state.open}\" class=\"import-flex-row-wrap pt-02 sw-pad-lft-sm sw-pad-rgt-sm  sw-mar-top-sm\">\n            <div class=\"import-flex-row-wrap\">\n\n\n              <!--<div *ngIf=\"field.multiple && field.setting.edit_label && asset.entry; let entry;\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">-->\n              <!--<lib-pop-select [config]=\"entry\"></lib-pop-select>-->\n              <!--</div>-->\n              <!--<div *ngIf=\"state.customLabel && asset.customLabel; let item;\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">-->\n              <!--<lib-pop-input [config]=\"item\"></lib-pop-input>-->\n              <!--</div>-->\n              <!--<div class=\"import-flex-row-break\"></div>-->\n\n              <!--<div class=\"import-flex-column-lg\">-->\n                <div *ngIf=\"items['country_id']\" class=\"import-field import-field-spacing import-flex-item-xs import-flex-grow-xs\">\n                  <lib-pop-select\n                    [config]=\"items['country_id']\"\n                    (events)=\"onFieldItemEvent($event, dataKey, 'country_id');\"\n                  ></lib-pop-select>\n                </div>\n\n                <div *ngIf=\"items['number']\" class=\"import-field import-field-spacing import-flex-item-xs import-flex-grow-sm\">\n                  <lib-pop-input\n                    [config]=\"items['number']\"\n                    (events)=\"onFieldItemEvent($event, dataKey, 'number');\"\n                  ></lib-pop-input>\n                </div>\n\n                <!--<div *ngIf=\"items['type']; let item;\"-->\n                <!--class=\"import-field import-field-spacing import-flex-item-md import-flex-grow-sm\">-->\n                <!--<lib-pop-select-->\n                <!--[config]=\"item\"-->\n                <!--(events)=\"onFieldItemEvent($event, dataKey, item.column);\"-->\n                <!--&gt;</lib-pop-select>-->\n                <!--</div>-->\n\n                <div *ngIf=\"items['extension']\" class=\"import-field import-field-spacing import-flex-item-xs import-flex-grow-xs\">\n                  <lib-pop-input\n                    [config]=\"items['extension']\"\n                    (events)=\"onFieldItemEvent($event, dataKey, 'extension');\"\n                  ></lib-pop-input>\n                </div>\n              <!--</div>-->\n\n            </div>\n\n            <div class=\"import-flex-row-wrap\">\n              <div class=\"import-flex-column-md\">\n                <div class=\"import-field import-flex-item-full import-flex-grow-lg\">\n                  <lib-pop-checkbox\n                    *ngIf=\"items['stop_call_at']; let item;\"\n                    [config]=\"item\"\n                    (events)=\"onFieldItemEvent($event, dataKey, 'can_call');\">\n                  </lib-pop-checkbox>\n                </div>\n\n                <div class=\"import-field import-flex-item-full import-flex-grow-lg\">\n                  <lib-pop-checkbox\n                    *ngIf=\"items['stop_text_at']; let item;\"\n                    [config]=\"item\" (events)=\"onFieldItemEvent($event, dataKey, 'can_text');\"\n                  ></lib-pop-checkbox>\n                </div>\n\n              </div>\n              <div class=\"import-flex-column-md import-flex-end sw-pad-rgt-lg sw-pad-btm-lg\">\n                <div class=\"import-flex-item-full import-flex-grow-lg sw-mar-top-md import-flex-end\">\n                  <lib-pop-field-btn *ngIf=\"field.canRemove\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n                </div>\n              </div>\n            </div>\n            <mat-divider></mat-divider>\n            <div class=\"import-flex-row-wrap import-flex-end sw-pad-rgt-lg sw-pad-btm-sm\">\n              <lib-pop-button\n                [config]=\"{value:'Close', size: 30, color: 'accent', bubble: true, event: 'close'}\"\n                (events)=\"onActionEvent($event, dataKey);\"\n              ></lib-pop-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: [".pop-entity-phone-btn-container{position:relative;top:8px;display:flex;flex-direction:row;max-height:40px;align-items:center;justify-content:flex-end}.pop-entity-phone-btn-container div{margin-left:5px}:host ::ng-deep .pop-entity-phone-display input{font-size:.95em}"]
                },] }
    ];
    PopEntityPhoneComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntityPhoneComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityAddressComponent = /** @class */ (function (_super) {
        __extends(PopEntityAddressComponent, _super);
        function PopEntityAddressComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, AddressFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityAddressComponent';
            _this.asset = {
                extensionKeys: [],
                states: []
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityAddressComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityAddressComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                  Override Inherited Methods                                  *
         *                                    ( Protected Methods )                                     *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Set the initial config
         * Intended to be overridden per field
         */
        PopEntityAddressComponent.prototype._setInitialConfig = function () {
            // this.field.modal = PopEntityAddressEditComponent;
            this.field.modal = null;
        };
        /**
         * This will be different for each type of field group
         * Intended to be overridden in each class, gives the chance to mutate/transform resources if needed
         */
        PopEntityAddressComponent.prototype._transformChildren = function () {
            // const states = IsArray(this.field.children[ 'region_id' ].source, true) ? this.field.children[ 'region_id' ].source : null;
            // if( states ){
            //   this.asset.states = JsonCopy(this.field.children[ 'region_id' ].source).map((state: any) => {
            //     state.long_name = state.name;
            //     state.name = state.abbr;
            //   });
            // }
        };
        /**
         * This will be different for each type of field group
         * Intended to be overridden in each class
         * This will setup this field to handle changes and transformations
         */
        PopEntityAddressComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    _this._setFieldItemAttribute(+dataKey, index);
                });
            }
            return true;
        };
        PopEntityAddressComponent.prototype._setFieldItemAttribute = function (dataKey, index) {
            var _this = this;
            var _a;
            var item = this.field.items[dataKey];
            var configKeys = Object.keys(item.config);
            this.dom.state.has_extension = configKeys.some(function (r) { return _this.asset.extensionKeys.includes(r); });
            if ('line_1' in item.config) {
                var line1Config = item.config['line_1'];
                line1Config.patch.callback = function (_core, event) {
                };
            }
            if ('line_2' in item.config) {
                var line2Config = item.config['line_2'];
                line2Config.patch.callback = function (core, event) {
                };
            }
            if ('line_3' in item.config) {
                var line3Config = item.config['line_3'];
                line3Config.patch.callback = function (core, event) {
                };
            }
            if ('region_id' in item.config) {
                var regionConfig = item.config['region_id'];
                var child = this.field.children['zip'];
                var countryConfig = item.config['country_id'];
                regionConfig.height = 250;
                if (!((_a = child.setting) === null || _a === void 0 ? void 0 : _a.allow_canada)) {
                    var newOptions = regionConfig.options.values.filter(function (region) { return region['country_id'] == 1; });
                    regionConfig.options.values = newOptions;
                    this._triggerUpdateAssetDisplay(dataKey);
                }
                // regionConfig.minimal = true;
                regionConfig.patch.callback = function () {
                    _this._updateRegionId(+dataKey, index);
                };
                this._updateRegionId(+dataKey, index);
            }
            if ('country_id' in item.config) {
                var countryConfig = item.config['country_id'];
                // countryConfig.minimal = true;
                countryConfig.patch.callback = function () {
                    _this._updateCountry(+dataKey, index);
                };
                this._updateCountry(+dataKey, index);
            }
            if ('zip' in item.config) {
                var zipConfig = item.config['zip'];
                var countryConfig = item.config['country_id'];
                var child_1 = this.field.children['zip'];
                zipConfig.validators = [forms.Validators.required, ValidateZip];
                zipConfig.setControl();
                zipConfig.facade = true;
                zipConfig.patch.callback = function () {
                    _this._updateZip(+dataKey, index, child_1.setting);
                };
                // this._updateZip(+dataKey, index);
            }
            if ('zip_4' in item.config) {
                var zip4Config = item.config['zip_4'];
                var zipConfig = item.config['zip'];
                var countryConfig = item.config['country_id'];
                zip4Config.mask = '0000';
                if (this._isUSA(countryConfig)) {
                    zip4Config.readonly = zipConfig.value == '' ? true : false;
                }
                else
                    zip4Config.readonly = true;
                // zip4Config.minimal = true;
                zip4Config.patch.callback = function () {
                    // this._updateZip(+dataKey, index);
                };
                // this._updateZip(+dataKey, index);
            }
            if ('county' in item.config) {
                var countyConfig = item.config['county'];
                var countryConfig = item.config['country_id'];
                if (!this._isUSA(countryConfig))
                    countyConfig.readonly = true;
            }
            return true;
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntityAddressComponent.prototype._updateCountry = function (dataKey, index) {
            var countryConfig = this._getDataKeyItemConfig(dataKey, 'country_id');
            var child = this.field.children['country_id'];
            if (IsArray(child.source, true)) {
                var value = countryConfig.control.value;
                var option = value in child.sourceMap ? child.source[child.sourceMap[value]] : null;
                countryConfig.value = value;
                if (IsObject(option, ['name'])) {
                    this._updateDisplayField(dataKey, 'country_id', option.name);
                }
                this._triggerUpdateAssetDisplay(dataKey);
            }
        };
        PopEntityAddressComponent.prototype._updateRegionId = function (dataKey, index) {
            var stateConfig = this._getDataKeyItemConfig(dataKey, 'region_id');
            var child = this.field.children['region_id'];
            if (IsArray(child.source, true)) {
                var value = stateConfig.control.value;
                if (value) {
                    var option = value in child.sourceMap ? child.source[child.sourceMap[value]] : null;
                    stateConfig.value = value;
                    if (IsObject(option, ['name'])) {
                        this._updateDisplayField(dataKey, 'region_id', option.name);
                    }
                    this._triggerUpdateAssetDisplay(dataKey);
                }
            }
        };
        PopEntityAddressComponent.prototype._updateZip = function (dataKey, index, customSettings) {
            return __awaiter(this, void 0, void 0, function () {
                var zipConfig, zip4Config, countyConfig, details_1, newCountry, newRegion, dataKeyConfig, child, value, option;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            zipConfig = this._getDataKeyItemConfig(dataKey, 'zip');
                            zip4Config = this._getDataKeyItemConfig(dataKey, 'zip_4');
                            countyConfig = this._getDataKeyItemConfig(dataKey, 'county');
                            if (!(zipConfig && zipConfig.control.value && (customSettings.allow_canada ? String(zipConfig.control.value).length <= 6 : String(zipConfig.control.value).length == 5))) return [3 /*break*/, 3];
                            zip4Config.readonly = false;
                            if (!(customSettings === null || customSettings === void 0 ? void 0 : customSettings.auto_fill)) return [3 /*break*/, 2];
                            this.dom.state[dataKey].loading = true;
                            return [4 /*yield*/, this._getAddressFromZip(zipConfig.control.value)];
                        case 1:
                            details_1 = _b.sent();
                            if (IsObject(details_1, true)) {
                                newCountry = void 0, newRegion = void 0;
                                dataKeyConfig = this.field.items[dataKey]['config'];
                                if ('region_id' in dataKeyConfig)
                                    newRegion = this.field.children['region_id'].source.find(function (state) { return String(state['abbr']).toLowerCase() == String(details_1['state_prefix']).toLowerCase(); });
                                if ('country_id' in dataKeyConfig)
                                    newCountry = this.field.children['country_id'].source.find(function (country) { return String(country['abbrv']).toLowerCase() == String(details_1['country']).toLowerCase(); });
                                // updating location from
                                // this.field.items[dataKey]['config']['zip'].triggerOnChange(zipConfig.control.value);
                                // newCountry.abbrv='CAN'
                                if (newCountry.abbrv == "CAN") {
                                    zip4Config.triggerOnChange(null);
                                    zip4Config.readonly = true;
                                    countyConfig.readonly = true;
                                    countyConfig.triggerOnChange(null);
                                }
                                else {
                                    zip4Config.readonly = false;
                                    countyConfig.readonly = false;
                                }
                                if ('city' in dataKeyConfig) {
                                    this.field.items[dataKey]['config']['city'].triggerOnChange(details_1['city']);
                                    this._updateDisplayField(dataKey, 'city', details_1['city']);
                                }
                                if ('county' in dataKeyConfig && newCountry.abbrv == "USA") {
                                    this.field.items[dataKey]['config']['county'].triggerOnChange(details_1['county']);
                                    this._updateDisplayField(dataKey, 'county', details_1['county']);
                                }
                                if ('country_id' in dataKeyConfig) {
                                    this.field.items[dataKey]['config']['country_id'].triggerOnChange(newCountry['id']);
                                    this._updateDisplayField(dataKey, 'county', newCountry['name']);
                                }
                                if ('region_id' in dataKeyConfig) {
                                    if (IsObject(newRegion, true)) {
                                        this.field.items[dataKey]['config']['region_id'].triggerOnChange(newRegion['id']);
                                    }
                                    else {
                                        this.field.items[dataKey]['config']['region_id'].triggerOnChange(null);
                                    }
                                }
                                this.dom.state[dataKey].loading = false;
                                this.dom.state[dataKey].zipError = null;
                            }
                            else {
                                this.dom.state[dataKey].zipError = 'Invalid ZipCode';
                                this.dom.state[dataKey].loading = false;
                            }
                            _b.label = 2;
                        case 2: return [3 /*break*/, 4];
                        case 3:
                            this.dom.state[dataKey].zipError = 'Invalid ZipCode';
                            if (zip4Config.control.value) {
                                zip4Config.triggerOnChange(null);
                            }
                            zip4Config.readonly = true;
                            zipConfig.triggerOnChange(null);
                            _b.label = 4;
                        case 4:
                            child = this.field.children['zip'];
                            if (IsArray(child.source, true)) {
                                value = zipConfig.control.value;
                                // console.log(value);
                                if (value) {
                                    option = value in child.sourceMap ? child.source[child.sourceMap[value]] : null;
                                    zipConfig.value = value;
                                    if (IsObject(option, ['name'])) {
                                        this._updateDisplayField(dataKey, 'zip', option.name);
                                    }
                                    this._triggerUpdateAssetDisplay(dataKey);
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         *
         * @param countryConfig
         * @returns
         */
        PopEntityAddressComponent.prototype._isUSA = function (countryConfig) {
            var _a;
            if (countryConfig.value && IsArray((_a = countryConfig === null || countryConfig === void 0 ? void 0 : countryConfig.options) === null || _a === void 0 ? void 0 : _a.values, true)) {
                var country = countryConfig.options.values.find(function (country) { return country.value == countryConfig.value; });
                if (country.name.toLowerCase().split(' ').join('') != 'unitedstates')
                    return false;
                else
                    return true;
            }
            else
                return true;
        };
        PopEntityAddressComponent.prototype._getAddressFromZip = function (zipcode) {
            return new Promise(function (resolve, reject) {
                exports.PopRequest.doGet("legacy/data/zip-codes?zip_code=" + zipcode).subscribe(function (res) {
                    res = GetHttpArrayResult(res).pop() || [];
                    return resolve(res);
                });
            });
        };
        return PopEntityAddressComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntityAddressComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-address',
                    template: "<div class=\"pop-entity-address-field import-field-container\">\n\n  <!--<div class=\"pop-entity-address-readonly-container\" [ngClass]=\"{'sw-hidden': dom.state.template !== 'template_readonly'}\">-->\n  <div class=\"pop-entity-address-readonly-container\">\n    <div class=\"pop-entity-address-label-header\">\n      <div class=\"pop-entity-address-label pop-entity-address-label-title\" *ngIf=\"field.multiple\">\n        &nbsp;Label\n      </div>\n      <div class=\"pop-entity-address-label pop-entity-address-label-address\">\n        &nbsp;<div *ngIf=\"field.multiple\">Address</div>\n        <div *ngIf=\"!field.multiple\">{{field.entries[0].name}}</div>\n      </div>\n\n      <div class=\"pop-entity-address-label pop-entity-address-label-icon\">\n        <div class=\"import-flex-row import-flex-item-sm import-flex-grow-sm\"></div><!-- Filler -->\n        <lib-pop-entity-field-edit-icon\n          *ngIf=\"!field.multiple\"\n          class=\"import-flex-align-end\"\n          (events)=\"onActionEvent($event, 0);\" [field]=\"field\"\n          [dom]=\"dom\"\n        ></lib-pop-entity-field-edit-icon>\n      </div>\n\n    </div>\n\n    <div [ngClass]=\"{'sw-field-mar-btm-sm':isLast}\" *ngFor=\"let dataKey of field.data_keys; last as isLast;\">\n      <div *ngIf=\"field.data[dataKey]; let data;\">\n        <div *ngIf=\"field.items[dataKey].config; let items;\">\n          <div *ngIf=\"dom.state[dataKey]; let state;\">\n            <div *ngIf=\"dom.session[dataKey].display; let display;\">\n\n              <div class=\"pop-entity-address-item-header\" [ngClass]=\"{'sw-hidden':state.open}\">\n                <div class=\"pop-entity-address-item  pop-entity-address-item-title\" *ngIf=\"field.multiple\">\n                  <div>{{dom.session[ dataKey ].display.label}}</div>\n                </div>\n                <div class=\"pop-entity-address-item  pop-entity-address-item-address\">\n                  <div class=\"import-flex-row-wrap\" *ngIf=\"items['line_1'] && data['line_1']\">\n                    <div>&nbsp;{{data['line_1']}}</div>\n                  </div>\n\n                  <div class=\"import-flex-row-wrap\">\n                    <div *ngIf=\"items['line_2'] && data['line_2']\">&nbsp;{{data['line_2']}}</div>\n                    <div *ngIf=\"items['line_3'] && data['line_3']\">&nbsp;{{data['line_3']}}</div>\n                  </div>\n\n                  <div class=\"import-flex-row-wrap\">\n                    <div *ngIf=\"items['city'] && data['city']\">&nbsp;{{data['city']}}</div>\n                    <div *ngIf=\"items['city'] && data['city'] && items['region_id'] && display['region_id']\">,</div>\n                    <div *ngIf=\"items['region_id'] && display['region_id']\">\n                      &nbsp;{{display['region_id']}}</div>\n                    <div *ngIf=\"items['region_id'] && data['region_id'] && items['county'] && data['county']\">\n                      ,</div>\n                    <div *ngIf=\"items['county'] && data['county']\">&nbsp;{{data['county']}}</div>\n                    <div *ngIf=\"items['zip'] && data['zip']\">&nbsp;{{data['zip']}}</div>\n                    <div *ngIf=\"items['zip_4'] && data['zip_4']\">-{{data['zip_4']}}</div>\n                    <div *ngIf=\"items['country_id'] && display['country_id']\">&nbsp;{{display['country_id']}}</div>\n                  </div>\n\n                </div>\n                <div class=\"pop-entity-address-item-icon\">\n                  <!-- Filler -->\n                  <lib-pop-entity-field-edit-icon\n                    *ngIf=\"field.multiple\"\n                    [style.marginLeft.px]=\"-15\"\n                    (events)=\"onActionEvent($event, dataKey);\" [field]=\"field\"\n                    [dom]=\"dom\"\n                  ></lib-pop-entity-field-edit-icon>\n                </div>\n              </div>\n              <mat-divider *ngIf=\"!isLast\" [style.width.%]=\"100\" [style.marginTop.px]=\"5\"></mat-divider>\n\n              <div [ngClass]=\"{'sw-hidden':!state.open}\" class=\"pt-02 sw-pad-hrz-sm sw-mar-top-xs\">\n                <div class=\"import-flex-row import-field-flex-row-offset\">\n                  <div class=\"import-flex-row-wrap\">\n\n                    <!-- v Label and Custom lablel - turned off for now v -->\n\n                    <!--<div *ngIf=\"field.multiple && field.setting.edit_label && asset.entry; let entry;\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">-->\n                    <!--<lib-pop-select [config]=\"entry\"></lib-pop-select>-->\n                    <!--</div>-->\n                    <!--<div *ngIf=\"state.customLabel && asset.customLabel; let item;\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">-->\n                    <!--<lib-pop-input [config]=\"item\"></lib-pop-input>-->\n                    <!--</div>-->\n                    <!--<div class=\"import-flex-row-break\"></div>-->\n\n                    <!-- ^ Label and Custom lable - turned off for now ^ -->\n\n\n                    <div *ngIf=\"items['line_1']\" class=\"import-field import-field-spacing import-flex-item-full import-flex-grow-lg\">\n                      <lib-pop-input\n                        [config]=\"items['line_1']\"\n                        (events)=\"onFieldItemEvent($event, dataKey, 'line_1');\"\n                      ></lib-pop-input>\n                    </div>\n\n                    <div *ngIf=\"items['line_2']\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">\n                      <lib-pop-input\n                        [config]=\"items['line_2']\"\n                        (events)=\"onFieldItemEvent($event, dataKey, 'line_2');\"\n                      ></lib-pop-input>\n                    </div>\n\n                    <div *ngIf=\"items['line_3']\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">\n                      <lib-pop-input\n                        [config]=\"items['line_3']\"\n                        (events)=\"onFieldItemEvent($event, dataKey, 'line_3');\"\n                      ></lib-pop-input>\n                    </div>\n\n                    <div class=\"import-flex-row-break\"></div>\n                    <div *ngIf=\"items['zip']\" class=\"import-flex-row import-field-spacing import-flex-item-xs import-flex-grow-xs\">\n                      <lib-pop-input class=\"import-flex-item-xs import-flex-grow-xs\" [config]=\"items['zip']\" (events)=\"onFieldItemEvent($event, dataKey, 'zip');\"></lib-pop-input>\n                    </div>\n\n                    <div *ngIf=\"items['zip_4']\" class=\"import-flex-row import-field-spacing import-flex-item-xs import-flex-grow-xs\">\n                      <lib-pop-input class=\"import-flex-item-xs import-flex-grow-xs\" [config]=\"items['zip_4']\" (events)=\"onFieldItemEvent($event, dataKey, 'zip_4');\"></lib-pop-input>\n                    </div>\n                    <!-- Show error message -->\n\n                    <div *ngIf=\"items['zip']\" class=\"import-flex-row-break\"></div>\n\n                    <mat-progress-bar\n                    class=\"pop-field-item-loader\"\n                    *ngIf=\"state.loading\"\n                    [style.height.px]=\"1\"\n                    [mode]=\"'query'\"\n                  >\n                  </mat-progress-bar>\n\n                    <div *ngIf=\"items['zip'] && state.zipError\" class=\"import-flex-row import-field-spacing import-flex-item-xs import-flex-grow-xs\">\n\n                      <p >{{state.zipError}}</p>\n                    </div>\n                    <div class=\"import-flex-row-break\"></div>\n\n\n\n                    <div *ngIf=\"items['city']\" class=\"import-field import-field-spacing import-flex-item-xs import-flex-grow-xs\">\n                      <lib-pop-input [config]=\"items['city']\" (events)=\"onFieldItemEvent($event, dataKey, 'city');\"></lib-pop-input>\n                    </div>\n\n                    <div *ngIf=\"items['region_id']\" class=\"import-field import-field-spacing import-flex-item-xs import-flex-grow-xs\">\n                      <lib-pop-select [config]=\"items['region_id']\" (events)=\"onFieldItemEvent($event, dataKey, 'region_id');\"></lib-pop-select>\n                    </div>\n\n\n                    <div class=\"import-flex-row-break\"></div>\n\n                    <div *ngIf=\"items['county']\"\n                         class=\"import-field import-field-spacing import-flex-item-xs import-flex-grow-xs\">\n                      <lib-pop-input [config]=\"items['county']\"\n                                     (events)=\"onFieldItemEvent($event,dataKey,  'county');\"></lib-pop-input>\n                    </div>\n\n                    <div *ngIf=\"items['country_id']\"\n                         class=\"import-field import-field-spacing import-flex-item-xs import-flex-grow-xs\">\n                      <lib-pop-select [config]=\"items['country_id']\"\n                                      (events)=\"onFieldItemEvent($event, dataKey, 'country_id');\"></lib-pop-select>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"import-field-footer sw-mar-top-sm sw-pad-rgt-lg\" *ngIf=\"field.canRemove\">\n                  <lib-pop-field-btn class=\"sw-mar-rgt-sm\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n                </div>\n\n                <div *ngIf=\"true\" class=\"import-flex-row-wrap import-flex-end sw-pad-rgt-lg sw-pad-vrt-lg\">\n                  <lib-pop-button\n                    [config]=\"{value:'Close', size: 30, color: 'accent', bubble: true, event: 'close'}\"\n                    (events)=\"onActionEvent($event, dataKey);\"\n                  ></lib-pop-button>\n                </div>\n                <div *ngIf=\"false\" class=\"import-flex-row-wrap import-flex-end sw-pad-rgt-lg sw-pad-vrt-lg\">\n                  <lib-pop-button\n                    [config]=\"{value:'Close', size: 30, color: 'accent', bubble: true, event: 'close'}\"\n                    (events)=\"onActionEvent($event);\"\n                  ></lib-pop-button>\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".pop-entity-address-field{position:relative;min-height:80px;clear:both;margin-top:17px}.pop-entity-address-readonly-container{position:relative;flex:1;border:1px solid var(--border);border-radius:3px;padding-bottom:5px}.pop-entity-address-label-header{display:flex;align-items:center;justify-content:flex-start;min-height:45px;border-bottom:1px solid var(--border)}.pop-entity-address-label-title{width:30%}.pop-entity-address-label-address{word-wrap:break-word;display:flex;flex-grow:1;width:60%}.pop-entity-address-label-icon{display:flex;width:10%}.pop-entity-address-item-title{width:25%}.pop-entity-address-item-address{display:flex;flex-grow:1;width:70%;flex-direction:column}.pop-entity-address-item-icon{display:flex;flex-direction:row;width:5%;align-items:center;justify-content:flex-start}:host ::ng-deep .pop-entity-address-item-icon mat-icon{font-size:.95em}.pop-entity-address-item-header{display:flex;align-items:flex-start;justify-content:flex-start;margin-top:5px;min-height:35px}.pop-entity-address-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding:0 5px}.pop-entity-address-item{font-size:.8em;padding:0 5px}:host ::ng-deep lib-pop-field-item-loader{top:3rem!important}"]
                },] }
    ];
    PopEntityAddressComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntityAddressComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityInputComponent = /** @class */ (function (_super) {
        __extends(PopEntityInputComponent, _super);
        function PopEntityInputComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, InputFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityInputComponent';
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityInputComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityInputComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                  Override Inherited Methods                                  *
         *                                    ( Protected Methods )                                     *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This will setup this field to handle changes and transformations
         */
        PopEntityInputComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            var defaultLabel = StorageGetter(this.field, ['children', 'value', 'model', 'label']);
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    var item = _this.field.items[dataKey];
                    item.config.value.label = item.entry ? item.entry.name : defaultLabel;
                });
            }
            return true;
        };
        return PopEntityInputComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntityInputComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-input',
                    template: "<div class=\"pop-entity-input-field import-field-container\" *ngFor=\"let dataKey of field.data_keys; let i = index;  last as isLast\">\n  <div *ngIf=\"field.items[dataKey]; let items;\">\n    <!--<div *ngIf=\"dom.state[dataKey]; let state;\">-->\n      <!--<div *ngIf=\"ui.asset[dataKey]; let asset;\">-->\n        <div class=\"import-flex-row import-flex-item-full\" *ngIf=\"items.config['value']; let item;\">\n          <lib-pop-input class=\"import-field import-flex-item-xs import-flex-grow-xs\" [config]=\"item\" (events)=\"onFieldItemEvent($event, dataKey, 'value');\"></lib-pop-input>\n          <!--<div class=\"pop-entity-input-item-icon\" *ngIf=\"field.multiple\">-->\n            <!--<lib-pop-entity-field-edit-icon-->\n              <!--(events)=\"onActionEvent($event, dataKey);\" [field]=\"field\"-->\n              <!--[dom]=\"dom\"-->\n            <!--&gt;</lib-pop-entity-field-edit-icon>-->\n          <!--</div>-->\n        </div>\n        <!--<div [ngClass]=\"{'sw-hidden':!state.open}\" class=\"pt-02 sw-pad-hrz-sm sw-mar-top-xs\">-->\n\n          <!--<div class=\"import-flex-row import-field-flex-row-offset\">-->\n            <!--<div class=\"import-flex-row-wrap\">-->\n              <!--<div *ngIf=\"field.setting.edit_label && asset.entry; let entry;\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">-->\n                <!--<lib-pop-select [config]=\"entry\"></lib-pop-select>-->\n              <!--</div>-->\n              <!--<div *ngIf=\"state.customLabel && asset.customLabel; let item;\" class=\"import-field import-field-spacing import-flex-item-sm import-flex-grow-sm\">-->\n                <!--<lib-pop-input [config]=\"item\"></lib-pop-input>-->\n              <!--</div>-->\n            <!--</div>-->\n          <!--</div>-->\n\n          <!--<div *ngIf=\"field.canRemove\" class=\"import-flex-row-wrap import-flex-end\">-->\n            <!--<lib-pop-field-btn class=\"sw-mar-top-md sw-pad-rgt-lg\" doAction=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>-->\n          <!--</div>-->\n          <!---->\n        <!--</div>-->\n        <!--<div *ngIf=\"isLast && i !== 0\" class=\"import-flex-row-wrap import-flex-end sw-pad-rgt-md sw-pad-vrt-lg\">-->\n          <!--<lib-pop-button-->\n            <!--[config]=\"{value:'Close', size: 30, color: 'accent', bubble: true, event: 'close'}\"-->\n            <!--(events)=\"onActionEvent($event, dataKey);\"-->\n          <!--&gt;</lib-pop-button>-->\n        <!--</div>-->\n        <div class=\"import-field-footer sw-mar-top-sm sw-pad-rgt-lg\" *ngIf=\"field.canRemove && isLast\">\n          <lib-pop-field-btn class=\"sw-mar-rgt-sm\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n        </div>\n\n      <!--</div>-->\n    <!--</div>-->\n  </div>\n</div>\n\n",
                    styles: [".pop-entity-input-item-icon{display:flex;flex-direction:column;width:10%;align-items:flex-end;justify-content:center}"]
                },] }
    ];
    PopEntityInputComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntityInputComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntitySelectComponent = /** @class */ (function (_super) {
        __extends(PopEntitySelectComponent, _super);
        function PopEntitySelectComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, SelectFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntitySelectComponent';
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntitySelectComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntitySelectComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /**
         * This will setup this field to handle changes and transformations
         */
        PopEntitySelectComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            var defaultLabel = StorageGetter(this.field, ['children', 'value', 'model', 'label']);
            var entryLabel = this.field.entries[0].name;
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    var item = _this.field.items[dataKey];
                    if (_this.field.multiple) {
                        item.config.value.label = _this.dom.session[dataKey].display.label;
                    }
                    else {
                        item.config.value.label = entryLabel ? entryLabel : defaultLabel;
                    }
                });
            }
            return true;
        };
        return PopEntitySelectComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntitySelectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-select',
                    template: "<div class=\"pop-entity-input-field import-field-container\" *ngFor=\"let dataKey of field.data_keys; let i = index;  last as isLast\">\n  <div *ngIf=\"field.items[dataKey]; let items;\">\n    <div class=\"import-flex-row\">\n      <div class=\"import-flex-row-wrap\">\n        <div *ngIf=\"items.config['value']; let item;\" class=\"import-field import-flex-item-xs import-flex-grow-xs\">\n          <lib-pop-select [config]=\"item\" (events)=\"onFieldItemEvent($event, dataKey, item.column);\"></lib-pop-select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"import-field-footer sw-mar-top-sm sw-pad-rgt-lg\" *ngIf=\"field.canRemove && isLast\">\n      <lib-pop-field-btn class=\"sw-mar-rgt-sm\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [""]
                },] }
    ];
    PopEntitySelectComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntitySelectComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityRadioComponent = /** @class */ (function (_super) {
        __extends(PopEntityRadioComponent, _super);
        function PopEntityRadioComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, RadioFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityRadioComponent';
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityRadioComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityRadioComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                  Override Inherited Methods                                  *
         *                                    ( Protected Methods )                                     *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This will setup this field to handle changes and transformations
         */
        PopEntityRadioComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            var defaultLabel = StorageGetter(this.field, ['children', 'value', 'model', 'label'], '');
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    var item = _this.field.items[dataKey];
                    item.config.value.label = item.entry ? item.entry.name : defaultLabel;
                });
            }
            return true;
        };
        return PopEntityRadioComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntityRadioComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-radio',
                    template: "<div class=\"pop-entity-input-field import-field-container\" *ngFor=\"let dataKey of field.data_keys; let i = index;  last as isLast\">\n  <div *ngIf=\"field.items[dataKey]; let items;\">\n\n    <div class=\"import-flex-row import-flex-item-full\" *ngIf=\"items.config['value']; let item;\">\n      <lib-pop-radio class=\"import-field import-flex-item-xs import-flex-grow-xs\" [config]=\"item\" (events)=\"onFieldItemEvent($event, dataKey, 'value');\"></lib-pop-radio>\n    </div>\n\n    <div class=\"import-field-footer sw-mar-top-sm sw-pad-rgt-lg\" *ngIf=\"field.canRemove && isLast\">\n      <lib-pop-field-btn class=\"sw-mar-rgt-sm\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n    </div>\n  </div>\n</div>\n",
                    styles: [".pop-entity-input-item-icon{display:flex;flex-direction:column;width:10%;align-items:flex-end;justify-content:center}"]
                },] }
    ];
    PopEntityRadioComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntityRadioComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityCheckboxComponent = /** @class */ (function (_super) {
        __extends(PopEntityCheckboxComponent, _super);
        function PopEntityCheckboxComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, CheckboxFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityCheckboxComponent';
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityCheckboxComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityCheckboxComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                  Override Inherited Methods                                  *
         *                                    ( Protected Methods )                                     *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This will setup this field to handle changes and transformations
         */
        PopEntityCheckboxComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            var defaultLabel = StorageGetter(this.field, ['children', 'value', 'model', 'label'], '');
            console.log('defaultLabel', defaultLabel);
            var entryLabel = this.field.entries[0].name;
            console.log('entryLabel', entryLabel);
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    var item = _this.field.items[dataKey];
                    if (_this.field.multiple) {
                        item.config.value.label = _this.dom.session[dataKey].display.label;
                    }
                    else {
                        item.config.value.label = entryLabel ? entryLabel : defaultLabel;
                    }
                });
            }
            return true;
        };
        return PopEntityCheckboxComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntityCheckboxComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-checkbox',
                    template: "<div class=\"pop-entity-input-field import-field-container\" *ngFor=\"let dataKey of field.data_keys; let i = index;  last as isLast\">\n  <div *ngIf=\"field.items[dataKey]; let items;\">\n\n    <div class=\"import-flex-row import-flex-item-full\" *ngIf=\"items.config['value']; let item;\">\n      <lib-pop-checkbox class=\"import-field import-flex-item-xs import-flex-grow-xs\" [config]=\"item\" (events)=\"onFieldItemEvent($event, dataKey, 'value');\"></lib-pop-checkbox>\n    </div>\n    <div class=\"import-field-footer sw-mar-top-sm sw-pad-rgt-md\" *ngIf=\"field.canRemove && isLast\">\n      <lib-pop-field-btn class=\"sw-mar-rgt-sm\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n    </div>\n  </div>\n</div>\n\n",
                    styles: [""]
                },] }
    ];
    PopEntityCheckboxComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntityCheckboxComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntitySwitchComponent = /** @class */ (function (_super) {
        __extends(PopEntitySwitchComponent, _super);
        function PopEntitySwitchComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, SwitchFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntitySwitchComponent';
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntitySwitchComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntitySwitchComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /**
         * This will setup this field to handle changes and transformations
         */
        PopEntitySwitchComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            var defaultLabel = StorageGetter(this.field, ['children', 'value', 'model', 'label'], '');
            var entryLabel = this.field.entries[0].name;
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    var item = _this.field.items[dataKey];
                    if (_this.field.multiple) {
                        item.config.value.label = _this.dom.session[dataKey].display.label;
                    }
                    else {
                        item.config.value.label = entryLabel ? entryLabel : defaultLabel;
                    }
                });
            }
            return true;
        };
        return PopEntitySwitchComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntitySwitchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-switch',
                    template: "<div class=\"pop-entity-input-field import-field-container\" *ngFor=\"let dataKey of field.data_keys; let i = index;  last as isLast\">\n  <div *ngIf=\"field.items[dataKey]; let items;\">\n    <div class=\"import-flex-row\">\n      <div class=\"import-flex-row-wrap\">\n        <div *ngIf=\"items.config['value']; let item;\" class=\"import-field import-flex-item-xs import-flex-grow-xs\">\n          <lib-pop-switch [config]=\"item\" (events)=\"onFieldItemEvent($event, dataKey, item.column);\"></lib-pop-switch>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"import-field-footer sw-mar-top-sm sw-pad-rgt-lg\" *ngIf=\"field.canRemove && isLast\">\n      <lib-pop-field-btn class=\"sw-mar-rgt-sm\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [""]
                },] }
    ];
    PopEntitySwitchComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntitySwitchComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var SelectMultiFieldSetting = {
        unique_label: {
            name: 'unique_label',
            type: 'boolean',
            defaultValue: true,
        },
    };

    var PopEntitySelectMultiComponent = /** @class */ (function (_super) {
        __extends(PopEntitySelectMultiComponent, _super);
        function PopEntitySelectMultiComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, SelectMultiFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntitySelectMultiComponent';
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntitySelectMultiComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntitySelectMultiComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /**
         * This will setup this field to handle changes and transformations
         */
        PopEntitySelectMultiComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            var defaultLabel = StorageGetter(this.field, ['children', 'value', 'model', 'label']);
            var entryLabel = this.field.entries[0].name;
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    var item = _this.field.items[dataKey];
                    if (_this.field.multiple) {
                        item.config.value.label = _this.dom.session[dataKey].display.label;
                    }
                    else {
                        item.config.value.label = entryLabel ? entryLabel : defaultLabel;
                    }
                });
            }
            return true;
        };
        return PopEntitySelectMultiComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntitySelectMultiComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-select-multi',
                    template: "<div class=\"pop-entity-input-field import-field-container\" *ngFor=\"let dataKey of field.data_keys; let i = index;  last as isLast\">\n  <div *ngIf=\"field.items[dataKey]; let items;\">\n    <div class=\"import-flex-row\">\n      <div class=\"import-flex-row-wrap\">\n        <div *ngIf=\"items.config['value']; let item;\" class=\"import-field import-flex-item-xs import-flex-grow-xs\">\n          <lib-pop-select-multi [config]=\"item\" (events)=\"onFieldItemEvent($event, dataKey, item.column);\"></lib-pop-select-multi>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"import-field-footer sw-mar-top-sm sw-pad-rgt-lg\" *ngIf=\"field.canRemove && isLast\">\n      <lib-pop-field-btn class=\"sw-mar-rgt-sm\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [""]
                },] }
    ];
    PopEntitySelectMultiComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntitySelectMultiComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityTextareaComponent = /** @class */ (function (_super) {
        __extends(PopEntityTextareaComponent, _super);
        function PopEntityTextareaComponent(el, _domRepo) {
            var _this = _super.call(this, el, _domRepo, TextareaFieldSetting) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityTextareaComponent';
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityTextareaComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityTextareaComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                  Override Inherited Methods                                  *
         *                                    ( Protected Methods )                                     *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This will setup this field to handle changes and transformations
         */
        PopEntityTextareaComponent.prototype._setFieldAttributes = function () {
            var _this = this;
            var defaultLabel = StorageGetter(this.field, ['children', 'value', 'model', 'label']);
            if (this.field && this.field.items) {
                Object.keys(this.field.items).map(function (dataKey, index) {
                    var item = _this.field.items[dataKey];
                    item.config.content.label = item.entry ? item.entry.name : defaultLabel;
                });
            }
            return true;
        };
        return PopEntityTextareaComponent;
    }(PopEntityFieldBoilerComponent));
    PopEntityTextareaComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-textarea',
                    template: "<div class=\"pop-entity-textarea-field import-field-container\" *ngFor=\"let dataKey of field.data_keys; let i = index;  last as isLast\">\n  <div *ngIf=\"field.items[dataKey]; let items;\">\n\n    <div class=\"import-flex-row import-flex-item-full\" *ngIf=\"items.config['content']; let item;\">\n      <lib-pop-textarea class=\"import-field import-flex-item-xs import-flex-grow-xs\" [config]=\"item\" (events)=\"onFieldItemEvent($event, dataKey, 'content');\"></lib-pop-textarea>\n    </div>\n\n    <div class=\"import-field-footer sw-mar-top-sm sw-pad-rgt-lg\" *ngIf=\"field.canRemove && isLast\">\n      <lib-pop-field-btn class=\"sw-mar-rgt-sm\" action=\"remove\" [field]=\"field\" (events)=\"onActionEvent($event, dataKey);\"></lib-pop-field-btn>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [".pop-entity-textarea-item-icon{display:flex;flex-direction:column;width:10%;align-items:flex-end;justify-content:center}"]
                },] }
    ];
    PopEntityTextareaComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntityTextareaComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var MOCK_DATA = [
        {
            number: "(432) 8681369",
            prefix: "Honorable",
            first: "Aryn",
            middle: "Freddie",
            last: "Guyan",
            suffix: "II",
            line_1: "Hallows",
            line_2: "Westridge",
            line_3: "671",
            city: "Midland",
            region_id: 10,
            country: "United States",
            zip: "79705"
        },
        {
            number: "(310) 6622956",
            prefix: "Ms",
            first: "Atalanta",
            middle: "Brody",
            last: "Drennan",
            suffix: "Jr",
            line_1: "Manufacturers",
            line_2: "Manitowish",
            line_3: "3548",
            city: "Los Angeles",
            region_id: 20,
            country: "United States",
            zip: "90035"
        },
        {
            number: "(256) 9125413",
            prefix: "Rev",
            first: "Morten",
            middle: "Ashien",
            last: "Exroll",
            suffix: "IV",
            line_1: "Oakridge",
            line_2: "Del Sol",
            line_3: "907",
            city: "Huntsville",
            region_id: 18,
            country: "United States",
            zip: "35815"
        },
        {
            number: "(405) 9975613",
            prefix: "Rev",
            first: "Barthel",
            middle: "Cleopatra",
            last: "McFaul",
            suffix: "IV",
            line_1: "Clyde Gallagher",
            line_2: "Badeau",
            line_3: "5",
            city: "Oklahoma City",
            region_id: 11,
            country: "United States",
            zip: "73173"
        },
        {
            number: "(251) 8931103",
            prefix: "Mr",
            first: "Dietrich",
            middle: "Sidonnie",
            last: "Illingsworth",
            suffix: "Jr",
            line_1: "Transport",
            line_2: "Stuart",
            line_3: "90679",
            city: "Mobile",
            region_id: 30,
            country: "United States",
            zip: "36689"
        },
        {
            number: "(828) 3451730",
            prefix: "Rev",
            first: "Arty",
            middle: "Shawnee",
            last: "Zapata",
            suffix: "III",
            line_1: "Swallow",
            line_2: "Lawn",
            line_3: "34",
            city: "Asheville",
            region_id: 2,
            country: "United States",
            zip: "28815"
        },
        {
            number: "(304) 4762071",
            prefix: "Ms",
            first: "Wye",
            middle: "Jilleen",
            last: "Boynes",
            suffix: "Sr",
            line_1: "4th",
            line_2: "Tennessee",
            line_3: "1",
            city: "Huntington",
            region_id: 47,
            country: "United States",
            zip: "25775"
        },
        {
            number: "(214) 3168936",
            prefix: "Mr",
            first: "Gregg",
            middle: "Faustine",
            last: "Keattch",
            suffix: "Jr",
            line_1: "Bunker Hill",
            line_2: "Golf View",
            line_3: "832",
            city: "Dallas",
            region_id: 6,
            country: "United States",
            zip: "75260"
        },
        {
            number: "(954) 7929407",
            prefix: "Ms",
            first: "Caresa",
            middle: "Fania",
            last: "Pinnock",
            suffix: "Jr",
            line_1: "Quincy",
            line_2: "Stone Corner",
            line_3: "8",
            city: "Fort Lauderdale",
            region_id: 12,
            country: "United States",
            zip: "33330"
        },
        {
            number: "(915) 6300446",
            prefix: "Mr",
            first: "Korella",
            middle: "Kristyn",
            last: "Wildblood",
            suffix: "IV",
            line_1: "Fair Oaks",
            line_2: "Scott",
            line_3: "2",
            city: "El Paso",
            region_id: 31,
            country: "United States",
            zip: "88574"
        },
        {
            number: "(703) 6359815",
            prefix: "Ms",
            first: "Sheila-kathryn",
            middle: "Charissa",
            last: "Blown",
            suffix: "II",
            line_1: "Butternut",
            line_2: "Coolidge",
            line_3: "9",
            city: "Reston",
            region_id: 32,
            country: "United States",
            zip: "20195"
        },
        {
            number: "(520) 8823460",
            prefix: "Dr",
            first: "Jilleen",
            middle: "Odelle",
            last: "Wraggs",
            suffix: "II",
            line_1: "Londonderry",
            line_2: "Sugar",
            line_3: "631",
            city: "Tucson",
            region_id: 46,
            country: "United States",
            zip: "85743"
        },
        {
            number: "(501) 2671110",
            prefix: "Mr",
            first: "Mada",
            middle: "Jeanie",
            last: "Croall",
            suffix: "III",
            line_1: "Redwing",
            line_2: "Express",
            line_3: "11",
            city: "North Little Rock",
            region_id: 13,
            country: "United States",
            zip: "72118"
        },
        {
            number: "(229) 6574703",
            prefix: "Ms",
            first: "Bruis",
            middle: "Melody",
            last: "Matyja",
            suffix: "Jr",
            line_1: "Raven",
            line_2: "Lerdahl",
            line_3: "0780",
            city: "Decatur",
            region_id: 27,
            country: "United States",
            zip: "30089"
        },
        {
            number: "(706) 2720582",
            prefix: "Rev",
            first: "Odey",
            middle: "Hashim",
            last: "Reany",
            suffix: "III",
            line_1: "Green Ridge",
            line_2: "Bay",
            line_3: "727",
            city: "Augusta",
            region_id: 16,
            country: "United States",
            zip: "30905"
        },
        {
            number: "(201) 9304490",
            prefix: "Ms",
            first: "Gerhardt",
            middle: "Thorndike",
            last: "Duhig",
            suffix: "IV",
            line_1: "Oak Valley",
            line_2: "Messerschmidt",
            line_3: "7",
            city: "Paterson",
            region_id: 30,
            country: "United States",
            zip: "07522"
        },
        {
            number: "(512) 8449175",
            prefix: "Mrs",
            first: "Garvy",
            middle: "Jay",
            last: "Jeggo",
            suffix: "Jr",
            line_1: "Bunting",
            line_2: "Bunker Hill",
            line_3: "3164",
            city: "Austin",
            region_id: 33,
            country: "United States",
            zip: "78759"
        },
        {
            number: "(610) 1346823",
            prefix: "Rev",
            first: "Kristan",
            middle: "Evania",
            last: "Hugonin",
            suffix: "IV",
            line_1: "Oriole",
            line_2: "Carioca",
            line_3: "93791",
            city: "Allentown",
            region_id: 33,
            country: "United States",
            zip: "18105"
        },
        {
            number: "(972) 4871606",
            prefix: "Honorable",
            first: "Frank",
            middle: "Caritta",
            last: "Perrett",
            suffix: "Sr",
            line_1: "Morrow",
            line_2: "Emmet",
            line_3: "897",
            city: "Dallas",
            region_id: 14,
            country: "United States",
            zip: "75205"
        },
        {
            number: "(816) 3091864",
            prefix: "Mr",
            first: "Reeba",
            middle: "Sheri",
            last: "Bremmer",
            suffix: "II",
            line_1: "Merrick",
            line_2: "Truax",
            line_3: "86683",
            city: "Kansas City",
            region_id: 2,
            country: "United States",
            zip: "64130"
        },
        {
            number: "(916) 6852072",
            prefix: "Mrs",
            first: "Guthrie",
            middle: "Gerladina",
            last: "Cureton",
            suffix: "Jr",
            line_1: "Mayer",
            line_2: "Goodland",
            line_3: "402",
            city: "Sacramento",
            region_id: 1,
            country: "United States",
            zip: "95813"
        },
        {
            number: "(561) 3435348",
            prefix: "Honorable",
            first: "Zelda",
            middle: "Dorette",
            last: "St. Queintain",
            suffix: "III",
            line_1: "Ilene",
            line_2: "Bunker Hill",
            line_3: "09912",
            city: "Boca Raton",
            region_id: 37,
            country: "United States",
            zip: "33499"
        },
        {
            number: "(904) 5841821",
            prefix: "Ms",
            first: "Gian",
            middle: "Evanne",
            last: "Peschmann",
            suffix: "II",
            line_1: "Sullivan",
            line_2: "Derek",
            line_3: "08",
            city: "Jacksonville",
            region_id: 32,
            country: "United States",
            zip: "32255"
        },
        {
            number: "(702) 3087097",
            prefix: "Mr",
            first: "Fin",
            middle: "Otho",
            last: "Culleford",
            suffix: "III",
            line_1: "Harbort",
            line_2: "Jay",
            line_3: "12720",
            city: "Las Vegas",
            region_id: 50,
            country: "United States",
            zip: "89178"
        },
        {
            number: "(518) 6415717",
            prefix: "Honorable",
            first: "Doy",
            middle: "Frasco",
            last: "Fudger",
            suffix: "Jr",
            line_1: "Rutledge",
            line_2: "Blaine",
            line_3: "65688",
            city: "Albany",
            region_id: 46,
            country: "United States",
            zip: "12205"
        },
        {
            number: "(202) 2075385",
            prefix: "Mrs",
            first: "Fairfax",
            middle: "Jobey",
            last: "ducarme",
            suffix: "Sr",
            line_1: "Moland",
            line_2: "Spohn",
            line_3: "135",
            city: "Washington",
            region_id: 38,
            country: "United States",
            zip: "20226"
        },
        {
            number: "(304) 8477966",
            prefix: "Mrs",
            first: "Finn",
            middle: "Decca",
            last: "Campling",
            suffix: "III",
            line_1: "Kings",
            line_2: "Almo",
            line_3: "022",
            city: "Charleston",
            region_id: 44,
            country: "United States",
            zip: "25362"
        },
        {
            number: "(786) 7805933",
            prefix: "Ms",
            first: "Colet",
            middle: "Mitchael",
            last: "Signe",
            suffix: "III",
            line_1: "Maywood",
            line_2: "Scofield",
            line_3: "838",
            city: "Miami",
            region_id: 25,
            country: "United States",
            zip: "33147"
        },
        {
            number: "(918) 9261303",
            prefix: "Rev",
            first: "Clementia",
            middle: "Emmy",
            last: "Spain",
            suffix: "IV",
            line_1: "Trailsway",
            line_2: "Summer Ridge",
            line_3: "01986",
            city: "Tulsa",
            region_id: 2,
            country: "United States",
            zip: "74103"
        },
        {
            number: "(303) 1982164",
            prefix: "Ms",
            first: "Noelyn",
            middle: "Brody",
            last: "Curley",
            suffix: "III",
            line_1: "Sullivan",
            line_2: "Redwing",
            line_3: "8905",
            city: "Denver",
            region_id: 34,
            country: "United States",
            zip: "80204"
        },
        {
            number: "(801) 2223513",
            prefix: "Rev",
            first: "Pierrette",
            middle: "Carmine",
            last: "Farr",
            suffix: "IV",
            line_1: "American",
            line_2: "Fair Oaks",
            line_3: "42160",
            city: "Salt Lake City",
            region_id: 25,
            country: "United States",
            zip: "84115"
        },
        {
            number: "(570) 6033172",
            prefix: "Honorable",
            first: "Bruno",
            middle: "Modestine",
            last: "Pattisson",
            suffix: "Sr",
            line_1: "Arizona",
            line_2: "Rusk",
            line_3: "1629",
            city: "Wilkes Barre",
            region_id: 23,
            country: "United States",
            zip: "18706"
        },
        {
            number: "(941) 7116852",
            prefix: "Dr",
            first: "Asher",
            middle: "Ricky",
            last: "Shallow",
            suffix: "Jr",
            line_1: "Kipling",
            line_2: "Maple Wood",
            line_3: "41284",
            city: "Pinellas Park",
            region_id: 28,
            country: "United States",
            zip: "34665"
        },
        {
            number: "(202) 1979450",
            prefix: "Mr",
            first: "Sanford",
            middle: "Robert",
            last: "Bucklee",
            suffix: "Jr",
            line_1: "Kings",
            line_2: "Calypso",
            line_3: "27111",
            city: "Alexandria",
            region_id: 45,
            country: "United States",
            zip: "22309"
        },
        {
            number: "(310) 7014715",
            prefix: "Dr",
            first: "Conan",
            middle: "Jarrett",
            last: "Pavier",
            suffix: "Jr",
            line_1: "Sauthoff",
            line_2: "Dixon",
            line_3: "0",
            city: "Fresno",
            region_id: 50,
            country: "United States",
            zip: "93762"
        },
        {
            number: "(469) 6780351",
            prefix: "Rev",
            first: "Esme",
            middle: "Hortense",
            last: "Tremethack",
            suffix: "II",
            line_1: "Forster",
            line_2: "Warrior",
            line_3: "7",
            city: "Dallas",
            region_id: 30,
            country: "United States",
            zip: "75216"
        },
        {
            number: "(803) 8625420",
            prefix: "Honorable",
            first: "Cassy",
            middle: "Westley",
            last: "Charity",
            suffix: "II",
            line_1: "Mayer",
            line_2: "Hudson",
            line_3: "85911",
            city: "Columbia",
            region_id: 30,
            country: "United States",
            zip: "29215"
        },
        {
            number: "(615) 3226644",
            prefix: "Rev",
            first: "Ardys",
            middle: "Markus",
            last: "Monahan",
            suffix: "III",
            line_1: "Heffernan",
            line_2: "Ludington",
            line_3: "96743",
            city: "Nashville",
            region_id: 50,
            country: "United States",
            zip: "37245"
        },
        {
            number: "(304) 4328658",
            prefix: "Mr",
            first: "Ceil",
            middle: "Bird",
            last: "Allred",
            suffix: "Jr",
            line_1: "Dorton",
            line_2: "Tennyson",
            line_3: "0695",
            city: "Charleston",
            region_id: 26,
            country: "United States",
            zip: "25326"
        },
        {
            number: "(401) 1098335",
            prefix: "Mr",
            first: "Skye",
            middle: "Jacky",
            last: "Duffyn",
            suffix: "III",
            line_1: "Independence",
            line_2: "Mosinee",
            line_3: "85884",
            city: "Providence",
            region_id: 17,
            country: "United States",
            zip: "02912"
        },
        {
            number: "(540) 6236316",
            prefix: "Honorable",
            first: "Johannah",
            middle: "Herminia",
            last: "Ebertz",
            suffix: "III",
            line_1: "Hanson",
            line_2: "Glacier Hill",
            line_3: "30",
            city: "Roanoke",
            region_id: 25,
            country: "United States",
            zip: "24034"
        },
        {
            number: "(202) 1509886",
            prefix: "Honorable",
            first: "Guthrey",
            middle: "Winny",
            last: "Reuss",
            suffix: "III",
            line_1: "1st",
            line_2: "Melody",
            line_3: "4772",
            city: "Washington",
            region_id: 24,
            country: "United States",
            zip: "20575"
        },
        {
            number: "(202) 4485396",
            prefix: "Mrs",
            first: "Heath",
            middle: "Reinhard",
            last: "Cherry",
            suffix: "II",
            line_1: "Shasta",
            line_2: "Grover",
            line_3: "16155",
            city: "Washington",
            region_id: 43,
            country: "United States",
            zip: "20238"
        },
        {
            number: "(203) 3391386",
            prefix: "Ms",
            first: "Boot",
            middle: "Matthew",
            last: "Spurgin",
            suffix: "Sr",
            line_1: "Muir",
            line_2: "Manitowish",
            line_3: "2107",
            city: "Norwalk",
            region_id: 11,
            country: "United States",
            zip: "06854"
        },
        {
            number: "(786) 1710016",
            prefix: "Mrs",
            first: "Sky",
            middle: "Trent",
            last: "Faichney",
            suffix: "Jr",
            line_1: "Continental",
            line_2: "Luster",
            line_3: "415",
            city: "Miami",
            region_id: 32,
            country: "United States",
            zip: "33158"
        },
        {
            number: "(816) 7081228",
            prefix: "Rev",
            first: "Elihu",
            middle: "Joel",
            last: "Widdows",
            suffix: "IV",
            line_1: "Kingsford",
            line_2: "Melody",
            line_3: "52316",
            city: "Kansas City",
            region_id: 37,
            country: "United States",
            zip: "64125"
        },
        {
            number: "(517) 9466139",
            prefix: "Mr",
            first: "Karalee",
            middle: "Weston",
            last: "Dearell",
            suffix: "Sr",
            line_1: "Stang",
            line_2: "Kingsford",
            line_3: "0570",
            city: "Lansing",
            region_id: 3,
            country: "United States",
            zip: "48930"
        },
        {
            number: "(602) 6259964",
            prefix: "Rev",
            first: "Godart",
            middle: "Murdoch",
            last: "Blewett",
            suffix: "IV",
            line_1: "Rowland",
            line_2: "Manley",
            line_3: "471",
            city: "Peoria",
            region_id: 47,
            country: "United States",
            zip: "85383"
        },
        {
            number: "(347) 8954655",
            prefix: "Mr",
            first: "Angus",
            middle: "Murielle",
            last: "Minet",
            suffix: "Jr",
            line_1: "Golf",
            line_2: "Truax",
            line_3: "2812",
            city: "New York City",
            region_id: 9,
            country: "United States",
            zip: "10004"
        },
        {
            number: "(414) 6717514",
            prefix: "Mr",
            first: "Polly",
            middle: "Conney",
            last: "Longworth",
            suffix: "Sr",
            line_1: "Summerview",
            line_2: "Mandrake",
            line_3: "9",
            city: "Milwaukee",
            region_id: 2,
            country: "United States",
            zip: "53263"
        }
    ];

    var PopFieldEditorService = /** @class */ (function (_super) {
        __extends(PopFieldEditorService, _super);
        function PopFieldEditorService() {
            var _this = _super.call(this) || this;
            _this.name = 'PopFieldEditorService';
            _this.asset = {
                data: MOCK_DATA,
                core: undefined,
                field: undefined,
                viewParams: {
                    select: {
                        disabled: 1,
                        display: 1,
                        required: 1,
                        // required: 1
                    },
                    select_multi: {
                        disabled: 1,
                        display: 1,
                        helpText: 1,
                        // required: 1
                    },
                    input: {
                        display: 1,
                        readonly: 1,
                        required: 1,
                        pattern: 1,
                        validation: 1,
                        transformation: 1,
                        maxlength: 1,
                        minlength: 1,
                        mask: 1,
                        disabled: 1,
                        allow_canada: 1,
                        auto_fill: 1
                    },
                    phone: {
                        display: 1,
                        readonly: 1,
                        required: 1,
                        mask: 1
                    },
                    checkbox: {
                        display: 1,
                        readonly: 1,
                    },
                    button: {
                        display: 1,
                        disabled: 1,
                    },
                    radio: {
                        display: 1,
                        disabled: 1,
                        layout: 1
                    },
                    switch: {
                        display: 1,
                        disabled: 1,
                        allow_canada: 1,
                        auto_fill: 1
                    }
                },
                viewLabels: {
                    address: {
                        defaultValue: 'Address',
                    },
                    phone: {
                        defaultValue: 'Phone',
                    },
                },
                viewMultiple: {
                    address: 1,
                    phone: 1,
                    email: 1,
                    switch: 1
                    // input: 1,
                    // select: 1,
                    // name: 1
                },
                viewOptions: {
                    select: {
                        enum: false,
                        defaultValue: 1,
                        values: [
                            { value: 1, name: 'Option 1' },
                            { value: 2, name: 'Option 2' },
                            { value: 3, name: 'Option 3' },
                        ]
                    },
                    select_multi: {
                        enum: false,
                        defaultValue: [],
                        values: [
                            { value: 1, name: 'Option 1' },
                            { value: 2, name: 'Option 2' },
                            { value: 3, name: 'Option 3' },
                        ]
                    },
                    radio: {
                        enum: false,
                        defaultValue: 'yes',
                        values: [
                            { value: 'yes', name: 'Yes' },
                            { value: 'no', name: 'No' },
                        ]
                    },
                },
                viewRequired: {
                    address: {
                        label: 1,
                        zip: 1
                    },
                    input: {
                        value: 1
                    },
                    select: {
                        value: 1
                    },
                    select_multi: {
                        value: 1
                    },
                    multi_selection: {
                        value: 1
                    },
                    switch: {
                        value: 1
                    },
                    phone: {
                        label: 1,
                        number: 1
                    },
                    email: {
                        address: 1
                    },
                    name: {
                        first: 1,
                        last: 1
                    }
                },
                viewIgnored: {
                    address: {
                        street: 1,
                        u_s_state_id: 1
                    },
                },
                viewTemplate: {
                    selection: 1,
                },
                labelTypes: {
                    defaultValue: 'provided',
                    options: [{ value: 'provided', name: 'Provided' }, { value: 'custom', name: 'Custom' }],
                },
            };
            return _this;
        }
        /**
         * Register the field to make sure that any needed attributes are added
         * @param core
         * @param dom
         */
        PopFieldEditorService.prototype.register = function (core, dom, scheme) {
            var _this = this;
            return new Promise(function (resolve) {
                if (IsObjectThrowError(core, ['entity'], "Invalid Core") && IsObjectThrowError(core.entity, true, "Invalid Core")) {
                    _this.asset.core = core;
                    // console.log('field is ', core.entity);
                    _this.asset.core.entity.items.map(function (item) {
                        FieldItemRules(item);
                    });
                    _this._setFieldCustomSettings(core.entity);
                    if (IsObject(core.entity.custom_setting, true)) {
                        if (!dom.ui.customSetting)
                            dom.ui.customSetting = {};
                        Object.keys(core.entity.custom_setting).map(function (settingName) {
                            var setting = core.entity.custom_setting[settingName];
                            var component = _this.getCustomSettingComponent(core, core.entity, setting, scheme);
                            dom.ui.customSetting[setting.name] = component;
                        });
                    }
                    _this.asset.core.entity.trait = _this.getFieldTraits(_this.asset.core.entity.fieldgroup.name);
                    _this._setFieldEntryValues(core, scheme).then(function () {
                        return resolve(true);
                    });
                }
            });
        };
        // /**
        //  * When we pull field up in the editor to make changes, clear out the cache of that field so when the field is viewed it will pull in any changes
        //  * @param internal_name
        //  * @param fieldId
        //  */
        // clearCustomFieldCache( internal_name: string, fieldId: number ){
        //   this.srv.field.clearCustomFieldCache( fieldId );
        // }
        /**
         * Get a set of mock data for a given field
         * @param internal_name
         */
        PopFieldEditorService.prototype.getDefaultValues = function (internal_name) {
            var defaultValues = {};
            switch (internal_name) {
                case 'address':
                    defaultValues = this.getAddressValues();
                    break;
                case 'phone':
                    defaultValues = this.getPhoneValues();
                    break;
                case 'name':
                    defaultValues = this.getNameValues();
                    break;
                default:
                    defaultValues = { value: null };
                    break;
            }
            return defaultValues;
        };
        PopFieldEditorService.prototype.isSchemePrimaryField = function (scheme, field) {
            if (IsObject(scheme, ['id', 'mapping']) && IsObject(field, ['id', 'fieldgroup'])) {
                var primary = this.getSchemePrimary(scheme);
                var groupName = field.fieldgroup.name;
                if (groupName in primary && +primary[groupName] === +field.id) {
                }
            }
            return false;
        };
        PopFieldEditorService.prototype.isSchemeFieldItemDisabled = function (scheme, fieldId, itemId) {
            if (IsObject(scheme, ['id', 'mapping']) && +fieldId && +itemId) {
                var setting = this.getSchemeFieldItemMapping(scheme, fieldId, itemId);
                if (IsDefined(setting.active, false)) {
                    return +setting.active === 1 ? false : true;
                }
            }
            return false;
        };
        PopFieldEditorService.prototype.isSchemeFieldEntryDisabled = function (scheme, fieldId, entryId) {
            if (IsObject(scheme, ['id', 'mapping']) && +fieldId && +entryId) {
                var setting = this.getSchemeFieldSetting(scheme, fieldId);
                return IsArray(setting.disabled_entries, true) && setting.disabled_entries.includes(entryId);
            }
            return false;
        };
        PopFieldEditorService.prototype.getSchemeFieldSetting = function (scheme, fieldId) {
            if (IsObject(scheme, true) && +fieldId) {
                this.ensureSchemeFieldMapping(scheme, fieldId);
                var storage = this.getSchemeFieldMapping(scheme);
                if (IsObject(storage, true)) {
                    storage = StorageSetter(storage, ["field_" + fieldId]);
                    return storage;
                }
            }
            return null;
        };
        PopFieldEditorService.prototype.getSchemeFieldSection = function (scheme, fieldId, sectionName) {
            if (IsObject(scheme, true) && +fieldId) {
                var storage = this.getSchemeFieldSetting(scheme, fieldId);
                if (IsObject(storage)) {
                    return StorageSetter(storage, [sectionName]);
                }
            }
            return null;
        };
        PopFieldEditorService.prototype.ensureSchemeFieldMapping = function (scheme, fieldId) {
            if (!(IsObject(scheme.mapping))) {
                scheme.mapping = {};
            }
            if (!(IsObject(scheme.mapping.field))) {
                scheme.mapping.field = {};
            }
            if (!(IsObject(scheme.mapping.field["field_" + fieldId]))) {
                scheme.mapping.field["field_" + fieldId] = {};
            }
            if (!(IsObject(scheme.mapping.field["field_" + fieldId].trait_entry))) {
                scheme.mapping.field["field_" + fieldId].trait_entry = {};
            }
            if (!(IsArray(scheme.mapping.field["field_" + fieldId].disabled_entries))) {
                scheme.mapping.field["field_" + fieldId].disabled_entries = [];
            }
        };
        PopFieldEditorService.prototype.getSchemeFieldItemMapping = function (scheme, fieldId, itemId) {
            if (IsObject(scheme, true) && +fieldId && +itemId) {
                var storage = this.getSchemeFieldSetting(scheme, fieldId);
                if (IsObject(storage, true)) {
                    if (!(IsObject(storage.item))) {
                        storage.item = {};
                    }
                    if (!(IsObject(storage.item["item_" + itemId]))) {
                        storage.item["item_" + itemId] = {};
                    }
                    storage = StorageSetter(storage, ['item', "item_" + itemId]);
                    return storage;
                }
            }
            return null;
        };
        PopFieldEditorService.prototype.getSchemeFieldItemSection = function (scheme, fieldId, itemId, sectionName) {
            if (IsObject(scheme, true) && +fieldId && +itemId && IsString(sectionName, true)) {
                var storage = this.getSchemeFieldItemMapping(scheme, fieldId, itemId);
                if (storage && IsString(sectionName, true)) {
                    return StorageSetter(storage, [sectionName]);
                }
            }
            return null;
        };
        PopFieldEditorService.prototype.getFieldTraits = function (fieldGroupName) {
            var traits = [];
            var setting = {};
            switch (String(fieldGroupName).toLowerCase()) {
                case 'address':
                    setting = AddressFieldSetting;
                    break;
                case 'email':
                    setting = EmailFieldSetting;
                    break;
                case 'name':
                    setting = NameFieldSetting;
                    break;
                case 'phone':
                    setting = PhoneFieldSetting;
                    break;
                case 'select-multi':
                    setting = SelectMultiFieldSetting;
                    break;
                case 'radio':
                    break;
            }
            if (IsObject(setting, true)) {
                Object.keys(setting).map(function (settingName) {
                    var tmp = setting[settingName];
                    if (IsObject(tmp, ['type'])) {
                        if (tmp.type === 'trait') {
                            traits.push(tmp);
                        }
                    }
                });
            }
            return traits;
        };
        PopFieldEditorService.prototype.getSchemePrimary = function (scheme) {
            return StorageSetter(scheme, ['mapping', 'primary']);
        };
        PopFieldEditorService.prototype.getSchemeRequired = function (scheme) {
            return StorageSetter(scheme, ['mapping', 'required']);
        };
        PopFieldEditorService.prototype.getSchemeFieldMapping = function (scheme) {
            return StorageSetter(scheme, ['mapping', 'field']);
        };
        PopFieldEditorService.prototype.updateSchemeFieldMapping = function (scheme) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!IsObject(scheme, ['id'])) return [3 /*break*/, 2];
                            return [4 /*yield*/, this._updateSchemeFieldMapping(scheme, 'field')];
                        case 1:
                            res = _a.sent();
                            return [2 /*return*/, resolve(res)];
                        case 2: return [2 /*return*/];
                    }
                });
            }); });
        };
        PopFieldEditorService.prototype.updateSchemePrimaryMapping = function (scheme) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!IsObject(scheme, ['id'])) return [3 /*break*/, 2];
                            return [4 /*yield*/, this._updateSchemeFieldMapping(scheme, 'primary')];
                        case 1:
                            res = _a.sent();
                            return [2 /*return*/, resolve(res)];
                        case 2: return [2 /*return*/];
                    }
                });
            }); });
        };
        PopFieldEditorService.prototype.updateSchemeRequiredMapping = function (scheme) {
            if (IsObject(scheme, ['id'])) {
                this._updateSchemeFieldMapping(scheme, 'required');
            }
        };
        /**
         * When a entry is added , we need to set a default type
         */
        PopFieldEditorService.prototype.getDefaultLabelTypeOptions = function () {
            return JSON.parse(JSON.stringify(this.asset.labelTypes));
        };
        /**
         * Check what param options apply to a specific field
         * @param key
         */
        PopFieldEditorService.prototype.getViewParams = function (key) {
            if (key === void 0) { key = null; }
            if (key && key in this.asset.viewParams) {
                return JSON.parse(JSON.stringify(this.asset.viewParams[key]));
            }
            return JSON.parse(JSON.stringify(this.asset.viewParams));
        };
        /**
         * Check what param options apply to a specific field
         * @param key
         */
        PopFieldEditorService.prototype.getViewMultiple = function (key) {
            if (key === void 0) { key = null; }
            if (key) {
                if (key in this.asset.viewMultiple) {
                    return this.asset.viewMultiple[key];
                }
                else {
                    return null;
                }
            }
            return JSON.parse(JSON.stringify(this.asset.viewMultiple));
        };
        /**
         * Check what fields items are required under a fieldgroup type
         * @param fieldGroupName
         * @param fieldItemName
         */
        PopFieldEditorService.prototype.getViewRequired = function (fieldGroupName, fieldItemName) {
            return fieldGroupName in this.asset.viewRequired && fieldItemName in this.asset.viewRequired[fieldGroupName];
        };
        /**
         * Check what fields items are ingnored under a fieldgroup type
         * @param fieldGroupName
         * @param fieldItemName
         */
        PopFieldEditorService.prototype.getViewIgnored = function (fieldGroupName, fieldItemName, scheme) {
            if (fieldGroupName in this.asset.viewIgnored && fieldItemName in this.asset.viewIgnored[fieldGroupName]) {
                return true;
            }
            return false;
        };
        /**
         * Get a set of default options to for a specific view , ie.. a radio, select need options
         * @param key
         */
        PopFieldEditorService.prototype.getViewOptions = function (key) {
            if (key === void 0) { key = null; }
            if (key && key in this.asset.viewOptions) {
                return JSON.parse(JSON.stringify(this.asset.viewOptions[key]));
            }
            return JSON.parse(JSON.stringify(this.asset.viewOptions));
        };
        /**
         * Address Data Factory
         */
        PopFieldEditorService.prototype.getAddressValues = function () {
            var random = Math.floor(Math.random() * 50);
            return {
                // business: company.companyName(),
                line_1: this.asset.data[random].line_1,
                line_2: this.asset.data[random].line_2,
                line_3: 'Attn: ' + this.asset.data[random].line_3,
                city: this.asset.data[random].city,
                region_id: this.asset.data[random].region_id,
                county: 'Ohio',
                country_id: 1,
                zip: String(this.asset.data[random].zip).slice(0, 5),
                zip_4: '0000',
            };
        };
        /**
         * Name Data Factory
         */
        PopFieldEditorService.prototype.getNameValues = function () {
            var random = Math.floor(Math.random() * 50);
            return {
                prefix: this.asset.data[random].prefix,
                first: this.asset.data[random].first,
                middle: this.asset.data[random].middle,
                last: this.asset.data[random].last,
                suffix: this.asset.data[random].suffix,
            };
        };
        /**
         * Phone Data Factory
         */
        PopFieldEditorService.prototype.getPhoneValues = function () {
            var random = Math.floor(Math.random() * 50);
            return {
                title: undefined,
                country_id: 1,
                number: this.asset.data[random].number,
                extension: '123456',
                voice_button: null,
                sms_button: null,
                can_call: 1,
                can_text: 1,
            };
        };
        /**
         * This was built for rendering a dynamic list of custom settings, Probably not the right approach since settings so far have been sporadically placed so far
         * @param core
         * @param field
         * @param setting
         */
        PopFieldEditorService.prototype.getCustomSettingComponent = function (core, field, setting, scheme) {
            var _this = this;
            var component;
            var hasAccess = core.access.can_update && !core.entity.system ? true : false;
            switch (String(setting.type).toLowerCase()) {
                case 'boolean':
                    component = {
                        type: PopSwitchComponent,
                        inputs: {
                            core: core,
                            config: new SwitchConfig({
                                name: setting.name,
                                label: setting.label ? setting.label : TitleCase(SnakeToPascal(setting.name)),
                                helpText: setting.helpText ? setting.helpText : null,
                                value: typeof setting.value !== 'undefined' ? setting.value : setting.defaultValue,
                                facade: true,
                                disabled: !hasAccess,
                                metadata: {
                                    setting: setting
                                },
                                patch: {
                                    field: "",
                                    path: "",
                                    callback: function (ignore, event) {
                                        if (IsValidFieldPatchEvent(core, event)) {
                                            if (IsObject(scheme, true)) {
                                                var session = _this.getSchemeFieldSection(scheme, +field.id, 'setting');
                                                if (IsObject(session)) {
                                                    session[setting.name] = event.config.control.value;
                                                    _this._updateSchemeFieldMapping(scheme, 'field');
                                                }
                                            }
                                            else {
                                                _this.storeCustomSetting(core, event).then(function () {
                                                    exports.PopLog.event(_this.name, "Custom Setting Saved:", event);
                                                });
                                            }
                                        }
                                    }
                                }
                            }),
                            hidden: 0,
                            when: setting.when ? setting.when : null,
                        },
                        position: field.position,
                        ancillary: true,
                        sort: field.sort,
                    };
                    break;
                case 'transformation':
                    component = {
                        type: PopSelectComponent,
                        inputs: {
                            core: core,
                            config: new SelectConfig({
                                name: setting.name,
                                label: setting.label ? setting.label : TitleCase(SnakeToPascal(setting.name)),
                                helpText: setting.helpText ? setting.helpText : null,
                                value: setting.value ? setting.value : setting.defaultValue,
                                disabled: !hasAccess,
                                facade: true,
                                options: {
                                    values: ConvertArrayToOptionList(setting.options.values, {
                                        empty: setting.options.empty,
                                        sort: true,
                                    })
                                },
                                metadata: {
                                    setting: setting
                                },
                                patch: {
                                    duration: 500,
                                    field: "",
                                    path: "",
                                    callback: function (core2, event) {
                                        if (IsValidFieldPatchEvent(core, event)) {
                                            if (IsObject(scheme, true)) {
                                                var session = _this.getSchemeFieldSection(scheme, +field.id, 'setting');
                                                if (IsObject(session)) {
                                                    session[setting.name] = event.config.control.value;
                                                    _this._updateSchemeFieldMapping(scheme, 'field');
                                                }
                                            }
                                            else {
                                                _this.storeCustomSetting(core, event).then(function () {
                                                    exports.PopLog.event(_this.name, "Custom Setting Saved:", event);
                                                });
                                            }
                                        }
                                    }
                                }
                            }),
                            hidden: 0,
                            when: setting.when ? setting.when : null,
                        },
                        position: field.position,
                        ancillary: true,
                        sort: field.sort,
                    };
                    break;
                case 'trait':
                    break;
                case 'fixed':
                    break;
                default:
                    component = {
                        type: PopSwitchComponent,
                        inputs: {
                            core: core,
                            config: new SwitchConfig({
                                name: setting.name,
                                label: setting.label ? setting.label : TitleCase(SnakeToPascal(setting.name)),
                                helpText: setting.helpText ? setting.helpText : null,
                                value: typeof setting.value !== 'undefined' ? setting.value : setting.defaultValue,
                                facade: true,
                                metadata: {
                                    setting: setting
                                },
                            }),
                            hidden: 0,
                            when: setting.when ? setting.when : null,
                        },
                        position: field.position,
                        ancillary: true,
                        sort: field.sort,
                    };
            }
            return component;
        };
        /**
         * Store a custom setting
         * Determine whether the setting already exists in the database, post or patch accordingly
         * @param core
         * @param event
         */
        PopFieldEditorService.prototype.storeCustomSetting = function (core, event) {
            var _this = this;
            return new Promise(function (resolve) {
                // PopTemplate.buffer();
                exports.PopLog.event(_this.name, "storeCustomSetting", event);
                var setting = event.config.metadata.setting;
                var body = {
                    value: event.config.control.value
                };
                if (+setting.field_id)
                    body.field_id = +setting.field_id;
                if (+setting.field_item_id)
                    body.field_item_id = +setting.field_item_id;
                var fieldId = +setting.field_id ? +setting.field_id : core.entity.id;
                var request = undefined;
                if (setting.id) {
                    request = exports.PopRequest.doPatch("apps/fields/" + fieldId + "/configs/" + setting.id, body, 1, false);
                }
                else {
                    body.name = setting.name;
                    body.type = setting.type;
                    request = exports.PopRequest.doPost("apps/fields/" + fieldId + "/configs", body, 1, false);
                }
                request.subscribe(function (res) {
                    if (res.data)
                        res = res.data;
                    if (IsObject(res, ['id'])) {
                        event.config.metadata.setting = Object.assign(Object.assign({}, event.config.metadata.setting), CleanObject(res));
                        if (setting.item) {
                            // ToDo:: Store a seting on to a field item
                            // console.log('save on item', core.entity);
                            // console.log('setting', res);
                        }
                        else {
                            core.entity.custom_setting[setting.name].value = body.value;
                            core.entity.setting[setting.name] = body.value;
                            var nameLookup = ArrayMapSetter(core.entity.configs.field_configs, 'name');
                            if (setting.name in nameLookup) {
                                core.entity.configs.field_configs[nameLookup[setting.name]] = Object.assign({}, event.config.metadata.setting);
                            }
                            else {
                                core.entity.configs.field_configs.push(event.config.metadata.setting);
                            }
                        }
                        _this.triggerFieldPreviewUpdate();
                        return resolve(true);
                    }
                }, function (err) {
                    return resolve(GetHttpErrorMsg(err));
                });
                return resolve(true);
            });
        };
        /**
         * Store a custom setting
         * Determine whether the setting already exists in the database, post or patch accordingly
         * @param core
         * @param event
         */
        PopFieldEditorService.prototype.storeFieldItemRule = function (core, fieldItem, event) {
            var _this = this;
            return new Promise(function (resolve) {
                var request = undefined;
                var rule = event.config.metadata.rule;
                var fieldItemId = fieldItem.id;
                var value = event.config.control.value;
                var body = {
                    value: value,
                };
                if (IsObject(rule.validationMap, true)) {
                    rule.validation = rule.validationMap[String(value)];
                }
                if (rule.validation) {
                    body.field_validation_id = rule.validation.id;
                    if (rule.validation.fixed) {
                        rule.value = rule.validation.value;
                    }
                }
                else {
                    rule.value = value;
                    // pass
                }
                if (rule.field_id) { // patch
                    request = exports.PopRequest.doPatch("fields/" + fieldItemId + "/rules/" + rule.id, body, 1, false);
                }
                else {
                    body.field_item_id = null;
                    body.name = rule.name;
                    request = exports.PopRequest.doPost("fields/" + fieldItemId + "/rules", body, 1, false);
                }
                request.subscribe(function (res) {
                    res = GetHttpObjectResult(res);
                    if (IsObject(res, ['value'])) {
                        // event.config.metadata.rule = res;
                        fieldItem.rule[rule.name] = value;
                        _this.triggerFieldPreviewUpdate();
                        return resolve(true);
                    }
                    return resolve(true);
                }, function (err) {
                    return resolve(GetHttpErrorMsg(err));
                });
            });
        };
        /**
         * Trigger the field prview component to update
         */
        PopFieldEditorService.prototype.triggerFieldPreviewUpdate = function () {
            var _this = this;
            if (IsObject(this.asset.core, ['channel'])) {
                this.dom.setTimeout('trigger-preview', function () {
                    _this.asset.core.channel.next({
                        source: _this.name,
                        target: 'PopEntityFieldPreviewComponent',
                        type: 'component',
                        name: 'update'
                    });
                }, 0);
            }
        };
        /**
         * Cleanup timeouts, intervals, subscriptions, etc
         */
        PopFieldEditorService.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        // private _updateSchemeFieldMapping( scheme: EntitySchemeSectionInterface, key: string ){
        //   if( IsObject( scheme, [ 'id', 'mapping' ] ) && IsString( key, true ) && key in scheme.mapping ){
        //     this.dom.setTimeout( `update-scheme-field-${key}`, () => {
        //       const body = { mapping: {} };
        //       // body.mapping[ key ] = scheme.mapping[ key ];
        //       body.mapping = scheme.mapping;
        //       this.dom.setSubscriber( `update-scheme-field-${key}`, PopRequest.doPatch( `profile-schemes/${scheme.id}`, body, 1, false ).subscribe( ( res ) => {
        //         res = GetHttpResult( res );
        //         console.log( '_updateSchemeFieldMapping', res );
        //       }, ( err ) => {
        //         PopLog.error( this.name, `_setFieldEntryValues`, GetHttpErrorMsg( err ) );
        //       } ) );
        //     }, 0 );
        //   }
        // }
        PopFieldEditorService.prototype._updateSchemeFieldMapping = function (scheme, key) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (IsObject(scheme, ['id', 'mapping']) && IsString(key, true) && key in scheme.mapping) {
                        this.dom.setTimeout("update-scheme-field-" + key, function () {
                            var body = { mapping: {} };
                            // body.mapping[ key ] = scheme.mapping[ key ];
                            body.mapping = scheme.mapping;
                            _this.dom.setSubscriber("update-scheme-field-" + key, exports.PopRequest.doPatch("profile-schemes/" + scheme.id, body, 1, false).subscribe(function (res) {
                                res = GetHttpResult(res);
                                //             console.log( '_updateSchemeFieldMapping', res );
                                return resolve(true);
                            }, function (err) {
                                exports.PopLog.error(_this.name, "_setFieldEntryValues", GetHttpErrorMsg(err));
                                return resolve(false);
                            }));
                        }, 0);
                    }
                    else {
                        return [2 /*return*/, resolve(false)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Assign the custom setting values and config that exist for this field
         * @param field
         * @param stored
         */
        PopFieldEditorService.prototype._setFieldCustomSettings = function (field, scheme) {
            var _this = this;
            if (IsObject(field, ['fieldgroup', 'configs'])) {
                var stored_1 = field.configs;
                var fieldSettings = GetCustomFieldSettings(field);
                var customSettings_1 = JSON.parse(JSON.stringify(Object.assign(Object.assign({}, EntityFieldSetting), fieldSettings)));
                // console.log( 'customSettings', customSettings );
                // console.log('stored', stored);
                if (IsObject(customSettings_1, true)) {
                    var itemIdLookup_1 = ArrayMapSetter(field.items, 'id');
                    var itemNameLookup_1 = ArrayMapSetter(field.items, 'name');
                    // console.log('itemNameLookup', itemNameLookup);
                    Object.keys(customSettings_1).map(function (settingName) {
                        var setting = customSettings_1[settingName];
                        if (IsObject(setting, true)) {
                            if (setting.item) {
                                if (setting.item in itemNameLookup_1) {
                                    // console.log('setting', setting);
                                    var item = field.items[itemNameLookup_1[setting.item]];
                                    if (!item.custom_setting)
                                        item.custom_setting = {};
                                    if (!item.setting)
                                        item.setting = {};
                                    setting.field_item_id = item.field_item_id;
                                    setting.field_id = item.id;
                                    // console.log('item', item);
                                    var value = setting.value ? setting.value : setting.defaultValue;
                                    item.custom_setting[settingName] = setting;
                                    item.setting[settingName] = value;
                                }
                            }
                            else {
                                if (!field.custom_setting)
                                    field.custom_setting = {};
                                if (!field.setting)
                                    field.setting = {};
                                if (!field.trait)
                                    field.trait = {};
                                var value = void 0;
                                if (IsObject(scheme, true)) {
                                    var storage = _this.getSchemeFieldSection(scheme, +field.id, 'setting');
                                    if (IsObject(storage, true) && setting.name in storage) {
                                        value = storage[setting.name];
                                    }
                                    else {
                                        value = setting.value ? setting.value : setting.defaultValue;
                                    }
                                }
                                else {
                                    value = setting.value ? setting.value : setting.defaultValue;
                                }
                                if (setting.type === 'trait') {
                                    field.trait[settingName] = value;
                                }
                                else {
                                    field.custom_setting[settingName] = setting;
                                    field.setting[settingName] = value;
                                }
                            }
                        }
                    });
                    if (IsArray(stored_1.field_configs, true)) {
                        stored_1.field_configs.map(function (setting) {
                            if (!field.custom_setting[setting.name]) {
                                // ToDo:: Do We want to allow the database to pass in configs that are not local
                                // field.custom_setting[ setting.name ] = setting;
                            }
                            else {
                                field.custom_setting[setting.name].id = setting.id;
                                field.custom_setting[setting.name].value = setting.value;
                            }
                            field.setting[setting.name] = setting.value;
                        });
                    }
                    if (IsObject(stored_1.item_configs, true)) {
                        Object.keys(stored_1.item_configs).map(function (fieldItemId) {
                            var fieldItemConfigs = stored_1.item_configs[fieldItemId];
                            if (IsArray(fieldItemConfigs, true)) {
                                fieldItemConfigs.map(function (setting) {
                                    if (setting.field_id in itemIdLookup_1) {
                                        var item = field.items[itemIdLookup_1[setting.field_id]];
                                        if (!item.custom_setting)
                                            item.custom_setting = {};
                                        if (!item.custom_setting[setting.name]) {
                                            item.custom_setting[setting.name] = setting;
                                        }
                                        else {
                                            item.custom_setting[setting.name].id = setting.id;
                                            item.custom_setting[setting.name].value = setting.value;
                                        }
                                        if (!item.setting)
                                            item.setting = {};
                                        item.setting[setting.name] = setting.value;
                                    }
                                });
                            }
                        });
                    }
                }
                // console.log('stored custom setings', field, stored);
                // delete field.configs;
            }
        };
        /**
         * Ensure that at least 1 label exists
         * @param field
         */
        PopFieldEditorService.prototype._setFieldEntryValues = function (core, scheme) {
            var _this = this;
            return new Promise(function (resolve) {
                var field = core.entity;
                if (IsArray(field.entries, true)) {
                    field.entries.sort(DynamicSort('sort_order'));
                }
                if (!(IsArray(field.entries, true))) {
                    var entry = {
                        name: TitleCase("" + (field.name ? field.name : field.fieldgroup.name)),
                        type: 'provided',
                        sort_order: 0,
                    };
                    exports.PopRequest.doPost("fields/" + field.id + "/entries", entry, 1, false).subscribe(function (res) {
                        res = res.data ? res.data : res;
                        field.entries = [res];
                        return resolve(true);
                    }, function (err) {
                        exports.PopLog.error(_this.name, "_setFieldEntryValues", GetHttpErrorMsg(err));
                        return resolve(false);
                    });
                }
                else {
                    return resolve(true);
                }
            });
        };
        return PopFieldEditorService;
    }(PopExtendService));
    PopFieldEditorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopFieldEditorService_Factory() { return new PopFieldEditorService(); }, token: PopFieldEditorService, providedIn: "root" });
    PopFieldEditorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopFieldEditorService.ctorParameters = function () { return []; };

    var PopEntityUtilFieldService = /** @class */ (function () {
        function PopEntityUtilFieldService(field) {
            this.field = field;
            this.name = 'PopEntityUtilFieldService';
            this.cache = new PopCacheService();
        }
        /**
         * Build out the necessary configs for a custom field group and all of this field items involved
         * Fields may have multiple values , so a unique set of configs mut be created for each data entry
         * @param core
         * @param field
         */
        PopEntityUtilFieldService.prototype.buildCustomField = function (core, field) {
            var _this = this;
            var items;
            if (!field.metadata)
                field.metadata = {};
            if (!field.multiple_min)
                field.multiple_min = 1;
            if (!field.multiple_max || field.multiple_max > 10)
                field.multiple_max = 10;
            if (!field.multiple_max_limit)
                field.multiple_max_limit = 10;
            var scheme = StorageGetter(core, ['entity', 'scheme']);
            var useScheme = IsObject(scheme, ['id', 'mapping']) ? true : false;
            field.primary = useScheme ? this.field.isSchemePrimaryField(scheme, field) : false;
            var fieldCustomSettings = GetCustomFieldSettings(field);
            var itemCustomModels = {};
            if (IsObject(fieldCustomSettings, true)) {
                Object.keys(fieldCustomSettings).map(function (key) {
                    var setting = fieldCustomSettings[key];
                    if (IsObject(setting, ['item', 'model']) && setting.item && setting.type === 'model') {
                        if (!itemCustomModels[setting.item])
                            itemCustomModels[setting.item] = {};
                        itemCustomModels[setting.item][setting.model] = setting.value;
                    }
                });
            }
            // console.log( itemCustomModels, 'itemCustomModels' );
            field.children = {};
            // make a copy of the field items to use as a pattern
            var fieldItemSet = JsonCopy(field.items);
            fieldItemSet = fieldItemSet.filter(function (fieldItem) {
                return +fieldItem.active;
            }).filter(function (fieldItem) {
                return useScheme ? !(_this.field.isSchemeFieldItemDisabled(scheme, +field.id, +fieldItem.id)) : true;
            }).map(function (fieldItem) {
                var itemCustomModel = IsObject(itemCustomModels[fieldItem.name]) ? itemCustomModels[fieldItem.name] : {};
                fieldItem = JsonCopy(Object.assign(Object.assign({}, fieldItem), itemCustomModel));
                fieldItem = CleanObject(fieldItem, {
                    blacklist: ['children', 'entries', 'items', 'storage', 'webhook', 'object_name', 'depth_level']
                });
                // fieldItem.model.value = item.model.options.defaultValue || null;
                // ToDo:: Inject scheme rule values
                _this.setFieldItemRules(+field.id, fieldItem, scheme);
                // console.log('fieldItem', fieldItem);
                var model = FieldItemModel(core, fieldItem);
                if (IsArray(fieldItem.source, true) && !IsArray(model.options.values, true)) {
                    model.options.rawValues = fieldItem.source;
                    model.options.values = fieldItem.source;
                }
                // if (IsArray(fieldItem.source)) {
                //   console.log('fielditem source', fieldItem);
                //   console.log('options', model.options);
                // }
                var view = FieldItemView(fieldItem.view);
                var item = CleanObject({
                    id: fieldItem.id,
                    custom_setting: {},
                    model: model,
                    table: fieldItem.table ? fieldItem.table : { sort: 99, visible: false },
                    view: view,
                    component: view.name,
                    setting: _this._getFieldItemSetting(fieldItem),
                    rules: fieldItem.rules,
                    rule: fieldItem.rule,
                    source: IsArray(fieldItem.source, true) ? fieldItem.source : null,
                    sourceMap: IsArray(fieldItem.source, true) ? ArrayMapSetter(fieldItem.source, 'id') : null
                });
                field.children[fieldItem.name] = item;
                return item;
            });
            var dataSort = {};
            if (IsArray(field.entries, true)) {
                field.entries.sort(DynamicSort('sort_order'));
                field.entries.map(function (entry, index) {
                    dataSort[entry.id] = index;
                });
            }
            field.items = {};
            items = {};
            field.data = IsObject(field.data, true) ? field.data : {};
            if (useScheme) {
                Object.keys(field.data).map(function (dataKey) {
                    if (_this.field.isSchemeFieldEntryDisabled(scheme, +field.id, +dataKey)) {
                        delete field.data[dataKey];
                    }
                });
            }
            // get id of keys from field entries
            // console.log(field.entries);
            if (field.multiple) {
                var dataKeys = field.entries.map(function (i) { return i.id; });
                field.data_keys = dataKeys.sort(function (a, b) {
                    var varA = +dataSort[a];
                    var varB = +dataSort[b];
                    if (varA > varB) {
                        return 1;
                    }
                    else if (varA < varB) {
                        return -1;
                    }
                    return 0;
                });
            }
            else {
                field.data_keys = IsArray(field.entries, true) ? [field.entries[0].id] : [];
            }
            var entryLookup = ArrayMapSetter(field.entries, 'id');
            field.data_keys.map(function (dataKey, index) {
                items[dataKey] = {
                    entry: dataKey in entryLookup ? field.entries[entryLookup[dataKey]] : _this._getFieldItemEntry(field, dataKey, index),
                    config: {}
                };
                fieldItemSet.map(function (fieldItem) {
                    // ToDo:: Determine whether patch should always be created; A.C.
                    if (IsObject(fieldItem.model, ['name'])) {
                        fieldItem.model.value = _this._getModelValue(core, field, fieldItem.model, dataKey);
                        fieldItem.model.facade = 1;
                        var config = FieldItemModelConfig(core, fieldItem.model);
                        items[dataKey].config[fieldItem.model.name] = config;
                    }
                    else {
                        // console.log('fail', fieldItem);
                    }
                });
            });
            var coreField = {
                id: +field.id,
                ancillary: field.ancillary ? 1 : 0,
                canAdd: field.canAdd,
                canRemove: field.canRemove,
                configs: field.configs || {},
                custom_setting: field.custom_setting || {},
                metadata: field.metadata,
                multiple: !!field.multiple,
                multiple_min: field.multiple_min,
                multiple_max: field.multiple_max,
                multiple_max_limit: field.multiple_max_limit ? field.multiple_max_limit : 10,
                data: field.data,
                data_keys: field.data_keys,
                facade: !!field.facade,
                fieldgroup: field.fieldgroup,
                entries: IsArray(field.entries) ? field.entries : [],
                hidden: field.hidden ? true : false,
                internal_name: field.fieldgroup.name,
                name: String(SpaceToSnake(field.name)).toLowerCase(),
                label: field.label,
                position: field.position,
                setting: field.setting || {},
                show_name: !!field.show_name,
                sort: field.sort,
                state: field.state ? field.state : 'template_edit',
                when: field.when ? field.when : null,
                children: field.children,
                items: items,
            };
            var formName = field.fieldgroup.name === 'selection' ? field.children.value.view.name : field.fieldgroup.name ? field.fieldgroup.name : 'select';
            coreField.component = this._getEntityFieldComponent(formName);
            return new FieldConfig(coreField);
        };
        PopEntityUtilFieldService.prototype._setSchemeFieldSettings = function (scheme, field) {
            if (IsObject(scheme, ['id', 'mapping']) && IsObject(field, true)) {
                // console.log( '_setSchemeFieldSettings', scheme, field );
            }
            return field;
        };
        /**
         * Build out a config for a field item
         * @param core
         * @param model
         */
        PopEntityUtilFieldService.prototype.buildCoreFieldItem = function (core, model) {
            return {
                model: model,
                component: this._getFormComponent(model.form),
                config: FieldItemModelConfig(core, model)
            };
        };
        /**
         * Get the rules that should be applied on this field
         * @param fieldItem
         * @private
         */
        PopEntityUtilFieldService.prototype.setFieldItemRules = function (fieldId, fieldItem, scheme) {
            var RuleSet = {};
            fieldItem.rule = {};
            var itemRules = IsArray(fieldItem.itemrules, true) ? fieldItem.itemrules : []; // default rules inherited from the field_item_id
            // const mapping = this.field.getSchemeFieldItemMapping(scheme, fieldId, +fieldItem.id);
            // console.log('mapping', mapping);
            var fieldRules = IsArray(fieldItem.fieldrules, true) ? fieldItem.fieldrules : []; // rules specific to this field item
            var schemeRules = IsObject(scheme, ['id', 'mapping']) ? this.field.getSchemeFieldItemSection(scheme, fieldId, +fieldItem.id, 'rule') : {};
            // we want field rules to override items rules when there is overlap ie.. the item might come with a default rule but the items rules should override it
            itemRules.map(function (rule) {
                if (IsArray(rule.validations, true)) {
                    if (!(IsObject(rule.options)))
                        rule.options = {};
                    rule.options.values = ConvertArrayToOptionList(rule.validations, {
                        nameKey: 'label',
                    });
                    rule.validationMap = ArrayKeyBy(rule.validations, 'id');
                    rule.value = +rule.validation.id;
                }
                else {
                    rule.value = rule.raw_value;
                }
                if (!rule.value && rule.default_value)
                    rule.value = rule.default_value;
                RuleSet[rule.name] = rule;
            });
            fieldRules.map(function (rule) {
                if (IsObject(RuleSet[rule.name])) {
                    RuleSet[rule.name].id = rule.id;
                    RuleSet[rule.name].value = IsArray(RuleSet[rule.name].validations, true) ? rule.validation.id : rule.raw_value;
                    RuleSet[rule.name].field_id = rule.field_id;
                }
            });
            fieldItem.rules = Object.values(RuleSet);
            fieldItem.rules.map(function (rule) {
                if (!rule.validation.fixed) {
                    fieldItem.rule[rule.name] = ParseModelValue(rule.value);
                    if (IsObject(schemeRules, [rule.name])) {
                        fieldItem.rule[rule.name] = schemeRules[rule.name];
                    }
                }
            });
            // delete fieldItem.fieldrules;
            // delete fieldItem.itemrules;
        };
        /**
         * A method that builds entity fieldset from the server models
         * @param entityConfig
         * @param fieldPosition
         */
        PopEntityUtilFieldService.prototype.buildDomFields = function (core, dom) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var coreField, component, baseFields, baseList, customFields, customList, allFields;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            baseFields = core.repo.model.field;
                            baseList = Object.values(baseFields).sort(DynamicSort('sort'));
                            return [4 /*yield*/, this._getEntityCustomFields(core)];
                        case 1:
                            customFields = _a.sent();
                            exports.PopLog.info(this.name, "buildDomFields", {
                                base: baseFields,
                                custom: customFields
                            });
                            customList = Object.values(customFields).sort((function (a, b) {
                                if (a.fieldgroup.id === b.fieldgroup.id) {
                                    return b.label < a.label ? 1 : -1;
                                }
                                return a.fieldgroup.id > b.fieldgroup.id ? 1 : -1;
                            }));
                            allFields = __spreadArray(__spreadArray([], __read(baseList)), __read(customList)).map(function (field, index) {
                                field.sort = index;
                                // return JSON.parse( JSON.stringify( field ) );
                                return DeepCopy(field);
                            });
                            if (IsArray(allFields, true)) {
                                allFields.map(function (field) {
                                    var name = field.model ? field.model.name : field.name;
                                    // console.log(name, field.onLoad);
                                    if (+core.entity.scheme_id && !(IsObject(core.entity.scheme_assets)))
                                        core.entity.scheme_assets = {};
                                    var customFieldAssetLocation = +core.entity.scheme_id && IsObject(core.entity.scheme_assets, false) ? core.entity.scheme_assets : core.entity;
                                    if (IsObject(field, true) && name) {
                                        if (field.when) {
                                            if (IsString(field.when))
                                                field.when = [field.when];
                                            field.hidden = !EvaluateWhenConditions(core, field.when, core);
                                        }
                                        if (IsObject(field, ['fieldgroup']) && name in customFieldAssetLocation) {
                                            coreField = _this.buildCustomField(core, field);
                                            if (coreField) {
                                                component = {
                                                    type: PopEntityFieldComponent,
                                                    inputs: CleanObject({
                                                        core: core,
                                                        field: new FieldConfig(coreField),
                                                        hidden: field.hidden ? 1 : 0,
                                                        when: field.when,
                                                        onLoad: field.onLoad,
                                                        onEvent: field.onEvent,
                                                        onUnload: field.onUnload,
                                                    }),
                                                    custom: true,
                                                    position: field.position ? field.position : 1,
                                                    ancillary: field.ancillary,
                                                    sort: field.sort,
                                                };
                                                dom.ui.fields.set(+field.id, component);
                                            }
                                            // }else if( IsObject( field, [ 'model' ] ) && name in core.entity ){
                                        }
                                        else if (IsObject(field, ['model']) && ((name in core.entity) || field.preserve)) {
                                            field.model.view = { name: field.model.form };
                                            if (field.model.transformation)
                                                field.model.value = _this._getModelValue(core, field, field.model);
                                            var model = FieldItemModel(core, field.model);
                                            var coreItem = {
                                                model: model,
                                                table: IsObject(field.table, true) ? field.table : { sort: 99, visible: false },
                                                component: _this._getFormComponent(field.model.view.name),
                                                config: FieldItemModelConfig(core, model)
                                            };
                                            if (coreItem && coreItem.config) {
                                                if (typeof coreItem.config.setControl === 'function')
                                                    coreItem.config.setControl(); // build the control now so that the control can be the defacto session value
                                                component = {
                                                    type: coreItem.component,
                                                    inputs: CleanObject({
                                                        core: core,
                                                        config: coreItem.config,
                                                        hidden: field.hidden ? 1 : 0,
                                                        when: field.when,
                                                        onLoad: field.onLoad,
                                                        onEvent: field.onEvent,
                                                        onUnload: field.onUnload,
                                                    }),
                                                    custom: false,
                                                    position: field.position ? field.position : 1,
                                                    ancillary: field.ancillary ? true : false,
                                                    when: IsArray(field.when, true) ? field.when : null,
                                                    sort: field.sort ? field.sort : 99,
                                                };
                                                dom.ui.fields.set(coreItem.model.name, component);
                                            }
                                        }
                                    }
                                });
                            }
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * A method that builds entity fieldset from the server models
         * @param entityConfig
         * @param fieldPosition
         */
        PopEntityUtilFieldService.prototype.getDomFields = function (fieldPosition, dom) {
            if (fieldPosition === void 0) { fieldPosition = 1; }
            var componentList = [];
            dom.ui.fields.forEach(function (component, key) {
                if (!component.ancillary && component.position === fieldPosition) {
                    componentList.push(component);
                }
            });
            return componentList;
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Loop through the data for the entity and identify what refers to custom fields
         * Retrieve the field data for each of the custom fields that exist
         * @param core
         * @private
         */
        PopEntityUtilFieldService.prototype._getEntityCustomFields = function (core) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var tmp, customFields, requests_1, names_1, fieldId_1, fieldRepo_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tmp = {};
                            customFields = {};
                            if (!(core && core.params.can_extend)) return [3 /*break*/, 2];
                            if (IsObject(core.entity)) {
                                Object.keys(core.entity).map(function (key) {
                                    if (IsObject(core.entity[key], ['@metadata'])) {
                                        tmp[key] = core.entity[key];
                                    }
                                    else if (IsArray(core.entity[key], true) && IsObject(core.entity[key][0], ['@metadata'])) {
                                        tmp[key] = core.entity[key];
                                    }
                                });
                            }
                            if (+core.entity.scheme_id && IsObject(core.entity.scheme_assets, true)) {
                                Object.keys(core.entity.scheme_assets).map(function (key) {
                                    if (IsObject(core.entity.scheme_assets[key], ['@metadata'])) {
                                        tmp[key] = core.entity.scheme_assets[key];
                                    }
                                    else if (IsArray(core.entity.scheme_assets[key], true) && IsObject(core.entity.scheme_assets[key][0], ['@metadata'])) {
                                        tmp[key] = core.entity.scheme_assets[key];
                                    }
                                });
                            }
                            requests_1 = [];
                            names_1 = [];
                            return [4 /*yield*/, exports.PopEntity.getEntityRepo('field')];
                        case 1:
                            fieldRepo_1 = _a.sent();
                            Object.keys(tmp).map(function (name) {
                                if (IsObject(tmp[name])) { // field only has a single value
                                    if (IsObject(tmp[name]['@metadata'], ['@field_id'])) {
                                        var record = tmp[name];
                                        var metadata = record['@metadata'];
                                        // delete record[ '@metadata' ];
                                        fieldId_1 = metadata['@field_id'];
                                        tmp[name] = [record];
                                    }
                                }
                                else if (IsArray(tmp[name], true)) { // field has multiple values
                                    var data = [];
                                    var firstRecord = tmp[name][0];
                                    fieldId_1 = firstRecord['@metadata']['@field_id'];
                                    // tmp[ name ].map((record, index) => {
                                    //   // const dataKey = field_entry_id ? field_entry_id : ( metadata2[ '@record_id' ] ? +metadata2[ '@record_id' ] : index );
                                    //   delete record[ '@metadata' ];
                                    //   data.push(record);
                                    // });
                                    //
                                    // tmp[ name ] = data;
                                }
                                if (+fieldId_1) {
                                    names_1.push(name);
                                    requests_1.push(_this.cache.get('custom_field', String(fieldId_1), fieldRepo_1.getEntity(fieldId_1)));
                                }
                            });
                            if (requests_1.length) {
                                rxjs.forkJoin(requests_1).subscribe(function (results) {
                                    results.map(function (result, index) { return __awaiter(_this, void 0, void 0, function () {
                                        var fieldName, customField, field;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (!IsDefined(result, false)) return [3 /*break*/, 3];
                                                    result = GetHttpResult(result);
                                                    fieldName = names_1[index];
                                                    result.name = fieldName;
                                                    result.data = fieldName in tmp ? tmp[fieldName] : {};
                                                    return [4 /*yield*/, this._setFieldEntries(result)];
                                                case 1:
                                                    customField = _a.sent();
                                                    return [4 /*yield*/, this._setEntityCustomFieldDataStructure(customField)];
                                                case 2:
                                                    field = _a.sent();
                                                    customFields[fieldName] = field;
                                                    if (index === (results.length - 1)) {
                                                        return [2 /*return*/, resolve(customFields)];
                                                    }
                                                    return [3 /*break*/, 4];
                                                case 3:
                                                    if (index === (results.length - 1)) {
                                                        return [2 /*return*/, resolve(customFields)];
                                                    }
                                                    _a.label = 4;
                                                case 4: return [2 /*return*/];
                                            }
                                        });
                                    }); });
                                }, function (err) {
                                    return resolve(customFields);
                                });
                            }
                            else {
                                return [2 /*return*/, resolve(customFields)];
                            }
                            return [3 /*break*/, 3];
                        case 2: return [2 /*return*/, resolve(customFields)];
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        };
        PopEntityUtilFieldService.prototype.clearCustomFieldCache = function (fieldId) {
            this.cache.clear('custom_field', String(fieldId));
        };
        /**
         * Field Entries are a way to define the value structure of a field
         * By default a field will have a single value, but a field can be configured to have multiple values
         * Field entries provide a template of a specific amount of values a field should have
         * @param field
         * @private
         */
        PopEntityUtilFieldService.prototype._setFieldEntries = function (field) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    // if( IsObject( field, [ 'data' ] ) && IsArray( field.data ) ){
                    //   // console.log('field', field);
                    //   let values = field.data.length;
                    //   const entries = field.entries.filter( ( x ) => x.type !== 'custom' ).length;
                    //   let entriesNeeded = 0;
                    //   if( entries < values ){
                    //     entriesNeeded = +values - +entries;
                    //   }
                    //
                    //   const requests = [];
                    //   let limit = 100;
                    //   while( entriesNeeded > 0 && limit ){
                    //     limit--;
                    //     values++;
                    //     requests.push( PopRequest.doPost( `fields/${field.id}/entries`, {
                    //       name: TitleCase( `${field.fieldgroup.name} ${values}` ),
                    //       type: 'provided'
                    //     }, 1, false ) );
                    //     entriesNeeded--;
                    //   }
                    //   if( requests.length ){
                    //     forkJoin( requests ).subscribe( ( results ) => {
                    //       results.map( ( result: any, index: number ) => {
                    //         if( result.data ) result = result.data;
                    //         field.entries.push( result );
                    //       } );
                    //       return resolve( field );
                    //     }, () => {
                    //       return resolve( field );
                    //     } );
                    //
                    //   }else{
                    //     return resolve( field );
                    //   }
                    // }else{
                    //   return resolve( field );
                    // }
                    return [2 /*return*/, resolve(field)];
                });
            }); });
        };
        /**
         * Field data should come in as an array of records
         * Ensure that each each record has a unique entry id, and index data by field_entry_id;
         * @param customField
         */
        PopEntityUtilFieldService.prototype._setEntityCustomFieldDataStructure = function (customField) {
            return new Promise(function (resolve) {
                var data = {};
                // console.log('customField', customField);
                if (IsArray(customField.data, true)) {
                    if (IsArray(customField.entries, true)) {
                        customField.data.map(function (record, index) {
                            if (!record.field_entry_id)
                                record.field_entry_id = customField.entries[index].id;
                            // console.log("is diff ? ", record.field_entry_id , ' - ', customField.entries[index].id);
                            // delete record[ '@metadata' ];
                            data[record.field_entry_id] = record;
                        });
                    }
                }
                else {
                    if (IsArray(customField.entries)) {
                        customField.entries.map(function (entry) {
                            data[entry.id] = {};
                            var items = customField.items;
                            if (IsArray(customField.items, true)) {
                                items.map(function (item) {
                                    data[entry.id][item.name] = null;
                                });
                            }
                        });
                    }
                }
                customField.data = data;
                return resolve(customField);
            });
        };
        /**
         * Get the settings that should be applied on this field item
         * @param fieldItem
         * @private
         */
        PopEntityUtilFieldService.prototype._getFieldItemSetting = function (fieldItem) {
            return {};
        };
        /**
         * A field entry is used to identity a specific value in a set of multiple values
         * @param field
         * @param dataKey
         * @param index
         * @private
         */
        PopEntityUtilFieldService.prototype._getFieldItemEntry = function (field, dataKey, index) {
            var entry = {};
            var data = field.data[dataKey];
            if (IsArray(field.entries, true)) {
                var customEntries = field.entries.filter(function (item) {
                    return item.type !== 'custom';
                });
                var customIdLookup = ArrayMapSetter(customEntries, 'id');
                var providedEntries = field.entries.filter(function (item) {
                    return item.type !== 'custom';
                });
                var entryIndex = index % providedEntries.length;
                var providedIdLookup = ArrayMapSetter(providedEntries, 'id');
                if (data.field_entry_id && data.field_entry_id in providedIdLookup) {
                    entry = providedEntries[providedIdLookup[data.field_entry_id]];
                }
                else if (data.field_entry_id && data.field_entry_id in customIdLookup) {
                    entry = customEntries[customIdLookup[data.field_entry_id]];
                    // ToDo:: Find the cutstom label that should be inserted here
                }
                else if (entryIndex in field.entries) {
                    entry = providedEntries[entryIndex];
                }
                else {
                    entry = providedEntries[0];
                }
            }
            else {
                entry = null;
            }
            return entry;
        };
        /**
         * Map the form in a field model to the angular component that will be used to render the field
         * @param form
         * @private
         */
        PopEntityUtilFieldService.prototype._getFormComponent = function (form) {
            var component = null;
            if (IsString(form, true)) {
                switch (String(form).toLowerCase()) {
                    case 'sidebyside':
                        component = PopSideBySideComponent;
                        break;
                    case 'select':
                        component = PopSelectComponent;
                        break;
                    case 'select-filter':
                        component = PopSelectFilterComponent;
                        break;
                    case 'select-list':
                        component = PopSelectListComponent;
                        break;
                    case 'select-multi':
                    case 'select_multi':
                        component = PopSelectMultiComponent;
                        break;
                    case 'select-modal':
                        component = PopSelectModalComponent;
                        break;
                    case 'text':
                    case 'input':
                        component = PopInputComponent;
                        break;
                    case 'textstring':
                        component = PopTextComponent;
                        break;
                    case 'number':
                        component = PopNumberComponent;
                        break;
                    case 'date':
                        component = PopDateComponent;
                        break;
                    case 'datepicker':
                        component = PopDatePickerComponent;
                        break;
                    case 'time':
                        component = PopTimeComponent;
                        break;
                    case 'checkbox':
                        component = PopCheckboxComponent;
                        break;
                    case 'switch':
                        component = PopSwitchComponent;
                        break;
                    case 'minmax':
                        component = PopMinMaxComponent;
                        break;
                    case 'radio':
                        component = PopRadioComponent;
                        break;
                    case 'textarea':
                        component = PopTextareaComponent;
                        break;
                    case 'label':
                        component = PopLabelComponent;
                        break;
                    case 'button':
                        component = PopButtonComponent;
                        break;
                    default:
                        exports.PopLog.warn(this.name, "_getFormComponent: fail", form);
                        break;
                }
            }
            return component;
        };
        /**
         * Resolve the value that lines up with the column/name of the field item from the data set
         * The idea here is that a value may have already created for this field item and we need to make sure the field item initializes with the value
         * @param core
         * @param field
         * @param model
         * @param dataKey
         * @private
         */
        PopEntityUtilFieldService.prototype._getModelValue = function (core, field, model, dataKey) {
            var value = null;
            if (dataKey) {
                if (IsObject(field.data, true) && IsObject(model, true)) {
                    if (dataKey in field.data && model.name in field.data[dataKey]) {
                        value = field.data[dataKey][model.name];
                        if (model.transformation)
                            value = exports.PopPipe.transform(value, model.transformation, core);
                    }
                }
            }
            else if (model.name in core.entity) {
                value = core.entity[model.name];
                if (model.transformation)
                    value = exports.PopPipe.transform(value, model.transformation, core);
            }
            return value;
        };
        /**
         * Get the custom field template that is made for the field group
         * @param name
         * @private
         */
        PopEntityUtilFieldService.prototype._getEntityFieldComponent = function (name) {
            var component = null;
            switch (String(name).toLowerCase()) {
                case 'name':
                    component = PopEntityNameComponent;
                    break;
                case 'email':
                    component = PopEntityEmailComponent;
                    break;
                case 'phone':
                    component = PopEntityPhoneComponent;
                    break;
                case 'address':
                    component = PopEntityAddressComponent;
                    break;
                case 'date':
                case 'datetime':
                    component = PopEntityDatetimeComponent;
                    break;
                case 'textfield':
                case 'input':
                    component = PopEntityInputComponent;
                    break;
                case 'selection':
                case 'select':
                    component = PopEntitySelectComponent;
                    break;
                case 'select-multi':
                case 'select_multi':
                case 'multi_selection':
                    component = PopEntitySelectMultiComponent;
                    break;
                case 'radio':
                    component = PopEntityRadioComponent;
                    break;
                case 'checkbox':
                    component = PopEntityCheckboxComponent;
                    break;
                case 'toggle':
                case 'switch':
                    component = PopEntitySwitchComponent;
                    break;
                case 'texteditor':
                case 'textarea':
                    component = PopEntityTextareaComponent;
                    break;
                default: {
                    exports.PopLog.warn(this.name, "_getEntityFieldComponent: fail", name);
                    break;
                }
            }
            return component;
        };
        return PopEntityUtilFieldService;
    }());
    PopEntityUtilFieldService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntityUtilFieldService_Factory() { return new PopEntityUtilFieldService(i0__namespace.ɵɵinject(PopFieldEditorService)); }, token: PopEntityUtilFieldService, providedIn: "root" });
    PopEntityUtilFieldService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopEntityUtilFieldService.ctorParameters = function () { return [
        { type: PopFieldEditorService }
    ]; };

    var PopEntityRepoService = /** @class */ (function () {
        function PopEntityRepoService(env) {
            this.env = env;
            this.name = 'PopEntityRepoService';
            this.activated = false;
            this.apiVersion = 1;
            if (!this.env)
                this.env = environment;
            this.setServiceContainer();
        }
        PopEntityRepoService.prototype.setServiceContainer = function () {
            this.srv = {
                base: exports.ServiceInjector.get(PopBaseService),
                cache: new PopCacheService(),
                display: exports.ServiceInjector.get(PopDisplayService),
                field: exports.ServiceInjector.get(PopEntityUtilFieldService),
                log: exports.ServiceInjector.get(PopLogService),
                request: exports.ServiceInjector.get(PopRequestService),
                resource: exports.ServiceInjector.get(PopResourceService),
                router: exports.ServiceInjector.get(i1.Router),
            };
        };
        /**
         * Pass in in the EntityParams to tie this to a specific type of entity
         * (Moved out of constructor die to build issues)
         * @param entityParams
         */
        PopEntityRepoService.prototype.register = function (entityParams) {
            if (entityParams && entityParams.internal_name) {
                this.id = entityParams.internal_name;
                this.params = entityParams;
                this.activated = true;
                this.srv.log.init(this.name, "created:" + this.id);
            }
        };
        /**
         * Pass in a route config for this entity
         * @param routes
         */
        PopEntityRepoService.prototype.setRoutes = function (routes) {
            this.routes = routes;
        };
        /**
         * A http call to archive a single entity
         * @param id
         * @param archive
         */
        PopEntityRepoService.prototype.archiveEntity = function (id, archive) {
            this.srv.cache.clearAll();
            var path = InterpolateEntityRoute(this.routes.archive.entity.path, { id: id });
            var body = {};
            if (archive) {
                if (IsObject(this.routes.archive.entity.params, true))
                    body = DeepMerge(JsonCopy(body), this.routes.archive.entity.params);
                body = Object.assign(Object.assign({}, body), { business_id: exports.PopBusiness.id, archived: -1 });
                return this.srv.request.doDelete(path, body, this.apiVersion);
            }
            else {
                path = InterpolateEntityRoute(this.routes.restore.entity.path, { id: id });
                if (IsObject(this.routes.restore.entity.params, true))
                    body = DeepMerge(JsonCopy(body), this.routes.restore.entity.params);
                body = Object.assign(Object.assign({}, body), { business_id: exports.PopBusiness.id, archived: -1 });
                return this.srv.request.doPost(path, body, this.apiVersion);
            }
        };
        /**
         * A http call to archive  multiple entities that passes a  {xx: {archive: 1}, xx: {archive: 1}, } structure
         * @param ids Primary Keys of the entities .[ 1 or 1,2,3,4,5 ]
         * @param archive
         */
        PopEntityRepoService.prototype.archiveEntities = function (ids, archive) {
            var _this = this;
            this.srv.cache.clearAll();
            var requests = [];
            if (archive) {
                String(ids).split(',').map(function (id) {
                    var path = InterpolateEntityRoute(_this.routes.archive.entity.path, { id: id });
                    requests.push(_this.srv.request.doDelete(path, null, _this.apiVersion));
                });
            }
            else {
                String(ids).split(',').map(function (id) {
                    var path = InterpolateString(_this.routes.restore.entity.path, { id: id });
                    path = StringReplaceAll(path, '\\?', '');
                    path = StringReplaceAll(path, '\\/\\/', '\\/');
                    requests.push(_this.srv.request.doPost(path, { archived: -1 }, _this.apiVersion));
                });
            }
            return rxjs.forkJoin(requests);
        };
        /**
         *  A method that returns the configured app
         */
        PopEntityRepoService.prototype.getAppName = function () {
            return this.params.app;
        };
        /**
         * A Http call that gets the entity configs
         * @param id Primary Key of the entity
         */
        PopEntityRepoService.prototype.getConfig = function () {
            var path = this.routes.get.config.path + "?entity_id=" + this.params.id;
            if (this.params.id) {
                var body = IsObject(this.routes.get.config.params, true) ? this.routes.get.config.params : {};
                return this.srv.request.doGet(path, body, this.apiVersion).pipe(operators.map(function (res) {
                    res = res.data ? res.data : res;
                    res = ArrayGroupBy(res, 'type');
                    if (IsObject(res, true)) {
                        Object.keys(res).map(function (type) {
                            if (IsArray(res[type], true)) {
                                var tmp_1 = {};
                                res[type].map(function (setting) {
                                    tmp_1[setting.name] = setting.config;
                                });
                                res[type] = tmp_1;
                            }
                        });
                    }
                    else {
                        res = {};
                    }
                    return res;
                }));
            }
            else {
                return rxjs.of({});
            }
        };
        /**
         *  A http call that gets a list of entities
         * @param queryParams '?archived=1', '?archived=0'
         */
        PopEntityRepoService.prototype.getEntities = function (body, queryParams) {
            var _this = this;
            if (body === void 0) { body = {}; }
            return new Promise(function (resolve) {
                var data = [];
                if (!(IsObject(queryParams)))
                    queryParams = { archived: 0 };
                if (!(IsObject(body)))
                    body = { archived: IsDefined(queryParams.archived) ? queryParams.archived : 0 };
                if (_this.model.table.filter && _this.model.table.filter.active && IsObject(_this.model.table.filter.query, true)) {
                    if (!queryParams.bypassFilters) {
                        Object.keys(_this.model.table.filter.query).map(function (filterName) {
                            if (filterName in exports.PopFilter && IsArray(exports.PopFilter[filterName], true))
                                body[_this.model.table.filter.query[filterName]] = exports.PopFilter[filterName];
                        });
                        // queryParams.limit = 100;
                    }
                }
                var path = "" + _this.routes.get.entities.path;
                if (IsObject(_this.routes.get.entities.params, true) && !queryParams.bypassParams) {
                    body = DeepMerge(JsonCopy(body), _this.routes.get.entities.params);
                }
                var page = 1;
                _this.srv.request.doGet("" + path, body, _this.apiVersion).subscribe(function (res) {
                    data = res.data;
                    if (IsObject(res.meta, true)) {
                        var requests = [];
                        var lastPage = res.meta.last_page;
                        while (page < lastPage) {
                            page++;
                            requests.push(_this.srv.request.doGet(path + "?page=" + page, body, _this.apiVersion));
                        }
                        if (requests.length) {
                            rxjs.forkJoin(requests).subscribe(function (pages) {
                                pages.map(function (nextPage) {
                                    data.push.apply(data, __spreadArray([], __read(nextPage.data)));
                                });
                                return resolve(data);
                            });
                        }
                        else {
                            return resolve(data);
                        }
                    }
                    else {
                        return resolve(data);
                    }
                });
            });
        };
        /**
         * A method that clears any cache for this entity type
         */
        PopEntityRepoService.prototype.clearAllCache = function (caller) {
            if (caller === void 0) { caller = ''; }
            this.srv.cache.clearAll();
        };
        /**
         * A method that clears any cache for this entity type
         */
        PopEntityRepoService.prototype.clearCache = function (cacheType, cacheKey, caller) {
            if (caller === void 0) { caller = ''; }
            this.srv.cache.clear(cacheType, cacheKey);
        };
        PopEntityRepoService.prototype.setCache = function (cacheType, cacheKey, data, minutes) {
            if (minutes === void 0) { minutes = 1; }
            if (IsString(cacheType, true) && IsString(cacheKey) && IsDefined(data)) {
                if (minutes > 60)
                    minutes = 60;
                this.srv.cache.set(cacheType, cacheKey, data, (minutes * 60 * 1000));
            }
        };
        PopEntityRepoService.prototype.getCache = function (cacheType, cacheKey) {
            var _this = this;
            return new Promise(function (resolve) {
                if (IsString(cacheType, true) && IsString(cacheKey)) {
                    _this.srv.cache.get(cacheType, cacheKey).subscribe(function (cacheData) {
                        if (IsDefined(cacheData)) {
                            return resolve(cacheData);
                        }
                        else {
                            resolve(null);
                        }
                    });
                }
                else {
                    resolve(null);
                }
            });
        };
        /**
         *
         * @param id Primary Key of the entity
         * @param params '?metadata=1', '?metadata=0', '?metadata=1&filter=id,name'
         * @return Observable
         */
        PopEntityRepoService.prototype.getEntity = function (id, queryParams) {
            if (!queryParams || typeof (queryParams) !== 'object')
                queryParams = {};
            var body = { archived: IsDefined(queryParams.archived) ? queryParams.archived : -1 };
            if (+id) {
                var path = "" + InterpolateString(this.routes.get.entity.path, { id: id });
                if (IsObject(this.routes.get.entity.params, true) && !queryParams.bypassParams)
                    body = DeepMerge(JsonCopy(body), this.routes.get.entity.params);
                this.srv.log.info(this.name, path, body);
                var request = this.srv.request.doGet(path, body, this.apiVersion);
                return queryParams.bypassCache ? request : this.srv.cache.get('entity', String(id), request);
            }
            return rxjs.of(undefined);
        };
        /**
         * A Http call that gets the entity history
         * @param id Primary Key of the entity
         */
        PopEntityRepoService.prototype.getHistory = function (id) {
            return rxjs.of([]);
            // const path = InterpolateString(this.routes.get.history, { id: id });
            // return this.srv.request.doGet(path, {}, this.apiVersion);
        };
        /**
         * A Http call that gets the entity metadata
         * @param id Primary Key of the entity
         */
        PopEntityRepoService.prototype.getUiResource = function (core) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var ui, success;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ui = {};
                            if (!IsObject(this.model.resource, true)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.srv.resource.setCollection(this.model.resource, core)];
                        case 1:
                            success = _a.sent();
                            if (success) {
                                ui = this.srv.resource.getCollection(this.model.resource);
                                return [2 /*return*/, resolve(ui)];
                            }
                            else {
                                resolve(false);
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            resolve(ui);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * A Http call that gets the entity metadata
         * @param id Primary Key of the entity
         */
        PopEntityRepoService.prototype.reloadResource = function (core, resourceName) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!(resourceName && IsObject(this.model.resource, [resourceName]))) return [3 /*break*/, 2];
                            if (!IsObject(core.resource))
                                core.resource = {};
                            _a = core.resource;
                            _b = resourceName;
                            return [4 /*yield*/, this.srv.resource.reloadResource(core, this.model.resource[resourceName])];
                        case 1:
                            _a[_b] = _c.sent();
                            return [2 /*return*/, resolve(true)];
                        case 2: return [2 /*return*/, resolve(false)];
                    }
                });
            }); });
        };
        /**
         * A Http call that gets the entity metadata
         * @param id Primary Key of the entity
         */
        PopEntityRepoService.prototype.injectResource = function (core, resource, reload) {
            var _this = this;
            if (reload === void 0) { reload = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!IsObject(resource, ['name'])) return [3 /*break*/, 8];
                            if (!!(IsObject(this.model.resource[resource.name]))) return [3 /*break*/, 4];
                            if (!IsObject(this.model.resource))
                                this.model.resource = {};
                            if (!IsObject(core.resource))
                                core.resource = {};
                            this.model.resource[resource.name] = Object.assign({}, DeepCopy(resource));
                            if (!(resource.api_path && IsString(resource.api_path, true))) return [3 /*break*/, 2];
                            _a = core.resource;
                            _b = resource.name;
                            return [4 /*yield*/, this.srv.resource.reloadResource(core, resource)];
                        case 1:
                            _a[_b] = _c.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            core.resource[resource.name] = resource;
                            _c.label = 3;
                        case 3: return [2 /*return*/, resolve(true)];
                        case 4:
                            if (!(IsObject(this.model.resource[resource.name], true) && resource.api_path && reload)) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.reloadResource(core, resource.name)];
                        case 5:
                            _c.sent();
                            return [2 /*return*/, resolve(true)];
                        case 6: return [2 /*return*/, resolve(true)];
                        case 7: return [3 /*break*/, 9];
                        case 8: return [2 /*return*/, resolve(false)];
                        case 9: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * A method that gets the entity singular name for entity
         * @param field
         */
        PopEntityRepoService.prototype.getInternalName = function () {
            return this.params.internal_name;
        };
        /**
         * Get the alias display for this entity;
         * @param alias 'singular | 'plural';
         */
        PopEntityRepoService.prototype.getDisplayName = function (alias) {
            if (alias === void 0) { alias = 'singular'; }
            return exports.PopPipe.transform(this.params.internal_name, { type: 'entity', arg1: 'alias', arg2: alias });
        };
        /**
         * A method that gets the base api path for the entity
         * @param field
         */
        PopEntityRepoService.prototype.getApiPath = function () {
            return this.params.path;
        };
        /**
         * A http call that gets the preferences of a user
         */
        PopEntityRepoService.prototype.getPreferences = function (core, cache) {
            var _this = this;
            if (cache === void 0) { cache = false; }
            return new Promise(function (resolve) {
                var buUserId = _this.srv.base.getCurrentBusinessUserId();
                if (buUserId) {
                    var path = "" + _this.routes.get.preference.path;
                    var body = { path: _this.params.internal_name, bu_user_id: buUserId };
                    if (IsObject(_this.routes.get.preference.params, true))
                        body = DeepMerge(JsonCopy(body), _this.routes.get.preference.params);
                    var request = _this.srv.request.doGet(path, body, _this.apiVersion, true).pipe(operators.map(function (res) {
                        var preferences = {};
                        var tmp = res.data ? res.data : res;
                        if (IsArray(tmp, true)) {
                            tmp.map(function (preference) {
                                preferences[preference.type] = Object.assign(Object.assign({}, preference.settings), { id: preference.id });
                            });
                        }
                        return preferences;
                    }));
                    if (cache) {
                        _this.srv.cache.get(_this.params.internal_name, 'preference', request, 600000).subscribe(function (res) {
                            if (!IsObject(core.preference))
                                core.preference = {};
                            core.preference = Object.assign(Object.assign({}, core.preference), res);
                            return resolve(true);
                        }, function (err) {
                            return resolve(false);
                        });
                    }
                    else {
                        request.subscribe(function (res) {
                            if (!IsObject(core.preference))
                                core.preference = {};
                            core.preference = Object.assign(Object.assign({}, core.preference), res);
                            return resolve(true);
                        }, function () {
                            return resolve(false);
                        });
                    }
                }
                else {
                    return resolve(false);
                }
            });
        };
        /**
         * A http call that gets the preferences of a user
         */
        PopEntityRepoService.prototype.deletePreference = function (id, type) {
            var _this = this;
            return new Promise(function (resolve) {
                var path = _this.routes.get.preference.path + "/" + id;
                _this.srv.request.doDelete(path, null, _this.apiVersion, true).pipe().subscribe(function () {
                    var defaultPreference = null;
                    return resolve(defaultPreference);
                    // this.srv.cache.clear([ `${this.params.internal_name}:preference` ]);
                    // this.getPreferences(true).subscribe(() => {
                    //   // ToDo:: Check inside entity models to see if a default table settings exist
                    //   const defaultPreference = null;
                    //   return resolve(defaultPreference);
                    // });
                }, function () {
                    return resolve(false);
                });
            });
        };
        /**
         * An Http call to save a preference
         * @param id
         * @param type
         * @param body
         */
        PopEntityRepoService.prototype.savePreference = function (id, type, body) {
            if (id === void 0) { id = null; }
            var request;
            if (+id) {
                var path = this.routes.get.preference.path + "/" + id;
                if (IsObject(this.routes.get.preference.params, true))
                    body = DeepMerge(JsonCopy(body), this.routes.get.preference.params);
                request = this.srv.request.doPatch(path, body, this.apiVersion, true).pipe(operators.map(function (res) {
                    var preference = {};
                    var tmp = res.data ? res.data : res;
                    if (IsObject(tmp, true)) {
                        preference = Object.assign(Object.assign({}, tmp.settings), { id: tmp.id });
                    }
                    return preference;
                }));
            }
            else {
                var buUserId = this.srv.base.getCurrentBusinessUserId();
                var path = "" + this.routes.get.preference.path;
                if (IsObject(this.routes.get.preference.params, true))
                    body = DeepMerge(JsonCopy(body), this.routes.get.preference.params);
                body = Object.assign(Object.assign({}, body), {
                    path: this.params.internal_name,
                    type: type,
                    bu_user_id: buUserId,
                    name: TitleCase(this.params.name) + " " + TitleCase(type) + " Setting"
                });
                request = this.srv.request.doPost(path, body, this.apiVersion, true).pipe(operators.map(function (res) {
                    var preference = {};
                    var tmp = res.data ? res.data : res;
                    if (IsObject(tmp, true)) {
                        preference = Object.assign(Object.assign({}, tmp.settings), { id: tmp.id });
                    }
                    return preference;
                }));
            }
            return request;
        };
        /**
         * A method that will navigate the user to the Tab View of an entity
         * Method should take into consideration the aliases that the entity might have
         * @param id Primary Key of the entity
         * @param tab
         */
        PopEntityRepoService.prototype.navigateToEntity = function (id, tab) {
            return this.srv.router.navigateByUrl(this.srv.display.alias(SpaceToHyphenLower(this.params.name)) + "/" + id + "/" + tab);
        };
        /**
         * A method that will navigate the user to the List View of an entity
         * Method should take into consideration the aliases that the entity might have
         * @param id Primary Key of the entity
         * @param tab
         */
        PopEntityRepoService.prototype.navigateToEntities = function () {
            return this.srv.router.navigateByUrl(this.srv.display.alias(SpaceToHyphenLower(this.params.name)));
        };
        /**
         * A method that update an entity relation
         * Method should take into consideration the aliases that the entity might have
         * @param id Primary Key of the entity
         * @param tab
         */
        PopEntityRepoService.prototype.updateEntity = function (id, entity, queryParams) {
            var path = InterpolateString(this.routes.patch.entity.path, { id: id });
            return this.srv.request.doPatch(path, entity, this.apiVersion);
        };
        return PopEntityRepoService;
    }());
    PopEntityRepoService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: ['env',] }] }
    ]; };

    var DefaultEntityAction = {
        new: {
            description: 'Add A New Record To #name',
            config: {
                fields: {
                    name: {
                        required: true,
                        pattern: 'Alpha'
                    },
                },
                http: 'POST',
                label: 'New #internal_name',
                postUrl: '#path',
                goToUrl: '#path/:id/general',
                submit: 'New',
            },
            active: 1
        },
        advanced_search: {
            description: 'Advanced Search For #internal_name',
            config: {
                fields: {
                    name: {
                        required: true,
                        pattern: 'AlphaNumeric'
                    },
                },
                http: 'GET',
                label: 'Advanced Search',
                get_url: '#path',
                goToUrl: null,
                submit: 'Search',
            },
            active: 1
        }
    };

    var DefaultEntityTable = {
        setting: {
            columns: {
                id: {
                    checkbox: { sort_let: 0, visible: true },
                    display: 'ID',
                    sort: 4,
                    visible: true
                },
                name: {
                    display: 'Name',
                    sort: 1,
                    visible: true
                },
            },
            options: {
                display_header: true,
                column_search: false,
                column_sort: false,
                sticky_header: true,
            }
        },
        permission: {
            allowColumnDisplayToggle: true,
            allowColumnStickyToggle: true,
            allowColumnSearchToggle: true,
            allowColumnSortToggle: true,
            allowHeaderStickyToggle: true,
            allowHeaderDisplayToggle: true,
            allowPaginatorToggle: true,
        },
        button: {
            archived: true,
            clone: true,
            new: true,
            advanced_search: false,
            custom: []
        },
        filter: {
            active: false,
            display: 'default'
        },
    };

    var ɵ0 = {
        ancillary: 1,
        position: 1,
        table: {
            checkbox: {
                visible: true,
                sort: 0
            },
            visible: true,
            sort: 999
        },
        model: {
            form: 'label',
            name: 'id',
            label: 'ID',
            visible: true,
            maxlength: 32,
            copyLabel: true,
            labelButton: true,
            valueButton: true,
            copyLabelBody: '#id',
            copyLabelDisplay: 'ID #id',
            valueButtonDisplay: ':archived',
            valueButtonDisabled: true,
            valueButtonDisplayTransformation: 'toActiveOrArchived',
            subLabel: 'Created',
            subValue: 'created_at'
        },
        sort: 0
    };
    var DefaultEntityField = {
        id: ɵ0,
        name: {
            ancillary: 0,
            position: 1,
            table: {
                visible: true,
                sort: 2
            },
            model: {
                form: 'input',
                name: 'name',
                label: 'Name',
                bubble: true,
                pattern: 'Default',
                visible: true,
                required: 1,
                maxlength: 64,
                patch: {
                    field: 'name',
                    path: '#path/#entityId'
                }
            },
            sort: 2
        },
        description: {
            ancillary: 0,
            position: 1,
            table: {
                visible: true,
                sort: 3
            },
            model: {
                form: 'textarea',
                name: 'description',
                label: 'Description',
                autoSize: false,
                height: 70,
                maxHeight: 150,
                maxlength: 255,
                sort: 3,
                patch: {
                    field: 'description',
                    path: '#path/#entityId'
                }
            },
            sort: 3
        },
        added_by_user: {
            ancillary: 1,
            position: 1,
            table: {
                visible: false,
                sort: 99
            },
            model: {
                form: 'label',
                name: 'added_by_user',
                label: 'Added By',
                truncate: 64,
            },
            sort: 99,
        },
        archived_by_user: {
            ancillary: 1,
            position: 1,
            table: {
                visible: false,
                sort: 99
            },
            model: {
                form: 'label',
                name: 'archived_by_user',
                label: 'Archived By',
                truncate: 64,
            },
            sort: 99
        },
        created_at: {
            ancillary: 1,
            position: 1,
            table: {
                visible: false,
                sort: 99,
                transformation: {
                    arg1: 'date',
                    type: 'date'
                },
            },
            model: {
                form: 'label',
                name: 'created_at',
                label: 'Added Date',
                truncate: 64,
                transformation: {
                    arg1: 'date',
                    type: 'date'
                },
            },
            sort: 99
        },
        created_by_user_id: {
            ancillary: 1,
            position: 1,
            table: {
                visible: false,
                sort: 99
            },
            model: {
                form: 'label',
                name: 'created_by_user_id',
                label: 'Added By ID',
                truncate: 64,
            },
            sort: 99
        },
        deleted_at: {
            ancillary: 1,
            position: 1,
            table: {
                visible: false,
                sort: 99,
                transformation: {
                    arg1: 'date',
                    type: 'date'
                },
            },
            model: {
                form: 'label',
                name: 'deleted_at',
                label: 'Deleted At',
                transformation: {
                    arg1: 'date',
                    type: 'date'
                },
                type: 'label',
                action: 'general'
            },
            when: [
                [
                    [
                        'entity.deleted_at'
                    ]
                ]
            ],
            sort: 99
        },
        deleted_by_user_id: {
            ancillary: 1,
            position: 1,
            table: {
                visible: false,
                sort: 99,
            },
            model: {
                form: 'label',
                name: 'deleted_by_user_id',
                label: 'Archived',
                visible: true,
                maxlength: 32,
                transformation: {
                    type: 'toYesNoPipe'
                }
            },
            sort: 99
        },
        updated_at: {
            ancillary: 1,
            position: 1,
            table: {
                visible: false,
                sort: 99,
                transformation: {
                    arg1: 'date',
                    type: 'date'
                },
            },
            model: {
                form: 'label',
                name: 'updated_at',
                label: 'Last Update',
                transformation: {
                    arg1: 'date',
                    type: 'date'
                },
                type: 'label',
                action: 'general'
            },
            when: [
                [
                    [
                        'entity.updated_at'
                    ]
                ]
            ],
            sort: 99
        },
        archived: {
            ancillary: 1,
            position: 1,
            table: {
                visible: true,
                sort: 99,
                transformation: {
                    type: 'toYesNoPipe'
                },
            },
            model: {
                form: 'label',
                name: 'archived',
                label: 'Archived',
                transformation: {
                    type: 'toYesNoPipe'
                },
                type: 'label',
            },
            when: [
                [
                    [
                        'entity.archived'
                    ]
                ]
            ],
            sort: 99
        }
    };

    var DefaultEntityResource = {
    // entities: {
    //   name: 'entities',
    //   defaultValue: null,
    //   data_type: 'api_records',
    //   api_path: 'entities?select=id,name,internal_name&archived=-1',
    //   api_cache: 1,
    //   data_filter: {},
    // },
    };

    var DefaultEntityMenu = {
        button: {
            archive: true,
            clone: false,
            custom: [],
            delete: false,
            goBack: true
        },
        archiveKey: 'archived'
    };

    var DefaultEntityRoute = {
        get: {
            entity: {
                path: "#path/{id}",
                params: {},
            },
            entities: {
                path: "#path",
                params: {},
            },
            config: {
                path: "apps/configs",
                params: {},
            },
            history: {
                path: "#path/{id}/history",
                params: {},
            },
            preference: {
                path: "apps/preferences",
                params: {},
            },
        },
        patch: {
            entity: {
                path: "#path/{id}",
                params: {},
            },
        },
        archive: {
            entity: {
                path: "#path/{id}",
                params: {},
            },
        },
        restore: {
            entity: {
                path: "#path/{id}",
                params: {},
            },
        }
    };

    var PopEntityService = /** @class */ (function () {
        /**
         * This srv is used in the
         * @param env
         */
        function PopEntityService(fieldUtil, paramUtil) {
            this.fieldUtil = fieldUtil;
            this.paramUtil = paramUtil;
            this.name = 'PopEntityService';
            this.asset = {
                access: new Map(),
                base: new Map(),
                dataSetter: new Map(),
                entryAccess: new Map(),
                lastDataSetter: new Map(),
                decorator: new Map(),
                filter: new Map(),
                params: new Map(),
                repo: new Map(),
                tabs: new Map(),
                resources: new Map(),
                actions: new Map(),
                fields: new Map(),
                tables: new Map(),
                menus: new Map(),
                routes: new Map(),
            };
            this.asset.tabs.set('default', []);
        }
        /**
         * Check a specific crud access against an entity
         * @param internal_name
         * @param accessType
         */
        PopEntityService.prototype.checkAccess = function (internal_name, accessType) {
            return this.paramUtil.checkAccess(internal_name, accessType);
        };
        /**
         * Configure/Extend the default behavior of an entity
         * @param internal_name
         * @param extend
         */
        PopEntityService.prototype.configure = function (internal_name, extend) {
            if (IsArray(extend.tab, true))
                this.setEntityTabs(internal_name, extend.tab);
            if (IsObject(extend.action, true))
                this.setEntityAction(internal_name, extend.action);
            if (IsArray(extend.entryAccess, true))
                this.setEntityEntryAccess(internal_name, extend.entryAccess);
            if (IsObject(extend.resource, true))
                this.setEntityResource(internal_name, extend.resource);
            if (IsCallableFunction(extend.dataSetter))
                this.setEntityDataSetter(internal_name, extend.dataSetter);
            if (IsCallableFunction(extend.lastDataSetter))
                this.setLastEntityDataSetter(internal_name, extend.lastDataSetter);
            if (IsCallableFunction(extend.decorator))
                this.setEntityDecorator(internal_name, extend.decorator);
            if (IsCallableFunction(extend.filter))
                this.setEntityFilter(internal_name, extend.filter);
            if (IsObject(extend.table, true))
                this.setEntityTable(internal_name, extend.table);
            if (IsObject(extend.route, true))
                this.setEntityRoute(internal_name, extend.route);
            if (IsObject(extend.field, true))
                this.setEntityField(internal_name, extend.field);
            if (IsObject(extend.menu, true))
                this.setEntityMenu(internal_name, extend.menu);
        };
        /**
         * A method to get a Core Config for an entity
         * Uses cache service to improve performance
         * ALL ENTITY RELATED COMPONENTS RELY ON THIS !!!!
         * @param entityParams
         * @param metadata
         */
        PopEntityService.prototype.getCoreConfig = function (internal_name, entityId, dom) {
            var _this = this;
            if (entityId === void 0) { entityId = 0; }
            return new Promise(function (resolve) {
                //       console.log('internal_name', entityId);
                _this._getBaseCoreConfig(internal_name).then(function (baseConfig) {
                    if (+entityId > 0) {
                        baseConfig.params.entityId = +entityId;
                        baseConfig.repo.getEntity(baseConfig.params.entityId, {}).subscribe(function (res) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        baseConfig.entity = res.data ? res.data : res;
                                        return [4 /*yield*/, this.setCoreDomAssets(baseConfig, dom)];
                                    case 1:
                                        _a.sent();
                                        // await this.setCoreDomAssets(baseConfig, dom);
                                        return [2 /*return*/, resolve(baseConfig)];
                                }
                            });
                        }); }, function () {
                            if (exports.PopHistory.isPreviousHistory())
                                exports.PopHistory.goBack();
                            return resolve(null);
                        });
                    }
                    else {
                        return resolve(baseConfig);
                    }
                });
            });
        };
        /**
         * Preferences are something that might change in the base configs, keep them there for now since they will not change often
         * Note: Moved preferences to base configs since they are not playing nice with cache and I want to update them directly
         * @param internal_name
         * @param key
         * @param value
         */
        PopEntityService.prototype.updateBaseCoreConfig = function (internal_name, key, value) {
            var base = this.asset.base.get(internal_name);
            var subKey;
            if (base) {
                if (key.includes(':')) {
                    var keys = key.split(':');
                    key = String(keys[0]).trim();
                    subKey = String(keys[1]).trim();
                }
                if (key in base) {
                    if (subKey) {
                        if (subKey in base[key]) {
                            base[key][subKey] = value;
                        }
                    }
                    else {
                        base[key] = value;
                    }
                }
                this.asset.base.set(internal_name, base);
            }
            return true;
        };
        /**
         * Get the base set of the entity definitions
         * These is the starting point when it comes to entities
         * @param internal_name
         * @param entityId
         */
        PopEntityService.prototype.getEntityParams = function (internal_name, entityId) {
            if (entityId === void 0) { entityId = null; }
            var entityParams;
            if (this.asset.params.has(internal_name)) {
                entityParams = Object.assign({}, this.asset.params.get(internal_name));
                entityParams.entity = entityId;
            }
            else {
                entityParams = this.paramUtil.getEntityParams(internal_name);
                if (entityParams) {
                    this.asset.params.set(internal_name, Object.assign({}, entityParams));
                }
            }
            return entityParams;
        };
        /**
         * Get the entity repo
         * These is the starting point when it comes to entities
         * @param internal_name
         * @param entityId
         */
        PopEntityService.prototype.getEntityRepo = function (internal_name) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var baseConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._getBaseCoreConfig(internal_name)];
                        case 1:
                            baseConfig = _a.sent();
                            if (IsObject(baseConfig), ['repo']) {
                                return [2 /*return*/, resolve(baseConfig.repo)];
                            }
                            else {
                                return [2 /*return*/, resolve(null)];
                            }
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Get the entity params that are associated with a angular route ie.. /admin/accounts should resolve to the account params
         * @param api_path
         * @param id
         */
        PopEntityService.prototype.getEntityParamsWithPath = function (api_path, id) {
            if (id === void 0) { id = null; }
            return this.paramUtil.getEntityParamsWithPath(api_path, id);
        };
        /**
         * A helper function that fetches an entity internal name from an Active Route
         * This is a way to ask based of the current route what entity am I dealing with
         * @param route
         * @param extension
         */
        PopEntityService.prototype.getRouteInternalName = function (route, extension) {
            var internal_name = 'user';
            if (route.snapshot.params && route.snapshot.params.internal_name) {
                internal_name = route.snapshot.params.internal_name;
            }
            else if (extension && IsString(extension.internal_name, true)) {
                internal_name = extension.internal_name;
            }
            else if (IsString(route.snapshot.data.internal_name, true)) {
                internal_name = route.snapshot.data.internal_name;
            }
            else if (IsString(route.snapshot.data.can_read, true)) {
                internal_name = route.snapshot.data.can_read;
            }
            else {
                var pathEntityParams = void 0;
                if (route.snapshot.routeConfig && route.snapshot.routeConfig.path) {
                    pathEntityParams = this.paramUtil.getEntityParamsWithPath(route.snapshot.routeConfig.path);
                }
                if (pathEntityParams) {
                    internal_name = pathEntityParams.internal_name;
                }
                else {
                    var attempt = void 0;
                    var parts = window.location.pathname.split('/');
                    while (!internal_name || parts.length) {
                        attempt = parts.pop();
                        if (isNaN(attempt) && this.paramUtil.getEntityParams(attempt)) {
                            internal_name = attempt;
                            break;
                        }
                        if (!internal_name && isNaN(attempt) && this.paramUtil.getEntityParamsWithPath(attempt)) {
                            internal_name = attempt;
                            break;
                        }
                    }
                }
            }
            return internal_name;
        };
        /**
         * A helper function that fetches an entity Id from an Active Route
         * This is a way to ask based of the current route what entity am I dealing with
         * @param route
         * @param extension
         */
        PopEntityService.prototype.getRouteParentId = function (route, extension) {
            var parentId = null;
            if (route.snapshot.params && route.snapshot.params.id) {
                parentId = route.snapshot.params.id;
            }
            else {
                var attempt = void 0;
                var parts = window.location.pathname.split('/');
                while (!parentId || parts.length) {
                    attempt = parts.pop();
                    if (IsNumber(attempt, true)) {
                        parentId = attempt;
                        break;
                    }
                }
            }
            return parentId;
        };
        /**
         * Get the set of tab configs that belong to an entity
         */
        PopEntityService.prototype.getEntityTabs = function (core) {
            if (IsObject(core, ['params', 'entity']) && this.asset.tabs.has(core.params.internal_name)) {
                var tabs = this.asset.tabs.get(core.params.internal_name).filter(function (tab) {
                    return EvaluateWhenConditions(core, tab.when, core);
                });
                return __spreadArray([], __read(tabs));
            }
            else {
                return __spreadArray([], __read(this.asset.tabs.get('default')));
            }
        };
        /**
         * A method that refreshes just the entity on an CoreConfig
         * Will automatically update the entity on the entity config
         * @param config
         * @param queryParams
         */
        PopEntityService.prototype.refreshCoreEntity = function (core, dom, queryParams) {
            var _this = this;
            return new Promise(function (resolve) {
                if (core.params.entityId)
                    core.repo.clearCache('entity', String(core.params.entityId), 'PopEntityService:refreshEntity');
                if (!IsObject(queryParams))
                    queryParams = {};
                if (core && core.repo) {
                    queryParams.bypassCache = true;
                    core.repo.getEntity(core.params.entityId, queryParams).subscribe(function (res) { return __awaiter(_this, void 0, void 0, function () {
                        var entity;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    entity = GetHttpObjectResult(res);
                                    Object.keys(entity).map(function (key) {
                                        core.entity[key] = entity[key];
                                    });
                                    return [4 /*yield*/, this.setCoreDomAssets(core, dom)];
                                case 1:
                                    _a.sent();
                                    exports.PopLog.info(this.name, "refreshCoreEntity", core.entity);
                                    return [2 /*return*/, resolve(entity)];
                            }
                        });
                    }); }, function (err) {
                        return resolve(null);
                    });
                }
                else {
                    return resolve(null);
                }
            });
        };
        /**
         * This function is responsible to make sure the CoreConfig has resources to do its job
         * IE... If a field request a data set , this function should make sure that it is available
         * @param core
         * @param dom
         * @private
         */
        PopEntityService.prototype.setCoreDomAssets = function (core, dom) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _a, dataSetter, lastDataSetter;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = core;
                            return [4 /*yield*/, core.repo.getUiResource(core)];
                        case 1:
                            _a.resource = _b.sent();
                            if (!IsObject(core.entity, true)) return [3 /*break*/, 4];
                            dataSetter = StorageGetter(core.repo, ['model', 'dataSetter'], null);
                            if (IsCallableFunction(dataSetter)) {
                                core.entity = dataSetter(core, core.entity, dom);
                            }
                            if (!IsObject(dom, true)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.fieldUtil.buildDomFields(core, dom)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            lastDataSetter = StorageGetter(core.repo, ['model', 'lastDataSetter'], null);
                            if (IsCallableFunction(lastDataSetter)) {
                                core.entity = lastDataSetter(core, core.entity, dom);
                            }
                            _b.label = 4;
                        case 4: return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * Set the base definitions for an entity
         * Each entity needs to define these so we know how to talk to the api in regards to it
         * The api should provide this details as part of the auth token
         * @param internal_name
         * @param entityId
         */
        PopEntityService.prototype.setEntityParams = function (params) {
            exports.PopLog.info(this.name, "Entity Params set for " + params.internal_name, params);
            this.paramUtil.setEntityParams(params);
        };
        /**
         * Attach a set of tab configs to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityTabs = function (internal_name, tabs) {
            if (IsString(internal_name, true) && Array.isArray(tabs)) {
                exports.PopLog.info(this.name, "Entity Tabs set for " + internal_name, tabs);
                this.asset.tabs.set(internal_name, tabs);
            }
        };
        /**
         * Attach a set of actions to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityAction = function (internal_name, action) {
            if (IsString(internal_name, true) && IsObject(action)) {
                exports.PopLog.info(this.name, "Entity Action set for " + internal_name, action);
                this.asset.actions.set(internal_name, action);
            }
        };
        /**
         * Attach a set of actions to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityEntryAccess = function (internal_name, entryAccess) {
            if (IsString(internal_name, true) && IsArray(entryAccess, true)) {
                exports.PopLog.info(this.name, "Entity entryAccess set for " + internal_name, entryAccess);
                this.asset.entryAccess.set(internal_name, entryAccess);
            }
        };
        /**
         * Attach a set of table options for an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityTable = function (internal_name, table) {
            if (IsString(internal_name, true) && IsObject(table)) {
                exports.PopLog.info(this.name, "Entity Action set for " + internal_name, table);
                this.asset.tables.set(internal_name, table);
            }
        };
        /**
         * Attach a set of table options for an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityRoute = function (internal_name, route) {
            if (IsString(internal_name, true) && IsObject(route)) {
                exports.PopLog.info(this.name, "Entity Route set for " + internal_name, route);
                this.asset.routes.set(internal_name, route);
            }
        };
        /**
         * Attach a set of tab menu configs to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityMenu = function (internal_name, menu) {
            if (IsString(internal_name, true) && IsObject(menu, true)) {
                exports.PopLog.info(this.name, "Entity Menu set for " + internal_name, menu);
                this.asset.menus.set(internal_name, menu);
            }
        };
        /**
         * Attach a set of resources to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityResource = function (internal_name, resource) {
            if (IsString(internal_name, true) && IsObject(resource)) {
                exports.PopLog.info(this.name, "Entity Resource set for " + internal_name, resource);
                this.asset.resources.set(internal_name, resource);
            }
        };
        /**
         * Attach a data decorator that mutates entity data response
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityDecorator = function (internal_name, decorator) {
            if (IsString(internal_name, true) && IsCallableFunction(decorator)) {
                exports.PopLog.info(this.name, "Entity Decorator set for " + internal_name, decorator.toString());
                this.asset.decorator.set(internal_name, decorator);
            }
        };
        /**
         * Attach a data decorator that mutates entity data response
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityDataSetter = function (internal_name, dataSetter) {
            if (IsString(internal_name, true) && IsCallableFunction(dataSetter)) {
                exports.PopLog.info(this.name, "Entity Data Setter set for " + internal_name, dataSetter.toString());
                this.asset.dataSetter.set(internal_name, dataSetter);
            }
        };
        /**
         * Attach a data decorator that mutates entity data response
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setLastEntityDataSetter = function (internal_name, dataSetter) {
            if (IsString(internal_name, true) && IsCallableFunction(dataSetter)) {
                exports.PopLog.info(this.name, "Entity Last Data Setter  set for " + internal_name, dataSetter.toString());
                this.asset.lastDataSetter.set(internal_name, dataSetter);
            }
        };
        /**
         * Attach a data filter to limit the entity data response
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityFilter = function (internal_name, filter) {
            if (IsString(internal_name, true) && IsCallableFunction(filter)) {
                exports.PopLog.info(this.name, "Entity Filter set for " + internal_name, filter.toString());
                this.asset.filter.set(internal_name, filter);
            }
        };
        /**
         * Attach a set of fields to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.setEntityField = function (internal_name, field) {
            if (IsString(internal_name, true) && IsObject(field)) {
                exports.PopLog.info(this.name, "Entity Field set for " + internal_name, field);
                this.asset.fields.set(internal_name, field);
            }
        };
        /**
         * Get extended fields attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityField = function (internal_name) {
            if (IsString(internal_name, true)) {
                var field = this.asset.fields.get(internal_name);
                return field ? field : {};
            }
        };
        /**
         * Get entry access for an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityEntryAccess = function (internal_name) {
            if (IsString(internal_name, true)) {
                var entryAccess = this.asset.entryAccess.get(internal_name);
                return IsArray(entryAccess, true) ? entryAccess : [];
            }
        };
        /**
         * Get extended fields attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityResource = function (internal_name) {
            if (IsString(internal_name, true)) {
                var resource = this.asset.resources.get(internal_name);
                return resource ? resource : {};
            }
        };
        /**
         * Get entity data decorator
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityDecorator = function (internal_name) {
            if (IsString(internal_name, true)) {
                var decorator = this.asset.decorator.get(internal_name);
                return IsCallableFunction(decorator) ? decorator : null;
            }
        };
        /**
         * Get entity data decorator
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityDataSetter = function (internal_name) {
            if (IsString(internal_name, true)) {
                var dataSetter = this.asset.dataSetter.get(internal_name);
                return IsCallableFunction(dataSetter) ? dataSetter : null;
            }
        };
        /**
         * Get entity data decorator
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityLastDataSetter = function (internal_name) {
            if (IsString(internal_name, true)) {
                var lastDataSetter = this.asset.lastDataSetter.get(internal_name);
                return IsCallableFunction(lastDataSetter) ? lastDataSetter : null;
            }
        };
        /**
         * Get entity data decorator
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityFilter = function (internal_name) {
            if (IsString(internal_name, true)) {
                var filter = this.asset.filter.get(internal_name);
                return IsCallableFunction(filter) ? filter : null;
            }
        };
        /**
         * Get extended actions attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityAction = function (internal_name) {
            if (IsString(internal_name, true)) {
                var action = this.asset.actions.get(internal_name);
                return action ? action : {};
            }
        };
        /**
         * Get extended table attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityTable = function (internal_name) {
            if (IsString(internal_name, true)) {
                var table = this.asset.tables.get(internal_name);
                return table ? table : {};
            }
        };
        /**
         * Get extended table attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityRoute = function (internal_name) {
            if (IsString(internal_name, true)) {
                var route = this.asset.routes.get(internal_name);
                return route ? route : {};
            }
        };
        /**
         * Get extended table attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntityService.prototype.getEntityMenu = function (internal_name) {
            if (IsString(internal_name, true)) {
                var action = this.asset.menus.get(internal_name);
                return action ? action : {};
            }
        };
        PopEntityService.prototype.bustAllCache = function () {
            var _this = this;
            this.asset.repo.forEach(function (repo, key) {
                exports.PopLog.init(_this.name, "Bust cache for " + repo.getInternalName());
                repo.clearAllCache('bustAllCache');
            });
        };
        PopEntityService.prototype.ngOnDestroy = function () {
            console.log(this.name, "destroyed:" + this.id);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This will do all of the work of building and storing the base config for each entity
         * @param internal_name
         * @param routes
         * @private
         */
        PopEntityService.prototype._getBaseCoreConfig = function (internal_name) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var params, core_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.asset.base.has(internal_name)) return [3 /*break*/, 2];
                            params = this.getEntityParams(internal_name);
                            core_1 = new CoreConfig({
                                params: IsObjectThrowError(params, true, "Could not resolve params for " + internal_name) ? params : null,
                            });
                            core_1.flag = { routeCheck: IsAliasable(internal_name), assetCheck: true, modalCheck: false, refreshCheck: false };
                            core_1.access = this._getEntityAccess(core_1.params);
                            core_1.channel = new i0.EventEmitter();
                            core_1.repo = this._getEntityRepo(core_1.params);
                            core_1.repo.model = {
                                action: DeepMerge(JsonCopy(DefaultEntityAction), this.getEntityAction(core_1.params.internal_name)),
                                dataSetter: this.getEntityDataSetter(core_1.params.internal_name),
                                lastDataSetter: this.getEntityLastDataSetter(core_1.params.internal_name),
                                decorator: this.getEntityDecorator(core_1.params.internal_name),
                                filter: this.getEntityFilter(core_1.params.internal_name),
                                table: DeepMerge(JsonCopy(DefaultEntityTable), this.getEntityTable(core_1.params.internal_name)),
                                field: Object.assign(Object.assign({}, DeepMerge(DefaultEntityField)), this.getEntityField(core_1.params.internal_name)),
                                resource: DeepMerge(JsonCopy(DefaultEntityResource), this.getEntityResource(core_1.params.internal_name)),
                                route: DeepMerge(JsonCopy(DefaultEntityRoute), this.getEntityRoute(core_1.params.internal_name)),
                                menu: DeepMerge(JsonCopy(DefaultEntityMenu), this.getEntityMenu(core_1.params.internal_name))
                            };
                            core_1.repo.setRoutes(InterpolateEntityRoutes(core_1.repo.model.route, core_1.params));
                            return [4 /*yield*/, rxjs.forkJoin([this._getEntityConfig(core_1, internal_name), core_1.repo.getPreferences(core_1)]).subscribe(function () {
                                    _this.asset.base.set(internal_name, core_1);
                                    return resolve(Object.assign({}, _this.asset.base.get(internal_name)));
                                }, function () {
                                    return resolve(Object.assign({}, _this.asset.base.get(internal_name)));
                                })];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2: return [2 /*return*/, resolve(Object.assign({}, this.asset.base.get(internal_name)))];
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Get the an entity repo class for a specific entity
         * This is intended to be run when a CoreConfig is requested for an entity, once created it will be stored and reused
         *
         * @param entityParams
         * @param routes
         */
        PopEntityService.prototype._getEntityRepo = function (entityParams) {
            var repo = null;
            if (IsObject(entityParams, true)) {
                if (this.asset.repo.has(entityParams.internal_name)) {
                    repo = this.asset.repo.get(entityParams.internal_name);
                }
                else {
                    repo = new PopEntityRepoService();
                    repo.register(entityParams);
                    this.asset.repo.set(entityParams.internal_name, repo);
                }
            }
            return repo;
        };
        /**
         * Get the crud access that is associated to a specific entity
         * This is intended to be run when a CoreConfig is requested for an entity, once created it will be stored and reused
         * @param entityParams
         */
        PopEntityService.prototype._getEntityAccess = function (entityParams) {
            var entityAccess = null;
            if (IsObject(entityParams, true)) {
                entityAccess = this.paramUtil.getAccess(entityParams.internal_name);
                if (this.asset.access.has(entityParams.internal_name)) {
                    entityAccess = Object.assign({}, this.asset.access.get(entityParams.internal_name));
                }
                else {
                    entityAccess = this.paramUtil.getAccess(entityParams.internal_name);
                    if (entityAccess) {
                        this.asset.access.set(entityParams.internal_name, Object.assign({}, entityAccess));
                    }
                }
            }
            return entityAccess;
        };
        PopEntityService.prototype._getEntityConfig = function (core, internal_name) {
            return new Promise(function (resolve) {
                core.repo.getConfig().subscribe(function (res) {
                    // this.getJsonModel(internal_name).then((res: any) => {
                    var ApiModels = res.data ? res.data : res;
                    ApiModels = ApiModels.model ? ApiModels.model : ApiModels;
                    if (!IsObject(ApiModels)) {
                        ApiModels = {};
                    }
                    core.repo.model = Object.assign(Object.assign({}, core.repo.model), ApiModels //  Gives the api the ability to send over data, stub for future features
                    );
                    return resolve(true);
                }, function () {
                    return resolve(false);
                });
            });
        };
        return PopEntityService;
    }());
    PopEntityService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntityService_Factory() { return new PopEntityService(i0__namespace.ɵɵinject(PopEntityUtilFieldService), i0__namespace.ɵɵinject(PopEntityUtilParamService)); }, token: PopEntityService, providedIn: "root" });
    PopEntityService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopEntityService.ctorParameters = function () { return [
        { type: PopEntityUtilFieldService },
        { type: PopEntityUtilParamService }
    ]; };

    var PopRouteHistoryResolver = /** @class */ (function () {
        function PopRouteHistoryResolver(router) {
            this.router = router;
            this.sessionVar = 'Navigation.history';
            // ToDo: Grab enitty map dynamically
            router.events.pipe(operators.filter(function (event) { return event instanceof i1.NavigationEnd; })).subscribe(function (event) {
                var path = window.location.pathname.split('/');
                path.shift();
                path.pop();
                SetSessionSiteVar('App.name', path[0]);
                SetSessionSiteVar('App.entity', path[path.length - 1]);
            });
        }
        PopRouteHistoryResolver.prototype.resolve = function (route, state) {
            var path = window.location.pathname.split('/');
            path.shift();
            path.pop();
            SetSessionSiteVar('App.name', path[0]);
            SetSessionSiteVar('App.entity', path[path[path.length - 1]]);
            this.saveNavigationHistory({ name: '', base: path[0], path: state.url });
            return true;
        };
        PopRouteHistoryResolver.prototype.saveNavigationHistory = function (history) {
            var historyArray = GetSessionSiteVar(this.sessionVar);
            if (!historyArray)
                historyArray = [];
            // Because a non-existing siteVar returns an object and we need it to be an array.
            if (typeof historyArray[0] === 'undefined')
                historyArray = [];
            // Make sure that we don't have two entries in a row of the same thing.
            if (typeof historyArray[0] !== 'undefined' && historyArray[0].path == history.path)
                return;
            // Add the new entry and keep the multiple_max to 20 for now.
            historyArray.unshift(history);
            if (historyArray.length > 20)
                historyArray.splice(-1, 1);
            SetSessionSiteVar(this.sessionVar, historyArray);
        };
        PopRouteHistoryResolver.prototype.isPreviousHistory = function () {
            var historyArray = GetSessionSiteVar(this.sessionVar);
            return IsArray(historyArray, true);
        };
        PopRouteHistoryResolver.prototype.goBack = function (count) {
            if (count === void 0) { count = 1; }
            if (count < 1)
                count = 1;
            var historyArray = GetSessionSiteVar(this.sessionVar);
            var path = window.location.pathname.split('/');
            // If they came from outside of pop then don't send them back there but instead send them to apps main page.
            if (typeof historyArray.length === 'undefined' || typeof historyArray[1] === 'undefined') {
                this.router.navigate(['/']);
                return;
            }
            // The where they should go back to and also purge that route from the array.
            var goBackTo = (historyArray[count] !== 'undefined' ? historyArray[count] : historyArray.slice(-1)[0]);
            if (historyArray.length)
                historyArray.shift();
            SetSessionSiteVar(this.sessionVar, historyArray);
            // If where they are going back to is in the same app then use the router otherwise do reload to sthat route.
            if (goBackTo.base === path[1]) {
                this.router.navigate([goBackTo.path]).catch(function () { return true; });
            }
            else {
                window.location.href = window.location.origin + '/' + goBackTo.base + goBackTo.path;
            }
        };
        return PopRouteHistoryResolver;
    }());
    PopRouteHistoryResolver.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopRouteHistoryResolver_Factory() { return new PopRouteHistoryResolver(i0__namespace.ɵɵinject(i1__namespace$1.Router)); }, token: PopRouteHistoryResolver, providedIn: "root" });
    PopRouteHistoryResolver.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PopRouteHistoryResolver.ctorParameters = function () { return [
        { type: i1.Router }
    ]; };

    var PopTabMenuService = /** @class */ (function (_super) {
        __extends(PopTabMenuService, _super);
        function PopTabMenuService() {
            var _this = _super.call(this) || this;
            _this.id = PopUid();
            _this.name = 'PopTabMenuService';
            _this.asset = {
                core: undefined,
                config: undefined,
                dom: undefined,
                id: undefined,
                map: {},
                outlet: undefined,
                resetOutlet: undefined,
                route: undefined,
                path: undefined,
                clearCache: false
            };
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                entity: exports.ServiceInjector.get(PopEntityService),
                log: exports.ServiceInjector.get(PopLogService),
                router: exports.ServiceInjector.get(i1.Router),
            };
            _this.ui = {
                entityParams: undefined
            };
            _this.change = new rxjs.Subject(); // event emitter
            _this._setDomExtensions();
            _this._initSession();
            return _this;
        }
        PopTabMenuService.prototype._initSession = function () {
            this.dom.session = Object.assign({ scroll: {}, path: '', fields: {} }, this.dom.session);
        };
        /**
         * Add Buttons to the Tab Menu
         * @param buttons Array<TabButtonInterface>)
         * @returns void
         */
        PopTabMenuService.prototype.addButtons = function (buttons) {
            var _a;
            if (buttons && buttons.length) {
                (_a = this.asset.config.buttons).push.apply(_a, __spreadArray([], __read(buttons)));
                this.asset.map.buttons = ArrayMapSetter(this.asset.config.buttons, 'id');
                this._emitChange('buttons');
            }
        };
        /**
         * Add Tabs to the Tab Menu
         * @param tabs Array<TabInterface>
         * @returns void
         */
        PopTabMenuService.prototype.addTabs = function (tabs) {
            var _a;
            if (tabs && tabs.length) {
                (_a = this.asset.config.tabs).push.apply(_a, __spreadArray([], __read(tabs)));
                this.asset.map.tabs = ArrayMapSetter(this.asset.config.tabs, 'id');
            }
            this._emitChange('tabs');
        };
        /**
         * This fx will cause this srv to remove the cache when it is destroyed
         */
        PopTabMenuService.prototype.clearCache = function () {
            this.asset.clearCache = true;
        };
        /**
         * Remove all Buttons from the Tab Menu
         * @param buttons Array<TabButtonInterface>)
         * @returns void
         */
        PopTabMenuService.prototype.clearButtons = function (buttons) {
            this.asset.config.buttons = [];
            this.asset.map.buttons = ArrayMapSetter(this.asset.config.buttons, 'id');
            this._emitChange('buttons');
        };
        /**
         * Get latest path
         */
        PopTabMenuService.prototype.getPathSession = function () {
            return GetSessionSiteVar("Entity." + TitleCase(this.asset.core.params.internal_name) + ".Menu.path");
        };
        /**
         * Clear the tab system session
         * Auto called on go back button click
         * @param name
         * @returns void
         */
        PopTabMenuService.prototype.clearSession = function () {
            if (this.asset.core && this.asset.core.params && this.asset.core.params.internal_name) {
                SetSessionSiteVar("Entity." + TitleCase(this.asset.core.params.internal_name) + ".Menu", null);
            }
        };
        /**
         * Get Misc Data for each tab
         * @param path
         * @returns object
         */
        PopTabMenuService.prototype.getTab = function (id) {
            if (!this.asset.id)
                id = this.asset.path;
            if (this.asset.map.tabs && id in this.asset.map.tabs) {
                return Object.assign({}, this.asset.config.tabs[this.asset.map.tabs[id]]);
            }
            return null;
        };
        /**
         * Get the global metadata stored for the Tab Menu
         * If key is passed, return that specific data else entire object
         * @param key string
         * @returns boolean
         */
        PopTabMenuService.prototype.getCore = function () {
            return this.asset.core;
        };
        /**
         * Set the TabMenuConfig of the Tab Menu
         * The Tab Menu Component auto calls this on creation
         * @param config TabMenuConfig
         * @returns void
         */
        PopTabMenuService.prototype.registerConfig = function (core, config, dom) {
            var _this = this;
            if (config) {
                this.asset.core = IsObject(core, true) ? core : null;
                this.ui.entityParams = IsObject(this.asset.core, ['params']) ? this.asset.core.params : null;
                this.asset.config = new TabMenuConfig(config);
                // get the users access
                this.asset.map.tabs = ArrayMapSetter(this.asset.config.tabs, 'path');
                this.asset.map.buttons = ArrayMapSetter(this.asset.config.buttons, 'id');
                if (this.asset.core && this.asset.core.params)
                    this.dom.session.scroll = GetSessionSiteVar("Entity." + TitleCase(this.asset.core.params.internal_name) + ".Menu.scroll");
                if (!this.dom.session.scroll)
                    this.dom.session.scroll = {};
                // Subscribe to the CRUD events
                this.asset.path = window.location.pathname.split('/').pop();
                // bind to router to detect entity change detection .. effective for cloning, navigation changes
                this.dom.setSubscriber('route-change', this.srv.router.events.subscribe(function (e) { return _this._navigationHandler(e); }));
                this.dom.state.loaded = true;
                this._resetMenu();
                this._emitChange('config');
                if (this.srv.log.enabled('config', this.name))
                    console.log(this.srv.log.message(this.name + ":registerConfig"), this.srv.log.color('config'), this.asset.config);
                return this.asset.config;
            }
        };
        /**
         * Register an outlet to enable scroll session
         * @param outlet ElementRef
         * @returns void
         */
        PopTabMenuService.prototype.registerOutlet = function (outlet) {
            this.asset.outlet = outlet;
            this._emitChange('outlet');
        };
        /**
         * Register a route to enable entity change detection and enforce the id on the route
         * @param outlet ElementRef
         * @returns void
         */
        PopTabMenuService.prototype.registerRoute = function (route) {
            if (!this.asset.route) {
                this.asset.route = route;
                this._emitChange('route');
                if (+this.asset.route.snapshot.params.id) {
                    if (!this.asset.core.entity || +this.asset.core.entity.id !== +this.asset.route.snapshot.params.id) {
                        this.resetTab(true);
                        // this.refreshEntity( this.asset.route.snapshot.params.id, this.asset.dom, null, `${this.name}:registerRoute:conflict` ).then( () => this.resetTab()  );
                    }
                }
            }
        };
        /**
         * Register a outletReset function that you want called when on crud operations
         * @param outlet ElementRef
         * @returns void
         */
        PopTabMenuService.prototype.registerOutletReset = function (resetOutlet) {
            this.asset.resetOutlet = resetOutlet;
            this._emitChange('outlet-reset');
        };
        /**
         * This fx will refresh the entity that exist on the this.asset.core
         * @param entityId
         * @param dom
         * @param queryParams
         * @param caller
         */
        PopTabMenuService.prototype.refreshEntity = function (entityId, dom, queryParams, caller) {
            var _this = this;
            if (entityId === void 0) { entityId = null; }
            return new Promise(function (resolve) {
                if (_this.asset.core) {
                    _this.showAsLoading(false);
                    _this.srv.log.warn(_this.name, "refreshEntity:" + caller);
                    if (!_this.asset.config) {
                        _this.showAsLoading(false);
                        return resolve(false);
                    }
                    _this.dom.setTimeout('refresh', function () {
                        if (!entityId && _this.asset.core.entity && +_this.asset.core.entity.id)
                            entityId = +_this.asset.core.entity.id;
                        if (+entityId) {
                            _this.asset.core.params.entityId = entityId;
                            _this.srv.entity.refreshCoreEntity(_this.asset.core, dom, queryParams).then(function (entity) {
                                _this._resetMenu();
                                _this.asset.core.params.refresh = false;
                                if (typeof _this.asset.resetOutlet === 'function') {
                                    setTimeout(function () {
                                        _this.asset.resetOutlet();
                                        _this.showAsLoading(false);
                                        return resolve(true);
                                    }, 0);
                                }
                                else {
                                    return resolve(true);
                                }
                            });
                        }
                        else {
                            _this.showAsLoading(false);
                            return resolve(false);
                        }
                    }, 0);
                }
                else {
                    _this.showAsLoading(false);
                    return resolve(false);
                }
            });
        };
        /**
         * This fx will reset the current tab
         * @param clearCache
         */
        PopTabMenuService.prototype.resetTab = function (clearCache) {
            if (clearCache === void 0) { clearCache = false; }
            if (clearCache) {
                SetPopCacheRedirectUrl(this.srv.router);
            }
            else {
                this._resetMenu();
                // this.asset.core.params.refresh = false;
                if (typeof this.asset.resetOutlet === 'function')
                    this.asset.resetOutlet();
            }
        };
        /**
         * This fx will reset a specific position of the current tab
         * @param position
         */
        PopTabMenuService.prototype.reloadTabPosition = function (position) {
            if (position === void 0) { position = null; }
            if (typeof this.asset.resetOutlet === 'function')
                this.asset.resetOutlet(position);
        };
        /**
         * This will set a flag the the tab will need to refresh
         */
        PopTabMenuService.prototype.setTabRefresh = function () {
            if (this.asset.core && this.asset.core.params) {
                this.asset.core.params.refresh = true;
            }
        };
        /**
         * This fx will set the scroll position of the current tab if was was previously visited
         */
        PopTabMenuService.prototype.setTabScrollPosition = function () {
            if (this.asset.path && this.dom.session.scroll[this.asset.path]) {
                this._setTabScrollPosition(this.dom.session.scroll[this.asset.path]);
            }
        };
        /**
         * This fx will trigger a loading indicator in the current tab
         * @param value
         */
        PopTabMenuService.prototype.showAsLoading = function (value) {
            if (IsObject(this.asset.config, true)) {
                this.asset.config.loading = value ? true : false;
            }
        };
        /**
         * Store the current tab into session memory
         * @param name
         * @returns void
         */
        PopTabMenuService.prototype.setPathSession = function (tab) {
            if (this.asset.core && this.asset.core.params)
                SetSessionSiteVar("Entity." + TitleCase(this.asset.core.params.internal_name) + ".Menu.path", tab.path);
        };
        /**
         * Add Tabs to the Tab Menu
         * @param path string
         * @returns void
         */
        PopTabMenuService.prototype.removeTab = function (path) {
            if (path in this.asset.map.tabs) {
                this.asset.config.tabs.splice(this.asset.map.tabs[path], 1);
                this.asset.map.tabs = ArrayMapSetter(this.asset.config.tabs, 'id');
            }
            this._emitChange('tabs');
        };
        /**
         * Toggle whether a Button is hidden
         * If value is set to true(show), false(hide), else toggle
         * @param buttons Array<TabButtonInterface>)
         * @returns boolean
         */
        PopTabMenuService.prototype.toggleButton = function (id, value) {
            if (id in this.asset.map.buttons) {
                if (typeof value !== 'undefined') {
                    this.asset.config.buttons[this.asset.map.buttons[id]].hidden = value;
                }
                else {
                    this.asset.config.buttons[this.asset.map.buttons[id]].hidden = !this.asset.config.buttons[this.asset.map.buttons[id]].hidden;
                }
                this._emitChange('buttons');
                return true;
            }
            return false;
        };
        /**
         * This fx will update main header of the current Tab Menu
         * @param name
         */
        PopTabMenuService.prototype.updateName = function (name) {
            if (IsString(name, true) && this.asset && this.asset.config) {
                this.asset.config.name = name;
            }
        };
        PopTabMenuService.prototype.ngOnDestroy = function () {
            if (this.asset.clearCache) {
                if (IsObject(this.asset.core)) {
                    this.asset.core.repo.clearAllCache();
                }
            }
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * If you do not extend of an extension service these have to be set manually
         */
        PopTabMenuService.prototype._setDomExtensions = function () {
            var _this = this;
            this.dom = Object.assign(Object.assign({}, this.dom), {
                setSubscriber: function (subscriptionKey, subscription) {
                    if (subscription === void 0) { subscription = null; }
                    if (subscriptionKey && _this.dom.subscriber && subscriptionKey in _this.dom.subscriber && _this.dom.subscriber[subscriptionKey] && typeof _this.dom.subscriber[subscriptionKey].unsubscribe === 'function') {
                        _this.dom.subscriber[subscriptionKey].unsubscribe();
                    }
                    if (subscription) {
                        _this.dom.subscriber[subscriptionKey] = subscription;
                    }
                },
                setTimeout: function (timeoutKey, callback, delay) {
                    if (callback === void 0) { callback = null; }
                    if (delay === void 0) { delay = 250; }
                    if (timeoutKey && _this.dom.delay && timeoutKey in _this.dom.delay && _this.dom.delay[timeoutKey]) {
                        clearTimeout(_this.dom.delay[timeoutKey]);
                    }
                    if (typeof callback === 'function') {
                        _this.dom.delay[timeoutKey] = setTimeout(callback, delay);
                    }
                },
            });
        };
        /**
         * Return to last active tab
         * @returns void
         */
        PopTabMenuService.prototype._isPathSession = function () {
            this.dom.session.path = this.getPathSession();
            if (this.dom.session.path && this.dom.session.path !== this.asset.path && this.dom.session.path in this.asset.map.tabs) {
                return false;
            }
            return true;
        };
        /**
         * Store current tab scroll position
         * @returns void
         */
        PopTabMenuService.prototype._storeTabScrollPosition = function () {
            if (this.asset.core && this.asset.core.params && this.asset.path) {
                this.dom.session[this.asset.path] = this._getTabScrollPosition();
                SetSessionSiteVar("Entity." + TitleCase(this.asset.core.params.internal_name) + ".Menu.scroll", this.dom.session.scroll);
            }
        };
        /**
         * Set current tab scroll position
         * @returns void
         */
        PopTabMenuService.prototype._setTabScrollPosition = function (scrollTop) {
            if (this.asset.outlet && this.asset.outlet.nativeElement)
                this.asset.outlet.nativeElement.scrollTop = scrollTop;
        };
        /**
         * Get the current tab scroll position
         * @returns number
         */
        PopTabMenuService.prototype._getTabScrollPosition = function () {
            if (this.asset.outlet && this.asset.outlet.nativeElement)
                return this.asset.outlet.nativeElement.scrollTop;
            return 0;
        };
        /**
         * Verify the id on the route matches the id of the configuration entity
         * @returns number
         */
        PopTabMenuService.prototype._checkId = function () {
            if (this.asset.route && +this.asset.route.snapshot.params.id) {
                if (!this.asset.config && this.srv.log.enabled('error', this.name))
                    console.log(this.srv.log.message(this.name + ":_checkId:error - Could not find config"), this.srv.log.color('error'));
                if (this.srv.log.enabled('info', this.name))
                    console.log(this.srv.log.message(this.name + ":_checkId route id(" + this.asset.route.snapshot.params.id + " matches config(" + this.asset.core.entity.id + "):refresh is " + (+this.asset.route.snapshot.params.id !== +this.asset.core.entity.id)), this.srv.log.color('info'));
                if (!this.asset.core.entity || +this.asset.route.snapshot.params.id !== +this.asset.core.entity.id) {
                    this.resetTab(true);
                }
            }
        };
        /**
         * This fx will track the current scroll position of the current tab when navigating away, and session it
         * @param event
         * @private
         */
        PopTabMenuService.prototype._navigationHandler = function (event) {
            var _this = this;
            // On a NavigationStart event record the current scroll position of the current tab
            // On a NavigationEnd check to see if a scroll position for the current tab has been stored and apply it
            if (event instanceof i1.NavigationStart && this.asset.path)
                this._storeTabScrollPosition();
            if (event instanceof i1.NavigationEnd) {
                this.asset.path = String(event.url).split('/').pop();
                if (this.asset.route && this._isPathSession() || !this.asset.route) {
                    this._checkId();
                    if (this.dom.session.scroll[this.asset.path]) {
                        setTimeout(function () {
                            _this._setTabScrollPosition(_this.dom.session.scroll[_this.asset.path]);
                        }, 0);
                    }
                }
                else {
                    if (this.asset.route)
                        return this.srv.router.navigate([this.dom.session.path], { relativeTo: this.asset.route });
                }
            }
        };
        /**
         * This fx will reseet the current menu options
         * @private
         */
        PopTabMenuService.prototype._resetMenu = function () {
            if (this.asset.core && this.asset.config) {
                if (this.asset.core.entity && this.asset.core.entity.id)
                    this.asset.config.name = DetermineEntityName(this.asset.core.entity);
                if (Array.isArray(this.asset.config.buttons) && this.asset.config.buttons.length && this.asset.core.entity) {
                    var archiveKey = StorageGetter(this.asset.core, ['repo', 'model', 'menu', 'archiveKey'], 'archived');
                    var btnMap = ArrayMapSetter(this.asset.config.buttons, 'id');
                    if ('archive' in btnMap)
                        this.asset.config.buttons[btnMap['archive']].hidden = this.asset.core.entity[archiveKey] ? true : false;
                    if ('activate' in btnMap)
                        this.asset.config.buttons[btnMap['activate']].hidden = this.asset.core.entity[archiveKey] ? false : true;
                    if ('close' in btnMap)
                        this.asset.config.buttons[btnMap['close']].hidden = this.asset.config.portal ? false : true;
                }
            }
        };
        /**
         * Change detection Emitter
         * @param type strings
         * @returns void
         */
        PopTabMenuService.prototype._emitChange = function (name, data) {
            if (data === void 0) { data = ''; }
            exports.PopLog.info(this.name, name, data);
            this.change.next({ source: this.name, type: 'tab-menu', name: name, data: data });
        };
        return PopTabMenuService;
    }(PopExtendService));
    PopTabMenuService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopTabMenuService_Factory() { return new PopTabMenuService(); }, token: PopTabMenuService, providedIn: "root" });
    PopTabMenuService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopTabMenuService.ctorParameters = function () { return []; };

    var PopTabMenuComponent = /** @class */ (function (_super) {
        __extends(PopTabMenuComponent, _super);
        function PopTabMenuComponent(el, route, _domRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.route = route;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopTabMenuComponent';
            _this.srv = {
                history: exports.ServiceInjector.get(PopRouteHistoryResolver),
                router: exports.ServiceInjector.get(i1.Router),
                tab: undefined
            };
            /**
             * Configure the component tailored to its specific needs
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    exports.PopTemplate.turnOffFilter();
                    _this.config = IsObjectThrowError(_this.config, true, _this.name + ":configure: - this.config") ? _this.config : null;
                    if (_this.config.goBack)
                        _this.config.goBack = _this.srv.history.isPreviousHistory();
                    _this.dom.setHeight(window.innerHeight - 55, 10);
                    _this.log.info("Determined height:" + _this.dom.height.inner);
                    return resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this._registerConfig().then(function () {
                        setTimeout(function () {
                            _this.srv.tab.setTabScrollPosition();
                            _this.srv.tab.registerOutlet(_this.outletRef);
                        });
                        return resolve(true);
                    });
                });
            };
            return _this;
        }
        /**
         * This component should have a purpose
         */
        PopTabMenuComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Go back in history
         * @returns void
         */
        PopTabMenuComponent.prototype.onBackButtonClick = function () {
            this.srv.tab.clearSession();
            this.srv.history.goBack();
        };
        /**
         * Trigger a menu click event
         * @returns void
         */
        PopTabMenuComponent.prototype.onMenuButtonClick = function (button) {
            var _this = this;
            this.log.info(this.name + ":button", button);
            this.dom.setTimeout("stop-loader", null, 0);
            this.config.loading = true;
            var eventData = {
                source: this.name,
                type: 'button',
                id: button.id,
                name: button.name,
                metadata: (button.metadata ? button.metadata : false)
            };
            this.onBubbleEvent(eventData);
            this.dom.setTimeout("stop-loader", function () {
                _this.config.loading = false;
            }, 3000);
        };
        /**
         * Trigger a tab click event
         * @returns void
         */
        PopTabMenuComponent.prototype.onTabMenuClick = function (tab) {
            this.log.info("onTabMenuClick", tab);
            this.srv.tab.setPathSession(tab);
            var eventData = {
                source: this.name,
                type: 'tab',
                id: tab.id,
                name: tab.name,
                metadata: (tab.metadata ? tab.metadata : false)
            };
            this.onBubbleEvent(eventData);
        };
        /**
         * Event Emitter
         * @returns void
         */
        PopTabMenuComponent.prototype.onBubbleEvent = function (eventData) {
            this.events.emit(eventData);
        };
        /**
         * Clean up the dom of this component
         *
         * Clear out data stored for this Tab Menu out of the global service
         */
        PopTabMenuComponent.prototype.ngOnDestroy = function () {
            if (this.core && this.core.params && this.core.params.entityId)
                this.core.repo.clearCache('entity', String(this.core.params.entityId), "PopTabMenuComponent:ngOnDestroy");
            // this.srv.tab.reset();
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopTabMenuComponent.prototype._registerConfig = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.config = IsObjectThrowError(_this.config, true, _this.name + ":registerConfig: - this.config") ? _this.srv.tab.registerConfig(_this.core, _this.config, _this.dom.repo) : {};
                resolve(true);
            });
        };
        return PopTabMenuComponent;
    }(PopExtendComponent));
    PopTabMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-tab-menu',
                    template: "<div class=\"tab-menu-container\" [style.height.px]=\"dom.height.outer\" [ngClass]=\"{'tab-menu-loading': config.loading}\">\n  <div class=\"mat-elevation-z2\" [ngClass]=\"{'tab-menu-header': config?.goBack, 'tab-menu-header-without-back': !config?.goBack }\" >\n    <div class=\"tab-menu-nav-container\" >\n      <div class=\"tab-menu-back-container\" *ngIf=\"config.goBack\" >\n        <div id=\"back-button\" class=\"tab-menu-back-btn\"  (click)=\"onBackButtonClick();\">\n          <mat-icon>keyboard_arrow_left</mat-icon>\n          <div >Back</div>\n        </div>\n        <div *ngIf=\"config.buttons.length\" class=\"tab-menu-button-container\">\n          <button class=\"tab-menu-button\"\n                  *ngFor=\"let button of config.buttons\"\n                  [ngClass]=\"{'sw-hidden': button.hidden}\"\n                  [disabled]=\"button.disabled\"\n                  mat-raised-button\n                  (click)=\"onMenuButtonClick(button)\">\n            {{button.name}}\n          </button>\n        </div>\n      </div>\n\n    </div>\n    <div class=\"tab-menu-button-header\" >\n      <div class=\"tab-menu-label-container\">{{config.name}}</div>\n\n    </div>\n    <div class=\"tab-menu-link-container\">\n      <nav mat-tab-nav-bar>\n        <a mat-tab-link class=\"mat-body tab-menu-link\"\n           *ngFor=\"let tab of config.tabs\"\n           [routerLink]=\"tab.path\"\n           [ngClass]=\"{'active':rla.isActive}\"\n           (click)=\"onTabMenuClick(tab)\"\n           routerLinkActive #rla=\"routerLinkActive\"\n           [active]=\"rla.isActive\">\n          {{tab.name}}\n        </a>\n      </nav>\n    </div>\n  </div>\n  <div #outlet class=\"sw-target-outlet tab-menu-router-outlet-container\" [style.height.px]=\"dom.height.inner\">\n    <div class=\"tab-menu-loader\">\n      <mat-progress-bar *ngIf=\"config.loading\" mode=\"indeterminate\"></mat-progress-bar>\n    </div>\n    <router-outlet></router-outlet>\n  </div>\n</div>\n",
                    styles: [".tab-menu-back-container{padding:var(--gap-xxs) var(--gap-lm) 0 var(--gap-s);display:flex;justify-content:space-between}.tab-menu-back-container mat-icon{width:22px}.tab-menu-back-container .tab-menu-back-btn{color:var(--foreground-base);font-size:14px;min-width:150px;display:flex;align-items:center;justify-content:flex-start;cursor:pointer}.tab-menu-nav-container{height:var(--gap-lm)}.tab-menu-container{position:relative;display:flex;width:auto;flex-direction:column;justify-content:stretch;box-sizing:border-box;overflow-y:hidden}.tab-menu-container .tab-menu-header{height:108px;max-height:108px;background:var(--background-main-menu)}.tab-menu-container .tab-menu-header-without-back{height:108px;max-height:108px}.tab-menu-label-container{padding:0 0 10px 30px;min-width:200px;font-size:20px;color:var(--foreground-base);flex:1 1 auto}.tab-menu-loading{opacity:.9!important;pointer-events:none!important}.tab-menu-container>div{flex:1}.tab-menu-button-header{position:relative;top:5px;display:flex;justify-content:space-between;margin:0;height:37px}.tab-menu-button-container{display:flex!important;justify-content:flex-end;align-items:center;flex:1 1 auto;position:relative;top:var(--gap-m)}.tab-menu-loader{position:absolute;height:2px;overflow:hidden;top:0;left:0;right:0;width:100%;clear:both}.tab-menu-button{margin:0 0 0 var(--gap-s)!important;min-width:100px;height:30px}.tab-menu-link-container{position:relative;top:-7px;display:block;margin:0;padding-left:var(--gap-lm)}.mat-tab-link.active{font-weight:500}.mat-tab-nav-bar{border-bottom:none}.mat-tab-link{min-width:0!important;font-weight:400;color:var(--foreground-base);padding:0 5px;margin-right:var(--gap-m);text-align:left;justify-content:left}.mat-ink-bar{position:absolute;bottom:0;height:10px;transition:.5s cubic-bezier(.35,0,.25,1)}.tab-menu-router-outlet-container{margin-top:2px;position:relative;overflow-y:auto}:host ::ng-deep .mat-raised-button{line-height:20px!important}.tab-menu-link{opacity:1}"]
                },] }
    ];
    PopTabMenuComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1.ActivatedRoute },
        { type: PopDomService },
        { type: PopTabMenuService }
    ]; };
    PopTabMenuComponent.propDecorators = {
        config: [{ type: i0.Input }],
        header: [{ type: i0.ViewChild, args: ['header', { static: true },] }],
        outletRef: [{ type: i0.ViewChild, args: ['outlet', { static: true },] }]
    };

    var EntitySchemeSectionConfig = /** @class */ (function () {
        function EntitySchemeSectionConfig(params) {
            this.compact = true;
            this.mapping = {};
            this.modified = false;
            if (params)
                for (var i in params)
                    this[i] = params[i];
        }
        return EntitySchemeSectionConfig;
    }());

    var FieldItemGroupConfig = /** @class */ (function () {
        function FieldItemGroupConfig(config) {
            this.fieldItems = [];
            this.layout = 'column';
            this.inDialog = undefined;
            this.position = 1;
            this.entity = null;
            this.http = 'POST';
            this.debug = false;
            for (var i in config)
                this[i] = config[i];
            if (!config.inDialog)
                this.inDialog = null;
            if (config.inDialog && config.inDialog.cancel !== false)
                config.inDialog.cancel = true;
        }
        return FieldItemGroupConfig;
    }());

    var PopActionDialogComponent = /** @class */ (function (_super) {
        __extends(PopActionDialogComponent, _super);
        function PopActionDialogComponent(el, _domRepo, dialog, data) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.dialog = dialog;
            _this.data = data;
            _this.name = 'PopActionDialogComponent';
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                events: exports.ServiceInjector.get(PopEntityEventService),
                field: exports.ServiceInjector.get(PopEntityUtilFieldService),
                request: exports.ServiceInjector.get(PopRequestService),
                router: exports.ServiceInjector.get(i1.Router),
            };
            _this.asset = {
                componentType: undefined,
                entity: {},
                facadeDuration: 250,
                fieldItems: [],
                fieldItemMap: undefined,
                submitText: 'Submit',
                visible: 0,
                http: 'POST',
                postUrl: null,
                goToUrl: null,
            };
            _this.ui = {
                form: new forms.FormGroup({}),
                submitText: 'Submit',
                header: 'New'
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this._setInitialConfig()];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this._setAction()];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, this._setFieldItems()];
                            case 3:
                                _a.sent();
                                return [4 /*yield*/, this._setAdditionalConfig()];
                            case 4:
                                _a.sent();
                                return [4 /*yield*/, this._buildFormGroup()];
                            case 5:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this._renderFieldItems();
                    _this._renderComponent();
                    var hasChild = _this.asset.fieldItems.find(function (fieldItem) { return StorageGetter(fieldItem, ['model', 'options', 'child'], null); });
                    _this._resetComponentListHidden();
                    if (hasChild) {
                        _this._triggerParentChildUpdates(hasChild.model.name);
                    }
                    else {
                        _this._triggerFormValidation();
                    }
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopActionDialogComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Intercept the enter press to check if the form can be submitted
         * @param event
         */
        PopActionDialogComponent.prototype.onEnterPress = function (event) {
            var _this = this;
            event.preventDefault();
            event.stopPropagation();
            if (this.dom.state.validated) {
                this.dom.setTimeout("submit-form", function () {
                    return _this.onFormSubmit();
                }, 250);
            }
        };
        /**
         * The user can click a cancel btn to close the action dialog
         */
        PopActionDialogComponent.prototype.onFormCancel = function () {
            var _this = this;
            this.dom.state.loaded = false;
            this.dom.state.loading = true;
            this.dom.setTimeout("close-modal", function () {
                _this.dialog.close(-1);
            }, 250);
        };
        /**
         * The user will press enter or click a submit btn to submit the form
         */
        PopActionDialogComponent.prototype.onFormSubmit = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var params, method, request, response;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.dom.state.validated && !this.dom.state.pending)) return [3 /*break*/, 4];
                            this._onSubmissionStart();
                            params = this.ui.form.value;
                            if (!!this.action.facade) return [3 /*break*/, 1];
                            method = "do" + TitleCase(this.asset.http);
                            request = this.srv.request[method](this.asset.postUrl, params, 1, false);
                            request.subscribe(function (result) { return __awaiter(_this, void 0, void 0, function () {
                                var goToUrl, newGoToUrl;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            result = GetHttpResult(result);
                                            goToUrl = this.asset.goToUrl;
                                            this.asset.entity = result;
                                            return [4 /*yield*/, this._onSubmissionSuccess()];
                                        case 1:
                                            _a.sent();
                                            this.dialog.close(this.asset.entity);
                                            if (IsString(goToUrl, true)) {
                                                newGoToUrl = ParseLinkUrl(String(goToUrl).slice(), this.asset.entity);
                                                this.log.info("onFormSubmit:goToUrl", newGoToUrl);
                                                this.log.info("onFormSubmit:entity", this.asset.entity);
                                                this.srv.router.navigate([newGoToUrl]).catch(function (e) {
                                                    console.log(e);
                                                });
                                            }
                                            return [2 /*return*/, resolve(true)];
                                    }
                                });
                            }); }, function (err) {
                                _this._onSubmissionFail();
                                _this._setErrorMessage(GetHttpErrorMsg(err));
                                return resolve(false);
                            });
                            return [3 /*break*/, 4];
                        case 1: return [4 /*yield*/, Sleep(this.asset.facadeDuration)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this._onSubmissionSuccess()];
                        case 3:
                            _a.sent();
                            response = IsObject(params) ? params : {};
                            if (this.action.responseType === 'boolean') {
                                response = true;
                            }
                            else if (this.action.responseType === 'store') {
                                response = IsObject(this.action.store) ? this.action.store : {};
                            }
                            this.dialog.close(response);
                            return [2 /*return*/, resolve(true)];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopActionDialogComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Protected Method )                                      *
         *               These are protected instead of private so that they can be overridden          *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This fx will perform the intial config of this component
         * @private
         */
        PopActionDialogComponent.prototype._setInitialConfig = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (!_this.dom.state.loaded) {
                    _this.template.attach('container'); // container references the @viewChild('container')
                    if (IsObject(_this.data.core, true))
                        _this.core = _this.data.core;
                    if (IsObject(_this.data.action, true))
                        _this.action = _this.data.action;
                    if (IsString(_this.data.actionName, true))
                        _this.actionName = _this.data.actionName;
                    if (IsObject(_this.data.extension, true))
                        _this.extension = _this.data.extension;
                    if (!IsObject(_this.extension, true))
                        _this.extension = {};
                    // actionFieldItems.sort( DynamicSort( 'sort' ) );
                    if (!(IsString(_this.ui.submitText, true)))
                        _this.ui.submitText = 'Submit';
                    _this.dom.state.validated = false;
                    _this.dom.state.template = 'collection';
                    delete _this.data;
                    _this.dom.handler.bubble = function (core, event) { return __awaiter(_this, void 0, void 0, function () {
                        var newValue;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.log.event("bubble:handler", event);
                                    if (this.action.responseType === 'store')
                                        this._handleStoreEvent(event);
                                    if (!IsCallableFunction(this.action.onEvent)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.action.onEvent(core, Object.assign(Object.assign({}, event), {
                                            entity: this.asset.entity,
                                            form: this.ui.form,
                                            metadata: {
                                                fieldItems: this.asset.fieldItems
                                            }
                                        }))];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    // Todo:: Are we seeing this event here, on single input forms submit button is not be activated
                                    if (event.name === 'onKeyUp' || event.name === 'onInvalidChange') {
                                        this.dom.state.validated = false;
                                        this.dom.setTimeout("trigger-validation", function () {
                                            _this._triggerFormValidation();
                                        }, 250);
                                    }
                                    else if (IsValidFieldPatchEvent(this.core, event)) {
                                        if (event.config.name in this.asset.entity) {
                                            newValue = isNaN(event.config.control.value) ? event.config.control.value : +event.config.control.value;
                                            this.asset.entity[event.config.name] = newValue;
                                            if (this.asset.fieldItems.length > 1) {
                                                this._resetComponentListHidden();
                                                this.dom.setTimeout("update-relations", function () {
                                                    _this._triggerParentChildUpdates(event.config.name);
                                                }, 0);
                                            }
                                            else {
                                                this._triggerFormValidation();
                                            }
                                        }
                                    }
                                    // if( event.config.bubble || [ 'patch' ].includes( event.name ) ){
                                    this.events.emit(event);
                                    return [2 /*return*/];
                            }
                        });
                    }); };
                }
                return resolve(true);
            });
        };
        /**
         * This fx will perform additional config of this component that has initial config dependencies
         * @private
         */
        PopActionDialogComponent.prototype._setAdditionalConfig = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var goToUrl = IsString(_this.extension.goToUrl, true) ? _this.extension.goToUrl : (_this.action.goToUrl ? _this.action.goToUrl : null);
                if (goToUrl)
                    goToUrl = ParseModelValue(goToUrl, _this.core, true);
                var storage = IsObject(_this.core.entity, ['id', 'name']) && !_this.action.blockEntity ? _this.core.entity : (IsObject(_this.asset.entity, true) ? _this.asset.entity : {});
                var postUrl = IsString(_this.extension.postUrl, true) ? _this.extension.postUrl : (_this.action.postUrl ? ParseLinkUrl(String(_this.action.postUrl).slice(), storage) : _this.core.params.path);
                if (postUrl)
                    postUrl = ParseModelValue(postUrl, _this.core, true);
                if (+_this.action.facadeDuration)
                    _this.asset.facadeDuration = _this.action.facadeDuration;
                if (+_this.action.facadeDuration > 2000) {
                    _this.action.facadeDuration = 2000;
                }
                _this.asset.goToUrl = goToUrl;
                _this.asset.postUrl = postUrl;
                _this.ui.submitText = IsString(_this.action.submitText, true) ? _this.action.submitText : 'Submit';
                _this.asset.submitText = _this.action.submitText;
                if (IsString(_this.action.http))
                    _this.asset.http = _this.action.http;
                _this.ui.header = IsString(_this.action.header, true) ? _this.action.header : TitleCase(_this.action.name) + " " + SnakeToPascal(_this.core.repo.getDisplayName());
                return resolve(true);
            });
        };
        /**
         * This fx will trigger the form validation
         * @private
         */
        PopActionDialogComponent.prototype._buildFormGroup = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (IsArray(_this.asset.fieldItems, true)) {
                    _this.asset.fieldItems.map(function (field) {
                        if (field.config && field.config.control) {
                            _this.ui.form.addControl(field.config.name, field.config.control);
                            _this.asset.visible++;
                        }
                    });
                }
                return resolve(true);
            });
        };
        /**
         * This fx will take any patch event that occurs and store the key value pair
         * @param event
         * @private
         */
        PopActionDialogComponent.prototype._handleStoreEvent = function (event) {
            this.log.event("_handleStoreEvent", event);
            if (IsValidFieldPatchEvent(this.core, event)) {
                if (!(IsObject(this.action.store)))
                    this.action.store = {};
                this.action.store[event.config.name] = event.config.control.value;
            }
            this.log.info("_handleStoreEvent: store", this.action.store);
        };
        /**
         * This fx will trigger the form validation
         * @private
         */
        PopActionDialogComponent.prototype._triggerFormValidation = function () {
            var _this = this;
            this.dom.setTimeout("trigger-form-validation", function () {
                _this._validateForm().then(function (valid) {
                    _this.dom.state.validated = valid;
                });
            }, 50);
        };
        /**
         * The form needs to able to make api calls to verify info for certain fields
         * ToDo:: Allow the config to be able to pass in api validation calls for certain fields
         * @private
         */
        PopActionDialogComponent.prototype._validateForm = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.dom.state.validated = false;
                _this.dom.setTimeout("trigger-form-validation", null);
                _this.dom.setTimeout("validate-form", function () {
                    _this.ui.form.updateValueAndValidity();
                    setTimeout(function () {
                        _this.dom.state.validated = true; // mock stub for now
                        return resolve(_this.ui.form.valid);
                    }, 0);
                }, 0);
            });
        };
        /**
         * This fx will handle the error messaging
         * @param message
         * @private
         */
        PopActionDialogComponent.prototype._setErrorMessage = function (message) {
            this.dom.error.message = message;
            // this.dom.setTimeout('message', () => {
            //   this.dom.error.message = '';
            //   this.dom.setTimeout('message', null, 0);
            // }, 3000);
        };
        /**
         * This hook is called when the form is submitting
         * @private
         */
        PopActionDialogComponent.prototype._onSubmissionStart = function () {
            this.dom.setTimeout('message', null, 0);
            this.dom.error.message = '';
            this.dom.state.pending = true;
            this.ui.submitText = '';
        };
        /**
         * This hook is called when the form submission has failed
         * @private
         */
        PopActionDialogComponent.prototype._onSubmissionFail = function () {
            // Re-Enable Form and show error
            this.dom.state.pending = false;
            this.dom.state.template = 'fail';
            this.ui.submitText = IsString(this.action.submitText, true) ? this.action.submitText : 'Submit';
        };
        /**
         * This hook is called when the form has submitted successfully
         * @private
         */
        PopActionDialogComponent.prototype._onSubmissionSuccess = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var crudEvent;
                var _this = this;
                return __generator(this, function (_a) {
                    this.dom.state.template = 'success';
                    this.dom.state.pending = false;
                    this.core.repo.clearAllCache(this.name);
                    if (IsCallableFunction(this.action.callback)) {
                        this.dom.setTimeout("action-callback", function () { return __awaiter(_this, void 0, void 0, function () {
                            var actionEvent;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        actionEvent = {
                                            type: 'entity',
                                            source: this.name,
                                            name: this.action.name,
                                            entity: this.asset.entity,
                                            action: this.action,
                                            data: this.ui.form.value
                                        };
                                        return [4 /*yield*/, this.action.callback(this.core, actionEvent, this.dom)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, 0);
                    }
                    crudEvent = {
                        source: this.name,
                        method: 'create',
                        type: 'entity',
                        name: this.core.params.name,
                        internal_name: this.core.params.internal_name,
                        data: this.asset.entity
                    };
                    this.srv.events.sendEvent(crudEvent);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * This fx will render all of the fields that were passed through in the action config
         * @private
         */
        PopActionDialogComponent.prototype._renderFieldItems = function () {
            var _this = this;
            var componentList = [];
            this.asset.fieldItems.map(function (fieldItem, index) {
                if (fieldItem && IsObject(fieldItem.model, ['name']) && fieldItem.config && fieldItem.component) {
                    var existingValue = 'control' in fieldItem.config ? fieldItem.config.control.value : null;
                    _this.asset.entity[fieldItem.model.name] = existingValue;
                    if (_this.action.bubbleAll)
                        fieldItem.config.bubble = true;
                    var component = {
                        type: fieldItem.component,
                        inputs: {
                            config: fieldItem.config,
                            position: fieldItem.config['metadata'].position ? fieldItem.config['metadata'].position : 1,
                            hidden: IsArray(fieldItem.model.when, true) ? !(EvaluateWhenCondition(_this.core, fieldItem.model.when, _this.core)) : false,
                            when: IsArray(fieldItem.model.when, true) ? fieldItem.model.when : null
                        }
                    };
                    componentList.push(component);
                }
            });
            this.template.render(componentList, [], true);
        };
        /**
         * This fx will render the a component that was passed in through the action config
         * @private
         */
        PopActionDialogComponent.prototype._renderComponent = function () {
            var _this = this;
            if (IsObject(this.action.component, ['type']) && this.portal) {
                if (this.portal.attachedRef)
                    this.portal.detach();
                this.dom.setSubscriber('portal-events', null);
                var componentRef_1 = this.portal.attach(new portal.ComponentPortal(this.action.component.type));
                componentRef_1.instance['core'] = this.core;
                if (IsObject(this.action.component, ['inputs'])) {
                    Object.keys(this.action.component.inputs).map(function (key) {
                        componentRef_1.instance[key] = _this.action.component.inputs[key];
                    });
                }
                componentRef_1.changeDetectorRef.detectChanges();
                if (componentRef_1.instance['events']) {
                    this.dom.setSubscriber('portal-events', componentRef_1.instance['events'].subscribe(function (event) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (this.action.responseType === 'store') {
                                        this._handleStoreEvent(event);
                                    }
                                    if (!IsCallableFunction(this.action.onEvent)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.action.onEvent(this.core, Object.assign(Object.assign({}, event), {
                                            entity: this.asset.entity,
                                            form: this.ui.form,
                                            metadata: {
                                                fieldItems: this.asset.fieldItems
                                            }
                                        }))];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2: return [2 /*return*/];
                            }
                        });
                    }); }));
                }
            }
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This fx will resolve the config of action that pop is suppose to perform
         * @private
         */
        PopActionDialogComponent.prototype._setAction = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (IsObject(this.action, true)) {
                        if (!(IsDefined(this.action.responseType)))
                            this.action.responseType = 'form';
                        this.dom.state.hasComponent = IsObject(this.action.component, ['type']);
                        this.dom.state.hasFields = IsObject(this.action.fields, true);
                        return [2 /*return*/, resolve(true)];
                    }
                    else if (IsString(this.actionName) && IsObject(this.core.repo.model.action, [this.actionName]) && IsObject(this.core.repo.model.action[this.actionName], true)) {
                        this.action = this.core.repo.model.action[this.actionName];
                        if (!(IsDefined(this.action.responseType)))
                            this.action.responseType = 'form';
                        this.dom.state.hasComponent = IsObject(this.action.component, ['type']);
                        this.dom.state.hasFields = IsObject(this.action.fields, true);
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        this.dom.state.hasComponent = false;
                        this.dom.state.hasFields = false;
                        return [2 /*return*/, resolve(false)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * A helper method that sets build the field item definitions
         * @param entityConfig
         * @param goToUrl
         */
        PopActionDialogComponent.prototype._setFieldItems = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var actionFieldItems_1, needsResource_1, resource;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(IsObject(this.action, ['fields']) && IsObject(this.action.fields, true))) return [3 /*break*/, 4];
                            actionFieldItems_1 = {};
                            this.asset.fieldItems = [];
                            this.asset.fieldItemMap = {};
                            needsResource_1 = false;
                            Object.keys(this.action.fields).map(function (name) {
                                var field = {};
                                if (!_this.action.blockEntity && name in _this.core.repo.model.field) {
                                    field = _this.core.repo.model.field[name];
                                }
                                var model = {};
                                if (field.when)
                                    model.when = JsonCopy(field.when);
                                if (IsObject(field.model, true)) {
                                    model = Object.assign(Object.assign({}, model), field.model);
                                }
                                var actionTransformation;
                                if (IsObject(_this.action.fields[name], true)) {
                                    actionTransformation = IsString(_this.action.fields[name].transformation, true) ? _this.action.fields[name].transformation : null;
                                    model = Object.assign(Object.assign({}, model), _this.action.fields[name]);
                                }
                                // delete model.metadata;
                                delete model.transformation;
                                if (actionTransformation)
                                    model.transformation = actionTransformation; // only want to apply transformation if it was set directly on action
                                model.value = IsDefined(model.value) ? ParseModelValue(model.value, _this.core) : null;
                                // model.value = IsDefined( model.value ) ? ParseModelValue(model.value, core) : null;
                                if (!model.value && IsObject(model.options, ['defaultValue'])) {
                                    model.value = ParseModelValue(model.options.defaultValue, _this.core);
                                }
                                model.hidden = !EvaluateWhenConditions(_this.core, model.when, _this.core);
                                if (IsObject(_this.extension, true) && model.name in _this.extension) {
                                    model.value = ParseModelValue(_this.extension[model.name]);
                                    model.readonly = true;
                                    _this.asset.entity[model.name] = model.value;
                                }
                                model.tabOnEnter = true;
                                actionFieldItems_1[name] = model;
                                if (model.options && model.options.resource) {
                                    needsResource_1 = true;
                                }
                            });
                            if (!needsResource_1) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.core.repo.getUiResource(this.core)];
                        case 1:
                            resource = _a.sent();
                            if (IsObject(resource, true))
                                DeepMerge(this.core.resource, resource);
                            exports.PopLog.init(this.name, "doAction:needed resource", resource);
                            Object.keys(actionFieldItems_1).map(function (name) {
                                var fieldItem = actionFieldItems_1[name];
                                var actionItemModel = FieldItemModel(_this.core, JsonCopy(fieldItem), false);
                                var actionItem = _this.srv.field.buildCoreFieldItem(_this.core, actionItemModel);
                                if (IsObject(actionItem.config, true)) {
                                    actionItem.config.facade = true;
                                    if (IsObject(actionItem.config.patch)) {
                                        var patch = actionItem.config.patch;
                                        patch.duration = 0;
                                        patch.path = null;
                                        patch.displayIndicator = false;
                                    }
                                }
                                _this.asset.fieldItemMap[name] = _this.asset.fieldItems.length;
                                _this.asset.fieldItems.push(actionItem);
                            });
                            return [3 /*break*/, 3];
                        case 2:
                            // no metadata was needed for any of these fields
                            Object.keys(actionFieldItems_1).map(function (name) {
                                var actionItemModel = FieldItemModel(_this.core, actionFieldItems_1[name], false);
                                var actionItem = _this.srv.field.buildCoreFieldItem(_this.core, actionItemModel);
                                if (IsObject(actionItem.config, true)) {
                                    actionItem.config.facade = true;
                                    if (IsObject(actionItem.config.patch)) {
                                        var patch = actionItem.config.patch;
                                        patch.duration = 0;
                                        patch.path = null;
                                        patch.displayIndicator = false;
                                    }
                                }
                                _this.asset.fieldItemMap[name] = _this.asset.fieldItems.length;
                                _this.asset.fieldItems.push(actionItem);
                            });
                            exports.PopTemplate.clear();
                            _a.label = 3;
                        case 3:
                            // console.log('this.asset.fieldItems', this.asset.fieldItems);
                            this.asset.fieldItems.map(function (fieldItem) {
                                if (IsArray(StorageGetter(fieldItem, ['config', 'options', 'values']), true)) {
                                    // console.log('here', fieldItem);
                                    fieldItem.config.height = 180;
                                }
                            });
                            return [2 /*return*/, resolve(true)];
                        case 4: return [2 /*return*/, resolve(false)];
                    }
                });
            }); });
        };
        /**
         * Determine if field should be auto filled with the first item in the list
         * @param name
         */
        PopActionDialogComponent.prototype._fieldHasAutoFill = function (name) {
            if (name in this.asset.fieldItemMap && this.asset.fieldItems[this.asset.fieldItemMap[name]].model && this.asset.fieldItems[this.asset.fieldItemMap[name]].model.options) {
                if (this.asset.fieldItems[this.asset.fieldItemMap[name]].model.autoFill) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Determine if field has a child relation in the list
         * @param name
         */
        PopActionDialogComponent.prototype._fieldHasChild = function (name) {
            if (name in this.asset.fieldItemMap && this.asset.fieldItems[this.asset.fieldItemMap[name]].model && this.asset.fieldItems[this.asset.fieldItemMap[name]].model.options) {
                if (this.asset.fieldItems[this.asset.fieldItemMap[name]].model.options.child) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Get a linear list of the parent child relations from a given point
         * @param self the name to start from (usually the field that has just been changed by user)
         * @param list
         */
        PopActionDialogComponent.prototype._getRelationList = function (name, list) {
            if (list === void 0) { list = []; }
            var item;
            if (name && name in this.asset.fieldItemMap) {
                item = this.asset.fieldItems[this.asset.fieldItemMap[name]];
                if (IsObject(item, ['config', 'model'])) {
                    list.push({
                        name: item.config.name,
                        autoFill: this._fieldHasAutoFill(name),
                    });
                    if (this._fieldHasChild(name)) {
                        this._getRelationList(this.asset.fieldItems[this.asset.fieldItemMap[name]].model.options.child, list);
                    }
                }
            }
            return list;
        };
        /**
         * Whenever a update to the entity happens the fields in the group should be re-evaluated if there are when conditionals set
         * @private
         */
        PopActionDialogComponent.prototype._resetComponentListHidden = function () {
            var _this = this;
            var name;
            this.template.refs.filter(function (componentRef) {
                return IsObject(componentRef.instance.config, true) && IsArray(componentRef.instance.when, true);
            }).map(function (componentRef) {
                name = componentRef.instance.config.name;
                if (name && name in _this.asset.fieldItemMap) {
                    componentRef.instance.hidden = !EvaluateWhenCondition(_this.asset, componentRef.instance.when);
                }
            });
        };
        /**
         * This fx will manage if the form fields have parent child relations, ie if an account select needs to be filtered by a client select that exists in the form
         * @param name
         * @private
         */
        PopActionDialogComponent.prototype._triggerParentChildUpdates = function (name) {
            if (this._fieldHasChild(name)) {
                var values = void 0;
                var child_fk = void 0;
                var childField_1;
                var autoFill_1 = false;
                var set = void 0;
                var resource = void 0;
                var relations = this._getRelationList(name);
                relations.some(function (relation) {
                    if (relation.autoFill) {
                        autoFill_1 = true;
                        return true;
                    }
                });
                if (name && name in this.asset.fieldItemMap) {
                    child_fk = this.asset.fieldItems[this.asset.fieldItemMap[name]].model.options.child;
                    if (child_fk && child_fk in this.asset.fieldItemMap) {
                        childField_1 = this.asset.fieldItems[this.asset.fieldItemMap[child_fk]];
                        if (childField_1.model.form === 'select') {
                            if (childField_1.model.options.resource) {
                                if (IsObject(this.core.resource[childField_1.model.options.resource], ['data_values'])) {
                                    resource = this.core.resource[childField_1.model.options.resource].data_values;
                                }
                            }
                            if (IsArray(resource, true)) {
                                values = ConvertArrayToOptionList(resource, {
                                    // ensure that an option shows up in list in case other conditions remove it, aka it has been archived
                                    prevent: [],
                                    // parent means this options should all have a common field trait like client_fk, account_fk ....
                                    parent: childField_1.model.options.parent ? {
                                        field: childField_1.model.options.parent,
                                        value: this.asset.entity[childField_1.model.options.parent]
                                    } : null,
                                    empty: childField_1.model.options.empty ? childField_1.model.options.empty : null,
                                });
                            }
                            else {
                                values = [];
                            }
                            if (autoFill_1 && values.length) {
                                set = values[values.length - 1].value;
                            }
                            else {
                                set = null;
                            }
                            childField_1.config.options.values = values;
                            autoFill_1 = autoFill_1 && values.length ? values[0].value : null;
                            if (typeof childField_1.config.triggerOnChange === 'function')
                                childField_1.config.triggerOnChange(set);
                            this.dom.setTimeout("clear-message-" + child_fk, function () {
                                if (typeof childField_1.config.clearMessage === 'function') {
                                    childField_1.config.clearMessage();
                                }
                            }, 0);
                        }
                    }
                }
            }
            this._triggerFormValidation();
        };
        return PopActionDialogComponent;
    }(PopExtendDynamicComponent));
    PopActionDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-action-dialog',
                    template: "<div [ngClass]=\"{'sw-hidden': !dom.state.loaded}\" class=\"pop-action-close-btn sw-pointer\" (click)=\"onFormCancel();\">\n  <mat-icon>close</mat-icon>\n</div>\n<div class=\"pop-action-container\" [ngClass]=\"{'sw-hidden': !dom.state.loaded}\">\n  <div class=\"pop-action-dialog-header\" *ngIf=\"ui.header\">{{ui.header}}</div>\n  <div class=\"pop-action-dialog-content\">\n    <form (keyup.enter)=\"onEnterPress($event);\" [formGroup]=\"ui.form\" [className]=\"dom.state.pending ? 'pop-action-dialog-field-lock' : ''\">\n      <div class=\"import-flex-row\">\n        <div class=\"import-flex-column-break\" [ngClass]=\"{'sw-hidden': !dom.state.hasFields}\">\n          <template #container></template>\n        </div>\n        <div class=\"pop-action-spacer\" *ngIf=\"dom.state.hasFields && dom.state.hasComponent\" [style.width.px]=\"20\">\n\n        </div>\n        <div class=\"import-flex-column-break pop-action-portal-container\" [ngClass]=\"{'sw-hidden': !dom.state.hasComponent}\">\n          <ng-template [cdkPortalOutlet]></ng-template>\n        </div>\n      </div>\n    </form>\n  </div>\n  <div class=\"pop-action-dialog-buttons\">\n    <button class=\"pop-action-dialog-cancel\" mat-raised-button (click)=\"onFormCancel();\" [disabled]=\"dom.state.pending\">\n      Cancel\n    </button>\n    <button class=\"pop-action-dialog-other\" mat-raised-button color=\"accent\" (click)=\"onFormSubmit()\" [disabled]=\"!dom.state.validated || dom.state.pending\">\n      <span *ngIf=\"!dom.state.pending\">{{ui.submitText}}</span>\n      <div *ngIf=\"dom.state.pending\">\n        <mat-spinner diameter=\"20\"></mat-spinner>\n      </div>\n    </button>\n  </div>\n  <div class=\"pop-action-dialog-message-layout\" *ngIf=\"dom.state.success || dom.error?.message\" [@slideInOut]>\n    <div *ngIf=\"dom.state.success\" class=\"pop-action-dialog-success\" [innerHTML]=dom.state.success></div>\n    <div *ngIf=\"dom.error.message\" class=\"pop-action-dialog-errors\" [innerHTML]=dom.error.message></div>\n  </div>\n</div>\n<div class=\"pop-action-spinner-box\" *ngIf=\"dom.state.loading\">\n  <lib-main-spinner></lib-main-spinner>\n</div>\n",
                    animations: [
                        slideInOut
                    ],
                    styles: [".pop-action-container{flex:1;padding-bottom:50px}.pop-action-close-btn{position:absolute;top:-20px;right:-20px}.pop-action-dialog-header{font-weight:500;text-align:center;margin-bottom:var(--gap-s)}.pop-action-dialog-content{position:relative;display:block;width:100%;min-height:30px;margin-bottom:10px;padding-bottom:50px}.pop-action-dialog-content .pop-action-dialog-field{margin-bottom:10px}.pop-action-dialog-content .pop-action-dialog-field-lock{pointer-events:none!important}.pop-action-dialog-content .pop-action-dialog-field-spinner{position:absolute;left:50%;top:50%;margin-left:-22px;margin-top:-40px}.pop-action-dialog-buttons{margin-top:20px;margin-bottom:10px;display:flex;justify-content:flex-end}.pop-action-dialog-buttons .pop-action-dialog-cancel{order:1;display:flex;align-items:center;justify-content:center;min-height:35px;min-width:120px}.pop-action-dialog-buttons .pop-action-dialog-other{order:2;display:flex;align-items:center;justify-content:center;margin-left:10px;min-width:120px;min-height:35px}.pop-action-dialog-errors{color:var(--warn);text-align:center;word-break:break-word}.pop-action-dialog-success{color:var(--success);text-align:center;word-break:break-word}.pop-action-dialog-message-layout{display:flex;flex-direction:row;min-height:40px;align-items:center;justify-content:center;text-align:center;margin-top:var(--gap-xl)}.pop-action-dialog-disabled{pointer-events:none}.pop-action-spinner-box{height:150px}.import-flex-column-break{min-width:350px;max-width:350px}.pop-action-portal-container{padding-top:18px}"]
                },] }
    ];
    PopActionDialogComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: i1$2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] }
    ]; };
    PopActionDialogComponent.propDecorators = {
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }],
        portal: [{ type: i0.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }],
        action: [{ type: i0.Input }],
        actionName: [{ type: i0.Input }],
        extension: [{ type: i0.Input }]
    };

    var PopEntityActionService = /** @class */ (function (_super) {
        __extends(PopEntityActionService, _super);
        function PopEntityActionService() {
            var _this = _super.call(this) || this;
            _this.name = 'PopEntityActionService';
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                field: exports.ServiceInjector.get(PopEntityUtilFieldService)
            };
            _this.asset = {
                dialogRef: undefined,
                field: exports.ServiceInjector.get(PopEntityUtilFieldService)
            };
            return _this;
        }
        PopEntityActionService.prototype.do = function (core, action, extension, blockEntity) {
            var _this = this;
            if (blockEntity === void 0) { blockEntity = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (!this.asset.dialogRef && this._checkArgs(core, action)) {
                        this.asset.dialogRef = this.srv.dialog.open(PopActionDialogComponent, {
                            disableClose: true,
                            width: extension && extension.width ? (IsNumber(extension.width) ? extension.width + "px" : "" + extension.width) : '400px',
                            data: {
                                core: core,
                                extension: extension,
                                actionName: IsString(action, true) ? action : null,
                                action: IsObject(action, true) ? action : null,
                            },
                            panelClass: 'sw-mat-dialog-flex'
                        });
                        this.dom.setSubscriber('pop-action-dialog-close', this.asset.dialogRef.beforeClosed().subscribe(function (res) {
                            res = GetHttpResult(res);
                            _this.asset.dialogRef = null;
                            return resolve(res);
                        }));
                    }
                    else {
                        return [2 /*return*/, resolve(null)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        PopEntityActionService.prototype._checkArgs = function (core, action, extension) {
            if (IsObject(core, ['params', 'access'])) {
                if (IsString(action, true) || IsObject(action, ['name'])) {
                    return true;
                }
            }
            return false;
        };
        /**
         * A helper method that sets up a FieldGroupConfig for a create/new pop-table-dialog
         * @param entityConfig
         * @param goToUrl
         */
        PopEntityActionService.prototype.doAction = function (core, actionName, extension) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var action_1, actionItems_1, needsResource_1, model_1, actionFieldItems_1, resource, actionConfig;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            exports.PopTemplate.buffer();
                            if (!(IsObject(core.repo.model.action, [actionName]) && IsObject(core.repo.model.action[actionName], true))) return [3 /*break*/, 4];
                            action_1 = core.repo.model.action[actionName];
                            exports.PopLog.info(this.name, "doAction", { core: core, actionName: actionName, action: action_1, extension: extension });
                            actionItems_1 = [];
                            needsResource_1 = false;
                            actionFieldItems_1 = {};
                            // start with getting fields labeled for new doAction
                            if (IsObject(action_1.fields, true)) {
                                Object.keys(action_1.fields).map(function (name) {
                                    var field = {};
                                    if (name in core.repo.model.field) {
                                        field = core.repo.model.field[name];
                                    }
                                    model_1 = {};
                                    if (field.when)
                                        model_1.when = JsonCopy(field.when);
                                    if (IsObject(field.model, true)) {
                                        model_1 = Object.assign(model_1, field.model);
                                    }
                                    var actionTransformation;
                                    if (IsObject(action_1.fields[name], true)) {
                                        actionTransformation = IsString(action_1.fields[name].transformation, true) ? action_1.fields[name].transformation : null;
                                        model_1 = Object.assign(model_1, action_1.fields[name]);
                                    }
                                    // delete model.metadata;
                                    delete model_1.transformation;
                                    if (actionTransformation)
                                        model_1.transformation = actionTransformation; // only want to apply transformation if it was set directly on action
                                    model_1.value = IsDefined(model_1.value) ? ParseModelValue(model_1.value, core) : null;
                                    // model.value = IsDefined( model.value ) ? ParseModelValue(model.value, core) : null;
                                    if (!model_1.value && IsObject(model_1.options, ['defaultValue'])) {
                                        model_1.value = ParseModelValue(model_1.options.defaultValue, core);
                                    }
                                    model_1.hidden = !EvaluateWhenConditions(core, model_1.when, core);
                                    if (IsObject(extension, true) && model_1.name in extension) {
                                        model_1.value = ParseModelValue(extension[model_1.name]);
                                        model_1.readonly = true;
                                    }
                                    model_1.tabOnEnter = true;
                                    actionFieldItems_1[name] = model_1;
                                    if (model_1.options && model_1.options.resource) {
                                        needsResource_1 = true;
                                    }
                                });
                            }
                            if (!needsResource_1) return [3 /*break*/, 2];
                            return [4 /*yield*/, core.repo.getUiResource(core)];
                        case 1:
                            resource = _a.sent();
                            if (IsObject(resource, true))
                                DeepMerge(core.resource, resource);
                            exports.PopLog.init(this.name, "doAction:needed resource", resource);
                            Object.keys(actionFieldItems_1).map(function (name) {
                                var actionItemModel = FieldItemModel(core, actionFieldItems_1[name], false);
                                var actionItem = _this.srv.field.buildCoreFieldItem(core, actionItemModel);
                                if (IsObject(actionItem.config, true)) {
                                    actionItem.config.facade = true;
                                    if (IsObject(actionItem.config.patch)) {
                                        var patch = actionItem.config.patch;
                                        patch.duration = 0;
                                        patch.path = null;
                                        patch.displayIndicator = false;
                                    }
                                }
                                actionItems_1.push(actionItem);
                            });
                            exports.PopTemplate.clear();
                            console.log('actionItems', actionItems_1);
                            return [2 /*return*/, resolve(this.getActionDialogConfig(core, action_1, actionItems_1, core.resource))];
                        case 2:
                            // no metadata was needed for any of these fields
                            Object.keys(actionFieldItems_1).map(function (name) {
                                var actionItemModel = FieldItemModel(core, actionFieldItems_1[name], false);
                                var actionItem = _this.srv.field.buildCoreFieldItem(core, actionItemModel);
                                if (IsObject(actionItem.config, true)) {
                                    actionItem.config.facade = true;
                                    if (IsObject(actionItem.config.patch)) {
                                        var patch = actionItem.config.patch;
                                        patch.duration = 0;
                                        patch.path = null;
                                        patch.displayIndicator = false;
                                    }
                                }
                                actionItems_1.push(actionItem);
                            });
                            exports.PopTemplate.clear();
                            console.log('actionItems', actionItems_1);
                            actionConfig = this.getActionDialogConfig(core, action_1, actionItems_1, (IsObject(core.entity, true) ? core.entity.ui : {}));
                            exports.PopLog.info(this.name, "doAction: config", actionConfig);
                            return [2 /*return*/, resolve(actionConfig)];
                        case 3: return [3 /*break*/, 5];
                        case 4:
                            exports.PopTemplate.clear();
                            exports.PopTemplate.error({ message: TitleCase(actionName) + " not configured.", code: 500 });
                            return [2 /*return*/, resolve(null)];
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Callback helper to newEntity
         * @param entityConfig
         * @param fields
         * @param metadata
         * @param goToUrl
         */
        PopEntityActionService.prototype.getActionDialogConfig = function (core, action, actionFieldItems, metadata, extension) {
            if (!IsObject(extension))
                extension = {};
            actionFieldItems.sort(DynamicSort('sort'));
            var goToUrl = IsString(extension.goToUrl, true) ? extension.goToUrl : (action.goToUrl ? action.goToUrl : null);
            if (goToUrl)
                goToUrl = ParseModelValue(goToUrl, core, true);
            var postUrl = IsString(extension.postUrl, true) ? extension.postUrl : (action.postUrl ? ParseLinkUrl(String(action.postUrl).slice(), (IsObject(core.entity, true) ? core.entity : {})) : core.params.path);
            if (postUrl)
                postUrl = ParseModelValue(postUrl, core, true);
            var dialogConfig = new FieldItemGroupConfig({
                id: action.name,
                params: core.params,
                fieldItems: actionFieldItems,
                metadata: metadata,
                inDialog: {
                    postUrl: postUrl,
                    postUrlVersion: 1,
                    submit: TitleCase(action.submitText),
                    title: action.header ? action.header : TitleCase(action.name) + " " + SnakeToPascal(core.repo.getDisplayName()),
                    goToUrl: goToUrl,
                    callback: IsCallableFunction(action.callback) ? action.callback : null
                }
            });
            exports.PopLog.init(this.name, "ActionDialog", dialogConfig);
            return dialogConfig;
        };
        PopEntityActionService.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityActionService;
    }(PopExtendService));
    PopEntityActionService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntityActionService_Factory() { return new PopEntityActionService(); }, token: PopEntityActionService, providedIn: "root" });
    PopEntityActionService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopEntityActionService.ctorParameters = function () { return []; };

    var PopEntitySchemeCustomComponent = /** @class */ (function (_super) {
        __extends(PopEntitySchemeCustomComponent, _super);
        function PopEntitySchemeCustomComponent(el, _domRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopEntitySchemeCustomComponent';
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                action: exports.ServiceInjector.get(PopEntityActionService),
                tab: undefined,
            };
            _this.asset = {
                dialogRef: undefined
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.template.attach('container');
                                return [4 /*yield*/, this._setInitialConfig()];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this._setInitialState()];
                            case 2:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!IsObject(this.config, true)) return [3 /*break*/, 3];
                                return [4 /*yield*/, this._setInitialProceed()];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this._renderComponent()];
                            case 2:
                                _a.sent();
                                _a.label = 3;
                            case 3: return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * INit
         */
        PopEntitySchemeCustomComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * This fx will present a pop up for the user to configure the options of this widget
         */
        PopEntitySchemeCustomComponent.prototype.onEditComponentOptions = function () {
            var _this = this;
            // TODO implement like edit popup
            this.dom.setTimeout("edit-item", function () { return __awaiter(_this, void 0, void 0, function () {
                var actionConfig, result;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!StorageGetter(this.config, ['option', 'component', 'type'], null)) return [3 /*break*/, 2];
                            actionConfig = {
                                name: 'widgets',
                                header: 'Edit Widget',
                                component: {
                                    type: this.config.option.component.type,
                                    inputs: {
                                        config: JsonCopy(this.config)
                                    }
                                },
                                // onEvent: (core: CoreConfig, event: PopBaseEventInterface): Promise<boolean> => {
                                //   return new Promise(async(resolve) => {
                                //     return resolve(true);
                                //   });
                                // },
                                submitText: 'SAVE',
                                facade: true,
                                postUrl: null,
                                blockEntity: true,
                                responseType: 'store', // track all the key-value pairs that are updated
                            };
                            return [4 /*yield*/, this.srv.action.do(this.core, actionConfig)];
                        case 1:
                            result = _a.sent();
                            console.log('result', result);
                            if (IsObject(result, true)) {
                                this.dom.setTimeout("reset-component", function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this._renderComponent()];
                                            case 1:
                                                _a.sent();
                                                this.log.info("options-reset:complete");
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }, 0);
                            }
                            return [3 /*break*/, 2];
                        case 2: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * This user can click on a refresh icon to refresh the widget
         */
        PopEntitySchemeCustomComponent.prototype.onRefreshComponent = function () {
            var _this = this;
            this.dom.state.loaded = false;
            this.dom.state.loader = true;
            this.template.clear();
            this.dom.setTimeout("refresh-component", function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._renderComponent()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); }, 500);
        };
        /**
         * Handle the bubble events that come up
         * @param event
         */
        PopEntitySchemeCustomComponent.prototype.onBubbleEvent = function (name, extension, event) {
            if (!event)
                event = { source: this.name, type: 'field', name: name };
            if (extension)
                event = Object.assign(Object.assign({}, event), extension);
            this.log.event("bubbleEvent", event);
            this.events.emit(event);
            return true;
        };
        /**
         * Clean up the dom of this component
         */
        PopEntitySchemeCustomComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                   Base Protected Methods                                     *
         *                                    ( Protected Method )                                      *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Set the initial config
         * Intended to be overridden per field
         */
        PopEntitySchemeCustomComponent.prototype._setInitialConfig = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.id = IsObject(_this.config, ['id']) ? _this.config.id : PopUid();
                if (!IsString(_this.internal_name))
                    _this.internal_name = 'profile_specialist_1';
                if (!IsObject(_this.config, true)) {
                    var params = exports.PopSchemeComponent.getParams(_this.internal_name);
                    _this.config = new SchemeComponentConfig({
                        name: params.name ? params.name : 'Custom Component',
                        internal_name: _this.internal_name,
                        component_id: _this.componentId,
                        component: exports.PopSchemeComponent.getComponent(_this.internal_name),
                        option: exports.PopSchemeComponent.getOption(_this.internal_name),
                        setting: exports.PopSchemeComponent.getOption(_this.internal_name),
                        resource: exports.PopSchemeComponent.getResource(_this.internal_name),
                        param: exports.PopSchemeComponent.getResource(_this.internal_name),
                    });
                }
                return resolve(true);
            });
        };
        /**
         * Set the initial config
         * Intended to be overridden per field
         */
        PopEntitySchemeCustomComponent.prototype._setInitialState = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var isOptionComponent = StorageGetter(_this.config, ['option', 'component']);
                _this.dom.state.hasOptions = _this.config.setting.edit && isOptionComponent && isOptionComponent.type ? true : false;
                _this.dom.state.hasRefresh = _this.config.setting.refresh;
                _this.dom.state.isEditable = _this.config.setting.edit ? true : false;
                // const userPreferences = StorageGetter( this.core, ['preference', this.config.id], {} );
                // if( IsObject( userPreferences, true ) ){
                //   this.config.option = { ...this.config.option, ...userPreferences.option };
                // }
                return resolve(true);
            });
        };
        /**
         * Set the initial config
         * Intended to be overridden per field
         */
        PopEntitySchemeCustomComponent.prototype._setInitialProceed = function () {
            return new Promise(function (resolve) {
                return resolve(true);
            });
        };
        /**
         * This fx will render the custom component for this widget
         * @private
         */
        PopEntitySchemeCustomComponent.prototype._renderComponent = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.dom.setTimeout("render-widget", function () {
                    if (IsObject(_this.config.component, ['type'])) {
                        _this.template.render([_this.config.component], ['core', 'position', 'config']);
                    }
                    _this.dom.ready();
                }, 0);
                return resolve(true);
            });
        };
        return PopEntitySchemeCustomComponent;
    }(PopExtendDynamicComponent));
    PopEntitySchemeCustomComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-entity-scheme-custom-component',
                    template: "<div class=\"entity-custom-component-container import-flex-column\">\n  <div class=\"entity-custom-component-header mat-body\" style=\"flex-grow:0\">\n    <div class=\"entity-custom-component-title\">{{config?.name}}</div>\n    <div class=\"entity-custom-component-spacer\"></div>\n    <div class=\"entity-custom-component-refresh\" *ngIf=\"dom.state.hasRefresh\">\n      <mat-icon class=\"sw-pointer\" (mousedown)=\"onRefreshComponent()\">refresh</mat-icon>\n    </div>\n    <div class=\"entity-custom-component-edit\" *ngIf=\"dom.state.hasOptions\">\n      <mat-icon class=\"sw-pointer\" (mousedown)=\"onEditComponentOptions()\">settings</mat-icon>\n    </div>\n\n  </div>\n  <div class=\"entity-custom-component-loader\" *ngIf=\"dom.state.loader\">\n    <lib-main-spinner></lib-main-spinner>\n  </div>\n  <div class=\"entity-custom-component-content\">\n    <ng-template #container></ng-template>\n  </div>\n</div>\n",
                    styles: [".entity-custom-component-container{position:relative;flex:1;min-height:300px;margin-top:var(--gap-m);margin-bottom:var(--gap-m);padding:var(--gap-xs);border:1px solid var(--border)}.entity-custom-component-header{display:flex;flex-grow:1;min-height:50px;align-items:center;justify-content:space-between;box-sizing:border-box;clear:both;background:var(--background-main-menu);color:var(--foreground-base);padding:0 var(--gap-sm)}.entity-custom-component-title{font-weight:700}.entity-custom-component-delete mat-icon,.entity-custom-component-edit mat-icon,.entity-custom-component-refresh mat-icon{font-size:20px;color:var(--foreground-disabled);position:relative;top:-2px;cursor:pointer}.entity-custom-component-spacer{flex-grow:1}.entity-custom-component-content{flex:1;overflow-x:hidden;overflow-y:auto;padding:var(--gap-sm)}.entity-custom-component-loader{height:150px}"]
                },] }
    ];
    PopEntitySchemeCustomComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopTabMenuService }
    ]; };
    PopEntitySchemeCustomComponent.propDecorators = {
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }],
        componentId: [{ type: i0.Input }],
        config: [{ type: i0.Input }],
        section: [{ type: i0.Input }]
    };

    var PopEntityTabComponent = /** @class */ (function (_super) {
        __extends(PopEntityTabComponent, _super);
        /**
         * @param el
         * @param cdr
         * @param route
         * @param _tabRepo - transfer
         * @param _domRepo - transfer
         */
        function PopEntityTabComponent(el, cdr, route, _tabRepo, _domRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            _this.route = route;
            _this._tabRepo = _tabRepo;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityTabComponent';
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                router: exports.ServiceInjector.get(i1.Router),
                events: exports.ServiceInjector.get(PopEntityEventService),
                entity: exports.ServiceInjector.get(PopEntityService),
                tab: undefined,
            };
            _this.asset = {
                scheme: undefined,
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        // Require a CoreConfig
                        // Pull in the route extension settings
                        if (!this.extension)
                            this.extension = {};
                        if (this.route.snapshot.data && Object.keys(this.route.snapshot.data).length) {
                            Object.keys(this.route.snapshot.data).map(function (key) {
                                _this.extension[key] = _this.route.snapshot.data[key];
                            });
                        }
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        // Require a CoreConfig
                        this._setCore().then(function () {
                            if (!(IsObject(_this.core.entity, ['id'])))
                                _this.srv.router.navigate(['/system/route'], { skipLocationChange: true });
                            // #1: Enforce a CoreConfig && TabConfig
                            // this.core = IsObjectThrowError(this.core, true, `${this.name}:configureDom: - this.core`) ? this.core : null;
                            _this._setTab().then(function () {
                                // set the outer height boundary of this component
                                _this.dom.overhead = _this.tab.wrap ? 40 : 10;
                                _this.dom.overhead = _this.tab.overhead ? _this.dom.overhead + _this.tab.overhead : _this.dom.overhead;
                                _this.dom.height.default = window.innerHeight - 70;
                                _this.dom.setHeight(_this.dom.height.default, 150);
                                // #3: Set tab group container
                                _this.tab.groups = {};
                                // #4: Transfer in the ui rescources
                                // if( IsObject(this.core.entity, true) && IsObject(this.core.entity.ui, true) ){
                                //   Object.keys(this.core.entity.ui).map((key: string) => {
                                //     this.ui.resource[ key ] = this.core.entity.ui[ key ]; // ? maybe this should make a copy
                                //   });
                                // }
                                // #5: Build a view with a scheme or a model
                                _this.asset.scheme = IsObject(_this.core.entity, true) && _this.core.entity.scheme_id && IsObject(_this.core.resource.scheme, ['data']) ? CleanObject(_this.core.resource.scheme.data) : null;
                                // console.log( 'this.asset.scheme', this.asset.scheme );
                                // #6: Bind Event handlers
                                _this.dom.handler.core = function (core, event) { return _this._coreEventHandler(event); };
                                // #7: Build the view
                                _this.tab.view = _this._buildTabView();
                                // #8: Register the outlet so the tabRepo can reset the view if needed
                                if (true || _this.tab.syncPositions)
                                    _this.srv.tab.registerOutletReset(function (position) {
                                        if (position === void 0) { position = null; }
                                        return _this.onResetView(position);
                                    });
                                _this._callOnLoadEvent();
                                _this.dom.setTimeout("determine-layout", function () {
                                    _this._determineLayout();
                                }, 0);
                                return resolve(true);
                            });
                        });
                        return [2 /*return*/];
                    });
                }); });
            };
            _this.dom.unload = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.srv.tab.showAsLoading(false);
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        /**
         * Setup this component
         */
        PopEntityTabComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Bubble event handler
         * @param event
         */
        PopEntityTabComponent.prototype.onBubbleEvent = function (event) {
            var _this = this;
            this.log.event("onBubbleEvent", event);
            if (event.type === 'field_group' && event.name === 'init') {
                this.tab.groups[event.id] = event.group;
                this._callOnEvent(event, { reset: true });
            }
            else if (event.type === 'sidebyside' && event.name === 'portal') {
                var entityParams = this.srv.entity.getEntityParamsWithPath(String(event.data).split('/')[0], +String(event.data).split('/')[1]);
                if (entityParams) {
                    this.onViewEntityPortal(entityParams.internal_name, entityParams.entityId);
                }
            }
            else if (IsValidFieldPatchEvent(this.core, event)) {
                this.log.event("IsValidFieldPatchEvent", event);
                if (event.config.name === 'name' || event.config.name === 'label') {
                    this.srv.tab.updateName(event.config.control.value);
                }
                var reset = this._needsPositionReset(event);
                if (!reset) {
                    if (typeof this.tab.onEvent === 'function') {
                        this._callOnEvent(event);
                    }
                }
                else {
                    if (typeof this.tab.onEvent === 'function') {
                        this._callOnEvent(event);
                    }
                    this.srv.events.sendEvent(event);
                }
            }
            else if (event.type === 'context_menu') {
                if (event.name === 'portal' && event.internal_name && event.id) {
                    setTimeout(function () {
                        _this.onViewEntityPortal(event.internal_name, +event.id);
                    }, 0);
                }
            }
            else if (event.type === 'dom') {
                if (event.name === 'refresh') {
                    setTimeout(function () {
                        _this.onResetView(+event.position);
                    }, 0);
                }
            }
        };
        /**
         * Triggers when the window is resized
         */
        PopEntityTabComponent.prototype.onWindowResize = function () {
            var _this = this;
            this.dom.setTimeout('window-resize', function () {
                _this._determineLayout();
                _this.srv.tab.resetTab();
            }, 500);
        };
        /**
         * Triggers when a user clicks on an entityId link to see the details of that entityId in a modal
         * @param internal_name
         * @param id
         */
        PopEntityTabComponent.prototype.onViewEntityPortal = function (internalName, entityId) {
            var _this = this;
            // ToDo:: Due to circular injection errors, the portals are not working
            this.tab.view.map(function (column) {
                column.reset.next('scrollTop');
            });
            // this.srv.router.navigateByUrl(`entities/fields/${entityId}`).catch(e => true);
            exports.PopPortal.view(internalName, entityId).then(function (changed) {
                if (changed) {
                    _this.dom.refreshing();
                    _this.srv.tab.refreshEntity(_this.core.params.entityId, _this.dom.repo, {}, 'PopEntityTabComponent:viewEntityPortal').then(function (res) {
                        _this.dom.ready();
                    });
                }
            });
        };
        /**
         * Trigger to reset the view
         * @param position
         */
        PopEntityTabComponent.prototype.onResetView = function (position) {
            var _this = this;
            if (position === void 0) { position = null; }
            if (this.dom.state.loaded) {
                if (position === null) {
                    this.tab.view.map(function (section) {
                        section.reset.next(true);
                    });
                }
                else {
                    this.tab.view[position].reset.next(true);
                }
                setTimeout(function () {
                    _this.dom.ready();
                }, 0);
            }
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityTabComponent.prototype.ngOnDestroy = function () {
            this._callUnloadEvent();
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Protected Method )                                      *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Tie in hook that is called when ever a event if fired
         *
         */
        PopEntityTabComponent.prototype._callOnEvent = function (event, options) {
            if (options === void 0) { options = {}; }
            if (this.tab && typeof this.tab.onEvent === 'function') {
                event.tab = this.tab;
                // event.component = component;
                // event.core = this.core;
                if (options.reset)
                    event.cdr = this.cdr;
                this.tab.onEvent.bind(this)(this.core, event);
            }
        };
        /**
         * Tie in hook that is called when the tab is initialized
         *
         */
        PopEntityTabComponent.prototype._callOnLoadEvent = function () {
            if (this.tab && typeof this.tab.onLoad === 'function') {
                this.tab.onLoad.bind(this)(this.core, this.tab);
            }
        };
        /**
         * Tie in hook that is called when the tab is destroyed
         *
         */
        PopEntityTabComponent.prototype._callUnloadEvent = function () {
            if (this.tab && typeof this.tab.onUnload === 'function') {
                this.tab.onUnload.bind(this)(this.core, this.tab);
            }
        };
        /**
         * Helper funtion to determine the correct header to display
         * @param header
         */
        PopEntityTabComponent.prototype._getHeaderText = function (header) {
            if (IsString(header, true)) {
                return TitleCase(ParseModelValue(header, this.core).replace(/_/g, ' ')).trim();
            }
            return null;
        };
        /**
         * Core Event Handler
         * @param event
         */
        PopEntityTabComponent.prototype._coreEventHandler = function (event) {
            this.log.event("_coreEventHandler", event);
            if (this.tab.wrap && event.type === 'component') {
                if (event.name === 'start-refresh') {
                    this.dom.state.refresh = 1;
                }
                else if (event.name === 'stop-refresh') {
                    this.dom.state.refresh = 0;
                }
                else if (event.name === 'reset-view') {
                    this.onResetView();
                }
            }
        };
        /**
         * Detects if a mobile layout should be used based on the width of the screen
         */
        PopEntityTabComponent.prototype._determineLayout = function () {
            var _this = this;
            var client = this.el.nativeElement.getBoundingClientRect();
            this.dom.width.inner = client.width;
            this.dom.state.mobile = this.dom.width.inner <= 1340 ? true : false;
            if (this.dom.state.mobile) {
                this.tab.view.map(function (column) {
                    column.maxHeight = null;
                    column.minHeight = null;
                });
            }
            else {
                this.tab.view.map(function (column) {
                    column.minHeight = column.header ? _this.dom.height.inner - 50 : _this.dom.height.inner;
                    column.maxHeight = column.header ? _this.dom.height.inner - 50 : _this.dom.height.inner;
                });
            }
            // if( this.log.repo.enabled('dom', this.name) || this.extension.debug ) console.log(this.log.repo.message(`${this.name}:${this.tab.entityId}:_determineLayout:width:${this.dom.width.inner}: mobile: ${this.dom.state.mobile}`), this.log.repo.color('dom'));
        };
        /**
         * Determines if an event should cause a view reset
         * @param event
         */
        PopEntityTabComponent.prototype._needsPositionReset = function (event) {
            var _this = this;
            var position;
            if (this.tab.syncPositions) {
                // console.log('pass 1');
                if (event.config && event.config.metadata && event.config.metadata.position) {
                    // console.log('pass 2');
                    position = event.config.metadata.position;
                    if (event.name === 'patch' && ['field', 'sidebyside', 'permissions'].includes(event.type)) {
                        // console.log('pass 3');
                        if (!this.tab.syncPositionFields || this.tab.syncPositionFields.includes(event.config.column)) {
                            // console.log('pass 4');
                            if (!IsObject(this.tab.syncPositionMap, true) || (position in this.tab.syncPositionMap && IsArray(this.tab.syncPositionMap[position]))) {
                                // console.log('pass 5');
                                if (IsObject(this.tab.syncPositionMap, true)) {
                                    // console.log('pass 6');
                                    if (IsArray(this.tab.syncPositionMap[position])) {
                                        // console.log('pass 7');
                                        this.tab.syncPositionMap[position].map(function (pos) {
                                            _this.onResetView(+pos);
                                        });
                                    }
                                    return true;
                                }
                                else {
                                    this.onResetView();
                                }
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        };
        /**
         * Allows for a pre built core to be passed in else it will build the core itself
         */
        PopEntityTabComponent.prototype._setCore = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (!(IsObject(_this.core, true))) {
                    var tabCore = _this.srv.tab.getCore();
                    if (IsObject(tabCore, ['entity'])) {
                        _this.core = tabCore;
                        _this.log.info("_setCore: initial");
                        return resolve(true);
                    }
                    if (_this.route.snapshot.data.core) {
                        _this.core = IsObjectThrowError(_this.route.snapshot.data.core, true, _this.name + ":: - this.route.snapshot.data.core") ? _this.route.snapshot.data.core : {};
                        _this.log.info("_setCore: route");
                        return resolve(true);
                    }
                    var coreParams = _this.srv.tab && _this.srv.tab.ui && _this.srv.tab.ui.entityParams ? _this.srv.tab.ui.entityParams : {};
                    if (IsObject(coreParams, true)) {
                        _this.srv.entity.getCoreConfig(coreParams.internal_name, +coreParams.entity).then(function (core) {
                            _this.core = IsObjectThrowError(core, true, _this.name + ":: - core") ? core : {};
                            _this.log.info("_setCore: tab params");
                            return resolve(true);
                        });
                    }
                    else {
                        _this.srv.entity.getCoreConfig(_this.srv.entity.getRouteInternalName(_this.route, _this.extension), _this.route.snapshot.params.entity).then(function (core) {
                            _this.core = IsObjectThrowError(core, true, _this.name + ":: - core") ? core : null;
                            _this.log.info("_setCore: route internal _name");
                            return resolve(true);
                        });
                    }
                }
                else {
                    return resolve(true);
                }
            });
        };
        /**
         * Allows for a pre built tab to be passed in else it will find try to find one
         */
        PopEntityTabComponent.prototype._setTab = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (!(IsObject(_this.tab, true))) {
                    var tab = _this.srv.tab.getTab();
                    _this.tab = IsObjectThrowError(tab, true, _this.name + ":_setTab: - tab") ? tab : {};
                    return resolve(true);
                }
                else {
                    return resolve(true);
                }
            });
        };
        /**
         * Determine the structure of the tab view
         *
         */
        PopEntityTabComponent.prototype._buildTabView = function () {
            var _this = this;
            var view = [];
            //     console.log('this.tab.scheme', this.tab.scheme);
            if (this.tab.scheme && IsObject(this.asset.scheme, ['children'])) {
                //       console.log('should use the scheme provided', this.asset.scheme);
                var sections_1 = this.asset.scheme.children;
                var sectionKeys = Object.keys(sections_1);
                var lastSectionKey_1 = sectionKeys[sectionKeys.length - 1];
                var section_1;
                sectionKeys.map(function (sectionKey) {
                    section_1 = sections_1[sectionKey];
                    section_1.position = +sectionKey + 1;
                    if (typeof section_1.flex === 'undefined') {
                        section_1.flex = +lastSectionKey_1 === +sectionKey ? 2 : 1;
                    }
                    var height = +_this.dom.height.outer;
                    height = section_1.header ? (height - 50) : height;
                    _this.dom.repo.position[sectionKey] = {
                        height: height,
                    };
                    view.push({
                        id: sectionKey,
                        position: section_1.position,
                        reset: new rxjs.Subject(),
                        components: _this._getSchemeSectionAssetComponents(_this.core, _this.asset.scheme, section_1),
                        header: _this._getHeaderText(section_1.name),
                        flex: section_1.flex,
                        minWidth: +sectionKey < 3 ? 350 : null,
                        maxWidth: +sectionKey < 2 ? 450 : null,
                        maxHeight: height,
                        active: true,
                    });
                });
            }
            else {
                var positions = IsObjectThrowError(this.tab.positions, true, this.name + ":configureDom: - this.tab.positions") ? this.tab.positions : {};
                Object.keys(positions).map(function (position) {
                    var height = +_this.dom.height.outer;
                    height = _this.tab.positions[position].header ? (height - 50) : height;
                    _this.dom.repo.position[position] = {
                        height: height,
                    };
                    view.push({
                        id: position,
                        position: position,
                        reset: new rxjs.Subject(),
                        components: _this.tab.positions[position].components,
                        extension: _this.extension,
                        header: _this._getHeaderText(_this.tab.positions[position].header),
                        flex: _this.tab.positions[position].flex,
                        maxWidth: _this.tab.positions[position].max,
                        minWidth: _this.tab.positions[position].min,
                        maxHeight: height,
                        active: true,
                    });
                });
            }
            return view;
        };
        /**
         * Gather all the assets that should be rendered in a specific section
         * @param core
         * @param assets
         */
        PopEntityTabComponent.prototype._getSchemeSectionAssetComponents = function (core, scheme, section) {
            var componentList = [];
            var Field = this.dom.repo.ui.fields;
            // console.log('Field', Field);
            var tableFields = this._getSectionTableFieldsAssets(section);
            section.children = __spreadArray(__spreadArray([], __read(tableFields)), __read((IsArray(section.children) ? section.children : [])));
            if (IsObject(section.mapping, ['sort_order'])) {
                section.children = section.children.sort(function (a, b) {
                    var a1 = section.mapping.sort_order.indexOf(a.id);
                    var a2 = section.mapping.sort_order.indexOf(b.id);
                    if (a1 < a2)
                        return -1;
                    if (a1 > a2)
                        return 1;
                    return 0;
                });
            }
            section.children.map(function (child) {
                if (String(String(child.asset_type).toLowerCase()).includes('field')) {
                    child.asset_type = 'field';
                }
                else if (String(String(child.asset_type).toLowerCase()).includes('component')) {
                    child.asset_type = 'component';
                }
                else if (String(String(child.asset_type).toLowerCase()).includes('widget')) {
                    child.asset_type = 'widget';
                }
                if (child.asset_type && IsDefined(child.asset_id)) {
                    switch (child.asset_type) {
                        case 'table': {
                            // console.log( 'table', child );
                            // const fieldItem = child.name ? Field.get( child.name ) : null;
                            // if( fieldItem ){
                            //   componentList.push( fieldItem );
                            // }
                            break;
                        }
                        case 'field': {
                            var field = Field.get(+child.asset_id);
                            if (field) {
                                componentList.push(scheme, field);
                            }
                            break;
                        }
                        case 'component': {
                            // ToDo:: Figure how custom components are going to be managed
                            var internalName = StorageGetter(child, ['asset', 'internal_name'], String(SpaceToSnake(child.name)).toLowerCase() + '_1');
                            var component = {
                                type: PopEntitySchemeCustomComponent,
                                inputs: {
                                    core: core,
                                    config: undefined,
                                    componentId: child.asset_id,
                                    internal_name: internalName
                                }
                            };
                            componentList.push(component);
                            break;
                        }
                        default:
                            // if( this.srv.log.enabled('error', this.name) ) console.log(this.srv.log.message(`${this.name}:getSchemeSectionAssetComponents`), this.srv.log.color('error'), asset);
                            break;
                    }
                }
            });
            return componentList;
        };
        /**
         * Retrieve the default columns tht exist on an entity table
         * @param section
         */
        PopEntityTabComponent.prototype._getSectionTableFieldsAssets = function (section) {
            var tableAssets = [];
            if (this.core) {
                var Field = StorageGetter(this.core, 'repo.model.field'.split('.'));
                if (IsObject(Field, true)) {
                    Object.values(Field).map(function (field) {
                        if (!field.ancillary && field.position === section.position) {
                            tableAssets.push(new EntitySchemeSectionConfig({
                                id: 0,
                                name: field.model.name,
                                label: field.model.label,
                                asset_type: 'table',
                                asset_id: 0,
                                asset: field,
                                scheme_id: +section.id,
                                sort_order: field.sort,
                                position: section.position,
                            }));
                        }
                    });
                }
            }
            section.startIndex = tableAssets.length;
            return tableAssets.sort(function (a, b) {
                if (a.sort < b.sort)
                    return -1;
                if (a.sort > b.sort)
                    return 1;
                return 0;
            });
        };
        return PopEntityTabComponent;
    }(PopExtendComponent));
    PopEntityTabComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-tab',
                    template: "<div class=\"pop-entity-tab-container\" [style.maxHeight.px]=dom.height.outer (window:resize)=\"onWindowResize();\" [ngClass]=\"{'sw-hidden': !dom.state.loaded, 'pop-entity-tab-container-wrap': tab?.wrap, 'pop-entity-tab-refresh':dom.state['refresh']}\">\n  <div class=\"import-flex-row-wrap\">\n    <div class=\"pop-entity-tab-column\"  [ngClass]=\"{'pop-entity-tab-column-wrap': tab.columnWrap}\" *ngFor=\"let col of tab?.view\" [style.flexGrow]=\"col.flex\" [style.maxWidth.px]=\"col.maxWidth\" [style.minWidth.px]=\"col.minWidth\">\n      <div class=\"pop-entity-tab-column-header\" *ngIf=\"col.header\">\n        <div class=\"sw-label-container-sm\">{{col.header}}</div>\n      </div>\n      <div class=\"pop-entity-tab-column-content pop-entity-tab-column-{{col.id}}\" [style.minHeight.px]=col.minHeight [style.maxHeight.px]=\"col.maxHeight\">\n        <lib-pop-entity-tab-column [core]=\"core\" [column]=col (events)=\"onBubbleEvent($event);\"></lib-pop-entity-tab-column>\n      </div>\n    </div>\n  </div>\n  <div class=\"pop-entity-tab-loader\" *ngIf=\"tab?.wrap\">\n    <mat-progress-bar *ngIf=\"dom.state['refresh']\" mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n</div>\n<lib-pop-errors *ngIf=\"dom.error.code\" [error]=\"dom.error\"></lib-pop-errors>\n",
                    styles: [".pop-entity-tab-container{flex:1 1 100%;height:100%;box-sizing:border-box}.pop-entity-tab-container-wrap{padding:30px 15px 15px;box-sizing:border-box}.pop-entity-tab-column-header{position:relative;height:50px;clear:both}.pop-entity-tab-column{position:relative;flex:1;box-sizing:border-box;display:flex;flex-flow:column;align-items:stretch;min-height:0}.pop-entity-tab-column-wrap{margin:0 15px}.pop-entity-tab-column-content{position:relative;overflow-x:hidden;flex:1 1 auto;padding-bottom:2px}.pop-entity-tab-loader{position:absolute;bottom:0;left:0;right:0;height:7px;clear:both;z-index:2;opacity:1!important}.pop-entity-tab-refresh{opacity:.5;pointer-events:none}"]
                },] }
    ];
    PopEntityTabComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: i1.ActivatedRoute },
        { type: PopTabMenuService },
        { type: PopDomService }
    ]; };
    PopEntityTabComponent.propDecorators = {
        tab: [{ type: i0.Input }],
        extension: [{ type: i0.Input }]
    };

    var PopEntityPortalMenuComponent = /** @class */ (function (_super) {
        __extends(PopEntityPortalMenuComponent, _super);
        function PopEntityPortalMenuComponent(el, _domRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopTabMenuComponent';
            _this.srv = {
                crud: exports.ServiceInjector.get(PopEntityEventService),
                tab: undefined
            };
            _this.id = 2;
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: 
                            // set the outer height boundary
                            return [4 /*yield*/, this.dom.setHeightWithParent('cdk-overlay-pane', 100, window.innerHeight - 180)];
                            case 1:
                                // set the outer height boundary
                                _a.sent();
                                // #1: Enforce a CoreConfig
                                this.core = IsObjectThrowError(this.core, true, this.name + ":configureDom: - this.core") ? this.core : null;
                                // #2: Enforce a TabMenuConfig
                                this.config = IsObjectThrowError(this.config, true, this.name + ":configureDom: - this.core") ? this.config : {};
                                return [4 /*yield*/, exports.PopEntity.setCoreDomAssets(this.core, this.dom.repo)];
                            case 2:
                                _a.sent();
                                // #3: Register the outlet with the tabRepo, gives the tabRepo the ability to reset the view if needed
                                this.srv.tab.registerOutlet(this.outlet);
                                // #4: Preset a default tab so the view will have something to render
                                if (IsArray(this.config.tabs, true))
                                    this.onSetPortal(this.config.tabs[0]);
                                this.dom.setSubscriber('events', this.srv.crud.events.subscribe(function (event) {
                                    if (IsValidCoreSignature(_this.core, event)) {
                                        if (IsValidFieldPatchEvent(_this.core, event)) {
                                            if (event.config.name === 'name' || event.config.name === 'label') {
                                                _this.config.name = (event.config.control.value);
                                            }
                                        }
                                    }
                                }));
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * Setup this component
         */
        PopEntityPortalMenuComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Trigger a portal tab click event
         * @returns void
         */
        PopEntityPortalMenuComponent.prototype.onMenuClick = function (tab) {
            this.onSetPortal(tab);
            this.onBubbleEvent({
                source: this.name,
                type: 'menu',
                id: tab.id,
                name: tab.name,
            });
        };
        /**
         * Whenever a user click on tab av button, the portal needs reset to that tab
         * Has specific render so does not use the built-in render intentionally
         * @param tab
         */
        PopEntityPortalMenuComponent.prototype.onSetPortal = function (tab) {
            var _this = this;
            if (this.log.repo.enabled('config', this.name))
                console.log(this.log.repo.message(this.name + ":setPortal:tab"), this.log.repo.color('config'), tab);
            if (tab && tab.id) {
                if (this.portal && this.portal.attachedRef)
                    this.portal.detach();
                this.dom.state.tab = tab;
                Object.keys(this.dom.subscriber).map(function (name) {
                    if (_this.dom.subscriber[name]) {
                        _this.dom.subscriber[name].unsubscribe();
                    }
                });
                var componentRef = this.portal.attach(new portal.ComponentPortal(PopEntityTabComponent));
                componentRef.instance['core'] = this.core;
                componentRef.instance.tab = tab;
                componentRef.changeDetectorRef.detectChanges();
                if (componentRef.instance['events']) {
                    this.dom.setSubscriber('portal', componentRef.instance['events'].subscribe(function (event) {
                        _this.onBubbleEvent(event);
                    }));
                }
            }
        };
        /**
         * Trigger a button click event
         * @returns void
         */
        PopEntityPortalMenuComponent.prototype.onButtonClick = function (button) {
            this.onBubbleEvent({
                source: this.name,
                type: 'button',
                id: button.id,
                name: button.name,
            });
        };
        /**
         * This will bubble a event up to a parent component
         * @param event
         */
        PopEntityPortalMenuComponent.prototype.onBubbleEvent = function (event) {
            this.events.emit(event);
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityPortalMenuComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.portal.detach();
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntityPortalMenuComponent.prototype._onCrudEvent = function (event) {
        };
        return PopEntityPortalMenuComponent;
    }(PopExtendComponent));
    PopEntityPortalMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-portal-menu',
                    template: "<div class=\"portal-menu-container\" [style.height.px]=dom.height.outer>\n  <div class=\"portal-menu-header mat-elevation-z2\">\n    <div class=\"host-name-button-container\">\n      <div class=\"host-label-container\">{{config.name}}</div>\n      <div *ngIf=\"config.buttons?.length\" class=\"host-button-container\">\n        <button class=\"host-button\"\n                *ngFor=\"let button of config.buttons\"\n                [ngClass]=\"{'sw-hidden': button.hidden}\"\n                [disabled]=\"button.disabled\"\n                mat-raised-button\n                (click)=\"onButtonClick(button)\">\n          {{button.name}}\n        </button>\n      </div>\n    </div>\n    <div class=\"host-link-container\">\n      <nav mat-tab-nav-bar>\n        <a mat-tab-link\n           *ngFor=\"let tab of config?.tabs\"\n           [ngClass]=\"{'active':dom.state.tab?.id === tab.id}\"\n           (click)=\"onMenuClick(tab)\"\n           [active]=\"dom.state.tab?.id === tab.id\">\n          {{tab.name}}\n        </a>\n      </nav>\n    </div>\n  </div>\n  <div #outlet class=\"sw-target-outlet portal-outlet-container\" [style.height.px]=dom.height.inner>\n    <ng-template [cdkPortalOutlet]></ng-template>\n  </div>\n</div>\n",
                    providers: [PopTabMenuService, PopDomService],
                    styles: [".portal-menu-container{display:flex;width:100%;flex-direction:column;justify-content:stretch}.portal-menu-container .portal-menu-header{padding-top:30px;min-height:70px;max-height:70px}.portal-menu-container>div{flex:1;overflow:auto}.host-header{overflow:hidden}.host-back-container{display:inline-flex!important;padding:6px 0 0 8px;justify-content:flex-start;align-items:center;cursor:pointer}.host-back-container mat-icon{width:22px}.host-name-button-container{display:flex;justify-content:space-between;margin:0}.host-label-container{padding:0 0 10px 30px;position:relative;min-width:200px;font-size:24px;flex:1 1 auto}.host-button-container{display:flex!important;justify-content:flex-end;align-items:center;flex:1 1 auto;margin-right:30px}.host-button{margin-left:10px;min-width:100px}.host-link-container{position:relative;display:block;margin:0;padding:3px 30px 0 25px}.portal-outlet-container{overflow:hidden}.mat-tab-link.active{font-weight:500}.mat-tab-nav-bar{border-bottom:none}.mat-tab-link{height:30px!important;min-width:50px!important;font-weight:400;font-size:16px;color:var(--text);padding:0 5px 16px;margin-right:30px!important}"]
                },] }
    ];
    PopEntityPortalMenuComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopTabMenuService }
    ]; };
    PopEntityPortalMenuComponent.propDecorators = {
        config: [{ type: i0.Input }],
        outlet: [{ type: i0.ViewChild, args: ['outlet', { static: true },] }],
        portal: [{ type: i0.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }]
    };

    var PopEntityTabMenuComponent = /** @class */ (function (_super) {
        __extends(PopEntityTabMenuComponent, _super);
        function PopEntityTabMenuComponent(el, cdr, route, _domRepo, _tabRepo, APP_GLOBAL, dialogRef) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            _this.route = route;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.dialogRef = dialogRef;
            _this.name = 'PopEntityTabMenuComponent';
            _this.srv = {
                action: exports.ServiceInjector.get(PopEntityActionService),
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                events: exports.ServiceInjector.get(PopEntityEventService),
                tab: undefined
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.APP_GLOBAL.isVerified()];
                            case 1:
                                _a.sent();
                                if (!IsObject(this.extension, true))
                                    this.extension = {};
                                if (!this.extension.goToUrl)
                                    this.extension.goToUrl = null;
                                if (this.route.snapshot.data && Object.keys(this.route.snapshot.data).length) {
                                    Object.keys(this.route.snapshot.data).map(function (key) {
                                        _this.extension[key] = _this.route.snapshot.data[key];
                                    });
                                }
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: 
                            // Require a CoreConfig
                            return [4 /*yield*/, this._setCore()];
                            case 1:
                                // Require a CoreConfig
                                _a.sent();
                                this.core = IsObjectThrowError(this.core, true, this.name + ":configureDom: - this.core") ? this.core : null;
                                if (this.core.flag.routeCheck) { // check this child routes for any aliasing
                                    this.route.routeConfig.children.map(function (childRoute) {
                                        var internal_name = GetSingularName(childRoute.path);
                                        if (IsAliasable(childRoute.path) && IsEntity(TitleCase(internal_name))) {
                                            childRoute.path = GetRouteAlias(internal_name);
                                        }
                                    });
                                    this.core.flag.routeCheck = false;
                                }
                                this.log.info('tab-menu config', this.config);
                                this.dom.height.default = window.innerHeight - 100;
                                this.dom.setHeight(this.dom.height.default, 100);
                                // this component set the outer height boundary
                                this.log.info("Determined height:" + this.dom.height.inner);
                                // Bind events to handlers
                                this.dom.handler.bubble = function (core, event) { return _this.onBubbleEvent(event); };
                                // Require a TabMenuConfig, and pull in extension params from the route
                                return [4 /*yield*/, this._setTabMenuConfig()];
                            case 2:
                                // Require a TabMenuConfig, and pull in extension params from the route
                                _a.sent();
                                if (this.config.portal)
                                    this.dom.height.inner = this.dom.height.inner - 50;
                                //  Attach Template Container
                                this.template.attach('container');
                                //  Render the dynamic list of components
                                this._templateRender();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * Helper function that renders the list of dynamic components
         *
         */
        PopEntityTabMenuComponent.prototype._templateRender = function () {
            if (this.config.portal) {
                this.asset.component = this.template.render([{
                        type: PopEntityPortalMenuComponent,
                        inputs: {
                            config: this.config
                        }
                    }]);
                // componentRef.instance.events.subscribe((event: PopBaseEventInterface) => {
                //   if( typeof this.dom.handler.bubble === 'function' ){
                //     this.dom.handler.bubble(event);
                //   }else{
                //     if( this.trait.bubble ) this.events.emit(event);
                //   }
                // })
            }
            else {
                this.template.render([{
                        type: PopTabMenuComponent,
                        inputs: {
                            config: this.config
                        }
                    }]);
            }
        };
        PopEntityTabMenuComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Tie in for a parent component to pass in a TabMenuConfig
         * @param config
         */
        PopEntityTabMenuComponent.prototype.registerTabMenuConfig = function (config) {
            this.config = IsObjectThrowError(config, true, this.name + ":registerTabMenuConfig: - config") ? config : {};
            this.dom.setSubscriber('config-change', this.srv.tab.change.subscribe(function (event) {
            }));
            try {
                this.cdr.detectChanges();
            }
            catch (e) {
            }
            this._registerTabMenuConfig();
        };
        /**
         * A TabMenu  will generate a slew of action and event triggers
         * @param event
         */
        PopEntityTabMenuComponent.prototype.onBubbleEvent = function (event) {
            this.log.event("onBubbleEvent", event);
            if (IsValidFieldPatchEvent(this.core, event)) {
                if (event.config.name === 'name' || event.config.name === 'label') {
                    this.config.name = event.config.control.value;
                }
            }
            else {
                switch (event.type) {
                    case 'button':
                        switch (event.id) {
                            case 'reset':
                                this.srv.tab.refreshEntity(null, this.dom.repo, {}, 'PopEntityTabMenuComponent:handleMenuEvent:reset').then(function () { return true; });
                                break;
                            // case 'archive':
                            //   this.onArchiveButtonClicked(true);
                            //   break;
                            // case 'activate':
                            //   this.onArchiveButtonClicked(false);
                            //   break;
                            case 'clone':
                                this.onCloneButtonClicked();
                                break;
                            case 'close':
                                if (this.dialogRef)
                                    this.dialogRef.close();
                                break;
                            default:
                                this.events.emit(event);
                                break;
                        }
                        break;
                    case 'portal':
                        break;
                    case 'default':
                        break;
                }
            }
        };
        /**
         * A user can click on an archive/active button to change the status of this active entity
         * @param archive
         */
        PopEntityTabMenuComponent.prototype.onArchiveButtonClicked = function (archive) {
            var _this = this;
            if (this.dom.subscriber.entity)
                this.dom.subscriber.entity.unsubscribe();
            this.dom.subscriber.entityId = this.core.repo.archiveEntity(this.core.params.entityId, archive).subscribe(function () {
                exports.PopEntity.bustAllCache();
                _this.srv.events.sendEvent({
                    source: _this.name,
                    method: 'archive',
                    type: 'entity',
                    name: _this.core.params.name,
                    internal_name: _this.core.params.internal_name,
                    id: _this.core.params.entityId,
                    data: archive
                });
                if (archive && !_this.config.portal) {
                    if (false) { // Disabled navigation back to the entity list for now
                        _this.core.repo.navigateToEntities().catch(function (e) {
                            _this.srv.tab.refreshEntity(null, _this.dom.repo, {}, 'PopEntityTabMenuComponent:setArchived').then(function () { return exports.PopTemplate.clear(); });
                        });
                    }
                    else {
                        _this.srv.tab.refreshEntity(null, _this.dom.repo, {}, 'PopEntityTabMenuComponent:setArchived').then(function () { return exports.PopTemplate.clear(); });
                    }
                }
                else {
                    _this.srv.tab.refreshEntity(null, _this.dom.repo, {}, 'PopEntityTabMenuComponent:setArchived').then(function () { return exports.PopTemplate.clear(); });
                }
            }, function (err) {
                _this.dom.error.code = err.error.code;
                _this.dom.error.message = err.error.message;
            });
        };
        /**
         * A user can click a clone button to trigger this active entity to be cloned
         */
        PopEntityTabMenuComponent.prototype.onCloneButtonClicked = function () {
            var _this = this;
            // this.dom.setTimeout( `clone-action`, async() => {
            //   const actionConfig = await this.srv.action.doAction( <CoreConfig>this.core, 'clone', this.extension );
            //   this.ui[ 'actionModal' ] = IsObject( actionConfig, true ) ? actionConfig : null;
            // }, 0 );
            this.dom.setTimeout("do-action", function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.srv.action.do(this.core, 'clone', this.extension)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); }, 0);
        };
        /**
         * When the modal to clone the active entity is closed the asset needs to be cleared
         */
        PopEntityTabMenuComponent.prototype.onActionModalClose = function () {
            this.ui['actionModal'] = null;
        };
        /**
         * Cleanup the do of this component
         */
        PopEntityTabMenuComponent.prototype.ngOnDestroy = function () {
            if (this.core && this.core.params && this.core.params.entityId)
                this.core.repo.clearCache('entity', String(this.core.params.entityId), 'PopEntityTabMenuComponent:ngOnDestroy');
            // this.srv.tab.reset();
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This allows a CoreConfig to be passed in else it will generate one
         *
         */
        PopEntityTabMenuComponent.prototype._setCore = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!!(IsObject(this.core, true))) return [3 /*break*/, 7];
                            if (!IsObject(this.portal, ['internal_name', 'entity_id'])) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, exports.PopEntity.getCoreConfig(this.portal.internal_name, this.portal.entity_id)];
                        case 1:
                            _a.core = _c.sent();
                            return [2 /*return*/, resolve(true)];
                        case 2:
                            if (!IsObject(this.route.snapshot.data.core, true)) return [3 /*break*/, 4];
                            this.core = this.route.snapshot.data.core;
                            return [4 /*yield*/, exports.PopEntity.setCoreDomAssets(this.core, this.dom.repo)];
                        case 3:
                            _c.sent();
                            return [2 /*return*/, resolve(true)];
                        case 4:
                            _b = this;
                            return [4 /*yield*/, exports.PopEntity.getCoreConfig(exports.PopEntity.getRouteInternalName(this.route, this.extension), this.route.snapshot.params.id, this.dom.repo)];
                        case 5:
                            _b.core = _c.sent();
                            return [2 /*return*/, resolve(true)];
                        case 6: return [3 /*break*/, 8];
                        case 7: return [2 /*return*/, resolve(true)];
                        case 8: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * This allows a TabMenuConfig to be passed in else it will generate one
         *
         */
        PopEntityTabMenuComponent.prototype._setTabMenuConfig = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!IsObject(this.config, true)) {
                        this.config = GetTabMenuConfig(this.core, exports.PopEntity.getEntityTabs(this.core));
                        this.config = IsObjectThrowError(this.config, true, this.name + ":configureDom: - this.config") ? this.config : {};
                        this._registerTabMenuConfig();
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        this._registerTabMenuConfig();
                        return [2 /*return*/, resolve(true)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * This will transfer the TabMenuConfig up to the tabRepo so other components can communicate with it
         *
         */
        PopEntityTabMenuComponent.prototype._registerTabMenuConfig = function () {
            var _this = this;
            if (this.core && this.config) {
                // turn off the filter bar (unless a portal dialog) since it is wasted space
                if (IsObject(this.portal, ['internal_name'])) {
                    this.config.portal = true;
                }
                if (!this.config.portal)
                    exports.ServiceInjector.get(PopCacFilterBarService).setActive(false);
                if (typeof this.extension === 'object' && Object.keys(this.extension).length) {
                    Object.keys(this.extension).map(function (key) {
                        if (key in _this.config) {
                            _this.config[key] = _this.extension[key];
                        }
                    });
                }
                // Register the config on the Tab Menu Service since it is the master control
                // We store the config of the Tab Menu since other components(Tabs,...) interact with it
                this.config = this.srv.tab.registerConfig(this.core, this.config, this.dom.repo);
                this.srv.tab.registerRoute(this.route);
                try {
                    this.cdr.detectChanges();
                }
                catch (e) {
                }
            }
        };
        return PopEntityTabMenuComponent;
    }(PopExtendDynamicComponent));
    PopEntityTabMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-tab-menu',
                    template: "<div class=\"entity-tab-menu-container\" [style.height.px]=dom.height.outer>\n  <ng-container #container>\n    <div class=\"entity-tab-menu-spinner-box\" *ngIf=\"dom.state.loader\">\n      <lib-main-spinner></lib-main-spinner>\n    </div>\n  </ng-container>\n  <lib-pop-field-item-group *ngIf=\"ui.actionModal\" [config]=\"ui.actionModal\" (close)=\"onActionModalClose();\"></lib-pop-field-item-group>\n  <lib-pop-errors *ngIf=\"dom.error?.message\" [error]=\"dom.error\"></lib-pop-errors>\n</div>\n",
                    providers: [PopTabMenuService, PopDomService],
                    styles: [".entity-tab-menu-container{display:flex;height:auto;flex-direction:column;box-sizing:border-box}.entity-tab-menu-container-margin{margin:25px}.entity-tab-menu-loader{position:absolute;height:2px;overflow:hidden;top:0;left:0;right:0;width:100%;clear:both}.entity-tab-menu-spinner-box{height:75vh}"]
                },] }
    ];
    PopEntityTabMenuComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: i1.ActivatedRoute },
        { type: PopDomService },
        { type: PopTabMenuService },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] },
        { type: i1$2.MatDialogRef, decorators: [{ type: i0.Optional }] }
    ]; };
    PopEntityTabMenuComponent.propDecorators = {
        config: [{ type: i0.Input }],
        extension: [{ type: i0.Input }],
        portal: [{ type: i0.Input }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }]
    };

    var PopEntityUtilPortalService = /** @class */ (function () {
        function PopEntityUtilPortalService(dialogRepo) {
            this.dialogRepo = dialogRepo;
            this.state = {
                blockModal: false,
            };
        }
        PopEntityUtilPortalService.prototype.view = function (internal_name, id) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var dialogRef_1, component_1;
                var _this = this;
                return __generator(this, function (_a) {
                    if (!this.state.blockModal) {
                        this.state.blockModal = true;
                        if (internal_name && id) {
                            dialogRef_1 = this.dialogRepo.open(PopEntityTabMenuComponent, {
                                width: window.innerWidth - 20 + "px",
                                height: window.innerHeight - 50 + "px",
                                panelClass: 'sw-portal'
                            });
                            component_1 = dialogRef_1.componentInstance;
                            component_1.portal = { internal_name: internal_name, entity_id: id };
                            component_1.cdr.detectChanges();
                            dialogRef_1.afterClosed().subscribe(function (changed) {
                                _this.state.blockModal = false;
                                component_1.core.repo.clearAllCache();
                                dialogRef_1 = null;
                                component_1 = null;
                                resolve(true);
                            });
                        }
                        else {
                            resolve(false);
                        }
                    }
                    else {
                        console.log('blockModal');
                        resolve(false);
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        return PopEntityUtilPortalService;
    }());
    PopEntityUtilPortalService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntityUtilPortalService_Factory() { return new PopEntityUtilPortalService(i0__namespace.ɵɵinject(i1__namespace$2.MatDialog)); }, token: PopEntityUtilPortalService, providedIn: "root" });
    PopEntityUtilPortalService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    PopEntityUtilPortalService.ctorParameters = function () { return [
        { type: i1$2.MatDialog }
    ]; };

    var PopEntityFieldGroupComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldGroupComponent, _super);
        function PopEntityFieldGroupComponent(el, _domRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopEntityFieldGroupComponent';
            _this.position = 1;
            _this.fieldType = null;
            _this.srv = {
                field: exports.ServiceInjector.get(PopEntityUtilFieldService),
                tab: undefined
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        this.core = IsObjectThrowError(this.core, true, this.name + ":configure: - this.core") ? this.core : null;
                        // handles events
                        this.trait.bubble = true;
                        this.dom.handler.bubble = function (core, event) { return _this.onBubbleEvent(event); };
                        // this.dom.handler.core = ( core: CoreConfig, event: PopBaseEventInterface ) => this._coreEventHandler( event );
                        this.id = this.position;
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var fieldComponentList;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.dom.overhead = this.interface && this.interface.header ? 60 : 0;
                                this.dom.setHeightWithParent(null, this.dom.overhead, 600).then(function () { return true; });
                                return [4 /*yield*/, this._getFieldComponentList()];
                            case 1:
                                fieldComponentList = _a.sent();
                                this.template.attach('container');
                                this.template.render(fieldComponentList);
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * This component receives a list of fields to render
         */
        PopEntityFieldGroupComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityFieldGroupComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This will retrieve any fields that have been marked for the position of this field group
         */
        PopEntityFieldGroupComponent.prototype._getFieldComponentList = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var fields = _this.srv.field.getDomFields(_this.position, _this.dom.repo);
                if (_this.fieldType === 'custom') {
                    fields = fields.filter(function (field) {
                        return field.custom;
                    });
                }
                else if (_this.fieldType === 'table') {
                    fields = fields.filter(function (field) {
                        return !(field.custom);
                    });
                }
                _this.asset.fields = {};
                fields.map(function (field) {
                    var config = StorageGetter(field, ['inputs', 'config'], null);
                    if (config) {
                        _this.asset.fields[config.name] = config;
                    }
                });
                var componentList = fields;
                return resolve(componentList);
            });
        };
        /**
         * The fields will trigger a slew of events
         * @param event
         */
        PopEntityFieldGroupComponent.prototype.onBubbleEvent = function (event) {
            var _this = this;
            this.log.event("onBubbleEvent", event);
            if (IsValidFieldPatchEvent(this.core, event) || event.type === 'context_menu') {
                this.log.info("IsValidFieldPatchEvent", event);
                if (event.type === 'field' && event.config.name in this.core.entity) {
                    var newValue = isNaN(event.config.control.value) ? event.config.control.value : +event.config.control.value;
                    this.core.entity[event.config.name] = newValue;
                    if (Object.keys(this.asset.fields).length > 1) {
                        this.dom.setTimeout('reset-hidden', function () {
                            _this._triggerParentChildUpdates(event.config.name);
                            // this._resetComponentListHidden();
                        }, 0);
                    }
                    else {
                        this.dom.setTimeout('reset-hidden', function () {
                            // this._resetComponentListHidden();
                        }, 0);
                    }
                }
                this.events.emit(event);
                this.srv.tab.clearCache();
            }
        };
        //
        // /**
        //  * This handler handles any events that come across the core cross channel
        //  * @param event
        //  * @private
        //  */
        // private _coreEventHandler( event: PopBaseEventInterface ){
        //   this.log.event(`_coreEventHandler`, event);
        //   if( IsValidFieldPatchEvent( this.core, event ) ){
        //     // A values has been patched recheck the list of fields to see if any of them should be hidden
        //
        //   }
        // }
        /**
         * Whenever a _update to the core entity happens the fields in the group should be re-evaluated if there are when conditionals set
         * @private
         */
        PopEntityFieldGroupComponent.prototype._resetComponentListHidden = function () {
            var _this = this;
            var name, def;
            var Fields = this.dom.repo.ui.fields;
            this.template.refs.filter(function (componentRef) {
                return IsObject(componentRef.instance.config, true) && IsArray(componentRef.instance.when, true);
            }).map(function (componentRef) {
                name = componentRef.instance.config.name;
                if (name) {
                    def = Fields.get(name);
                    if (def) {
                        componentRef.instance.hidden = def.inputs.hidden = !EvaluateWhenCondition(_this.core, componentRef.instance.when, _this.core);
                        Fields.set(name, def);
                    }
                }
            });
        };
        /**
         * This will update the option values of related parent/child fields
         * @param name
         * @private
         */
        PopEntityFieldGroupComponent.prototype._triggerParentChildUpdates = function (name) {
            this.log.info("_triggerParentChildUpdates", name);
            if (this._fieldHasChild(name)) {
                var values = void 0;
                var child_fk = void 0;
                var childField_1;
                var autoFill_1 = false;
                var set_1;
                var relations = this._getRelationList(name);
                relations.some(function (relation) {
                    if (relation.autoFill) {
                        autoFill_1 = true;
                        return true;
                    }
                });
                if (name && name in this.asset.fields) {
                    child_fk = this.asset.fields[name].options.child;
                    if (child_fk && child_fk in this.asset.fields) {
                        childField_1 = this.asset.fields[child_fk];
                        if (IsArray(childField_1.options.rawValues)) {
                            values = ConvertArrayToOptionList(childField_1.options.rawValues, {
                                // ensure that an option shows up in list in case other conditions remove it, aka it has been archived
                                prevent: [],
                                // parent means this options should all have a common field trait like client_fk, account_fk ....
                                parent: childField_1.options.parent ? {
                                    field: childField_1.options.parent,
                                    value: this.core.entity[childField_1.options.parent]
                                } : null,
                                empty: childField_1.options.empty ? childField_1.options.empty : null,
                            });
                            if (autoFill_1 && values.length) {
                                set_1 = values[values.length - 1].value;
                            }
                            else {
                                set_1 = null;
                            }
                            childField_1.options.values = values;
                            autoFill_1 = autoFill_1 && values.length ? values[0].value : null;
                            this.dom.setTimeout("clear-message-" + child_fk, function () {
                                if (typeof childField_1.triggerOnChange === 'function')
                                    childField_1.triggerOnChange(set_1);
                                if (typeof childField_1.clearMessage === 'function') {
                                    childField_1.clearMessage();
                                }
                            }, 0);
                        }
                    }
                }
            }
        };
        /**
         * Get a linear list of the parent child relations from a given point
         * @param self the name to start from (usually the field that has just been changed by user)
         * @param list
         */
        PopEntityFieldGroupComponent.prototype._getRelationList = function (name, list) {
            if (list === void 0) { list = []; }
            var item;
            if (name && name in this.asset.fields) {
                item = this.asset.fields[name];
                if (IsObject(item, true)) {
                    list.push({
                        name: item.name,
                        autoFill: this._fieldHasAutoFill(name),
                    });
                    if (this._fieldHasChild(name)) {
                        this._getRelationList(item.options.child, list);
                    }
                }
            }
            return list;
        };
        /**
         * Determine if field has a child relation in the list
         * @param name
         */
        PopEntityFieldGroupComponent.prototype._fieldHasChild = function (name) {
            if (name in this.asset.fields && this.asset.fields[name].options) {
                if (this.asset.fields[name].options.child) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Determine if field should be auto filled with the first item in the list
         * @param name
         */
        PopEntityFieldGroupComponent.prototype._fieldHasAutoFill = function (name) {
            if (name in this.asset.fields && this.asset.fields[name]) {
                if (this.asset.fields[name].autoFill) {
                    return true;
                }
            }
            return false;
        };
        return PopEntityFieldGroupComponent;
    }(PopExtendDynamicComponent));
    PopEntityFieldGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field-group',
                    template: "<div class=\"pop-entity-field-group-container\">\n  <ng-container #container></ng-container>\n</div>\n",
                    styles: [".pop-entity-field-group-container{max-width:450px}"]
                },] }
    ];
    PopEntityFieldGroupComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopTabMenuService }
    ]; };
    PopEntityFieldGroupComponent.propDecorators = {
        position: [{ type: i0.Input }],
        fieldType: [{ type: i0.Input }],
        interface: [{ type: i0.Input }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }]
    };

    var TableOptionsConfig = /** @class */ (function () {
        function TableOptionsConfig(params) {
            this.columns = [];
            this.allowColumnDisplayToggle = true;
            this.allowColumnStickyToggle = true;
            this.allowColumnSearchToggle = true;
            this.allowColumnSortToggle = true;
            this.allowHeaderStickyToggle = true;
            this.allowHeaderDisplayToggle = true;
            this.allowPaginatorToggle = true;
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (this.defaultOptions.headerDisplay !== false)
                this.defaultOptions.headerDisplay = true;
            if (this.defaultOptions.headerSticky !== false)
                this.defaultOptions.headerSticky = true;
            if (!this.defaultOptions.paginator)
                this.defaultOptions.paginator = 0;
            if (this.defaultOptions.search !== false)
                this.defaultOptions.search = true;
            if (this.defaultOptions.searchColumns !== true)
                this.defaultOptions.searchColumns = false;
            if (this.defaultOptions.sort !== true)
                this.defaultOptions.sort = false;
        }
        return TableOptionsConfig;
    }());
    var TableConfig = /** @class */ (function () {
        function TableConfig(params) {
            // General Params
            this.buttons = [];
            this.columnDefinitions = {};
            this.dealWithAngularChangeDetectionFailure = false;
            this.data = [];
            this.height = 500; // static height px
            this.initialSort = null;
            this.initialSortDirection = 'asc';
            this.loading = false;
            this.metadata = null;
            this.options = null;
            this.sort = false;
            this.route = '';
            this.linkBehavior = 'route';
            // Optionable Params
            //  - These can be toggled in options so if any default are changed here make sure to also subject them in TableOptionsConfig
            this.headerDisplay = true;
            this.headerSticky = false;
            this.paginator = false;
            this.search = true;
            this.searchValue = '';
            this.searchColumns = false;
            this.advanced_search = false;
            // Built through updates.
            this.matData = new table.MatTableDataSource();
            this.columnConfig = { visible: [], templates: {} };
            if (params)
                for (var i in params)
                    this[i] = params[i];
            if (!(['route', 'portal'].includes(this.linkBehavior)))
                this.linkBehavior = 'route';
            // Run these in case params had conflicting info.
            if (this.paginator) {
                this.headerSticky = false;
            }
        }
        return TableConfig;
    }());

    var PopEntityHistoryComponent = /** @class */ (function (_super) {
        __extends(PopEntityHistoryComponent, _super);
        function PopEntityHistoryComponent(el, cdr) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            _this.name = 'PopEntityHistoryComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.dom.setHeight(exports.PopTemplate.getContentHeight(), 100);
                                return [4 /*yield*/, this.buildTable()];
                            case 1:
                                _a.sent();
                                this.dom.state.hasData = IsArray(StorageGetter(this.config, ['matData', 'data'], []), true);
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityHistoryComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntityHistoryComponent.prototype.buildTable = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.dom.setSubscriber('history-api-call', _this.core.repo.getHistory(+_this.core.params.entityId).subscribe(function (history) {
                    // Build the config.
                    // Prepare and load the data.
                    history = _this._prepareTableData(history, _this.core.repo.model.field);
                    var tableConfig = {
                        height: _this.dom.height.inner,
                        search: true,
                        columnDefinitions: {
                            user: { visible: true, order: 1, internal_name: 'user', route: '/admin/users/:user_fk' },
                            action: { visible: true, order: 2 },
                            message: { visible: true, order: 3 },
                            timestamp: { visible: true, order: 4 },
                        },
                        data: Array.isArray(history) ? history : [],
                    };
                    _this.config = new TableConfig(tableConfig);
                    try {
                        _this.cdr.detectChanges();
                    }
                    catch (e) {
                    }
                    return resolve(true);
                }, function (err) {
                    _this.dom.error = {
                        code: (err.error ? err.error.code : err.status),
                        message: (err.error ? err.error.message : err.statusText)
                    };
                    try {
                        _this.cdr.detectChanges();
                    }
                    catch (e) {
                    }
                    return resolve(false);
                }));
            });
        };
        PopEntityHistoryComponent.prototype.eventHandler = function (event) {
            if (event.type === 'table') {
            }
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityHistoryComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * A method that preps entityId list data for tables
         * @param dataSet
         * @param fieldMap
         */
        PopEntityHistoryComponent.prototype._prepareTableData = function (dataSet, fieldMap, entityConfig) {
            if (fieldMap === void 0) { fieldMap = {}; }
            if (entityConfig === void 0) { entityConfig = null; }
            // Determine which fields should be acted upon.
            var transformations = GetObjectTransformations(fieldMap);
            return IsArray(dataSet, true) ? dataSet.map(function (row) { return exports.PopPipe.transformObjectValues(Object.assign({}, row), transformations, entityConfig); }) : dataSet;
        };
        return PopEntityHistoryComponent;
    }(PopExtendComponent));
    PopEntityHistoryComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-history',
                    template: "<div class=\"entity-history-container\">\n  <div class=\"entity-history-loader-bar\" *ngIf=\"dom.state.loading\">\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n  <div *ngIf=\"!dom.state.hasData\" class=\"entity-history-empty-container\">\n    <div class=\"entity-history-row\">\n      <mat-icon class=\"sw-helper-icon\" [style.marginLeft]=\"'-24px'\">sentiment_dissatisfied</mat-icon>\n    </div>\n    <div class=\"sw-label-container\" [style.textAlign]=\"'center'\">Such Empty!</div>\n  </div>\n  <lib-pop-table *ngIf=\"dom.state.hasData\"  (events)=\"eventHandler($event);\" [config]=\"config\"></lib-pop-table>\n</div>\n<lib-pop-errors *ngIf=\"dom.error.code\" [error]=\"dom.error\"></lib-pop-errors>\n",
                    styles: [".entity-history-container{display:flex;width:100%;height:100%;flex-direction:column;justify-content:stretch}.entity-history-container>lib-pop-table{flex:1}.entity-history-empty-container{flex:1 1;min-height:200px;flex-direction:column;justify-content:stretch;align-items:center}.entity-history-row{flex:1 1;min-height:200px;flex-direction:row;justify-content:center;align-items:center;min-height:30px;text-align:center}.entity-history-loader-bar{position:absolute;left:0;right:0;bottom:0}::ng-deep td,:host ::ng-deep th{min-width:50px;max-width:300px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;height:48px;max-height:48px}:host ::ng-deep th>.mat-sort-header-container{display:flex;min-width:50px;max-width:300px}:host ::ng-deep td[class*=fk],:host ::ng-deep th[class*=fk]{min-width:50px;max-width:100px;text-align:center!important;justify-content:center}:host ::ng-deep th[class*=fk]>.mat-sort-header-container{min-width:50px!important;max-width:100px!important;justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=id],:host ::ng-deep th[class*=id]{min-width:50px;max-width:100px;text-align:center!important;justify-content:center}:host ::ng-deep th[class*=id]>.mat-sort-header-container{min-width:100px!important;max-width:100px!important;justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=-message],:host ::ng-deep th[class*=-name]{text-align:left!important;padding-left:20px!important;min-width:50px!important;max-width:500px!important}:host ::ng-deep th[class*=-message] .mat-sort-header-container{min-width:50px!important;max-width:500px!important;padding-left:0!important;justify-content:left!important}:host ::ng-deep td[class*=-description],:host ::ng-deep th[class*=-name]{text-align:left!important;padding-left:20px!important;min-width:50px!important;max-width:500px!important}:host ::ng-deep th[class*=-description] .mat-sort-header-container{min-width:50px!important;max-width:500px!important;padding-left:0!important;justify-content:left!important}"]
                },] }
    ];
    PopEntityHistoryComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PopEntityHistoryComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopEntityProviderDialogComponent = /** @class */ (function () {
        function PopEntityProviderDialogComponent(data, entityUtilRepo, entityPortalRepo, baseRepo, dialogRepo, dialog) {
            this.entityUtilRepo = entityUtilRepo;
            this.entityPortalRepo = entityPortalRepo;
            this.baseRepo = baseRepo;
            this.dialogRepo = dialogRepo;
            this.dialog = dialog;
            this.state = {
                blockModal: false,
                assignmentChange: false,
                changed: false
            };
            this.subscriber = {
                crud: undefined,
                dialog: undefined,
            };
            this.display = data.display;
            this.config = data.config;
            this.table = data.table;
            this.resource = data.resource;
        }
        PopEntityProviderDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.display)
                this.display = this.getDisplay();
            this.subscriber.crud = exports.ServiceInjector.get(PopEntityEventService).events.subscribe(function (event) { return _this.crudEventHandler(event); });
            this.subscriber.dialog = this.dialog.beforeClosed().subscribe(function (_) {
                _this.dialog.close(_this.state.changed);
            });
        };
        PopEntityProviderDialogComponent.prototype.getDisplay = function () {
            var entityName = this.config.entity.display_name ? this.config.entity.display_name : this.config.entity.name;
            var resourceType = this.resource.entity ? this.resource.entity : 'Entity';
            var resourceName = this.resource.name ? this.resource.name : 'Resource';
            return entityName + " - (" + resourceName + " - " + resourceType + " ) - Provider List";
        };
        PopEntityProviderDialogComponent.prototype.crudEventHandler = function (event) {
            var _this = this;
            console.log('crudEventHandler', event);
            if (event.method === 'create' || event.method === 'delete') {
                this.state.changed = true;
            }
            else {
                if (event.type === 'entity') {
                    if (event.name === 'archive') {
                        this.state.changed = true;
                    }
                }
                else if (event.type === 'field' && event.name === 'patch') {
                    var patch_1 = {};
                    patch_1[event.config.column] = event.config.control.value;
                    var signature_1 = event.config.metadata;
                    var signatureMatches = this.table.matData.data.filter(function (row, i) {
                        return ((row['internal_name'] === signature_1.internal_name && +row['id'] === +signature_1.id));
                    });
                    if (Array.isArray(signatureMatches) && signatureMatches.length) {
                        signatureMatches.map(function (row) {
                            Object.keys(patch_1).map(function (column) {
                                if (column in row) {
                                    row[column] = patch_1[column];
                                    _this.state.changed = true;
                                }
                            });
                        });
                    }
                }
                else if (event.type === 'sidebyside' && event.name === 'patch') {
                    var signature_2 = Object.assign({}, event.config.metadata);
                    var signatureMatches = this.table.matData.data.filter(function (row, i) {
                        return ((row['internal_name'] === signature_2.internal_name && +row['id'] === +signature_2.id));
                    });
                    if (Array.isArray(signatureMatches) && signatureMatches.length) {
                        this.state.changed = true;
                        this.state.assignmentChange = true;
                    }
                }
            }
        };
        PopEntityProviderDialogComponent.prototype.eventHandler = function (event) {
            if (event.type === 'table') {
                switch (event.data.link) {
                    case 'provider':
                        this.viewEntityPortal(event.data.row.internal_name, +event.data.row.id);
                        break;
                    default:
                        break;
                }
            }
        };
        PopEntityProviderDialogComponent.prototype.viewEntityPortal = function (internal_name, id) {
            // placeholder
            this.entityPortalRepo.view(internal_name, id);
        };
        PopEntityProviderDialogComponent.prototype.cancel = function () {
            this.dialog.close(this.state.changed);
        };
        PopEntityProviderDialogComponent.prototype.ngOnDestroy = function () {
            var _this = this;
            Object.keys(this.subscriber).map(function (name) {
                if (_this.subscriber[name]) {
                    _this.subscriber[name].unsubscribe();
                }
            });
        };
        return PopEntityProviderDialogComponent;
    }());
    PopEntityProviderDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-provider-dialog',
                    template: "<h2 *ngIf=\"display\">{{display}}</h2>\n<lib-pop-table *ngIf=\"table\" (events)=\"eventHandler($event);\" [config]=\"table\"></lib-pop-table>\n<div class=\"buttons\">\n  <div class=\"cancel\">\n    <button mat-raised-button (click)=\"cancel()\">Close</button>\n  </div>\n</div>",
                    styles: [":host{flex:1 1 100%;min-width:200px;min-height:200px}::ng-deep mat-dialog-container{position:relative}.buttons{margin:10px 0;display:flex;justify-content:space-between}.buttons .cancel{order:1;flex-grow:1;display:flex;justify-content:flex-end}"]
                },] }
    ];
    PopEntityProviderDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] },
        { type: PopEntityService },
        { type: PopEntityUtilPortalService },
        { type: PopBaseService },
        { type: i1$2.MatDialog },
        { type: i1$2.MatDialogRef }
    ]; };

    var PopEntityAssignmentsComponent = /** @class */ (function (_super) {
        __extends(PopEntityAssignmentsComponent, _super);
        function PopEntityAssignmentsComponent(el, cdr, _domRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopEntityAssignmentsComponent';
            _this.srv = {
                base: exports.ServiceInjector.get(PopBaseService),
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                events: exports.ServiceInjector.get(PopEntityEventService),
                entity: exports.ServiceInjector.get(PopEntityService),
                tab: undefined,
            };
            _this.asset = {
                entityParamsMap: {},
                assignedUserMap: undefined
            };
            /**
             * This should transformValue and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        // #1: Enforce a CoreConfig
                        this.core = IsObjectThrowError(this.core, true, this.name + ":configureDom: - this.core") ? this.core : null;
                        this.dom.state = Object.assign(Object.assign({}, this.dom.state), {
                            directBaseline: false,
                            dataHasDirect: false,
                            dataHasParent: false,
                            dataHasProviders: false,
                            dataHasType: false,
                            blockModal: false,
                            loaded: false,
                            loading: true,
                            error: { code: 0, message: '' },
                        });
                        this.ui.table = {
                            config: undefined,
                        };
                        this.dom.setHeight(exports.PopTemplate.getContentHeight(), 100);
                        this.buildTable();
                        this.dom.state.hasData = IsArray(StorageGetter(this.ui.table.config, ['matData', 'data'], []), true);
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityAssignmentsComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntityAssignmentsComponent.prototype.buildTable = function () {
            var parentLabel;
            var isDialogLimit = this.srv.dialog.openDialogs.length > 3;
            if (this.core && this.core.params)
                this.core.params.refresh = false;
            var columnDefinitions = {};
            // this.subscribers.entity = this.entityRepo.events.subscribe((e) => this.crudEventHandler(e));
            if (this.fieldType && String(this.fieldType).includes('assigned_') === false)
                this.fieldType = "assigned_" + this.fieldType;
            // this.fieldType should reference a entity.metadata key <'assigned_XXXXXX'> if not this.fieldType grab anything with the 'assigned_' prefix in entity.metadata;
            var data = this.getTableData();
            if (this.fieldType && this.dom.state.dataHasParent) {
                parentLabel = TitleCase(SnakeToPascal(exports.PopPipe.transform(data[0].parent.internal_name, { type: 'entity', arg1: 'alias', arg2: 'singular' }))).trim();
            }
            this.ui.table.config = new TableConfig({
                height: this.dom.height.outer,
                paginator: false,
                search: data.length >= 10 ? true : false,
                searchColumns: false,
                columnDefinitions: {
                    name: {
                        visible: true,
                        helper: isDialogLimit ? null : { text: 'Jump To: <name>', position: 'right' },
                        link: isDialogLimit ? false : 'entity',
                        order: 0,
                    },
                    entity: {
                        visible: !this.fieldType ? true : false,
                        order: 1,
                    },
                    direct: {
                        visible: this.dom.state.dataHasDirect ? true : false,
                        order: 2,
                    },
                    type: {
                        visible: this.dom.state.dataHasType ? true : false,
                        order: 3,
                    },
                    parent_name: {
                        visible: this.fieldType && this.dom.state.dataHasParent && parentLabel ? true : false,
                        display: parentLabel,
                        link: 'parent',
                        order: 4,
                    },
                    has_providers: {
                        display: 'Provider',
                        visible: this.dom.state.dataHasProviders ? true : false,
                        link: 'providers',
                        // helper: { text: 'Jump To: <name>', position: 'right' },
                        order: 5,
                    },
                    // assigned: {
                    //   visible: true,
                    //   link: 'section_users',
                    //   // helper: { text: 'Jump To: <name>', position: 'right' },
                    //   order: 4,
                    // },
                    // id: {
                    //   visible: this.fieldType ? true : false,
                    //   order: 100,
                    // },
                },
                data: data,
            });
            this.dom.state.loading = false;
            this.dom.state.loaded = true;
            try {
                this.cdr.detectChanges();
            }
            catch (e) {
            }
        };
        PopEntityAssignmentsComponent.prototype.crudEventHandler = function (event) {
            if (this.dom.subscriber.dialog) {
                if (event.method === 'create' || event.method === 'delete') {
                    if (this.core && this.core.params)
                        this.core.params.refresh = true;
                }
                else if (event.method === 'update') {
                    if (event.type === 'entity') {
                        if (event.name === 'archive') {
                            if (this.core && this.core.params)
                                this.core.params.refresh = true;
                        }
                    }
                    else if ((event.type === 'field' || event.type === 'sidebyside') && event.name === 'patch') {
                        if (this.core && this.core.params)
                            this.core.params.refresh = true;
                    }
                }
            }
        };
        PopEntityAssignmentsComponent.prototype.getKeyInternalName = function (key) {
            return String(key).replace(/(pt_leader|pt_member|_fk|assigned_)/g, '');
        };
        PopEntityAssignmentsComponent.prototype.getEntityParams = function (key, id) {
            if (id === void 0) { id = null; }
            var entityParams;
            key = this.getKeyInternalName(key);
            if (key in this.asset.entityParamsMap) {
                return this.asset.entityParamsMap[key];
            }
            if (key === 'user') {
                entityParams = {
                    app: 'admin',
                    internal_name: 'user',
                    api: 'user',
                };
            }
            else {
                entityParams = this.srv.entity.getEntityParams(key);
            }
            if (!entityParams) {
                entityParams = this.srv.entity.getEntityParamsWithPath(key);
            }
            this.asset.entityParamsMap[key] = entityParams;
            if (this.log.repo.enabled())
                console.log(this.log.repo.message('PopEntityAssignmentsComponent:entityParams'), this.log.repo.color('info'), DeepCopy(this.asset.entityParamsMap[key]));
            return DeepCopy(this.asset.entityParamsMap[key]);
        };
        PopEntityAssignmentsComponent.prototype.getTableData = function () {
            var _this = this;
            this.asset.assignedUserMap = {};
            var data = [];
            var rows;
            var userRows = [];
            var user;
            if (this.core && this.core.entity && IsObject(this.core.entity.metadata, true)) {
                if (IsString(this.fieldType, true)) {
                    if (IsArray(this.core.entity.metadata[this.fieldType], true)) {
                        rows = this.core.entity.metadata[this.fieldType].map(function (row) {
                            return _this.transformRow(_this.fieldType, row);
                        });
                        if (this.fieldType.includes('user') === false) { // users are handled special because they inherit assignments from multiple sources
                            data.push.apply(// users are handled special because they inherit assignments from multiple sources
                            data, __spreadArray([], __read(rows)));
                        }
                        else {
                            userRows = rows;
                        }
                    }
                }
                else {
                    Object.keys(this.core.entity.metadata).map(function (key) {
                        if (key && String(key).includes('assigned_') && _this.getEntityParams(key) && IsArray(_this.core.entity.metadata[key], true)) {
                            rows = _this.core.entity.metadata[key].map(function (row) {
                                return _this.transformRow(key, row);
                            });
                            if (key.includes('user') === false) { // users are handled special because they inherit assignments from multiple sources
                                data.push.apply(// users are handled special because they inherit assignments from multiple sources
                                data, __spreadArray([], __read(rows)));
                            }
                            else {
                                userRows = rows;
                            }
                        }
                    });
                }
            }
            if (IsArray(userRows, true)) {
                userRows.map(function (row) {
                    if (row.id in _this.asset.assignedUserMap)
                        _this.asset.assignedUserMap[row.id].direct = true;
                });
            }
            if (IsObject(this.asset.assignedUserMap, true)) {
                rows = Object.keys(this.asset.assignedUserMap).map(function (id) {
                    user = _this.asset.assignedUserMap[id];
                    return {
                        id: +id,
                        internal_name: 'user',
                        name: user.name,
                        entity: 'User',
                        direct: user.direct,
                        providers: user.providers,
                    };
                });
                data.push.apply(data, __spreadArray([], __read(rows)));
            }
            data.sort(function (a, b) {
                // Sort by Entity
                if (a.entity > b.entity)
                    return 1;
                if (a.entity < b.entity)
                    return -1;
                // Sort by Title
                if (a.name > b.name)
                    return 1;
                if (a.name < b.name)
                    return -1;
            });
            data.map(function (row) {
                if (!_this.dom.state.directBaseline)
                    _this.dom.state.directBaseline = row.direct;
                if (row.direct !== _this.dom.state.directBaseline)
                    _this.dom.state.dataHasDirect = true;
                if (row.parent) {
                    row.parent_name = row.parent.name;
                    _this.dom.state.dataHasParent = true;
                }
                row.has_providers = IsArray(row.providers, true) ? 'Yes' : null;
                if (row.has_providers) {
                    _this.dom.state.dataHasProviders = true;
                    row.providers = ArrayRemoveDupliates(row.providers, 'uid');
                    row.has_providers = _this.getProvidersName(row.providers);
                    row.providers.map(function (provider) {
                        if (provider.internal_name)
                            provider.entityId = TitleCase(SnakeToPascal(exports.PopPipe.transform(provider.internal_name, {
                                type: 'entity',
                                arg1: 'alias',
                                arg2: 'singular'
                            }))).trim();
                        if (provider.type)
                            provider.type = TitleCase(SnakeToPascal(provider.type)).trim();
                        if (provider.direct)
                            row.direct = true;
                    });
                }
                row.direct = row.direct ? 'Yes' : 'No';
                if (row.type) {
                    _this.dom.state.dataHasType = true;
                    row.type = TitleCase(SnakeToPascal(row.type)).trim();
                }
            });
            if (this.log.repo.enabled())
                console.log(this.log.repo.message('PopEntityAssignmentsComponent:data'), this.log.repo.color('data'), data);
            return data;
        };
        PopEntityAssignmentsComponent.prototype.assignUsers = function (users, provider) {
            var _this = this;
            if (IsArray(users, true)) {
                users.map(function (user) {
                    if (+user.id && user.name) {
                        if (!_this.asset.assignedUserMap[user.id])
                            _this.asset.assignedUserMap[user.id] = { id: user.id, name: user.name, direct: false, providers: [] };
                        _this.asset.assignedUserMap[user.id].providers.push(provider);
                    }
                });
            }
        };
        PopEntityAssignmentsComponent.prototype.getProvidersName = function (providers) {
            var types = [];
            if (IsArray(providers, true)) {
                providers.map(function (provider) {
                    if (provider.internal_name)
                        types.push(TitleCase(SnakeToPascal(exports.PopPipe.transform(provider.internal_name, {
                            type: 'entity',
                            arg1: 'alias',
                            arg2: 'singular'
                        }))).trim());
                });
                types = ArrayOnlyUnique(types);
                types.sort();
            }
            if (this.log.repo.enabled())
                console.log(this.log.repo.message('PopEntityAssignmentsComponent:providersName'), this.log.repo.color('info'), IsArray(types, true) ? types.join(', ') : 'Yes');
            return IsArray(types, true) ? types.join(', ') : 'Yes';
        };
        PopEntityAssignmentsComponent.prototype.transformRow = function (key, row) {
            var _this = this;
            var entityParams = this.getEntityParams(key);
            // entityParams.entity = row.id;
            // console.log('entityParams', entityParams);
            var direct = row.direct ? true : false;
            var providers = IsArray(row.providers, true) ? row.providers : [];
            var provider;
            var keyInternalName = this.getKeyInternalName(key);
            row.internal_name = keyInternalName;
            var entity = TitleCase(SnakeToPascal(exports.PopPipe.transform(keyInternalName, { type: 'entity', arg1: 'alias', arg2: 'singular' }))).trim();
            var type = row.type ? row.type : '';
            if (entityParams.internal_name) {
                var matches_1 = Object.keys(row).filter(function (field) {
                    if (field.includes(_this.core.params.internal_name) && +row[field] === +_this.core.params.entityId) {
                        return true;
                    }
                });
                switch (row.internal_name) {
                    case 'pod_type':
                        if (IsArray(matches_1, true)) {
                            direct = true;
                        }
                        if (IsArray(row.pods)) {
                            row.pods.map(function (pod) {
                                if (pod.assigned_leaders)
                                    _this.assignUsers(pod.assigned_leaders, {
                                        id: +pod.id,
                                        name: pod.name,
                                        entity: entity,
                                        type: 'Leader',
                                        internal_name: 'pod',
                                        uid: "pod_" + pod.id + "_leader"
                                    });
                                if (pod.assigned_members)
                                    _this.assignUsers(pod.assigned_members, {
                                        id: +pod.id,
                                        name: pod.name,
                                        entity: entity,
                                        type: 'Member',
                                        internal_name: 'pod',
                                        uid: "pod_" + pod.id + "_member"
                                    });
                            });
                        }
                        break;
                    case 'pod':
                        matches_1.map(function (matchFieldName) {
                            if (IsArray(matches_1, true)) {
                                if (_this.core.params.internal_name === 'security_profile') {
                                    type = String(matchFieldName).includes('leader') ? 'Leader' : 'Member';
                                    if (String(matchFieldName).includes('pt_')) {
                                        provider = { id: row.pod_type_fk, name: row.pod_type, internal_name: 'pod_type', type: type, uid: "pod_type_" + row.pod_type_fk + "_" + type };
                                        providers = [provider];
                                    }
                                    else {
                                        direct = true;
                                    }
                                }
                            }
                            if (row.assigned_leaders)
                                _this.assignUsers(row.assigned_leaders, {
                                    id: row.id,
                                    name: row.name,
                                    entity: entity,
                                    type: 'Leader',
                                    internal_name: 'pod',
                                    uid: "pod_" + row.id + "_leader"
                                });
                            if (row.assigned_members)
                                _this.assignUsers(row.assigned_members, {
                                    id: row.id,
                                    name: row.name,
                                    entity: entity,
                                    type: 'Member',
                                    internal_name: 'pod',
                                    uid: "pod_" + row.id + "_member"
                                });
                        });
                        break;
                    case 'role':
                        if (IsArray(matches_1, true)) {
                            direct = true;
                            if (row.assigned_user)
                                this.assignUsers(row.assigned_user, {
                                    id: +row.id,
                                    name: row.name,
                                    entity: entity,
                                    internal_name: 'role',
                                    uid: "role_" + row.id
                                });
                        }
                        break;
                    case 'user':
                        if (IsArray(matches_1, true)) {
                            direct = true;
                            this.assignUsers([row], { id: +row.id, name: row.name, entity: entity, internal_name: 'user', type: 'User', uid: "user_" + row.id + "_" + type });
                        }
                        break;
                    default:
                        break;
                }
            }
            return {
                id: row.id,
                internal_name: row.internal_name,
                name: row.display_name ? row.display_name : row.name,
                parent: row.parent,
                entity: TitleCase(SnakeToPascal(exports.PopPipe.transform(keyInternalName, { type: 'entity', arg1: 'alias', arg2: 'singular' }))).trim(),
                direct: direct,
                type: type,
                providers: providers,
                uid: type ? keyInternalName + "_" + row.id + "_" + type : keyInternalName + "_" + row.id
            };
        };
        PopEntityAssignmentsComponent.prototype.eventHandler = function (event) {
            if (event.type === 'table') {
                if (this.log.repo.enabled())
                    console.log(this.log.repo.message('PopEntityAssignmentsComponent:event'), this.log.repo.color('event'), event);
                switch (event.data.link) {
                    case 'entity':
                        this.viewEntityPortal(event.data.row.internal_name, +event.data.row.id);
                        break;
                    case 'parent':
                        if (event.data.row && event.data.row.parent) {
                            this.viewEntityPortal(event.data.row.parent.internal_name, +event.data.row.parent.id);
                        }
                        break;
                    case 'providers':
                        this.viewRowProviders(event.data.row);
                        break;
                    default:
                        break;
                }
            }
        };
        PopEntityAssignmentsComponent.prototype.viewEntityPortal = function (internal_name, id) {
            var _this = this;
            // placeholder
            if (!this.dom.state.blockModal) {
                this.dom.state.blockModal = true;
                if (internal_name && +id) {
                    this.srv.entity.getCoreConfig(internal_name, +id).then(function (entityConfig) {
                        var tabMenuConfig = _this._buildTabMenuConfig(entityConfig);
                        tabMenuConfig.portal = true;
                        var dialogRef = _this.srv.dialog.open(PopEntityTabMenuComponent, {
                            width: window.innerWidth - 20 + "px",
                            height: window.innerHeight - 50 + "px",
                            data: entityConfig,
                            panelClass: 'sw-relative'
                        });
                        var component = dialogRef.componentInstance;
                        component.registerTabMenuConfig(tabMenuConfig);
                        _this.dom.subscriber.dialog = dialogRef.beforeClosed().subscribe(function () {
                            _this.dom.state.blockModal = false;
                            _this.srv.tab.refreshEntity(_this.core.params.entityId, null, {}, 'PopEntityAssignmentsComponent:viewEntityPortal').then(function () {
                                dialogRef = null;
                                tabMenuConfig = null;
                                component = null;
                            });
                        });
                    });
                }
            }
        };
        PopEntityAssignmentsComponent.prototype.viewRowProviders = function (row) {
            var _this = this;
            if (!this.dom.state.blockModal) {
                this.dom.state.blockModal = true;
                var data = [];
                var tableConfig = new TableConfig({
                    search: false,
                    searchColumns: false,
                    headerSticky: true,
                    // paginator: 5,
                    columnDefinitions: {
                        name: {
                            visible: true,
                            helper: { text: 'Jump To: <name>', position: 'right' },
                            link: 'provider',
                            order: 0,
                        },
                        entity: {
                            visible: true,
                            // link: 'assigned',
                            // helper: { text: 'Jump To: <name>', position: 'right' },
                            order: 1,
                        },
                        type: {
                            visible: true,
                            // link: 'assigned',
                            // helper: { text: 'Jump To: <name>', position: 'right' },
                            order: 2,
                        },
                        id: {
                            visible: true,
                            order: 100,
                        },
                    },
                    data: row.providers
                });
                var dialogRef = this.srv.dialog.open(PopEntityProviderDialogComponent, {
                    data: {
                        table: tableConfig,
                        config: this.core,
                        resource: row,
                    }
                });
                this.dom.setSubscriber('pop-table-dialog-close', dialogRef.beforeClosed().subscribe(function (changed) {
                    _this.dom.state.blockModal = false;
                    if (true) {
                        _this.srv.tab.refreshEntity(null, _this.dom.repo, {}, 'PopEntityAssignmentsComponent:viewRowProviders').then(function () { return true; });
                    }
                }));
            }
        };
        PopEntityAssignmentsComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntityAssignmentsComponent.prototype._buildTabMenuConfig = function (core) {
            return GetTabMenuConfig(core, this.srv.entity.getEntityTabs(core));
        };
        return PopEntityAssignmentsComponent;
    }(PopExtendComponent));
    PopEntityAssignmentsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-assignments',
                    template: "<div class=\"entity-assignment-container\">\n  <div class=\"entity-assignment-loader-bar\" *ngIf=\"dom.state.loading\">\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n  <div *ngIf=\"ui.table && ui.table.config\">\n    <div *ngIf=\"!dom.state.hasData\" class=\"host-empty-container\">\n      <div class=\"host-row\">\n        <mat-icon class=\"sw-helper-icon\" [style.marginLeft]=\"'-24px'\">sentiment_dissatisfied</mat-icon>\n      </div>\n      <div class=\"sw-label-container\" [style.textAlign]=\"'center'\">Such Empty!</div>\n    </div>\n    <lib-pop-table *ngIf=\"dom.state.hasData\" [config]=\"ui.table.config\" (events)=\"eventHandler($event);\"></lib-pop-table>\n  </div>\n</div>\n<lib-pop-errors *ngIf=\"dom.error.code\" [error]=\"dom.error\"></lib-pop-errors>\n",
                    styles: [".entity-assignment-container{border:1px solid var(--border)}.host-empty-container{min-height:200px;flex-direction:column;justify-content:stretch;align-items:center}.host-row{flex-direction:row;justify-content:center;align-items:center;min-height:30px;text-align:center}::ng-deep td,:host ::ng-deep th{min-width:50px;max-width:100px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;height:48px;max-height:48px}.entity-assignment-loader-bar{position:absolute;left:0;right:0;bottom:0}:host ::ng-deep th>.mat-sort-header-container{display:flex}::ng-deep th[class*=fk],:host ::ng-deep td[class*=fk]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=fk]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=id],:host ::ng-deep th[class*=id]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=id]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=-name],:host ::ng-deep th[class*=-name]{text-align:left!important;padding-left:20px!important}:host ::ng-deep th[class*=-name] .mat-sort-header-container{padding-left:0!important;justify-content:left!important}:host ::ng-deep td[class*=-type],:host ::ng-deep th[class*=-type]{text-align:center!important}:host ::ng-deep th[class*=-type] .mat-sort-header-container{justify-content:center}"]
                },] }
    ];
    PopEntityAssignmentsComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: PopDomService },
        { type: PopTabMenuService }
    ]; };
    PopEntityAssignmentsComponent.propDecorators = {
        fieldType: [{ type: i0.Input }],
        header: [{ type: i0.Input }]
    };

    var PopEntityFieldSettingsComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldSettingsComponent, _super);
        /**
         * @param el
         * @param _domRepo - transfer
         * @param _fieldRepo - transfer
         */
        function PopEntityFieldSettingsComponent(el, _domRepo, _fieldRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._fieldRepo = _fieldRepo;
            _this.name = 'PopEntityFieldSettingsComponent';
            _this.srv = {
                field: undefined,
            };
            _this.asset = {
                schemeFieldSetting: {},
            };
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.core = IsObjectThrowError(_this.core, true, _this.name + ":configure: - this.core") ? _this.core : null;
                    _this.field = _this.core.entity;
                    if (StorageGetter(_this.dom, ['repo', 'position', String(_this.position), 'height'], false)) {
                        _this.dom.overhead = 60;
                        _this.dom.height.outer = +_this.dom.repo.position[_this.position].height - 300;
                        _this.dom.setHeight(_this.dom.repo.asset[_this.dom.height.outer], _this.dom.overhead);
                    }
                    if (IsObject(_this.scheme)) {
                        _this.asset.schemeFieldSetting = _this.srv.field.getSchemeFieldSetting(_this.scheme, +_this.field.id);
                        //           console.log( 'scheme field', this.asset.schemeFieldSetting );
                    }
                    _this.dom.state.hasScheme = IsObject(_this.scheme, true) ? true : false;
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityFieldSettingsComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityFieldSettingsComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityFieldSettingsComponent;
    }(PopExtendComponent));
    PopEntityFieldSettingsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field-settings',
                    template: "<div class=\"entity-field-editor-header\" *ngIf=\"!this.dom.state.hasScheme\">\n  <div class=\"entity-field-editor-header-section\">\n    <div class=\"sw-label-container-sm\">Field Attributes</div>\n  </div>\n  <div class=\"pop-entity-field-editor-header-section\">\n    <p>Assign field value and attributes for this field.</p>\n  </div>\n</div>\n<div class=\"pop-entity-field-editor-settings-container\">\n  <div #entries class=\"import-flex-row\">\n    <lib-pop-entity-field-entries [core]=\"core\" [field]=\"field\" [scheme]=\"scheme\"></lib-pop-entity-field-entries>\n  </div>\n\n  <mat-divider [style.width.%]=100 [style.marginBottom.px]=15></mat-divider>\n\n  <div class=\"import-flex-row\" [style.maxHeight.px]=\"dom.height.outer\">\n    <div class=\"import-flex-item-md import-flex-grow-md\">\n      <lib-field-builder-items [core]=\"core\" [scheme]=\"scheme\"></lib-field-builder-items>\n    </div>\n    <div class=\"import-flex-item-md import-flex-grow-md\">\n      <lib-field-builder-items-params [core]=core [scheme]=\"scheme\"></lib-field-builder-items-params>\n    </div>\n  </div>\n</div>\n",
                    styles: [":host{flex:1;flex-grow:1}.pop-entity-field-editor-settings-container{display:flex;flex-direction:column;border:1px solid var(--border);padding:var(--gap-s) var(--gap-sm) var(--gap-sm) var(--gap-sm);background:var(--bg-3);margin:var(--gap-sm) 0}"]
                },] }
    ];
    PopEntityFieldSettingsComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopFieldEditorService }
    ]; };
    PopEntityFieldSettingsComponent.propDecorators = {
        field: [{ type: i0.Input }],
        scheme: [{ type: i0.Input }]
    };

    var PopEntitySchemeFieldSettingComponent = /** @class */ (function (_super) {
        __extends(PopEntitySchemeFieldSettingComponent, _super);
        function PopEntitySchemeFieldSettingComponent(el, dialog, _domRepo, _fieldRepo, _utilFieldRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.dialog = dialog;
            _this._domRepo = _domRepo;
            _this._fieldRepo = _fieldRepo;
            _this._utilFieldRepo = _utilFieldRepo;
            _this.config = {};
            _this.name = 'PopEntitySchemeFieldSettingComponent';
            _this.srv = {
                field: undefined,
                utilField: undefined,
            };
            _this.asset = {
                currentFieldTraitEntryMapping: undefined,
                currentPrimary: undefined,
                fieldTraitEntryMapping: undefined,
                fieldCore: undefined,
                field: undefined,
                scheme: undefined,
                storage: undefined,
            };
            _this.ui = {
                name: undefined,
                makePrimary: undefined,
                showName: undefined,
                showNameCore: undefined,
                profileRequired: undefined,
            };
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this._setInitialConfig()];
                            case 1:
                                _a.sent();
                                this.template.attach('container');
                                this._templateRender();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        PopEntitySchemeFieldSettingComponent.prototype.onEscapeHandler = function (event) {
            console.log('esc', event);
            this.onFormClose();
        };
        PopEntitySchemeFieldSettingComponent.prototype.onFormClose = function () {
            if (IsObject(this.dialog)) {
                this.dialog.close(this.core.entity);
            }
        };
        PopEntitySchemeFieldSettingComponent.prototype.onOutsideCLick = function () {
            console.log('onOutsideCLick');
            // if( IsObject( this.dialog ) ){
            //   this.dialog.close(this.config);
            // }
        };
        /**
         * This component should have a specific purpose
         */
        PopEntitySchemeFieldSettingComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntitySchemeFieldSettingComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntitySchemeFieldSettingComponent.prototype._setInitialConfig = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _a, primary_1, fieldGroupName_1, isPrimary, required, isRequired;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this.asset;
                            return [4 /*yield*/, exports.PopEntity.getCoreConfig('field', this.config.asset_id)];
                        case 1:
                            _a.fieldCore = _b.sent();
                            this.asset.field = this.asset.fieldCore.entity;
                            this.asset.scheme = this.core.entity;
                            // this.asset.scheme.traits = this.srv.field.getFieldTraits( this.asset.field.fieldgroup.name );
                            this.dom.state.isMultipleValues = +this.asset.field.multiple === 1;
                            return [4 /*yield*/, this.srv.field.register(this.asset.fieldCore, this.dom.repo, this.asset.scheme)];
                        case 2:
                            _b.sent();
                            this.ui.showName = StorageGetter(this.dom.repo, 'ui.customSetting.show_name.inputs.config'.split('.'), null);
                            this.ui.showNameCore = StorageGetter(this.dom.repo, 'ui.customSetting.show_name.inputs.core'.split('.'), null);
                            this.srv.utilField.clearCustomFieldCache(+this.core.entity.id);
                            this.ui.name = new InputConfig({
                                name: 'label',
                                label: 'Name',
                                value: this.config.asset.label,
                                readonly: true,
                                facade: true,
                                patch: {
                                    field: 'label',
                                    path: ''
                                }
                            });
                            if ('make_primary' in this.asset.field.setting) {
                                primary_1 = this.srv.field.getSchemePrimary(this.asset.scheme);
                                fieldGroupName_1 = StorageGetter(this.asset.field, ['fieldgroup', 'name']);
                                isPrimary = +primary_1[fieldGroupName_1] === +this.asset.field.id;
                                this.asset.currentPrimary = IsNumber(primary_1[fieldGroupName_1]) ? +primary_1[fieldGroupName_1] : null;
                                this.asset.currentFieldTraitEntryMapping = this.srv.field.getSchemeFieldSection(this.asset.scheme, +this.asset.field.id, 'trait_entry');
                                this.asset.storage = this.srv.field.getSchemeFieldSetting(this.asset.scheme, +this.asset.field.id);
                                // console.log( 'currentPrimary', this.asset.currentPrimary );
                                // console.log( 'currentFieldEntityMapping', this.asset.currentFieldTraitEntryMapping );
                                this.asset.fieldTraitEntryMapping = {};
                                if (IsArray(this.asset.field.trait, true)) {
                                    this.asset.field.trait.map(function (trait) {
                                        _this.asset.fieldTraitEntryMapping[trait.name] = _this.asset.field.entries[0].id;
                                    });
                                }
                                // console.log( 'fieldTraitEntryMapping', this.asset.fieldTraitEntryMapping );
                                if (IsObject(primary_1) && IsString(fieldGroupName_1, true)) {
                                    this.ui.makePrimary = new SwitchConfig({
                                        label: "Primary " + this.asset.field.fieldgroup.label,
                                        value: isPrimary,
                                        disabled: isPrimary,
                                        facade: true,
                                        patch: {
                                            field: '',
                                            path: '',
                                            callback: function (core, event) { return __awaiter(_this, void 0, void 0, function () {
                                                var _this = this;
                                                return __generator(this, function (_a) {
                                                    this.dom.setTimeout("update-primary", function () { return __awaiter(_this, void 0, void 0, function () {
                                                        return __generator(this, function (_a) {
                                                            switch (_a.label) {
                                                                case 0:
                                                                    if (event.config.control.value) {
                                                                        primary_1[fieldGroupName_1] = +this.asset.field.id;
                                                                        this.asset.storage.entity_trait = this.asset.fieldTraitEntryMapping;
                                                                    }
                                                                    else {
                                                                        primary_1[fieldGroupName_1] = this.asset.currentPrimary;
                                                                        this.asset.storage.entity_trait = this.asset.currentFieldTraitEntryMapping;
                                                                    }
                                                                    return [4 /*yield*/, this.srv.field.updateSchemePrimaryMapping(this.asset.scheme)];
                                                                case 1:
                                                                    _a.sent();
                                                                    this._templateRender();
                                                                    return [2 /*return*/];
                                                            }
                                                        });
                                                    }); });
                                                    return [2 /*return*/];
                                                });
                                            }); }
                                        }
                                    });
                                }
                            }
                            required = this.srv.field.getSchemeRequired(this.asset.scheme);
                            isRequired = required.includes(+this.asset.field.id);
                            this.ui.profileRequired = new SwitchConfig({
                                label: "Required To Save " + exports.PopPipe.transform('profile', { type: 'entity', arg1: 'alias', arg2: 'singular' }),
                                value: isRequired,
                                facade: true,
                                patch: {
                                    field: '',
                                    path: '',
                                    callback: function (core, event) {
                                        if (event.config.control.value) {
                                            required.push(+_this.asset.field.id);
                                        }
                                        else {
                                            required.splice(required.indexOf(+_this.asset.field.id));
                                        }
                                        _this.srv.field.updateSchemeRequiredMapping(_this.asset.scheme);
                                    }
                                }
                            });
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * Helper function that renders the list of dynamic components
         *
         */
        PopEntitySchemeFieldSettingComponent.prototype._templateRender = function () {
            this.template.render([{
                    type: PopEntityFieldSettingsComponent,
                    inputs: {
                        core: this.asset.fieldCore,
                        field: this.asset.field,
                        scheme: this.asset.scheme
                    }
                }], [], true);
        };
        return PopEntitySchemeFieldSettingComponent;
    }(PopExtendDynamicComponent));
    PopEntitySchemeFieldSettingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-scheme-field-setting',
                    template: "<div class=\"entity-scheme-field-loader\" *ngIf=\"dom.state.loader\">\n  <lib-main-spinner></lib-main-spinner>\n</div>\n<div class=\"import-flex-column import-flex-item-full\" [ngClass]=\"{'sw-hidden': !dom.state.loaded}\">\n  <div class=\"import-flex-row import-flex-end-center\">\n    <div class=\"sw-pointer\" (click)=\"onFormClose();\">\n      <mat-icon>close</mat-icon>\n    </div>\n  </div>\n  <div class=\"import-flex-row\">\n    <div class=\"import-flex-column-md\">\n      <lib-pop-input *ngIf=\"ui.name\" [config]=\"ui.name\"></lib-pop-input>\n    </div>\n    <div class=\"import-flex-column-md import-flex-end-center\">\n    </div>\n  </div>\n  <div class=\"entity-scheme-field-setting-container import-flex-column\" (libClickOutside)=\"onOutsideCLick();\">\n    <div class=\"import-flex-row\">\n      <div class=\"import-flex-column-md\">\n        <lib-pop-switch *ngIf=\"!dom.state.isMultipleValues && ui.showName\" [core]=\"ui.showNameCore\" [config]=\"ui.showName\"></lib-pop-switch>\n        <lib-pop-switch *ngIf=\"ui.makePrimary\" [core]=\"ui.showNameCore\" [config]=\"ui.makePrimary\"></lib-pop-switch>\n        <lib-pop-switch *ngIf=\"ui.profileRequired\" [core]=\"ui.profileRequired\" [config]=\"ui.profileRequired\"></lib-pop-switch>\n      </div>\n      <div class=\"import-flex-column-md\">\n      </div>\n    </div>\n    <mat-divider [style.width.%]=\"100\" [style.marginTop.px]=\"5\"></mat-divider>\n    <div class=\"import-flex-row import-flex-item-full\">\n      <ng-template #container></ng-template>\n      <!--<lib-pop-entity-field-settings [core]=ui.fieldCore [field]=\"ui.field\" [scheme]=\"ui.scheme\"></lib-pop-entity-field-settings>-->\n    </div>\n  </div>\n\n  <div class=\"entity-scheme-dialog-buttons\" *ngIf=\"dom.state.loaded\">\n    <button class=\"entity-scheme-dialog-cancel\" mat-raised-button (click)=\"onFormClose();\" [disabled]=\"dom.state.pending\">\n      Close\n    </button>\n  </div>\n</div>\n\n",
                    providers: [PopFieldEditorService, PopDomService],
                    styles: [".entity-scheme-field-setting-container{flex:1;min-width:650px;border:1px solid var(--border);padding:0 var(--gap-m);margin-top:var(--gap-m);box-sizing:border-box}.entity-scheme-field-loader{height:800px}.entity-scheme-close-btn{position:absolute;top:-20px;right:-20px}.entity-scheme-dialog-buttons{margin-top:20px;margin-bottom:10px;display:flex;justify-content:flex-end}.entity-scheme-dialog-buttons .entity-scheme-dialog-close{order:1;display:flex;align-items:center;justify-content:center;min-height:35px;min-width:120px}"]
                },] }
    ];
    PopEntitySchemeFieldSettingComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1$2.MatDialogRef },
        { type: PopDomService },
        { type: PopFieldEditorService },
        { type: PopEntityUtilFieldService }
    ]; };
    PopEntitySchemeFieldSettingComponent.propDecorators = {
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }],
        config: [{ type: i0.Input }],
        onEscapeHandler: [{ type: i0.HostListener, args: ['document:keydown.escape', ['$event'],] }]
    };

    var PopEntitySchemeService = /** @class */ (function (_super) {
        __extends(PopEntitySchemeService, _super);
        function PopEntitySchemeService(// This service is unique to every component, provided in the PopEntityTabComponent
        tabRepo) {
            var _this = _super.call(this) || this;
            _this.tabRepo = tabRepo;
            _this.name = 'PopEntitySchemeService';
            _this.ui = {
                refresh: new rxjs.Subject(),
                attachedMap: {},
                assetPool: {},
                assignableConfigs: {},
                primary: {},
                primaryIds: [],
                sections_keys: [],
                sections: undefined
            };
            _this.asset = {
                attachingSet: {},
                assetMap: {
                    field: new Map(),
                    component: new Map(),
                },
                core: undefined,
                tab: undefined,
            };
            _this._setServiceContainer();
            exports.PopLog.init(_this.name, "created:" + _this.id);
            return _this;
        }
        PopEntitySchemeService.prototype._setServiceContainer = function () {
            this.srv = {
                action: exports.ServiceInjector.get(PopEntityActionService),
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                tab: this.tabRepo
            };
            delete this.tabRepo;
        };
        /**
         * This fx takes the initial data and configures it to the expected structure and sets up all the ancillary assets needed
         * @param core
         * @param tab
         */
        PopEntitySchemeService.prototype.init = function (core, tab) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var fields, components, defaultSections, remainingFlex, lastSection, requests, primaryIds, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.asset.core = IsObjectThrowError(core, true, this.name + ":core") ? core : null;
                            this.asset.tab = IsObjectThrowError(tab, true, this.name + ":init: - tab") ? tab : {};
                            // this.asset.attach = { fields: {}, components: {} };
                            // let value;
                            this.ui.sections_keys = [];
                            if (!(IsObject(core.entity.mapping))) {
                                core.entity.mapping = {};
                            }
                            if (!(IsObject(core.entity.mapping.field))) {
                                core.entity.mapping.field = {};
                            }
                            if (!(IsObject(core.entity.mapping.primary))) {
                                core.entity.mapping.primary = {};
                            }
                            if (!(IsArray(core.entity.mapping.required))) {
                                core.entity.mapping.required = [];
                            }
                            else {
                                core.entity.mapping.required = ArrayOnlyUnique(core.entity.mapping.required);
                            }
                            // if( !( IsObject( core.entity.mapping.field ) ) ){
                            //   core.entity.mapping.field = <KeyMap<any>>{};
                            // }
                            // console.log('orig scheme', core.entity.name, core.entity.mapping);
                            this.ui.primary = StorageGetter(core, ['entity', 'mapping', 'primary'], {});
                            this.ui.primaryIds = Object.values(this.ui.primary).map((function (i) { return +i; })).sort();
                            fields = ArrayKeyBy(StorageGetter(this.asset.core, 'resource.custom_fields.data_values'.split('.'), []), 'id');
                            Object.keys(fields).map(function (fieldId) {
                                var field = fields[fieldId];
                                field.primary = _this.ui.primaryIds.includes(+fieldId);
                            });
                            components = ArrayKeyBy(StorageGetter(this.asset.core, 'resource.custom_components.data_values'.split('.'), []), 'id');
                            Object.keys(components).map(function (componentId) {
                                components[componentId].primary = false;
                            });
                            this.ui.assetPool = {
                                field: fields,
                                component: components
                            };
                            exports.PopLog.init(this.name, "ui.assetPool", this.ui.assetPool);
                            Object.keys(this.ui.assetPool).map(function (assetType) {
                                _this._ensureAssetTypeContainers(assetType);
                                Object.keys(_this.ui.assetPool[assetType]).map(function (assetId) {
                                    _this.asset.assetMap[assetType].set(+assetId, CleanObject(_this.ui.assetPool[assetType][assetId]));
                                    _this.ui.assetPool[assetType][assetId].compact = typeof _this.ui.assetPool[assetType][assetId].compact !== 'undefined' ? +_this.ui.assetPool[assetType][assetId].compact : 1;
                                });
                            });
                            defaultSections = [
                                {
                                    id: 0,
                                    name: "",
                                    business_id: exports.PopBusiness.id,
                                    scheme_id: +core.entity.id,
                                    sort_order: 0,
                                    container: true,
                                    children: [],
                                    mapping: {},
                                    modified: true
                                },
                                {
                                    id: 0,
                                    name: "",
                                    business_id: exports.PopBusiness.id,
                                    scheme_id: +core.entity.id,
                                    sort_order: 1,
                                    container: true,
                                    children: [],
                                    mapping: {},
                                    modified: true
                                },
                                {
                                    id: 0,
                                    name: "",
                                    business_id: exports.PopBusiness.id,
                                    scheme_id: +core.entity.id,
                                    sort_order: 2,
                                    container: true,
                                    children: [],
                                    mapping: {},
                                    modified: true
                                }
                            ];
                            this.ui.sections = IsArrayThrowError(core.entity.children, false, "Entity did not contain children") ? core.entity.children.slice(0, 3) : []; // turned off copy for now since other components are looking at the _server_sections for looping
                            if (!(IsArray(this.ui.sections, true)))
                                this.ui.sections = defaultSections;
                            remainingFlex = 4 - this.ui.sections.length;
                            this.ui.sections.map(function (section, index) {
                                section = _this._transformSection(section, index);
                                // const tableAssets = this._getSectionTableFieldsAssets( section );
                                // section.children = [ ...tableAssets, ...section.children ];
                                section.predicate = function (item) {
                                    var data = item.data;
                                    return data.compact;
                                };
                                _this.ui.sections_keys.push(section.position);
                            });
                            if (this.ui.sections && this.ui.sections.length > 1) {
                                lastSection = this.ui.sections[this.ui.sections.length - 1];
                                lastSection.predicate = function (item) {
                                    return true;
                                };
                                if (remainingFlex)
                                    lastSection.flex += remainingFlex;
                            }
                            Object.keys(this.ui.assetPool).map(function (assetType) {
                                var value;
                                Object.keys(_this.ui.assetPool[assetType]).map(function (assetId) {
                                    value = _this.ui.attachedMap[assetType].has(+assetId);
                                    _this.ui.assignableConfigs[assetType][assetId] = new CheckboxConfig({
                                        bubble: true,
                                        value: value,
                                        disabled: value,
                                    });
                                });
                            });
                            requests = [];
                            this.ui.sections.map(function (section) {
                                requests.push(_this._resolveSectionId(section).then(function (id) {
                                    section.id = id;
                                }));
                            });
                            return [4 /*yield*/, rxjs.forkJoin(requests)];
                        case 1:
                            _b.sent();
                            primaryIds = JsonCopy(this.ui.primaryIds);
                            this.ui.sections.sort(DynamicSort('sort_order'));
                            primaryIds = this._checkForTraits(core, this.ui.sections, primaryIds);
                            if (!(IsArray(this.ui.sections, true) && primaryIds.length)) return [3 /*break*/, 3];
                            primaryIds.map(function (fieldId) {
                                _this.onAssetAttaching('field', +fieldId, true);
                            });
                            _a = this.ui.sections[0];
                            return [4 /*yield*/, this.onAttachingAssetsToPosition(this.ui.sections[0])];
                        case 2:
                            _a.children = _b.sent();
                            _b.label = 3;
                        case 3: return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * This fx is used to remove an asset/child from the scheme
         * @param position
         * @param asset
         */
        PopEntitySchemeService.prototype.onRemoveChildFromLayout = function (position, child) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var positionIndex, container_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            positionIndex = position - 1;
                            if (!this.asset.core.entity.children[positionIndex]) return [3 /*break*/, 3];
                            container_1 = this.ui.sections[positionIndex];
                            if (!(child && typeof child.sort_order === 'number')) return [3 /*break*/, 2];
                            this.srv.tab.showAsLoading(true);
                            return [4 /*yield*/, this._removeSection(child)];
                        case 1:
                            _a.sent();
                            container_1.children = container_1.children.filter(function (section) {
                                return section.id !== child.id;
                            });
                            // transferArrayItem( container.children, [], child.sort_order, 0 );
                            container_1.mapping.sort_order = [];
                            container_1.children.map(function (item, index) {
                                if (item.id)
                                    container_1.mapping.sort_order.push(item.id);
                                item.sort_order = index;
                            });
                            this._setChildAsAttachable(child);
                            this.srv.tab.showAsLoading(false);
                            // this.onTriggerUpdate(1000);
                            return [2 /*return*/, resolve(true)];
                        case 2: return [3 /*break*/, 4];
                        case 3: return [2 /*return*/, resolve(true)];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * A user can dragSort aassets from one column to another in the scheme layout
         * @param event
         */
        PopEntitySchemeService.prototype.onAssetSortDrop = function (event) {
            // console.log( 'onAssetSortDrop', event );
            var data;
            var prev;
            if (event.previousContainer === event.container) {
                data = this._getEventContainerData(event.container);
                if (+event.currentIndex < +data.startIndex)
                    event.currentIndex = +data.startIndex;
                dragDrop.moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
                this._storePositionSortOrder(this._getSectionByPosition(data.position));
            }
            else {
                data = this._getEventContainerData(event.container);
                prev = this._getEventContainerData(event.previousContainer);
                if (+event.currentIndex < +data.startIndex)
                    event.currentIndex = +data.startIndex;
                dragDrop.transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);
                this._storePositionSortOrder(this._getSectionByPosition(prev.position));
                this._storePositionSortOrder(this._getSectionByPosition(data.position));
            }
            var droppedItem = event.item.data;
            var section = event.container.data.find(function (i) {
                return +i.id === +droppedItem.id;
            });
            if (IsObject(section, ['id'])) {
                section = section;
                if (+data.id !== +section.scheme_id) {
                    section.scheme_id = +data.id;
                    exports.PopRequest.doPatch("profile-schemes/" + section.id, { scheme_id: +data.id }, 1, false).subscribe(function () { return true; });
                }
            }
        };
        /**
         * This fx used to register that a user has check an asset in the asset poll intending to attach it to a column in the scheme
         * @param asset_type
         * @param itemId
         * @param value
         */
        PopEntitySchemeService.prototype.onAssetAttaching = function (asset_type, itemId, value) {
            if (this.asset.attachingSet[asset_type]) {
                if (value) {
                    this.asset.attachingSet[asset_type].add(+itemId);
                }
                else {
                    this.asset.attachingSet[asset_type].delete(+itemId);
                }
            }
        };
        /**
         * This fx is used to attach assets to a column in the scheme
         * The user will select which assets from a pool and then click a button representing the column where the assets should be pushed into
         * @param section
         */
        PopEntitySchemeService.prototype.onAttachingAssetsToPosition = function (section) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _a, items_1, child_1, asset_1, children_1, requests_1;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = section;
                            return [4 /*yield*/, this._resolveSectionId(section)];
                        case 1:
                            _a.id = _b.sent();
                            if (section.id) {
                                items_1 = this._getAssetsToAttach();
                                children_1 = [];
                                requests_1 = [];
                                if (IsObject(items_1, true)) {
                                    Object.keys(items_1).map(function (assetType) {
                                        Object.keys(items_1[assetType]).map(function (itemId) {
                                            asset_1 = _this.asset.assetMap[assetType].get(+itemId);
                                            child_1 = {
                                                id: null,
                                                name: asset_1.name,
                                                scheme_id: +section.id,
                                                asset_type: assetType,
                                                asset_id: +itemId,
                                                asset: asset_1,
                                                compact: assetType === 'component' ? asset_1.compact ? 1 : 0 : 1,
                                                position: section.position,
                                            };
                                            _this._setChildAsAttached(child_1);
                                            children_1.push(child_1);
                                            requests_1.push(_this._resolveSectionId(child_1).then(function (id) {
                                                child_1.id = id;
                                            }));
                                        });
                                    });
                                }
                                rxjs.forkJoin(requests_1).subscribe(function () {
                                    var tmp = IsArray(section.children, true) ? section.children : [];
                                    section.mapping.sort_order = [];
                                    children_1 = __spreadArray(__spreadArray([], __read(tmp)), __read(children_1));
                                    children_1.map(function (x, i) {
                                        if (x.id)
                                            section.mapping.sort_order.push(x.id);
                                        x.sort_order = i;
                                    });
                                    // this.onTriggerUpdate();
                                    _this._resetAssetAttachingData();
                                    return resolve(children_1);
                                });
                            }
                            else {
                                return [2 /*return*/, resolve(null)];
                            }
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * This fx will take an array of sections an update any of the modified sections
         * @param sections
         */
        PopEntitySchemeService.prototype.onUpdate = function (sections) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!IsArray(sections, true)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this._update(sections, true)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                        case 2: return [2 /*return*/, resolve(false)];
                    }
                });
            }); });
        };
        /**
         * This fx is used to trigger an api call to save the current state of the scheme
         * @param delay
         */
        PopEntitySchemeService.prototype.onTriggerUpdate = function (delay) {
            if (delay === void 0) { delay = 500; }
            this.dom.setTimeout('update-api', function () {
                // this._update();
            }, delay);
        };
        /**   * A user can click on an edit button an edit the config settings of an asset
      
         * @param asset
         */
        PopEntitySchemeService.prototype.onEditAsset = function (asset) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var componentType, dialogRef, component_1;
                var _this = this;
                return __generator(this, function (_a) {
                    if (!this.dom.state.blockModal) {
                        this.dom.state.blockModal = true;
                        componentType = null;
                        // console.log('asset', asset);
                        if (asset.asset_type === 'field') {
                            componentType = PopEntitySchemeFieldSettingComponent;
                        }
                        else if (asset.asset_type === 'component') {
                            // console.log('here');
                        }
                        if (componentType) {
                            dialogRef = this.srv.dialog.open(PopEntitySchemeFieldSettingComponent, {
                                width: "900px",
                                height: "1080px",
                                panelClass: 'sw-mar-sm',
                                disableClose: true
                            });
                            component_1 = dialogRef.componentInstance;
                            component_1.core = this.asset.core;
                            component_1.config = asset;
                            this.dom.setSubscriber('asset-modal', dialogRef.beforeClosed().subscribe(function (scheme) {
                                if (scheme) {
                                    _this.init(_this.asset.core, _this.asset.tab);
                                    component_1 = null;
                                }
                                else {
                                    component_1 = null;
                                }
                                _this.dom.state.blockModal = false;
                                return resolve(true);
                            }));
                        }
                        else {
                            this.dom.state.blockModal = false;
                            return [2 /*return*/, resolve(false)];
                        }
                    }
                    else {
                        this.dom.state.blockModal = false;
                        return [2 /*return*/, resolve(false)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        PopEntitySchemeService.prototype.getFieldMapping = function (fieldId) {
            var storage = this.asset.core.entity.mapping.field;
            return StorageSetter(storage, ["field_" + fieldId]);
        };
        PopEntitySchemeService.prototype.ngOnDestroy = function () {
            exports.PopLog.warn(this.name, "destroyed:" + this.id);
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * There a by default 3 columns, 1,2,3, this fx allows to find the section that represent one of those columns with
         * @param position number 1,2,3
         * @private
         */
        PopEntitySchemeService.prototype._getSectionByPosition = function (position) {
            var section = {};
            // console.log( 'position', position );
            if (+position) {
                var sectionIndex = position - 1;
                // console.log( 'sectionIndex', sectionIndex, this.ui.sections );
                if (sectionIndex in this.ui.sections) {
                    section = this.ui.sections[sectionIndex];
                }
            }
            return section;
        };
        /**
         * This fx is used to map the the sort_order of all a section's children
         * @param section
         * @private
         */
        PopEntitySchemeService.prototype._storePositionSortOrder = function (section) {
            // console.log( '_storePositionSortOrder', section );
            if (IsObject(section, ['id', 'children'])) {
                section.mapping.sort_order = [];
                if (IsArray(section.children)) {
                    section.children.map(function (item, index) {
                        // console.log('item', item);
                        if (item.id)
                            section.mapping.sort_order.push(item.id);
                        item.sort_order = index;
                    });
                    var patch = {
                        mapping: {
                            sort_order: section.mapping.sort_order
                        }
                    };
                    exports.PopRequest.doPatch("profile-schemes/" + section.id, patch, 1, false).subscribe(function () { return true; });
                }
            }
        };
        /**
         * This fx will extract the data attributes stored on a html element
         * @param container
         * @private
         */
        PopEntitySchemeService.prototype._getEventContainerData = function (container) {
            var data = DeepCopy(StorageGetter(container, 'element.nativeElement.dataset'.split('.'), {}));
            if (IsObject(data, true)) {
                Object.keys(data).map(function (key) {
                    data[key] = ParseModelValue(data[key]);
                });
            }
            return data;
        };
        /**
         * Ensure that a section has an id that is stored int the api database
         * @param section
         */
        PopEntitySchemeService.prototype._resolveSectionId = function (section) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    if (IsObject(section, true)) {
                        if (+section.id) {
                            return [2 /*return*/, resolve(+section.id)];
                        }
                        else {
                            data = this._extractSectionData(section);
                            this.dom.setSubscriber(PopUid(), exports.PopRequest.doPost("profile-schemes", data, 1, false).subscribe(function (res) {
                                if (res.data)
                                    res = res.data;
                                return resolve(+res.id);
                            }, function () {
                                return resolve(0);
                            }));
                        }
                    }
                    else {
                        return [2 /*return*/, resolve(0)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * This fx will make the api call to remove a section in the api database
         * @param section
         */
        PopEntitySchemeService.prototype._removeSection = function (section) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (IsObject(section, ['id'])) {
                        this.dom.setSubscriber(PopUid(), exports.PopRequest.doDelete("profile-schemes/" + section.id, {}, 1, false).subscribe(function (res) {
                            if (res.data)
                                res = res.data;
                            // console.log( '_removeSection', res );
                            return resolve(true);
                        }, function () {
                            return resolve(false);
                        }));
                    }
                    else {
                        return [2 /*return*/, resolve(true)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * This fx is used to make api call to the backend to save the scheme
         * @param store
         * @private
         */
        PopEntitySchemeService.prototype._update = function (sections, store) {
            var _this = this;
            if (store === void 0) { store = true; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var modified, request_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.asset.core) return [3 /*break*/, 3];
                            modified = this._extractModifiedSections(sections, []);
                            if (!(store && IsArray(modified, true))) return [3 /*break*/, 2];
                            request_1 = [];
                            modified.map(function (section) {
                                if (+section.id) {
                                    request_1.push(exports.PopRequest.doPatch("profile-schemes/" + section.id, section, 1, false));
                                }
                                else {
                                    request_1.push(exports.PopRequest.doPost("profile-schemes", section, 1, false));
                                }
                            });
                            return [4 /*yield*/, rxjs.forkJoin(request_1)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                        case 2: return [3 /*break*/, 4];
                        case 3: return [2 /*return*/, resolve(true)];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * This fx is used to pull out all the scheme sections that need to be saved
         * @param sections
         * @private
         */
        PopEntitySchemeService.prototype._extractModifiedSections = function (sections, extracted) {
            var _this = this;
            if (extracted === void 0) { extracted = []; }
            if (IsArray(sections, true)) {
                sections.map(function (section, index) {
                    section.sort_order = index;
                    if (section.modified) {
                        extracted.push(_this._extractSectionData(section));
                        section.modified = false;
                    }
                    if (IsArray(section.children, true)) {
                        section.children.map(function (child, childIndex) {
                            child.sort_order = childIndex;
                            if (child.modified) {
                                extracted.push(_this._extractSectionData(child));
                                child.modified = false;
                            }
                            if (IsArray(child.children, true)) {
                                extracted = _this._extractModifiedSections(child.children, extracted);
                            }
                        });
                    }
                });
            }
            return extracted;
        };
        /**
         * This fx extracts the data off a section that should be store in the api database
         * @param section
         * @private
         */
        PopEntitySchemeService.prototype._extractSectionData = function (section) {
            return CleanObject({
                id: section.id,
                entity_id: 111,
                name: section.name ? section.name : null,
                asset_type: section.asset_type ? section.asset_type : null,
                asset_id: section.asset_type ? section.asset_id : null,
                scheme_id: section.scheme_id ? section.scheme_id : null,
                mapping: IsObject(section.mapping) ? section.mapping : { children: {} },
                sort_order: IsDefined(section.sort_order) ? section.sort_order : 99
            });
        };
        /**
         * Determine what assets have been set from the asset pool
         * This fx is called when a user click on a <column button> intending to attach assets into a specific column of the scheme
         */
        PopEntitySchemeService.prototype._getAssetsToAttach = function () {
            var _this = this;
            var attaching = {};
            Object.keys(this.asset.attachingSet).map(function (assetTypeKey) {
                _this.asset.attachingSet[assetTypeKey].forEach(function (assetId) {
                    if (!attaching[assetTypeKey])
                        attaching[assetTypeKey] = {};
                    var assetable = _this.asset.assetMap[assetTypeKey].get(assetId);
                    if (assetTypeKey === 'component') {
                        attaching[assetTypeKey][assetId] = { compact: assetable.compact ? 1 : 0 };
                    }
                    else {
                        attaching[assetTypeKey][assetId] = { compact: 1 };
                    }
                });
            });
            return attaching;
        };
        /**
         * Retrieve the default columns tht exist on an entity table
         * @param section
         */
        PopEntitySchemeService.prototype._getSectionTableFieldsAssets = function (section) {
            var tableAssets = [];
            if (this.asset.core) {
                var Field = StorageGetter(this.asset.core, 'repo.model.field'.split('.'));
                if (IsObject(Field, true)) {
                    Object.values(Field).map(function (field) {
                        if (!field.ancillary && field.position === section.position) {
                            tableAssets.push(new EntitySchemeSectionConfig({
                                id: 0,
                                name: field.model.label,
                                asset_type: 'table',
                                asset_id: 0,
                                asset: field,
                                scheme_id: +section.id,
                                sort_order: field.sort,
                                position: section.position,
                            }));
                        }
                    });
                }
            }
            section.startIndex = tableAssets.length;
            return tableAssets.sort(function (a, b) {
                if (a.sort < b.sort)
                    return -1;
                if (a.sort > b.sort)
                    return 1;
                return 0;
            });
        };
        /**
         * Convert child sections to the expected structure
         * @param child
         * @private
         */
        PopEntitySchemeService.prototype._transformSection = function (section, index) {
            var _this = this;
            section = CleanObject(section, { blacklist: ['flattened'] }); // first level are only containers
            section.container = true;
            section.position = index + 1;
            section.flex = 1;
            section.sort_order = index;
            if (!(IsObject(section.mapping)))
                section.mapping = {};
            if (!(IsArray(section.mapping.sort_order)))
                section.mapping.sort_order = [];
            if (!(IsArray(section.children)))
                section.children = [];
            section.children = section.children.filter(function (child) {
                if (String(String(child.asset_type).toLowerCase()).includes('field')) {
                    child.asset_type = 'field';
                }
                else if (String(String(child.asset_type).toLowerCase()).includes('component')) {
                    child.asset_type = 'component';
                }
                else if (String(String(child.asset_type).toLowerCase()).includes('widget')) {
                    child.asset_type = 'widget';
                }
                // console.log('type', child.asset_type);
                if (child.asset_type && child.asset_type != 'table') {
                    if (+child.asset_id) {
                        return _this.asset.assetMap[child.asset_type].has(child.asset_id);
                    }
                    else {
                        return true;
                    }
                }
                return child.asset_type != 'table';
            });
            section.children.map(function (child) {
                child = _this._transformChild(child);
                child.sort_order = section.mapping.sort_order.includes(child.id) ? +section.mapping.sort_order.indexOf(child.id) : 99;
                if (IsObject(child.asset, true)) {
                    if (IsString(child.asset_type, true)) {
                        child.compact = (IsObject(child.asset, ['compact']) && IsDefined(child.asset.compact) ? child.asset.compact : false);
                        _this._ensureAssetTypeContainers(child.asset_type);
                        _this.ui.attachedMap[child.asset_type].set(+child.asset_id, section.position);
                    }
                    else {
                        _this._transformSection(child, index);
                    }
                }
            });
            section.children.sort(DynamicSort('sort_order'));
            return section;
        };
        /**
         * Convert child of a section to the expected structure
         * @param child
         */
        PopEntitySchemeService.prototype._transformChild = function (child) {
            child = CleanObject(child);
            if (!(IsObject(child.mapping)))
                child.mapping = {};
            if (IsDefined(child.asset_id) && +child.asset_id) {
                delete child.children;
                if (String(String(child.asset_type).toLowerCase()).includes('field'))
                    child.asset_type = 'field';
                if (child.asset_type === 'field' && this.asset.assetMap.field.has(child.asset_id)) {
                    child.asset = this.asset.assetMap.field.get(child.asset_id);
                    child.name = child.asset.name;
                    child.compact = true;
                }
                else if (child.asset_type === 'component' && this.asset.assetMap.component.has(child.asset_id)) {
                    child.asset_type = 'component';
                    child.asset = this.asset.assetMap.component.get(child.asset_id);
                    child.name = child.asset.name;
                }
                child.container = false;
            }
            else {
                child.container = true;
            }
            return child;
        };
        /**
         * This fx is used ensures that an asset type has the all ancillary assets needed
         * @param assetType
         */
        PopEntitySchemeService.prototype._ensureAssetTypeContainers = function (assetType) {
            if (!this.asset.attachingSet[assetType])
                this.asset.attachingSet[assetType] = new Set();
            if (!this.asset.assetMap[assetType])
                this.asset.assetMap[assetType] = new Map();
            if (!this.ui.attachedMap[assetType])
                this.ui.attachedMap[assetType] = new Map();
            if (!this.ui.assignableConfigs[assetType])
                this.ui.assignableConfigs[assetType] = {};
        };
        /**
         * Clear out all the attaching set data
         */
        PopEntitySchemeService.prototype._resetAssetAttachingData = function () {
            var _this = this;
            Object.keys(this.asset.attachingSet).map(function (key) {
                _this.asset.attachingSet[key].clear();
            });
        };
        /**
         * Refresh the core entity
         * @param dom
         */
        PopEntitySchemeService.prototype._refreshEntity = function (dom) {
            var _this = this;
            if (dom === void 0) { dom = null; }
            this.asset.core.channel.emit({
                source: this.name,
                target: 'PopEntityTabComponent',
                type: 'component',
                name: 'start-refresh'
            });
            this.srv.tab.refreshEntity(null, dom, {}, this.name + ":viewEntityPortal").then(function (res) {
                _this.init(_this.asset.core, _this.asset.tab);
                _this.dom.state.blockModal = false;
                _this.asset.core.channel.emit({
                    source: _this.name,
                    target: 'PopEntityTabComponent',
                    type: 'component',
                    name: 'stop-refresh'
                });
            });
        };
        /**
         * This fx is used to mark an asset in the asset pool as attachable
         * @param asset
         */
        PopEntitySchemeService.prototype._setChildAsAttachable = function (child) {
            if (!child.container) {
                this.ui.attachedMap[child.asset_type].delete(child.asset_id);
                this.ui.assignableConfigs[child.asset_type][child.asset_id].control.setValue(0);
                this.ui.assignableConfigs[child.asset_type][child.asset_id].control.enable();
            }
        };
        /**
         * This fx is used to mark an asset in as attached, setting it up to be transferred to a column in the scheme
         * @param asset
         */
        PopEntitySchemeService.prototype._setChildAsAttached = function (child, position) {
            if (position === void 0) { position = 1; }
            if (!child.container) {
                this.ui.attachedMap[child.asset_type].set(child.asset_id, position);
                this.ui.assignableConfigs[child.asset_type][child.asset_id].control.setValue(1);
                this.ui.assignableConfigs[child.asset_type][child.asset_id].control.disable();
            }
        };
        /**
         * This fx is used to pull out all the scheme sections that need to be saved
         * @param sections
         * @private
         */
        PopEntitySchemeService.prototype._checkForTraits = function (core, sections, primaryIds) {
            var _this = this;
            if (primaryIds === void 0) { primaryIds = []; }
            if (IsArray(sections, true)) {
                sections.map(function (section) {
                    if (IsArray(section.children, true)) {
                        section.children.map(function (child) {
                            if (child.asset_type === 'field') {
                                child.asset.required = IsArray(core.entity.mapping.required) ? core.entity.mapping.required.includes(child.asset_id) : false;
                                if (primaryIds.includes(child.asset_id)) {
                                    primaryIds.splice(primaryIds.indexOf(child.asset_id), 1);
                                    child.asset.primary = true;
                                }
                                else {
                                    child.asset.primary = false;
                                }
                            }
                            if (IsArray(child.children, true)) {
                                _this._checkForTraits(core, child.children, primaryIds);
                            }
                        });
                    }
                });
            }
            return primaryIds;
        };
        return PopEntitySchemeService;
    }(PopExtendService));
    PopEntitySchemeService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntitySchemeService_Factory() { return new PopEntitySchemeService(i0__namespace.ɵɵinject(PopTabMenuService)); }, token: PopEntitySchemeService, providedIn: "root" });
    PopEntitySchemeService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopEntitySchemeService.ctorParameters = function () { return [
        { type: PopTabMenuService }
    ]; };

    var PopEntitySchemeAssetPoolComponent = /** @class */ (function (_super) {
        __extends(PopEntitySchemeAssetPoolComponent, _super);
        /**
         *
         * @param el
         * @param _domRepo - transfer
         * @param _schemeRepo - transfer
         * @param _tabRepo - transfer
         */
        function PopEntitySchemeAssetPoolComponent(el, _domRepo, _schemeRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._schemeRepo = _schemeRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopEntitySchemeAssetPoolComponent';
            _this.ui = {
                sections: undefined,
                assignBtnConfigs: undefined,
                assignableConfigs: undefined,
                assetPool: undefined,
                section_keys: undefined
            };
            _this.asset = {
                primaryIds: []
            };
            _this.srv = {
                scheme: undefined,
                tab: undefined,
                router: exports.ServiceInjector.get(i1.Router)
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.dom.session.searchValue = '';
                                // #1: Transfer in misc assets from the schemeRepo
                                this.dom.state.searching = false;
                                this.asset.primaryIds = this.srv.scheme.ui.primaryIds;
                                return [4 /*yield*/, this.dom.setWithComponentInnerHeight('PopEntityTabColumnComponent', this.position, 230, 600)];
                            case 1:
                                _a.sent();
                                this.dom.height.content = this.dom.height.inner - 95;
                                this._setUiAssets();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        // #5: Reapply any onSession search that may have existed
                        this.onApplyUiSearch(this.dom.session.searchValue);
                        // #6: Disable the ui assign buttons for the initial view
                        this.onDisableUiAssignButtons();
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        /**
         * The purpose of this component is to provide the user with lists of all available types that they can assign into a scheme layout
         */
        PopEntitySchemeAssetPoolComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntitySchemeAssetPoolComponent.prototype._setUiAssets = function () {
            var _this = this;
            this.ui.sections = this.srv.scheme.ui.sections; // transfer sections from schemeRepo
            this.ui.assignableConfigs = this.srv.scheme.ui.assignableConfigs; // transfer assignableConfigs for attaching assets from pools
            // #2: Build the config for the buttons that the user will push to assign items to a layout position
            this.ui.assignBtnConfigs = []; // create a button for each section to assign assets from the pools with
            this.ui.sections.map(function (section) {
                _this.ui.assignBtnConfigs[section.position] = new ButtonConfig({
                    bubble: true,
                    event: 'assign',
                    value: 'Column ' + (+section.position),
                    size: 30,
                    text: 16,
                    icon: null,
                });
            });
            // #4: Configure the asset ppol items that a user can choose from to position in the layout
            var assetPool = IsObjectThrowError(this.srv.scheme.ui.assetPool, true, this.name + ":configureDom: - this.srv.scheme.asset.asset_pool") ? JSON.parse(JSON.stringify(this.srv.scheme.ui.assetPool)) : {}; // transfer asset_pools from schemeRepo and mutate
            assetPool = Object.keys(assetPool).map(function (assetTypeKey) {
                _this.dom.state[assetTypeKey] = {
                    expanded: true,
                    visible: {},
                    attach: {}, // used with the search mechanism
                };
                return {
                    name: assetTypeKey,
                    asset_type: assetTypeKey,
                    display: TitleCase(assetTypeKey),
                    data: assetPool[assetTypeKey],
                    list: ToArray(assetPool[assetTypeKey])
                };
            });
            this.ui.assetPool = IsArrayThrowError(assetPool, true, this.name + ":configureDom: - pools") ? assetPool : [];
        };
        /**
         * Cear the search input and reset the asset pool list
         */
        PopEntitySchemeAssetPoolComponent.prototype.onUiSearchValueClear = function () {
            this.dom.session.searchValue = '';
            this.onApplyUiSearch(this.dom.session.searchValue);
        };
        /**
         * Apply the search value the user entered to the asset pool list
         * @param searchValue
         * @param col
         */
        PopEntitySchemeAssetPoolComponent.prototype.onApplyUiSearch = function (searchValue, col) {
            var _this = this;
            if (col === void 0) { col = ''; }
            if (this.dom.delay.search)
                clearTimeout(this.dom.delay.search);
            this.dom.delay.search = setTimeout(function () {
                if (searchValue.length) {
                    _this.ui.assetPool.map(function (pool) {
                        if (IsObject(_this.dom.state[pool.name])) {
                            pool.list.map(function (item) {
                                _this.dom.state[pool.name].visible[item.id] = ObjectContainsTagSearch({
                                    id: item.id,
                                    name: item.name,
                                }, searchValue) === true;
                            });
                        }
                    });
                    setTimeout(function () {
                        _this.dom.state.searching = true;
                    });
                }
                else {
                    _this.ui.assetPool.map(function (pool) {
                        if (IsObject(_this.dom.state[pool.name])) {
                            pool.list.map(function (item) {
                                _this.dom.state[pool.name].visible[item.id] = 1;
                            });
                        }
                    });
                    _this.dom.state.searching = false;
                }
            }, 200);
        };
        /**
         * The user can expand an asset pool type to be open or closed
         * @param pool
         */
        PopEntitySchemeAssetPoolComponent.prototype.onTogglePoolExpansion = function (pool) {
            if (pool && pool.name in this.dom.state) {
                this.dom.state[pool.name].expanded = !this.dom.state[pool.name].expanded;
            }
        };
        /**
         * This is triggered when a user selects a checkbox indicating that it will be assigned to a position of the layout
         * @param asset_type
         * @param itemId
         * @param value
         */
        PopEntitySchemeAssetPoolComponent.prototype.onAssetPoolItemAttaching = function (asset_type, itemId, value) {
            this.srv.scheme.onAssetAttaching(asset_type, itemId, value);
            this.onEnableUiAssignButtons();
        };
        /**
         * This is triggered when a user selects a position button indicating they want the selected asset pool items moved to a position of the layout
         * @param section
         * @param $event
         */
        PopEntitySchemeAssetPoolComponent.prototype.onSectionAttachingItems = function (section, $event) {
            var _this = this;
            this.onDisableUiAssignButtons();
            section.modified = true;
            this.srv.tab.showAsLoading(true);
            this.srv.scheme.onAttachingAssetsToPosition(section).then(function (children) {
                if (IsArray(children, true)) {
                    section.children = children;
                    _this.srv.scheme.onUpdate([section]).then(function () {
                        // console.log( 'done with add ', section );
                        _this.srv.tab.showAsLoading(false);
                        _this.onDisableUiAssignButtons();
                    });
                }
                else {
                    // console.log( 'update section failed', section );
                    _this.srv.tab.showAsLoading(false);
                    _this.onDisableUiAssignButtons();
                }
            });
        };
        /**
         * This is triggered every time the user selects a checkbox of an asset pool item
         * This should determine which positions of the layout are eligible base on the set of the items selected
         * Asset Pool items should be designated as compact or not, the last position of the layout is reserved for larger modules and compact items should not go in it
         */
        PopEntitySchemeAssetPoolComponent.prototype.onEnableUiAssignButtons = function () {
            var _this = this;
            if (!this.ui.section_keys) {
                this.ui.section_keys = this.ui.sections.map(function (s, i) { return s.position; });
            }
            if (this.dom.delay.configure_buttons)
                clearTimeout(this.dom.delay.configure_buttons);
            this.dom.delay.configure_buttons = setTimeout(function () {
                var items = _this.srv.scheme._getAssetsToAttach();
                var notCompact;
                var assetTypes = Object.keys(items);
                assetTypes.some(function (assetType) {
                    notCompact = Object.keys(items[assetType]).filter(function (assetID) {
                        if (assetType === 'component') {
                            return !items[assetType][assetID].compact;
                        }
                        return false;
                    }).length;
                    if (notCompact)
                        return true;
                });
                var positionKeys = _this.ui.section_keys.slice();
                if (notCompact) {
                    var lastPositionKey = void 0;
                    if (positionKeys.length) {
                        lastPositionKey = positionKeys.pop();
                    }
                    positionKeys.map(function (positionKey) {
                        _this.ui.assignBtnConfigs[positionKey].disabled = true;
                    });
                    if (lastPositionKey)
                        _this.ui.assignBtnConfigs[lastPositionKey].disabled = false;
                }
                else {
                    positionKeys.map(function (positionKey) {
                        _this.ui.assignBtnConfigs[positionKey].disabled = false;
                        _this.ui.assignBtnConfigs[positionKey].color = 'accent';
                    });
                }
            }, 100);
        };
        /**
         * This will disable or clear the position assign buttons
         */
        PopEntitySchemeAssetPoolComponent.prototype.onDisableUiAssignButtons = function () {
            var _this = this;
            this.core.entity.children.map(function (section) {
                if (section.position) {
                    _this.ui.assignBtnConfigs[section.position].disabled = true;
                    _this.ui.assignBtnConfigs[section.position].color = 'default';
                }
            });
        };
        PopEntitySchemeAssetPoolComponent.prototype.onAssetLink = function (type, id) {
            if (type === 'field') {
                this.srv.router.navigateByUrl("/cis/fields/" + id).catch(function (e) {
                    console.log('e', e);
                });
            }
        };
        /**
         * A user can click on an item in the asset pool to view a modal of that specific entityId item
         * @param internal_namea
         * @param id
         */
        PopEntitySchemeAssetPoolComponent.prototype.onViewEntityPortal = function (internal_name, id) {
            var _this = this;
            if (internal_name === 'field') {
                this.core.channel.emit({ source: this.name, target: 'PopEntityTabColumnComponent', type: 'component', name: 'scrollTo' });
                exports.PopPortal.view(internal_name, id).then(function () {
                    _this.srv.scheme.ui.refresh.next('reload');
                });
            }
        };
        /**
         * Clean up the dom of this component
         */
        PopEntitySchemeAssetPoolComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntitySchemeAssetPoolComponent;
    }(PopExtendComponent));
    PopEntitySchemeAssetPoolComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-entity-scheme-asset-pool',
                    template: "<div class=\"entity-scheme-asset-pool-container\" *ngIf=\"dom.state.loaded\" [style.height.px]=\"dom.height.inner\">\n  <div class=\"entity-scheme-asset-pool-search\">\n    <mat-form-field class=\"sw-search\" appearance=\"outline\" color=\"accent\">\n      <a matPrefix>\n        <mat-icon>search</mat-icon>\n      </a>\n      <mat-icon class=\"sw-pointer\" matSuffix (click)=\"onUiSearchValueClear();\">close\n      </mat-icon>\n      <input matInput [(ngModel)]=\"dom.session.searchValue\" (keyup)=\"onApplyUiSearch($event.target.value, '')\" placeholder=\"Search\">\n    </mat-form-field>\n  </div>\n  <div class=\"entity-scheme-asset-pool-content\" [style.height.px]=dom.height.content>\n    <mat-accordion multi=\"true\" [displayMode]=\"'flat'\">\n      <mat-expansion-panel class=\"mat-expansion-panel-first\" *ngFor=\"let pool of ui.assetPool\" [expanded]=\"dom.state[pool.name]?.expanded || this.dom.state['searching']\" hideToggle=\"true\">\n        <mat-expansion-panel-header>\n          <div class=\"entity-scheme-asset-pool-panel-header\" (click)=\"$event.stopPropagation();\">\n            <div class=\"entity-scheme-asset-pool-panel-expansion\">\n              <mat-icon *ngIf=\"!dom.state[pool.name]?.expanded\" (click)=\"onTogglePoolExpansion(pool);\" [ngClass]=\"{'sw-hidden':this.dom.state['searching']}\">\n                keyboard_arrow_right\n              </mat-icon>\n              <mat-icon *ngIf=\"dom.state[pool.name]?.expanded\" (click)=\"onTogglePoolExpansion(pool);\" [ngClass]=\"{'sw-hidden':this.dom.state['searching']}\">\n                keyboard_arrow_down\n              </mat-icon>\n            </div>\n            <div class=\"entity-scheme-asset-pool-panel-name\">{{pool.display}}</div>\n          </div>\n        </mat-expansion-panel-header>\n        <div *ngIf=\"!pool.list.length\" class=\"theme-error\">\n          None\n        </div>\n        <div class=\"entity-scheme-asset-pool-row\"  *ngFor=\"let item of pool.list;\" [ngClass]=\"{'sw-hidden': !this.dom.state[pool.asset_type]?.visible[item.id]}\">\n          <div class=\"entity-scheme-asset-pool-row-container import-flex-column-xs\">\n            <lib-pop-checkbox [config]=\"ui['assignableConfigs'][pool.asset_type][item.id]\" (events)=\"onAssetPoolItemAttaching(pool.asset_type, item.id, $event.config.control.value)\"></lib-pop-checkbox>\n          </div>\n\n          <div class=\"entity-scheme-asset-pool-row-container import-flex-column-md import-flex-grow-sm\">\n            <div class=\"sw-pointer\" [ngClass]=\"{'theme-accent':pool.asset_type === 'field'}\" (click)=\"onViewEntityPortal(pool.asset_type, item.id);\">{{item.name}}</div>\n          </div>\n          <div class=\"entity-scheme-asset-pool-row-container entity-scheme-asset-pool-type import-flex-column-sm\" [ngSwitch]=\"pool.asset_type\">\n            <div *ngSwitchCase=\"'field'\">{{item.fieldgroup.label}}</div>\n            <div *ngSwitchCase=\"'component'\">Component</div>\n          </div>\n        </div>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n  <div class=\"entity-scheme-asset-pool-assign\">\n    <lib-pop-button *ngFor=\"let section of ui.sections\" class=\"entity-scheme-assign-btn\" [config]=\"ui.assignBtnConfigs [section.position]\" (events)=\"onSectionAttachingItems(section, $event);\"></lib-pop-button>\n  </div>\n</div>\n",
                    styles: [".entity-scheme-asset-pool-container{flex:1;padding:var(--gap-s);border:1px solid var(--border);overflow:hidden}.entity-scheme-asset-pool-search{position:relative;display:flex;box-sizing:border-box;width:100%;align-items:stretch;justify-content:stretch;height:40px;margin-bottom:var(--gap-s);clear:both}.entity-scheme-asset-pool-search mat-form-field{width:100%;box-sizing:border-box}.entity-scheme-asset-pool-assign{position:relative;display:flex;box-sizing:border-box;width:100%;align-items:center;justify-content:space-evenly;height:35px;padding:var(--gap-s);margin:var(--gap-s) 0 0 0;clear:both}.entity-scheme-asset-pool-content{position:relative;clear:both;overflow-y:scroll;overflow-x:hidden}.entity-scheme-asset-pool-panel-header{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:row;justify-content:flex-start;align-items:center;background:var(--darken02);border-bottom:1px solid var(--border)}.entity-scheme-asset-pool-panel-expansion{display:flex;margin:0 20px 0 8px;align-items:center;height:35px;width:25px}.entity-scheme-asset-pool-panel-name{font-size:var(--text-sm);font-weight:700;display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.entity-scheme-asset-pool-row{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:row;justify-content:flex-start;align-items:center;height:35px}.entity-scheme-asset-pool-row-container{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.entity-scheme-asset-pool-row-container ::ng-deep .pop-checkbox-container{margin-top:0!important}.entity-scheme-asset-pool-type{font-size:var(--text-sm);padding-top:var(--gap-s)}:host ::ng-deep mat-expansion-panel{background:none;border-left:1px solid var(--border);border-right:1px solid var(--border);border-bottom:1px solid var(--border)}.mat-expansion-panel-first{border-top:1px solid var(--border)!important}:host ::ng-deep .mat-expansion-panel-body{padding:var(--gap-s)!important}:host ::ng-deep mat-expansion-panel-header{padding:0!important;height:35px!important;border-bottom-left-radius:0;border-bottom-right-radius:0}.entity-scheme-assign-btn{display:flex;flex-grow:1;margin-left:var(--gap-xs);margin-right:var(--gap-xs)}.entity-scheme-assign-btn ::ng-deep .pop-button-container{width:100%}.entity-scheme-assign-btn ::ng-deep button{display:flex;width:100%;flex-grow:1}:host ::ng-deep .pop-checkbox-container{min-height:30px}:host ::ng-deep .pop-button-container{background:var(--darken02)}:host ::ng-deep .entity-scheme-asset-pool-search .mat-form-field-prefix{margin-left:2px!important}"]
                },] }
    ];
    PopEntitySchemeAssetPoolComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopEntitySchemeService },
        { type: PopTabMenuService }
    ]; };

    // https://medium.com/codetobe/learn-how-to-drag-drop-items-in-angular-7-20395c262ab0
    var PopEntitySchemeAssetLayoutComponent = /** @class */ (function (_super) {
        __extends(PopEntitySchemeAssetLayoutComponent, _super);
        function PopEntitySchemeAssetLayoutComponent(el, _domRepo, _schemeRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._schemeRepo = _schemeRepo;
            _this.name = 'PopEntitySchemeAssetLayoutComponent';
            _this.srv = {
                scheme: undefined
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.dom.setWithComponentInnerHeight('PopEntityTabColumnComponent', this.position, 210, 600)];
                            case 1:
                                _a.sent();
                                this.ui.sections = this.srv.scheme.ui.sections;
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * Setup this component
         */
        PopEntitySchemeAssetLayoutComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Clean up the dom of this component
         */
        PopEntitySchemeAssetLayoutComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntitySchemeAssetLayoutComponent;
    }(PopExtendComponent));
    PopEntitySchemeAssetLayoutComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-entity-scheme-asset-layout',
                    template: "<div class=\"entity-scheme-asset-layout-container\"  [style.height.px]=\"dom.height.inner\" cdkDropListGroup >\n  <lib-entity-scheme-layout-section *ngFor=\"let section of ui.sections\" [core]=core [section]=section [style.flexGrow]=section.flex></lib-entity-scheme-layout-section>\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".entity-scheme-asset-layout-container{display:flex;flex-direction:row;border-top:1px solid var(--border);border-left:1px solid var(--border);border-bottom:1px solid var(--border);box-sizing:border-box;overflow:hidden}lib-entity-scheme-layout-section{flex:1;flex-basis:150px;border-right:1px solid var(--border)}.entity-scheme-asset-layout-section{flex:1}.entity-scheme-asset-list-content{overflow-y:auto;overflow-x:hidden}.entity-scheme-asset{box-sizing:border-box;margin:10px;border:1px solid var(--border);background:var(--bg-3);font-size:12px}.entity-scheme-asset-menu{position:absolute;justify-content:space-around;top:15px;right:5px;opacity:.8;width:55px;padding-left:5px;z-index:2}.entity-scheme-asset-menu,.entity-scheme-asset-menu-icon{display:flex;align-items:center;height:20px;background:var(--bg-3)}.entity-scheme-asset-menu-icon{justify-content:center;opacity:1!important;width:20px}.entity-scheme-asset-menu-icon .material-icons{font-size:18px}.entity-scheme-asset-handle{position:relative;box-sizing:border-box;cursor:move;width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.entity-scheme-asset-handle-disabled{pointer-events:none;cursor:none}.entity-scheme-asset-field-container{display:flex;flex-direction:column}.entity-scheme-asset-layout-row{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:row;justify-content:flex-start;align-items:center;height:25px;font-size:14px;padding:0 10px;z-index:1}.entity-scheme-asset-layout-row-expanded{border-bottom:1px solid var(--border)}.entity-scheme-asset-layout-subrow{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:row;justify-content:flex-start;align-items:flex-start;height:20px;color:var(--disabled);padding:0 10px;font-size:12px;top:2px}.entity-scheme-asset-layout-content-row{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:column;min-height:30px}.entity-scheme-asset-item-row{justify-content:flex-start;height:30px;padding:0 10px;border-top:1px solid var(--border);z-index:1}.entity-scheme-asset-item-row,.entity-scheme-asset-toggle-row{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:row;align-items:center}.entity-scheme-asset-toggle-row{justify-content:center;height:10px;margin-bottom:5px;overflow:hidden;z-index:3}.entity-scheme-asset-toggle-row .material-icons{position:relative;top:2px;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-size:18px}.entity-scheme-primary{color:var(--primary-background)}.entity-scheme-required{color:var(--error);font-size:30px;line-height:0px;margin:0;width:10px;position:relative;top:20px;z-index:2}.cdk-drag-preview{overflow:hidden;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);height:35px}.cdk-drag-preview .entity-scheme-asset-handle{box-sizing:border-box}.cdk-drag-preview .entity-scheme-asset-menu{display:none!important}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating,.entity-scheme-asset-list.cdk-drop-list-dragging .entity-scheme-asset:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}"]
                },] }
    ];
    PopEntitySchemeAssetLayoutComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopEntitySchemeService }
    ]; };

    var PopEntitySchemeDetailsComponent = /** @class */ (function (_super) {
        __extends(PopEntitySchemeDetailsComponent, _super);
        function PopEntitySchemeDetailsComponent(_domRepo, _tabRepo, _schemeRepo) {
            var _this = _super.call(this) || this;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this._schemeRepo = _schemeRepo;
            _this.name = 'PopEntitySchemeDetailsComponent';
            _this.srv = {
                scheme: undefined,
                tab: undefined
            };
            _this.ui = {};
            return _this;
        }
        PopEntitySchemeDetailsComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntitySchemeDetailsComponent.prototype.onBubbleEvent = function (event) {
            this.log.event("onBubbleEvent", event);
            if (IsValidFieldPatchEvent(this.core, event) || event.type === 'context_menu') {
                this.log.info("IsValidFieldPatchEvent", event);
                this.events.emit(event);
            }
        };
        PopEntitySchemeDetailsComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntitySchemeDetailsComponent;
    }(PopExtendComponent));
    PopEntitySchemeDetailsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-entity-scheme-details',
                    template: "<div>\n  <lib-pop-entity-field-group *ngIf=\"core\" [core]=\"core\" (events)=\"onBubbleEvent($event);\"></lib-pop-entity-field-group>\n</div>\n\n",
                    styles: [""]
                },] }
    ];
    PopEntitySchemeDetailsComponent.ctorParameters = function () { return [
        { type: PopDomService },
        { type: PopTabMenuService },
        { type: PopEntitySchemeService }
    ]; };

    var PopEntitySchemeComponent = /** @class */ (function (_super) {
        __extends(PopEntitySchemeComponent, _super);
        /**
         *
         * @param el
         * @param _domRepo - transfer
         * @param _schemeRepo - transfer
         * @param _tabRepo - transfer
         */
        function PopEntitySchemeComponent(el, _domRepo, _schemeRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._schemeRepo = _schemeRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopEntitySchemeComponent';
            _this.srv = {
                scheme: undefined,
                tab: undefined
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.ui.tab = new TabConfig({
                                    id: 'general',
                                    positions: {
                                        1: {
                                            header: 'Details',
                                            flex: 1,
                                            components: [
                                                {
                                                    type: PopEntitySchemeDetailsComponent,
                                                    inputs: {
                                                        id: 1
                                                    },
                                                },
                                            ]
                                        },
                                        2: {
                                            flex: 1,
                                            header: 'Available Fields & Components',
                                            components: [
                                                {
                                                    type: PopEntitySchemeAssetPoolComponent,
                                                    inputs: {
                                                        id: 2
                                                    },
                                                },
                                            ]
                                        },
                                        3: {
                                            flex: 2,
                                            header: 'Profile Layout',
                                            components: [
                                                {
                                                    type: PopEntitySchemeAssetLayoutComponent,
                                                    inputs: {
                                                        id: 3
                                                    },
                                                },
                                            ]
                                        },
                                    },
                                    wrap: false,
                                    columnWrap: true,
                                    overhead: 0,
                                    onLoad: function (config, tab) {
                                        // console.log('config', config);
                                        // console.log('tab', tab);
                                    },
                                    onEvent: function (core, event) {
                                        // console.log('event', event);
                                    },
                                });
                                return [4 /*yield*/, this.srv.scheme.init(this.core, this.ui.tab)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this.dom.setSubscriber("refresh", _this.srv.scheme.ui.refresh.subscribe(function (val) {
                        if (val === 'reload') {
                            _this.srv.tab.resetTab(true);
                            // this.srv.tab.refreshEntity(this.core.params.entityId, this.dom.repo, { bypassCache: true }, this.name).then(async()=>{
                            //   await this.srv.scheme.init( this.core, this.ui.tab );
                            //   this.srv.tab.resetTab();
                            // });
                        }
                    }));
                    return resolve(true);
                });
            };
            return _this;
        }
        PopEntitySchemeComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntitySchemeComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntitySchemeComponent;
    }(PopExtendComponent));
    PopEntitySchemeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-customer-scheme',
                    template: "\n    <lib-main-spinner *ngIf=\"dom.state.loader\"></lib-main-spinner>\n    <lib-pop-entity-tab *ngIf=\"dom.state.loaded\" [tab]=ui.tab [core]=\"core\"></lib-pop-entity-tab>",
                    providers: [PopEntitySchemeService]
                },] }
    ];
    PopEntitySchemeComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopEntitySchemeService },
        { type: PopTabMenuService }
    ]; };

    var PopEntityFieldDetailsComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldDetailsComponent, _super);
        function PopEntityFieldDetailsComponent(el, _domRepo, fieldRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.fieldRepo = fieldRepo;
            _this.name = 'PopEntityFieldDetailsComponent';
            _this.asset = {};
            _this.ui = {
                field: undefined,
                customSetting: {},
                multiple: undefined,
            };
            _this.extendServiceContainer();
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.core = IsObjectThrowError(_this.core, true, _this.name + ":configureDom: - this.core") ? _this.core : null;
                    if (!_this.field)
                        _this.field = IsObjectThrowError(_this.core, ['entity'], "Invalid Core") && IsObjectThrowError(_this.core.entity, ['id', 'fieldgroup'], "Invalid Field") ? _this.core.entity : null;
                    _this._buildCustomSettings();
                    return resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    return resolve(true);
                });
            };
            return _this;
        }
        PopEntityFieldDetailsComponent.prototype.extendServiceContainer = function () {
            this.srv = {
                field: this.fieldRepo,
            };
            delete this.fieldRepo;
        };
        PopEntityFieldDetailsComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Event handler for the parent tab to tell this name to reset itself
         * @param reset
         */
        PopEntityFieldDetailsComponent.prototype.onBubbleEvent = function (event) {
            this.log.event("onBubbleEvent", event);
            if (IsValidFieldPatchEvent(this.core, event)) {
                this.events.emit(event);
            }
        };
        // /**
        //  * Catch changes on custom setting fields and update them
        //  * @param event
        //  */
        // onCustomSettingEvent(event: PopBaseEventInterface){
        //   if( IsValidFieldPatchEvent(this.core, event) ){
        //     this.dom.setTimeout(event.config.name, () => {
        //       this.srv.field.storeCustomSetting(this.core, event).then(() => true);
        //     }, 250);
        //   }
        // }
        PopEntityFieldDetailsComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntityFieldDetailsComponent.prototype._buildCustomSettings = function () {
            var _this = this;
            var allowMultiple = this.srv.field.getViewMultiple(this.field.fieldgroup.name);
            if (allowMultiple) {
                var multiple = StorageGetter(this.core.repo, ['model', 'field', 'multiple']);
                if (IsObject(multiple, ['model'])) {
                    multiple = JsonCopy(multiple);
                    this.ui.multiple = new SwitchConfig(FieldItemModelConfig(this.core, FieldItemModel(this.core, multiple.model)));
                    this.ui.multiple.patch.callback = function (core, event) {
                        SessionEntityFieldUpdate(_this.core, event);
                        _this.srv.field.triggerFieldPreviewUpdate();
                    };
                }
            }
            // if( IsObject(this.ui.field.custom_setting, true) ){
            //   Object.keys(this.ui.field.custom_setting).map((settingName) => {
            //     const setting = this.ui.field.custom_setting[ settingName ];
            //     const component = this.srv.field.getCustomSettingComponent(this.core, this.ui.field, setting);
            //     component.position = this.position;
            //     this.ui.customSetting[ setting.name ] = component;
            //   });
            // }
        };
        return PopEntityFieldDetailsComponent;
    }(PopExtendComponent));
    PopEntityFieldDetailsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field-details',
                    template: "<div class=\"entity-field-details-container\" *ngIf=\"dom.state.loaded\">\n  <lib-pop-entity-status [core]=\"core\"></lib-pop-entity-status>\n  <lib-pop-entity-field-group [core]=\"core\" (events)=\"onBubbleEvent($event);\"></lib-pop-entity-field-group>\n  <lib-pop-switch *ngIf=\"ui.multiple\" [config]=\"ui.multiple\"></lib-pop-switch>\n  <lib-pop-switch *ngIf=\"!field.multiple && dom.repo.ui.customSetting.show_name\" [config]=\"dom.repo.ui.customSetting.show_name.inputs.config\"></lib-pop-switch>\n  <!--<lib-pop-switch *ngIf=\"!ui.field.multiple && ui.customSetting.show_name\" [config]=\"ui.customSetting.show_name.inputs.config\" (events)=\"onCustomSettingEvent($event)\"></lib-pop-switch>-->\n  <!--<lib-pop-min-max *ngIf=\"ui.field.multiple\" (events)=\"onMinMaxSetting($event);\" [config]=ui.customSetting.minMax></lib-pop-min-max>-->\n\n</div>\n",
                    styles: [".import-flex-row,.import-flex-row-wrap{display:flex;flex-direction:row}.import-flex-row-wrap{flex-wrap:wrap;padding:0;flex-basis:100%;box-sizing:border-box}.import-flex-row-break{flex-basis:100%;height:0}.import-flex-column-break{flex-basis:100%;width:0}.import-flex-item-icon{min-width:var(--field-icon-width);height:var(--field-icon-height);display:flex;justify-content:center;align-items:center}.import-flex-column-xs{display:flex;flex-direction:column;width:12.5%;min-height:30px}.import-flex-column-sm{flex:1;flex-direction:column;width:25%;min-height:30px}.import-flex-column-md{flex:1;flex-direction:column;width:50%}.import-flex-column-lg{flex:1;flex-direction:column;width:75%;min-height:30px}.import-flex-item-xs{flex-basis:12.5%}.import-flex-item-sm{flex-basis:25%}.import-flex-item-md{flex-basis:50%}.import-flex-item-full{flex-basis:100%}.import-flex-grow-xs{flex-grow:1}.import-flex-grow-sm{flex-grow:2}.import-flex-grow-md{flex-grow:3}.import-flex-grow-lg{flex-grow:4}.import-flex-column{display:flex;flex-direction:column}.import-flex-center{display:flex;align-items:center;justify-content:center}.import-flex-space-center{justify-content:space-around;align-items:center}.import-flex-space-between-center{justify-content:space-between;align-items:center}.import-flex-center-start{display:flex;justify-content:center;align-items:flex-start}.import-flex-start-center{display:flex;justify-content:flex-start;align-items:center}.import-flex-end-center{display:flex;justify-content:flex-end;align-items:center}.import-flex-end{display:flex;align-items:flex-end;justify-content:flex-end}.import-flex-align-end{display:flex;align-self:flex-end}.import-flex-stretch-center{display:flex;justify-content:stretch;align-items:center}.entity-field-details-container{max-width:var(--field-max-width)}.entity-field-details-row{display:flex;flex-direction:row;height:35px;margin-top:1px}"]
                },] }
    ];
    PopEntityFieldDetailsComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopFieldEditorService }
    ]; };
    PopEntityFieldDetailsComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    var PopEntityFieldPreviewComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldPreviewComponent, _super);
        function PopEntityFieldPreviewComponent(el, _domRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.name = 'PopEntityFieldPreviewComponent';
            _this.asset = {
                field: undefined,
                fieldgroup: undefined,
                columnKeys: undefined,
            };
            _this.ui = {
                stateSelector: new SelectConfig({
                    label: 'State',
                    value: 'template_edit',
                    options: {
                        values: [
                            { value: 'template_edit', name: 'Template Access' },
                            { value: 'template_readonly', name: 'Template Readonly' },
                            { value: 'text_single', name: 'Text Single' },
                            { value: 'text_format', name: 'Text Format' },
                        ]
                    }
                }),
                field: undefined
            };
            _this.srv = {
                entity: exports.ServiceInjector.get(PopEntityService),
                editor: exports.ServiceInjector.get(PopFieldEditorService),
                field: exports.ServiceInjector.get(PopEntityUtilFieldService),
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.dom.handler.bubble = function (core, event) { return _this.onBubbleEvent(event); };
                    //  Verify configs
                    _this.core = IsObjectThrowError(_this.core, ['entity'], _this.name + ":configureDom: - this.core") ? _this.core : null;
                    _this.field = IsObjectThrowError(_this.core.entity, ['fieldgroup', 'entries'], _this.name + ":configureDom: - this.core") ? _this.core.entity : null;
                    _this.asset.fieldgroup = _this.field.fieldgroup;
                    // Create form session container to persist use input values
                    _this.dom.session.form = {};
                    // Attach the container for the preview html
                    _this.template.attach('container');
                    // Get a default set of data to populate the preview field items with
                    _this.asset.columnKeys = _this.core.entity.items.map(function (item) {
                        return String(SpaceToSnake(item.name)).toLowerCase();
                    });
                    // this.asset.defaultData = this.srv.field.getDefaultValues(String(this.core.entityId.corefield.internal_name).toLowerCase(), this.asset.columnKeys);
                    if (_this.dom.session.stateSelector)
                        _this.ui.stateSelector.control.setValue(_this.dom.session.stateSelector, { emitEvent: true });
                    // Handle events
                    _this.dom.handler.core = function (core, event) {
                        _this.log.event("_coreEventHandler", event);
                        if (IsValidFieldPatchEvent(_this.core, event) || (event.type === 'component' && (event.name === 'active-item' || event.name === 'update'))) {
                            _this._triggerFieldPreview();
                        }
                        else {
                            exports.PopLog.warn(_this.name, "Preview did not recognize event", event);
                        }
                    };
                    _this._triggerFieldPreview(250);
                    return resolve(true);
                });
            };
            /**
             * This function will call after the dom registration
             */
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this._setDataSession();
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * We expect the core to represent a field
         * This component represents what the view of the current field will look like
         * The component relies upon the FieldBuilderItemsComponent && FieldBuilderItemSettingsComponent to communicate when settings are changed so that the view can render the changes
         */
        PopEntityFieldPreviewComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * This handler manages events that come up from the preview fields, mostly just to session any values that the user enters, and simulate adding removing value entries
         * The field input is saved because the setFieldPreview destroys the component and is called often, and the user should not have to re-enter test data every time a setting is changed
         * @param event
         */
        PopEntityFieldPreviewComponent.prototype.onBubbleEvent = function (event) {
            this.log.event("onBubbleEvent", event);
            if (IsObject(event, ['type', 'name']) && event.type === 'field') {
                if (event.name === 'onFocus') {
                    // stub
                }
                else if (event.name === 'onBlur' || event.name === 'patch') { // whenever a user blurs out of field save the data that is in it
                    if (event.config && event.config.control && event.config.control.value) {
                        this.dom.session.form[event.config.name] = event.config.control.value;
                        this.dom.store('onSession'); // dom.store must be called to for the dom to transfer its data up to the domRepo
                    }
                }
                else if (event.name === 'add') { // whenever a user blurs out of field save the data that is in it
                    this._addFieldValue();
                }
                else if (event.name === 'remove') { // whenever a user blurs out of field save the data that is in it
                    this._removeFieldValue();
                }
            }
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityFieldPreviewComponent.prototype.ngOnDestroy = function () {
            this.template.destroy();
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Create a new field label
         */
        PopEntityFieldPreviewComponent.prototype._addFieldValue = function () {
            if (IsObject(this.ui.field, true)) {
                if (this.dom.session.records < this.ui.field.multiple_max_limit) {
                    this.dom.session.records++;
                    this._triggerFieldPreview(0);
                }
            }
        };
        /**
         * Remove an existing label
         */
        PopEntityFieldPreviewComponent.prototype._removeFieldValue = function () {
            if (IsObject(this.ui.field, true)) {
                if (this.dom.session.records > this.ui.field.multiple_min) {
                    this.dom.session.records--;
                    this._triggerFieldPreview(0);
                }
            }
        };
        /**
         * Create sets of mock data for the fields entries
         */
        PopEntityFieldPreviewComponent.prototype._setDataSession = function () {
            if (!this.dom.session.records)
                this.dom.session.records = this.field.multiple_min;
            var index = 0;
            if (!this.dom.session.data) {
                this.dom.session.data = new Map();
                while (index < 10) {
                    var defaultValues = this.srv.editor.getDefaultValues(String(this.asset.fieldgroup.name).toLowerCase());
                    this.dom.session.data.set(index, defaultValues);
                    index++;
                }
                this.dom.store('session');
            }
        };
        /**
         * Debounce the requests to reset the preview
         * @param delay
         */
        PopEntityFieldPreviewComponent.prototype._triggerFieldPreview = function (delay) {
            var _this = this;
            if (delay === void 0) { delay = 250; }
            this.dom.setTimeout('field-preview', function () {
                _this._setFieldPreview();
            }, delay);
        };
        /**
         * This will create a facade field that will a dynamically try to replicate how the field will look when it is in use
         */
        PopEntityFieldPreviewComponent.prototype._setFieldPreview = function () {
            var _this = this;
            if (this.dom.repo.ui.activeItems) {
                exports.PopTemplate.clear();
                var items = this.field.items;
                var entries = IsArray(this.field.entries, true) ? this.field.entries.filter(function (entry) {
                    return !entry.orphaned_at;
                }).sort(DynamicSort('sort_order')) : [];
                var fieldInterface_1 = {
                    id: 1,
                    facade: true,
                    canAdd: false,
                    canRemove: false,
                    configs: this.field.configs,
                    name: this.field.name,
                    label: this.field.label,
                    entries: entries,
                    fieldgroup: this.asset.fieldgroup,
                    internal_name: String(this.asset.fieldgroup.name).toLowerCase(),
                    multiple: this.field.multiple,
                    // multiple_min: this.field.multiple_min,
                    multiple_min: entries.length,
                    // multiple_max: this.field.multiple_max,
                    multiple_max: entries.length,
                    multiple_max_limit: 4,
                    data: {},
                    show_name: !!this.core.entity.show_name,
                    sort: 0,
                    state: this.ui.stateSelector.control.value,
                    items: []
                };
                if (fieldInterface_1.multiple) {
                    // if( !fieldInterface.multiple_min ) fieldInterface.multiple_min = 1;
                    if (!fieldInterface_1.multiple_min)
                        fieldInterface_1.multiple_min = entries.length;
                    // let valueIndex = 0;
                    var records = this.dom.session.records;
                    if (records < +fieldInterface_1.multiple_min)
                        records = +fieldInterface_1.multiple_min;
                    if (+fieldInterface_1.multiple_max && records > fieldInterface_1.multiple_max)
                        records = fieldInterface_1.multiple_max;
                    // while( valueIndex < records ){
                    //   fieldInterface.data[ valueIndex ] = this.dom.session.data.get( valueIndex );
                    //   valueIndex++;
                    // }
                    entries.map(function (entry, index) {
                        fieldInterface_1.data[entry.id] = _this.dom.session.data.get(index);
                    });
                }
                else {
                    var singleEntry = entries[0];
                    fieldInterface_1.data[singleEntry.id] = this.dom.session.data.get(0);
                }
                fieldInterface_1.items = items.filter(function (item) {
                    return +_this.dom.repo.ui.activeItems[item.id] === 1;
                }).map(function (item) {
                    item.facade = true;
                    item.showMask = true;
                    item.bubble = true;
                    delete item.api;
                    return item;
                });
                this.ui.field = this.srv.field.buildCustomField(this.core, fieldInterface_1);
                if (this.ui.field) {
                    var previewComponentList = [];
                    var component = {
                        type: PopEntityFieldComponent,
                        inputs: {
                            core: this.core,
                            field: this.ui.field,
                        }
                    };
                    previewComponentList.push(component);
                    this.template.render(previewComponentList, [], true);
                }
            }
            this.dom.ready();
        };
        return PopEntityFieldPreviewComponent;
    }(PopExtendDynamicComponent));
    PopEntityFieldPreviewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-editor-preview',
                    template: "<div class=\"entity-field-editor-header\">\n  <div class=\"pop-entity-field-editor-header-section\">\n    <div class=\"sw-label-container-sm\">Field Preview</div>\n  </div>\n  <div class=\"pop-entity-field-editor-header-section\">\n    <!--<p>Assign field value and attributes for this field.</p>-->\n  </div>\n</div>\n<div class=\"entity-field-preview-container\">\n  <div class=\"entity-field-preview-content\">\n    <ng-container #container></ng-container>\n  </div>\n</div>\n",
                    styles: [".entity-field-editor-header{display:flex;flex-direction:column;height:97px}.entity-field-editor-header-section{position:relative;width:100%;box-sizing:border-box;height:30px;clear:both}.entity-field-editor-container{min-height:100px;position:relative}.entity-field-editor-border{border:1px solid var(--border)}.entity-field-editor-section-header{position:relative;display:flex;flex-direction:row;height:40px;padding:0 5px 0 10px;align-items:center;justify-content:space-between;font-size:1em;font-weight:700;clear:both;box-sizing:border-box;background:var(--darken02)}.entity-field-editor-section-header-helper-icon{width:20px;height:20px;font-size:1em;z-index:2}.entity-field-editor-active-selection{padding-left:0!important;border-left:5px solid var(--primary)}.entity-field-editor-active-config{border-left:5px solid var(--primary)}.entity-field-preview-container{position:relative;border:1px solid var(--border)}.entity-field-preview-content{padding:0 var(--gap-s) var(--gap-s) var(--gap-s)}"]
                },] }
    ];
    PopEntityFieldPreviewComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService }
    ]; };
    PopEntityFieldPreviewComponent.propDecorators = {
        field: [{ type: i0.Input }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }]
    };

    var PopEntityFieldEditorComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldEditorComponent, _super);
        /**
         * @param el
         * @param _domRepo
         * @param _fieldRepo
         * @param _tabRepo
         */
        function PopEntityFieldEditorComponent(el, _domRepo, _fieldRepo, _utilFieldRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._fieldRepo = _fieldRepo;
            _this._utilFieldRepo = _utilFieldRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopEntityFieldEditorComponent';
            _this.srv = {
                field: undefined,
                utilField: undefined,
                history: exports.ServiceInjector.get(PopRouteHistoryResolver),
                tab: undefined,
            };
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    if (!(IsObject(_this.core, true)))
                        _this.core = _this.srv.tab.getCore();
                    var fieldgroup = StorageGetter(_this.core, ['entity', 'fieldgroup', 'name']);
                    if (fieldgroup) {
                        _this.ui.tab = new TabConfig({
                            id: 'general',
                            positions: {
                                1: {
                                    header: 'Details',
                                    flex: 1,
                                    components: [
                                        {
                                            type: PopEntityFieldDetailsComponent,
                                            inputs: {
                                                id: 1
                                            },
                                        },
                                    ]
                                },
                                2: {
                                    flex: 2,
                                    components: [
                                        {
                                            type: PopEntityFieldSettingsComponent,
                                            inputs: {
                                                id: 2
                                            },
                                        },
                                    ]
                                },
                                3: {
                                    flex: 1,
                                    components: [
                                        {
                                            type: PopEntityFieldPreviewComponent,
                                            inputs: {
                                                id: 3
                                            },
                                        },
                                    ]
                                },
                            },
                            wrap: true,
                            columnWrap: true,
                            overhead: 0,
                            onLoad: function (config, tab) {
                                // console.log('config', config);
                                // console.log('tab', tab);
                            },
                            onEvent: function (core, event) {
                                // console.log('event', event);
                            },
                        });
                        _this.srv.field.register(_this.core, _this.dom.repo).then(function () {
                            _this.srv.utilField.clearCustomFieldCache(+_this.core.entity.id);
                            return resolve(true);
                        });
                    }
                    else {
                        window.location.href = window.location.origin + '/' + exports.PopHref;
                    }
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityFieldEditorComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityFieldEditorComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityFieldEditorComponent;
    }(PopExtendComponent));
    PopEntityFieldEditorComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-editor',
                    template: "\n    <lib-pop-entity-tab *ngIf=\"dom.state.loaded\" [tab]=ui.tab [core]=\"core\"></lib-pop-entity-tab>",
                    providers: [PopFieldEditorService],
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".entity-field-editor-header{display:flex;flex-direction:column;height:97px}.entity-field-editor-header-section{position:relative;width:100%;box-sizing:border-box;height:30px;clear:both}.entity-field-editor-container{min-height:100px;position:relative}.entity-field-editor-border{border:1px solid var(--border)}.entity-field-editor-section-header{position:relative;display:flex;flex-direction:row;height:40px;padding:0 5px 0 10px;align-items:center;justify-content:space-between;font-size:1em;font-weight:700;clear:both;box-sizing:border-box;background:var(--darken02)}.entity-field-editor-section-header-helper-icon{width:20px;height:20px;font-size:1em;z-index:2}.entity-field-editor-active-selection{padding-left:0!important;border-left:5px solid var(--primary)}.entity-field-editor-active-config{border-left:5px solid var(--primary)}"]
                },] }
    ];
    PopEntityFieldEditorComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopFieldEditorService },
        { type: PopEntityUtilFieldService },
        { type: PopTabMenuService }
    ]; };

    var PopEntityStatusComponent = /** @class */ (function (_super) {
        __extends(PopEntityStatusComponent, _super);
        function PopEntityStatusComponent(_domRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopEntityStatusComponent';
            _this.ui = {
                archive: undefined,
                valueButton: undefined,
                createdDate: undefined,
                showCopied: false
            };
            _this.srv = {
                events: exports.ServiceInjector.get(PopEntityEventService),
                tab: undefined,
                date: exports.ServiceInjector.get(PopDatetimeService)
            };
            _this.dom.configure = function () {
                // this component set the outer height boundary of this view
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        // Ensure that a CoreConfig exists for this component
                        this.dom.state.archived = this.core.entity.archived ? true : false;
                        this._setDate(this.core.entity.created_at);
                        this._setArchiveSwitch();
                        this.srv.tab.showAsLoading(false);
                        this.id = this.core.params.internal_name;
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        PopEntityStatusComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntityStatusComponent.prototype.onLabelCopy = function () {
            var _this = this;
            var nav = navigator;
            var body = String(this.core.entity.id).slice();
            nav.clipboard.writeText(body);
            this.ui.showCopied = true;
            setTimeout(function () {
                _this.ui.showCopied = false;
            }, 3000);
        };
        PopEntityStatusComponent.prototype.onArchiveChange = function (event) {
            if (IsValidChangeEvent(this.core, event)) {
                this._handleArchive(!event.config.control.value);
            }
        };
        PopEntityStatusComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntityStatusComponent.prototype._setDate = function (date) {
            this.ui.createdDate = this.srv.date.transform(date, 'date');
        };
        PopEntityStatusComponent.prototype._setArchiveSwitch = function () {
            this.ui.valueButton = new ButtonConfig({
                icon: 'file_copy',
                value: "ID " + this.core.entity.id,
                size: 20,
                radius: 5,
                text: 12,
                bubble: true,
                event: 'click',
                type: 'mat-flat-button'
            });
            this.ui.archive = new SwitchConfig({
                name: 'archived',
                bubble: true,
                label: this.core.entity.archived ? 'ACTIVE' : 'ACTIVE',
                labelPosition: 'before',
                value: !this.core.entity.archived ? true : false,
                patch: {
                    duration: 0,
                    field: '',
                    path: '',
                },
            });
        };
        PopEntityStatusComponent.prototype._handleArchive = function (archive) {
            var _this = this;
            console.log('_handleArchive', archive);
            this.dom.state.archived = archive;
            this.ui.archive.label = archive ? 'ACTIVE' : 'ACTIVE';
            this.core.entity.archived = archive;
            this.ui.archive.control.disable();
            this.srv.tab.showAsLoading(true);
            this.dom.setSubscriber('archive-entity', this.core.repo.archiveEntity(this.core.params.entityId, archive).subscribe(function () {
                _this.srv.events.sendEvent({
                    source: _this.name,
                    method: 'archive',
                    type: 'entity',
                    name: _this.core.params.name,
                    internal_name: _this.core.params.internal_name,
                    id: _this.core.params.entityId,
                    data: archive
                });
                _this.srv.tab.showAsLoading(false);
                _this.ui.archive.control.enable();
                _this.srv.tab.resetTab(true);
                // this.srv.tab.refreshEntity( null, this.dom.repo, {}, `${this.name}:setArchived` ).then( () => PopTemplate.clear() );
            }, function (err) {
                _this.dom.error.code = err.error.code;
                _this.dom.error.message = GetHttpErrorMsg(err);
                _this.ui.archive.control.enable();
                _this.srv.tab.showAsLoading(false);
            }));
        };
        return PopEntityStatusComponent;
    }(PopExtendComponent));
    PopEntityStatusComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-status',
                    template: "<div class=\"pop-entity-status-container import-field-item-container\">\n  <div>\n    <div class=\"copied-signal site-shadow-04\" *ngIf=\"ui.showCopied\">Copied!</div>\n    <lib-pop-button\n      *ngIf=\"ui.valueButton; let config;\"\n      class=\"pop-entity-status-label\"\n      (click)=\"onLabelCopy()\"\n      [config]=\"config\">\n    </lib-pop-button>\n  </div>\n  <div class=\"pop-entity-archive-container\" [ngClass]=\"dom.state.archived ? 'pop-entity-status-archived' :'pop-entity-status-active'\">\n    <lib-pop-switch\n      *ngIf=\"ui.archive; let config\"\n      [config]=\"config\"\n      (events)=\"onArchiveChange($event)\">\n    </lib-pop-switch>\n  </div>\n</div>\n<div class=\"pop-entity-status-row mat-caption\">\n  <span>Created</span> <span>{{ui.createdDate}}</span>\n</div>\n<lib-pop-errors *ngIf=\"dom.error?.message\" [error]=\"dom.error\"></lib-pop-errors>\n",
                    styles: [".pop-entity-status-container{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:space-between;box-sizing:border-box;-moz-box-sizing:border-box;margin:0!important;font-size:12px}.pop-entity-status-container .pop-entity-archive-container{display:flex;flex-direction:row;align-items:center;justify-content:stretch;color:#fff!important;box-shadow:none!important;text-transform:none!important;padding-left:8px;padding-right:8px;border-radius:5px;margin:0!important;box-sizing:border-box}.pop-entity-status-container ::ng-deep .pop-switch-container{min-height:15px!important;max-height:20px}.pop-entity-status-container ::ng-deep .import-field-item-container{margin:0!important}.pop-entity-status-container ::ng-deep .pop-entity-status-active .mat-slide-toggle-thumb{background-color:var(--background-base)!important}.pop-entity-status-container ::ng-deep .pop-entity-status-active .mat-slide-toggle-bar{background-color:var(--background-selected-disabled-button)!important}.pop-entity-status-container ::ng-deep .mat-icon{position:relative;top:-1px;color:var(--background-base)}.pop-entity-status-container ::ng-deep .mat-slide-toggle{display:flex!important;flex-grow:1!important;width:100%;box-sizing:border-box}:host ::ng-deep .pop-entity-archive-container h4{font-size:12px}.pop-entity-status-label{min-width:100px!important;display:flex;flex-direction:row;align-items:center}.pop-entity-status-label ::ng-deep button{background-color:var(--background-code);color:var(--background-base);min-width:100px!important}.pop-entity-status-label ::ng-deep button span{position:relative;top:-1px}.pop-entity-status-row{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:space-between;box-sizing:border-box;-moz-box-sizing:border-box;margin:0;font-size:12px;color:var(--foreground-base);max-width:var(--field-max-width)}.pop-entity-status-active{background:var(--valid)!important}.pop-entity-status-archived{background:var(--background-border)!important}lib-pop-switch ::ng-deep span.mat-body{font-size:12px;line-height:12px;color:var(--background-base)}lib-pop-switch ::ng-deep .mat-slide-toggle-bar{height:10px;width:30px}lib-pop-switch ::ng-deep .mat-slide-toggle-bar .mat-slide-toggle-thumb{height:16px;width:16px}div.copied-signal{border-radius:var(--radius-xs);position:absolute;left:0;top:0;z-index:1;font-size:12px;min-height:var(--gap-sm);padding:3px var(--gap-xs) 2px var(--gap-xs);color:var(--foreground-base);background-color:var(--background-base);border:1px solid var(--foreground-disabled)}"]
                },] }
    ];
    PopEntityStatusComponent.ctorParameters = function () { return [
        { type: PopDomService },
        { type: PopTabMenuService }
    ]; };

    var EntityGeneralTab = new TabConfig({
        id: 'general',
        positions: {
            1: {
                flex: 1,
                components: [
                    {
                        type: PopEntityStatusComponent,
                        inputs: {
                            position: 1
                        },
                    },
                    {
                        type: PopEntityFieldGroupComponent,
                        inputs: {
                            position: 1
                        },
                    },
                ]
            },
            2: {
                flex: 1,
                components: [
                    {
                        type: PopEntityFieldGroupComponent,
                        inputs: {
                            position: 2
                        },
                    },
                ]
            },
            3: {
                flex: 2,
                components: [
                    {
                        type: PopEntityFieldGroupComponent,
                        inputs: {
                            position: 2
                        },
                    },
                ]
            }
        },
    });
    var EntityAssignmentTab = new TabConfig({
        id: 'assignments',
        positions: {
            1: {
                header: null,
                flex: 1,
                components: [
                    { type: PopEntityAssignmentsComponent, inputs: {} }
                ]
            },
        },
    });
    var EntitySchemeTab = new TabConfig({
        id: 'general',
        positions: {
            1: {
                flex: 1,
                components: [
                    {
                        type: PopEntitySchemeComponent,
                        inputs: {
                            id: '1',
                        },
                    },
                ]
            },
        },
        columnWrap: false,
        // wrap: false, // turn wrapper off ie. margin,  since  PopProfileSchemeComponent is another tab instance
        onLoad: function (config, tab) {
            // console.log('config', config);
            // console.log('tab', tab);
        },
        onEvent: function (core, event) {
            // console.log('event', event);
        },
    });
    var EntityHistoryTab = new TabConfig({
        id: 'history',
        positions: {
            1: {
                header: null,
                flex: 1,
                components: [
                    {
                        type: PopEntityHistoryComponent,
                        inputs: {},
                    }
                ]
            }
        },
    });
    var FieldEditorTab = new TabConfig({
        id: 'general',
        syncPositions: false,
        positions: {
            1: {
                flex: 1,
                components: [
                    {
                        type: PopEntityFieldEditorComponent,
                        inputs: {}
                    },
                ]
            },
        },
        onLoad: function (config, tab) {
            //       console.log('config', this);
            // console.log('tab', tab);
        },
        onEvent: function (core, event) {
            // console.log('event', event);
        },
    });

    var HeaderInterceptor = /** @class */ (function () {
        function HeaderInterceptor(base) {
            this.base = base;
        }
        HeaderInterceptor.prototype.intercept = function (request, next) {
            var headers;
            // If SkipHeaderInterceptor has been set then skip this interceptor
            if (request.headers.has('SkipAuthHeaderInterceptor')) {
                headers = request.headers.delete('SkipAuthHeaderInterceptor');
                return next.handle(request.clone({ headers: headers }));
            }
            headers = new i1$1.HttpHeaders({
                'Authorization': this.base.getBearerToken(),
                'X-Popcx-Business': request.headers.get('x-popcx-business'),
                'Content-Type': request.headers.get('content-type') || 'application/json',
                'Api-Version': request.headers.get('api-version') || '1',
            });
            var newReq = request.clone({ headers: headers });
            // send cloned request with header to the next handler.
            return next.handle(newReq);
        };
        return HeaderInterceptor;
    }());
    HeaderInterceptor.decorators = [
        { type: i0.Injectable }
    ];
    HeaderInterceptor.ctorParameters = function () { return [
        { type: PopBaseService }
    ]; };
    var Response401Interceptor = /** @class */ (function () {
        function Response401Interceptor(baseService, router) {
            this.baseService = baseService;
            this.router = router;
        }
        Response401Interceptor.prototype.intercept = function (request, next) {
            var _this = this;
            // If SkipResponse401Interceptor has been set then skip this interceptor.
            if (request && request.headers && request.headers.has('SkipResponse401Interceptor')) {
                var headers = request.headers.delete('SkipResponse401Interceptor');
                return next.handle(request.clone({ headers: headers }));
            }
            return next.handle(request).pipe(operators.tap(function () {
                _this.baseService.setAuthTime();
            }), operators.catchError(function (err) {
                var currentPath = window.location.href.split(exports.PopHref)[1];
                if (err.status >= 500) {
                    var message = GetHttpErrorMsg(err);
                    if (currentPath && !currentPath.includes('error/500')) {
                        SetPopMessage((i0.isDevMode() ? message : 'Something went wrong!'));
                        _this.router.navigate(['system/error/500'], { skipLocationChange: true });
                    }
                }
                else if (err.status === 403) {
                    var message = GetHttpErrorMsg(err);
                    if (message === 'Your email address is not verified.') {
                        if (currentPath && !currentPath.includes('/user/email/resend')) {
                            window.location.href = window.location.protocol + '//' + window.location.host + '/user/email/resend';
                        }
                    }
                    else {
                        if (currentPath && !currentPath.includes('error/403')) {
                            SetPopMessage(i0.isDevMode() ? message : 'Access Denied!');
                            _this.router.navigate(['system/error/403'], { skipLocationChange: true });
                        }
                    }
                }
                else if (err.status === 404) {
                    var message = GetHttpErrorMsg(err);
                    if (currentPath && !currentPath.includes('error/404')) {
                        SetPopMessage(i0.isDevMode() ? message : 'Something went wrong!');
                        _this.router.navigate(['system/error/404'], { skipLocationChange: true });
                    }
                }
                else if (err.status === 401) {
                    if (i0.isDevMode()) {
                        if (IsObject(exports.PopTemplate)) {
                            exports.PopTemplate.error({ code: 401, message: 'UNAUTHENTICATED' });
                        }
                    }
                    else {
                        SetSiteVar('redirectAfterLogin', window.location.href);
                        _this.baseService.clearAuthTime();
                        _this.baseService.clearLocalStorage();
                        window.location.href = window.location.protocol + '//' + window.location.host + '/user/legacy/auth/clear';
                    }
                }
                else {
                    return next.handle(request);
                }
            }));
        };
        return Response401Interceptor;
    }());
    Response401Interceptor.decorators = [
        { type: i0.Injectable }
    ];
    Response401Interceptor.ctorParameters = function () { return [
        { type: PopBaseService },
        { type: i1.Router }
    ]; };

    /** Adapts the native JS Date for use with cdk-based modules that work with dates. */
    var CustomDateAdapter = /** @class */ (function (_super) {
        __extends(CustomDateAdapter, _super);
        function CustomDateAdapter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // parse the date from input component as it only expect dates in
        // mm-dd-yyyy format
        // parse(value: any): Date | null {
        //   if ((typeof value === 'string') && (value.indexOf('/') > -1)) {
        //     const str = value.split('/');
        //
        //     const year = Number(str[2]);
        //     const month = Number(str[1]) - 1;
        //     const date = Number(str[0]);
        //
        //     return new Date(year, month, date);
        //   }
        //   const timestamp = typeof value === 'number' ? value : Date.parse(value);
        //   return isNaN(timestamp) ? null : new Date(timestamp);
        // }
        CustomDateAdapter.prototype.getFirstDayOfWeek = function () {
            return 1;
        };
        return CustomDateAdapter;
    }(core.NativeDateAdapter));
    CustomDateAdapter.decorators = [
        { type: i0.Injectable }
    ];

    var PopErrorRedirectComponent = /** @class */ (function (_super) {
        __extends(PopErrorRedirectComponent, _super);
        function PopErrorRedirectComponent(el, _domRepo, route) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this.route = route;
            _this.name = 'PopErrorRedirectComponent';
            _this.srv = {
                router: exports.ServiceInjector.get(i1.Router),
            };
            _this.ui = {
                code: undefined,
                message: undefined
            };
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.dom.state.isDevMode = i0.isDevMode();
                    _this.dom.setHeight(exports.PopTemplate.getContentHeight(), 120);
                    _this._setRoute();
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopErrorRedirectComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopErrorRedirectComponent.prototype.ngOnDestroy = function () {
            SetPopMessage(null);
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopErrorRedirectComponent.prototype._setRoute = function () {
            this.ui.code = this.route.snapshot.params.code || 404;
            this.ui.message = exports.PopMessage;
        };
        return PopErrorRedirectComponent;
    }(PopExtendComponent));
    PopErrorRedirectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-error-redirect',
                    template: "<div *ngIf=\"dom.state.isDevMode\" class=\"pop-error-redirect-container  import-flex-row import-item-full import-flex-center\" [style.height.px]=\"dom.height.outer\">\n  <div class=\"import-flex-item-md import-flex-center site-pad-xxl import-flex-grow-xs\" [style.height.px]=\"dom.height.inner\">\n    <h1>{{ui.code}}</h1>\n  </div>\n  <div *ngIf=\"ui.message\" class=\"import-flex-item-md import-flex-center site-pad-xxl\" [style.height.px]=\"dom.height.inner\">\n    <p>{{ui.message}}</p>\n  </div>\n\n</div>\n<div *ngIf=\"!dom.state.isDevMode\" class=\"error-container\">\n  <div class=\"error-wrapper\">\n    <svg  height=\"100px\" viewBox=\"0 0 24 24\" width=\"100px\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/></svg>\n    <h1 class=\"pop-error-main-text\">Oops!\n    </h1>\n    <h1>{{ui.message}}</h1>\n  </div>\n\n</div>\n",
                    styles: [".pop-error-redirect-container h1{font-size:100px;color:var(--error)}.error-container{color:var(--text-2);height:calc(100vh - 60px);width:100%}.error-container,.error-container .error-wrapper{display:flex;align-items:center;flex-direction:column;justify-content:center}.error-container .error-wrapper svg{fill:var(--text-2)}.error-container .error-wrapper mat-icon{font-size:5rem}.error-container .error-wrapper h1{margin:0}.error-container .error-wrapper .pop-error-main-text{font-size:4rem;margin:var(--mar-md) 0}"]
                },] }
    ];
    PopErrorRedirectComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: i1.ActivatedRoute }
    ]; };

    var PopCacheRedirectComponent = /** @class */ (function (_super) {
        __extends(PopCacheRedirectComponent, _super);
        function PopCacheRedirectComponent() {
            var _this = _super.call(this) || this;
            _this.name = 'PopCacheRedirectComponent';
            _this.srv = {
                router: exports.ServiceInjector.get(i1.Router),
                entity: exports.ServiceInjector.get(PopEntityService),
            };
            _this.ui = {
                code: undefined,
                message: undefined
            };
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.dom.setHeight(exports.PopTemplate.getContentHeight(), 120);
                        exports.PopTemplate.clear();
                        this.srv.entity.bustAllCache();
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        this.dom.setTimeout("cache-redirect", function () {
                            if (IsString(exports.PopCacheRedirectUrl, true)) {
                                _this.srv.router.navigate([exports.PopCacheRedirectUrl], { skipLocationChange: true }).then(function () {
                                    // console.log('cache redirect success');
                                    return true;
                                });
                            }
                            else {
                                _this.srv.router.navigate(['system/route']);
                            }
                        }, 250);
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        /**
         * This component allows a redirect that will clear all cache and then return back to the url
         */
        PopCacheRedirectComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopCacheRedirectComponent.prototype.ngOnDestroy = function () {
            SetPopCacheRedirectUrl(null);
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopCacheRedirectComponent;
    }(PopExtendComponent));
    PopCacheRedirectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-cache-redirect',
                    template: "<div class=\"pcr-container\">\n  <mat-card>\n    <mat-card-content>\n      <div class=\"pcr-spinner-box\">\n        <lib-main-spinner></lib-main-spinner>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
                    styles: [".pcr-container{position:relative;display:flex;flex-direction:row;padding:var(--gap-s) var(--gap-lm) var(--gap-lm) var(--gap-lm);box-sizing:border-box;justify-content:center;align-items:flex-start;min-height:200px}.pcr-container mat-card{width:300px}.pcr-container mat-card-title{text-align:center;margin-bottom:var(--gap-m)!important}.pcr-container form{margin:var(--gap-s) 0!important}.pcr-spinner-box{height:80vh}"]
                },] }
    ];
    PopCacheRedirectComponent.ctorParameters = function () { return []; };

    var PopGuardRedirectComponent = /** @class */ (function (_super) {
        __extends(PopGuardRedirectComponent, _super);
        function PopGuardRedirectComponent(_baseRepo, _routerRepo) {
            var _this = _super.call(this) || this;
            _this._baseRepo = _baseRepo;
            _this._routerRepo = _routerRepo;
            _this.srv = {
                base: undefined,
                router: undefined
            };
            _this.asset = {
                sentimentIndex: 0,
                sentiments: [
                    'sentiment_very_dissatisfied',
                    'sentiment_dissatisfied',
                    'sentiment_satisfied',
                    'sentiment_satisfied_alt',
                    'sentiment_very_satisfied',
                ],
                exclamations: [
                    "DUH!",
                    "THIS SUCKS!",
                    "TRY AGAIN!",
                    "WASN'T ME!",
                    "SHOOT!",
                    "GO HOME, I'M DRUNK!",
                    "Y U NO FIND ROUTE!",
                    "WHERE AM I!",
                ],
                route: undefined
            };
            _this.ui = {
                exclamation: undefined,
                sentiment: undefined,
                spinner: undefined,
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, Promise.all([
                                    this.setInitialConfig()
                                ])];
                            case 1:
                                _a.sent();
                                // this._improveSentiment();
                                // this._routeApp();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        PopGuardRedirectComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopGuardRedirectComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopGuardRedirectComponent.prototype.setInitialConfig = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.dom.state.isDevMode = i0.isDevMode();
                _this.ui.sentiment = _this.asset.sentiments[_this.asset.sentimentIndex];
                _this.ui.exclamation = RandomArrayElement(_this.asset.exclamations);
                _this.asset.route = _this.srv.router.config.find(function (r) {
                    return IsString(r.path, true) && !r.canActivate && !r.redirectTo;
                });
                _this.ui.spinner = {
                    color: 'accent'
                };
                return resolve(true);
            });
        };
        PopGuardRedirectComponent.prototype._improveSentiment = function () {
            var _this = this;
            this.dom.setTimeout("improve-sentiment", function () {
                if (_this.asset.sentiments[_this.asset.sentimentIndex + 1]) {
                    _this.asset.sentimentIndex++;
                    _this.ui.sentiment = _this.asset.sentiments[_this.asset.sentimentIndex];
                    _this._improveSentiment();
                }
                else {
                    _this.dom.setTimeout("improve-sentiment", null);
                    _this.ui.exclamation = 'ALL GOOD!';
                    _this._routeApp();
                }
            }, 400);
        };
        /**
         *
         * @private
         */
        PopGuardRedirectComponent.prototype._routeApp = function () {
            var _this = this;
            this.dom.setTimeout("re-route", function () {
                if (IsObject(exports.PopBusiness, ['id'])) {
                    if (IsObject(_this.asset.route, ['path'])) {
                        console.log('DIAGNOSE Redirect ISSUE: Redirect Path', _this.asset.route.path);
                        if (_this.srv.base.checkAppAccess(exports.PopHref, true)) {
                            _this.srv.router.navigateByUrl(_this.asset.route.path).catch(function (e) { return console.log('e', e); });
                        }
                    }
                    else {
                        if (!_this.dom.state.isDevMode && IsString(exports.PopHref, true) && exports.PopHref !== 'home')
                            window.location.href = window.location.protocol + '//' + window.location.host + '/home';
                    }
                }
                else {
                    if (!_this.dom.state.isDevMode && IsString(exports.PopHref, true) && exports.PopHref !== 'user')
                        window.location.href = window.location.protocol + '//' + window.location.host + '/user/profile';
                }
            }, 400);
        };
        return PopGuardRedirectComponent;
    }(PopExtendComponent));
    PopGuardRedirectComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-guard-redirect',
                    template: "<!--  <mat-icon class=\"pgr-icon\">{{ui.sentiment}}</mat-icon>-->\n<!--  <div class=\"pgr-message\">{{ui.exclamation}}</div>-->\n<div class=\"pgr-container\" *ngIf=\"dom.state.isDevMode\">\n  <mat-card>\n    <mat-card-content>\n      <div class=\"pcg-spinner-box\">\n        <!-- <lib-main-spinner [options]=\"ui.spinner\"></lib-main-spinner> -->\n\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n\n<div class=\"pcr-container\" *ngIf=\"!dom.state.isDevMode\">\n  <mat-card>\n    <mat-card-content>\n      <div class=\"pgr-spinner-box\">\n        <lib-main-spinner></lib-main-spinner>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n\n",
                    styles: [".pgr-container{display:flex;flex-direction:column;padding:var(--gap-s);box-sizing:border-box;justify-content:center;align-items:center;height:calc(100vh - 90px)}.pgr-container mat-card{width:300px}.pgr-container mat-card-title{text-align:center;margin-bottom:var(--gap-m)!important}.pgr-container form{margin:var(--gap-s) 0!important}.pgr-icon{position:relative;font-size:250px;color:var(--accent);width:250px;height:250px;top:-125px}.pgr-message{padding:var(--gap-s);width:400px;height:20px;display:flex;flex-direction:column;justify-content:center;align-items:center;font-size:var(--gap-lm)}.pcg-spinner-box{height:80vh}"]
                },] }
    ];
    PopGuardRedirectComponent.ctorParameters = function () { return [
        { type: PopBaseService },
        { type: i1.Router }
    ]; };

    var PopRedirectsModule = /** @class */ (function () {
        function PopRedirectsModule() {
        }
        return PopRedirectsModule;
    }());
    PopRedirectsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        PopErrorRedirectComponent,
                        PopCacheRedirectComponent,
                        PopGuardRedirectComponent
                    ],
                    imports: [
                        common.CommonModule,
                        MaterialModule,
                        PopIndicatorsModule
                    ],
                    providers: [],
                    exports: [
                        PopErrorRedirectComponent,
                        PopCacheRedirectComponent,
                        PopGuardRedirectComponent
                    ]
                },] }
    ];

    var PopRedirectGuard = /** @class */ (function () {
        function PopRedirectGuard(router) {
            this.router = router;
        }
        PopRedirectGuard.prototype.canActivate = function (route) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (IsString(exports.PopMessage, true)) {
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        return [2 /*return*/, this.router.navigateByUrl('system/route')];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        return PopRedirectGuard;
    }());
    PopRedirectGuard.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopRedirectGuard_Factory() { return new PopRedirectGuard(i0__namespace.ɵɵinject(i1__namespace$1.Router)); }, token: PopRedirectGuard, providedIn: "root" });
    PopRedirectGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PopRedirectGuard.ctorParameters = function () { return [
        { type: i1.Router }
    ]; };

    var PopCacheRedirectGuard = /** @class */ (function () {
        function PopCacheRedirectGuard(router) {
            this.router = router;
        }
        PopCacheRedirectGuard.prototype.canActivate = function (route) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (IsString(exports.PopCacheRedirectUrl, true)) {
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        return [2 /*return*/, this.router.navigateByUrl('system/route')];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        return PopCacheRedirectGuard;
    }());
    PopCacheRedirectGuard.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopCacheRedirectGuard_Factory() { return new PopCacheRedirectGuard(i0__namespace.ɵɵinject(i1__namespace$1.Router)); }, token: PopCacheRedirectGuard, providedIn: "root" });
    PopCacheRedirectGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PopCacheRedirectGuard.ctorParameters = function () { return [
        { type: i1.Router }
    ]; };

    var PopRequestExternalService = /** @class */ (function (_super) {
        __extends(PopRequestExternalService, _super);
        function PopRequestExternalService(httpBackend) {
            var _this = _super.call(this) || this;
            _this.httpBackend = httpBackend;
            _this.name = 'PopRequestExternalService';
            _this.urlRegex = new RegExp('^(https?:\\/\\/)?' + // protocol
                '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
                '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
                '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
                '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
                '(\\#[-a-z\\d_]*)?$', 'i');
            _this.http = new i1$1.HttpClient(_this.httpBackend);
            return _this;
        }
        PopRequestExternalService.prototype.getBaseUrl = function () {
            return this.baseUrl.slice();
        };
        PopRequestExternalService.prototype.setBaseUrl = function (baseUrl) {
            if (IsString(baseUrl, true)) {
                this.baseUrl = baseUrl;
            }
        };
        PopRequestExternalService.prototype.doGet = function (url, params, headers) {
            if (params === void 0) { params = {}; }
            if (headers === void 0) { headers = {}; }
            if (this._checkUrl(url)) {
                var options = {
                    headers: new i1$1.HttpHeaders(headers),
                    params: this._setParams(params)
                };
                return this.http.get("" + url, options);
            }
            else {
                return rxjs.of(null);
            }
        };
        PopRequestExternalService.prototype.doDelete = function (url, body, headers) {
            if (body === void 0) { body = null; }
            if (headers === void 0) { headers = {}; }
            if (this._checkUrl(url)) {
                var options = {
                    headers: new i1$1.HttpHeaders(headers),
                    body: body,
                };
                return this.http.delete(url, options);
            }
            else {
                return rxjs.of(null);
            }
        };
        PopRequestExternalService.prototype.doPatch = function (url, data, headers) {
            if (headers === void 0) { headers = {}; }
            if (this._checkUrl(url)) {
                var options = {
                    headers: new i1$1.HttpHeaders(headers),
                };
                return this.http.patch(url, JSON.stringify(data), options);
            }
            else {
                return rxjs.of(null);
            }
        };
        PopRequestExternalService.prototype.doPost = function (url, data, headers) {
            if (headers === void 0) { headers = {}; }
            if (this._checkUrl(url)) {
                var options = {
                    headers: new i1$1.HttpHeaders(headers),
                };
                return this.http.post(url, JSON.stringify(data), options);
            }
            else {
                return rxjs.of(null);
            }
        };
        PopRequestExternalService.prototype._setParams = function (body) {
            var e_1, _a;
            var params = new i1$1.HttpParams();
            var _loop_1 = function (key) {
                if (body[key]) {
                    if (body[key] instanceof Array) {
                        body[key].forEach(function (item) {
                            params = params.append(key.toString() + "[]", item);
                        });
                    }
                    else {
                        params = params.append(key.toString(), body[key]);
                    }
                }
            };
            try {
                for (var _b = __values(Object.keys(body)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _loop_1(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return params;
        };
        PopRequestExternalService.prototype._checkUrl = function (url) {
            var valid = !!this.urlRegex.test(url);
            if (!valid) {
                throw new Error("Invalid Url: " + url);
            }
            return true;
        };
        return PopRequestExternalService;
    }(PopExtendService));
    PopRequestExternalService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopRequestExternalService_Factory() { return new PopRequestExternalService(i0__namespace.ɵɵinject(i1__namespace.HttpBackend)); }, token: PopRequestExternalService, providedIn: "root" });
    PopRequestExternalService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopRequestExternalService.ctorParameters = function () { return [
        { type: i1$1.HttpBackend }
    ]; };

    var PopEntitySchemeComponentService = /** @class */ (function (_super) {
        __extends(PopEntitySchemeComponentService, _super);
        /**
         * This srv is used in the
         * @param env
         */
        function PopEntitySchemeComponentService(resource, APP_GLOBAL, env) {
            var _this = _super.call(this) || this;
            _this.resource = resource;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.env = env;
            _this.asset = {
                action: new Map(),
                base: new Map(),
                setting: new Map(),
                component: new Map(),
                param: new Map(),
                resource: new Map(),
                option: new Map(),
                tabs: new Map(),
                baseImageUrl: '',
            };
            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, APP_GLOBAL.isVerified()];
                        case 1:
                            _a.sent();
                            this.asset.baseImageUrl = IsString(this.env.s3BucketUrl, true) ? this.env.s3BucketUrl : 'https://popcx-dev-public.s3-us-west-2.amazonaws.com';
                            return [2 /*return*/];
                    }
                });
            }); }, 0);
            return _this;
        }
        /**
         * Configure/Extend the default behavior of an entity
         * @param internal_name
         * @param extend
         */
        PopEntitySchemeComponentService.prototype.configure = function (internal_name, extend) {
            if (IsObject(extend.component, ['type']))
                this.setComponent(internal_name, extend.component);
            if (IsArray(extend.tab, true))
                this.setTab(internal_name, extend.tab);
            if (IsObject(extend.action, true))
                this.setAction(internal_name, extend.action);
            if (IsObject(extend.resource, true))
                this.setResource(internal_name, extend.resource);
            if (IsObject(extend.setting, true))
                this.setSetting(internal_name, extend.setting);
            if (IsObject(extend.option, true))
                this.setOption(internal_name, extend.option);
        };
        /**
         * A method to get a Core Config for an entity
         * Uses cache service to improve performance
         * ALL ENTITY RELATED COMPONENTS RELY ON THIS !!!!
         * @param entityParams
         * @param metadata
         */
        PopEntitySchemeComponentService.prototype.getConfig = function (internal_name, item) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var config, _a, settingComponent;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this._getBaseConfig(internal_name)];
                        case 1:
                            config = _b.sent();
                            if (!(item && item.id)) return [3 /*break*/, 3];
                            config.id = item.id;
                            config.param.id = item.id;
                            _a = config;
                            return [4 /*yield*/, this._getPreferences(config.param)];
                        case 2:
                            _a.preferences = _b.sent();
                            settingComponent = config.setting.component;
                            config = DeepMerge(config, item);
                            config.setting.component = settingComponent ? settingComponent : null;
                            _b.label = 3;
                        case 3: return [4 /*yield*/, this.getResources(config)];
                        case 4:
                            _b.sent();
                            return [2 /*return*/, resolve(config)];
                    }
                });
            }); });
        };
        /**
         * This will do all of the work of building and storing the base config for each entity
         * @param internal_name
         * @param routes
         * @private
         */
        PopEntitySchemeComponentService.prototype._getBaseConfig = function (internal_name) {
            var _this = this;
            return new Promise(function (resolve) {
                if (!_this.asset.base.has(internal_name)) {
                    var param = _this.getParams(internal_name);
                    var base = new SchemeComponentConfig({
                        param: param,
                        component: _this.getComponent(internal_name),
                        setting: _this.getSetting(internal_name),
                        option: _this.getOption(internal_name),
                        resource: _this.getResource(internal_name),
                    });
                    _this.asset.base.set(internal_name, base);
                    return resolve(base);
                }
                else {
                    return resolve(Object.assign({}, _this.asset.base.get(internal_name)));
                }
            });
        };
        /**
         * Get the base set of the entity definitions
         * These is the starting point when it comes to entities
         * @param internal_name
         * @param entityId
         */
        PopEntitySchemeComponentService.prototype.getParams = function (internal_name) {
            var widgetParams = null;
            if (this.asset.param.has(internal_name)) {
                widgetParams = Object.assign({}, this.asset.param.get(internal_name));
            }
            else {
                // temporary
                widgetParams = { internal_name: internal_name, name: TitleCase(SnakeToPascal(internal_name)) };
            }
            return widgetParams;
        };
        /**
         * Get the set of tab configs that belong to an entity
         */
        PopEntitySchemeComponentService.prototype.getTabs = function (widget) {
            if (IsObject(widget, ['param']) && this.asset.tabs.has(widget.param.internal_name)) {
                var tabs = this.asset.tabs.get(widget.param.internal_name).filter(function (tab) {
                    return EvaluateWhenConditions(widget, tab.when);
                });
                return __spreadArray([], __read(tabs));
            }
            else {
                return [];
            }
        };
        /**
         * A Http call that gets the entity metadata
         * @param id Primary Key of the entity
         */
        PopEntitySchemeComponentService.prototype.getResources = function (widget) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var success;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!IsObject(widget.resource, true)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.resource.setCollection(widget.resource)];
                        case 1:
                            success = _a.sent();
                            if (success) {
                                this.resource.getCollection(widget.resource);
                                return [2 /*return*/, resolve(true)];
                            }
                            else {
                                resolve(false);
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            resolve(false);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Set the base definitions for an entity
         * Each entity needs to define these so we know how to talk to the api in regards to it
         * The api should provide this details as part of the auth token
         * @param internal_name
         * @param entityId
         */
        PopEntitySchemeComponentService.prototype.setParam = function (param) {
            if (IsObject(param, ['internal_name', 'name'])) {
                exports.PopLog.info(this.name, "Params set for " + param.internal_name, param);
                this.asset.param.set(param.internal_name, param);
            }
        };
        /**
         * Attach a set of tab configs to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.setTab = function (internal_name, tabs) {
            if (IsString(internal_name, true) && Array.isArray(tabs)) {
                exports.PopLog.info(this.name, "Entity Tabs set for " + internal_name, tabs);
                this.asset.tabs.set(internal_name, tabs);
            }
        };
        /**
         * Attach a component to a widget
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.setComponent = function (internal_name, component) {
            if (IsString(internal_name, true) && IsObject(component, ['type'])) {
                exports.PopLog.info(this.name, "Component set for " + internal_name, component);
                this.asset.component.set(internal_name, component);
            }
        };
        /**
         * Attach a set of actions to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.setAction = function (internal_name, action) {
            if (IsString(internal_name, true) && IsObject(action)) {
                exports.PopLog.info(this.name, "Action set for " + internal_name, action);
                this.asset.action.set(internal_name, action);
            }
        };
        /**
         * Attach a set of resources to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.setResource = function (internal_name, resource) {
            if (IsString(internal_name, true) && IsObject(resource)) {
                exports.PopLog.info(this.name, "Entity Resource set for " + internal_name, resource);
                this.asset.resource.set(internal_name, resource);
            }
        };
        /**
         * Attach a set of options to widget
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.setOption = function (internal_name, option) {
            if (IsString(internal_name, true) && IsObject(option)) {
                exports.PopLog.info(this.name, "Option set for " + internal_name, option);
                this.asset.option.set(internal_name, option);
            }
        };
        /**
         * Attach a set of options to widget
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.setSetting = function (internal_name, setting) {
            if (IsString(internal_name, true) && IsObject(setting)) {
                exports.PopLog.info(this.name, "Setting set for " + internal_name, setting);
                this.asset.setting.set(internal_name, setting);
            }
        };
        /**
         * Get extended fields attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.getResource = function (internal_name) {
            if (IsString(internal_name, true)) {
                var resource = this.asset.resource.get(internal_name);
                return resource ? resource : {};
            }
        };
        /**
         * Get extended actions attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.getAction = function (internal_name) {
            if (IsString(internal_name, true)) {
                var action = this.asset.action.get(internal_name);
                return action ? action : {};
            }
        };
        /**
         * Get extended actions attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.getSetting = function (internal_name) {
            if (IsString(internal_name, true)) {
                var setting = this.asset.setting.get(internal_name);
                return setting ? setting : {};
            }
        };
        /**
         * Get extended actions attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.getOption = function (internal_name) {
            if (IsString(internal_name, true)) {
                var option = this.asset.option.get(internal_name);
                return option ? option : {};
            }
        };
        /**
         * Get extended actions attached to an entity
         * @param internal_name
         * @param tabs
         */
        PopEntitySchemeComponentService.prototype.getComponent = function (internal_name) {
            if (IsString(internal_name, true)) {
                var component = this.asset.component.get(internal_name);
                return component ? component : null;
            }
        };
        PopEntitySchemeComponentService.prototype.ngOnDestroy = function () {
            console.log(this.name, "destroyed:" + this.id);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntitySchemeComponentService.prototype._getPreferences = function (param) {
            return new Promise(function (resolve) {
                return resolve({});
            });
        };
        PopEntitySchemeComponentService.prototype.getDefaultComponentSetting = function (internalName) {
            var setting = {
                client_id: [],
                account_id: [],
                campaign_id: [],
                edit: true,
                refresh: true
            };
            return setting;
        };
        PopEntitySchemeComponentService.prototype.getDefaultComponentOption = function (internalName) {
            var option = {
                client_id: [],
                account_id: [],
                campaign_id: [],
                edit: true,
                refresh: true
            };
            return option;
        };
        return PopEntitySchemeComponentService;
    }(PopExtendService));
    PopEntitySchemeComponentService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntitySchemeComponentService_Factory() { return new PopEntitySchemeComponentService(i0__namespace.ɵɵinject(PopResourceService), i0__namespace.ɵɵinject("APP_GLOBAL"), i0__namespace.ɵɵinject("env")); }, token: PopEntitySchemeComponentService, providedIn: "root" });
    PopEntitySchemeComponentService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopEntitySchemeComponentService.ctorParameters = function () { return [
        { type: PopResourceService },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['env',] }] }
    ]; };

    var AppMenus = /** @class */ (function () {
        function AppMenus() {
            this._menus = [];
        }
        AppMenus.prototype.get = function () {
            return this._menus;
        };
        AppMenus.prototype.set = function (menus) {
            this._menus = menus;
        };
        AppMenus.prototype.init = function (menus) {
            return menus;
        };
        return AppMenus;
    }());
    var AppWidgets = /** @class */ (function () {
        function AppWidgets() {
            this._widgets = [];
        }
        AppWidgets.prototype.get = function () {
            return this._widgets;
        };
        AppWidgets.prototype.set = function (widgets) {
            this._widgets = widgets;
        };
        return AppWidgets;
    }());
    var AppTheme = /** @class */ (function () {
        function AppTheme() {
            this._theme = 'default';
            this._contrast = 'light';
            this._name = 'default-light.css';
            this.init = new rxjs.BehaviorSubject(false);
        }
        AppTheme.prototype.get = function () {
            return this._name;
        };
        AppTheme.prototype.set = function (theme, contrast) {
            var _this = this;
            if (theme === void 0) { theme = 'default'; }
            if (contrast === void 0) { contrast = 'light'; }
            this._theme = theme;
            this._contrast = contrast;
            this._name = this._theme + "-" + this._contrast + ".css";
            var themeLink = document.getElementById('themeFileEle');
            if (themeLink) {
                var existingTheme = StringReplaceAll(themeLink.href.split(exports.PopHref).pop(), '/', '');
                if (this._name !== existingTheme) {
                    themeLink.href = this._name;
                }
            }
            else {
                var themeFile = document.createElement('link');
                themeFile.setAttribute('rel', 'stylesheet');
                themeFile.setAttribute('type', 'text/css');
                themeFile.setAttribute('href', this._name);
                themeFile.setAttribute('id', 'themeFileEle');
                themeFile.onload = function () {
                    _this.init.next(true);
                };
                if (typeof themeFile != 'undefined')
                    document.getElementsByTagName('head')[0].appendChild(themeFile);
            }
        };
        AppTheme.prototype.isLoaded = function () {
            return this.init.getValue();
        };
        return AppTheme;
    }());
    var AppGlobal = /** @class */ (function () {
        function AppGlobal() {
            this._verified = false;
            this._modals = 0;
            this._open = false;
            this.init = new rxjs.BehaviorSubject(false);
            this.verification = new rxjs.Subject();
            this._unload = new rxjs.Subject();
        }
        AppGlobal.prototype.isVerified = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var wait;
                var _this = this;
                return __generator(this, function (_a) {
                    wait = setInterval(function () {
                        if (_this._verified) {
                            clearInterval(wait);
                            return resolve(true);
                        }
                    }, 5, 5);
                    return [2 /*return*/];
                });
            }); });
        };
        AppGlobal.prototype.setVerified = function () {
            this._verified = true;
        };
        AppGlobal.prototype.setModal = function () {
            this._modals++;
        };
        AppGlobal.prototype.isModal = function () {
            return this._modals;
        };
        AppGlobal.prototype.removeModal = function () {
            if (this._modals) {
                this._modals--;
            }
        };
        AppGlobal.prototype.isFilterBar = function () {
            return this._filter;
        };
        AppGlobal.prototype.setFilterBar = function (value) {
            this._filter = value;
        };
        AppGlobal.prototype.isPipes = function () {
            return this._pipes;
        };
        AppGlobal.prototype.setPipes = function (value) {
            this._pipes = value;
        };
        AppGlobal.prototype.isAliases = function () {
            return this._aliases;
        };
        AppGlobal.prototype.setAliases = function (value) {
            this._aliases = value;
        };
        AppGlobal.prototype.isEntities = function () {
            return this._entities;
        };
        AppGlobal.prototype.setEntities = function (value) {
            this._entities = value;
        };
        AppGlobal.prototype.setSecurity = function (value) {
            this._security = value;
        };
        AppGlobal.prototype.isSecurity = function () {
            return this._security;
        };
        AppGlobal.prototype.isPermissions = function () {
            return this._permissions;
        };
        AppGlobal.prototype.setPermissions = function (value) {
            this._permissions = value;
        };
        AppGlobal.prototype.isOpen = function () {
            return this._open;
        };
        AppGlobal.prototype.setOpen = function (value) {
            this._open = value;
        };
        return AppGlobal;
    }());
    var PopInitializerModule = /** @class */ (function () {
        function PopInitializerModule(base, cacFilter, componentFactoryResolver, credential, date, entity, externalApi, log, history, iconRegistry, pipe, portal, request, router, sanitizer, schemeComponent, template, platform, injector, tasks, APP_GLOBAL, APP_GLOBAL_PARAMS, APP_THEME, env) {
            var _this = this;
            this.base = base;
            this.cacFilter = cacFilter;
            this.componentFactoryResolver = componentFactoryResolver;
            this.credential = credential;
            this.date = date;
            this.entity = entity;
            this.externalApi = externalApi;
            this.log = log;
            this.history = history;
            this.iconRegistry = iconRegistry;
            this.pipe = pipe;
            this.portal = portal;
            this.request = request;
            this.router = router;
            this.sanitizer = sanitizer;
            this.schemeComponent = schemeComponent;
            this.template = template;
            this.platform = platform;
            this.injector = injector;
            this.tasks = tasks;
            this.APP_GLOBAL = APP_GLOBAL;
            this.APP_GLOBAL_PARAMS = APP_GLOBAL_PARAMS;
            this.APP_THEME = APP_THEME;
            this.env = env;
            this.name = "PopInitializerModule";
            this.verification = {
                pending: false,
                subscription: undefined,
                debouncer: undefined,
                trigger: function () {
                    if (_this.verification.debouncer)
                        clearTimeout(_this.verification.debouncer);
                    _this.verification.debouncer = setTimeout(function () {
                        return _this._verifyAuthStorage();
                    }, 5);
                },
                unload: function () {
                    if (_this.verification.subscription) {
                        _this.verification.subscription.unsubscribe();
                    }
                    if (_this.verification.debouncer) {
                        clearTimeout(_this.verification.debouncer);
                    }
                }
            };
            this.unload = {
                pending: false,
                subscription: undefined,
                debouncer: undefined,
                trigger: function () {
                    if (_this.unload.debouncer)
                        clearTimeout(_this.unload.debouncer);
                    _this.unload.debouncer = setTimeout(function () {
                        _this.unload.run();
                    }, 0);
                },
                run: function () {
                    if (_this.unload.subscription) {
                        _this.unload.subscription.unsubscribe();
                    }
                    _this.verification.unload();
                }
            };
            this.iconRegistry.addSvgIcon('admin', this.sanitizer.bypassSecurityTrustResourceUrl('assets/images/admin.svg'));
            var setup = new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var auth, login, publicFacingApp, verified;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            auth = this.base.getAuthDetails();
                            login = GetSessionSiteVar('Login.time', 0);
                            try {
                                this._setBusinessId(auth);
                            }
                            catch (e) {
                                console.log(e);
                            }
                            publicFacingApp = this.APP_GLOBAL_PARAMS.open ? true : false;
                            if (!(!publicFacingApp && IsObject(auth, ['id', 'businesses', 'users', 'token', 'email_verified_at']) && !(this.base.isAuthExpired()))) return [3 /*break*/, 4];
                            return [4 /*yield*/, this._loadAppTheme()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this._init(auth)];
                        case 2:
                            _a.sent();
                            exports.PopLog.init(this.name, ":publicFacingApp", publicFacingApp);
                            /** This is experimental testing if app can be speed up  **/
                            if (this.businessId && StorageGetter(auth, ['businesses', this.businessId, 'apps']) && !login) {
                                exports.PopLog.init(this.name, ":fire app early?");
                                this.APP_GLOBAL.setVerified();
                                this.APP_GLOBAL.init.next(true);
                            }
                            return [4 /*yield*/, this._verifyAuthStorage()];
                        case 3:
                            verified = _a.sent();
                            if (!verified) {
                                if (!i0.isDevMode()) {
                                    if (false) {
                                        this.base.clearAuthDetails("PopInitializerModule:setup");
                                        window.location.href = window.location.protocol + '//' + window.location.host + '/user/legacy/auth/clear';
                                    }
                                    else {
                                        exports.PopLog.init(this.name, ":verification failed");
                                        this.APP_GLOBAL.setVerified();
                                        this.APP_GLOBAL.init.next(true);
                                        return [2 /*return*/, resolve(true)];
                                    }
                                }
                                else {
                                    exports.PopLog.init(this.name, ":verification failed");
                                    this.APP_GLOBAL.init.next(true);
                                    return [2 /*return*/, resolve(true)];
                                }
                            }
                            else {
                                this._welcome();
                                return [2 /*return*/, resolve(true)];
                            }
                            return [3 /*break*/, 7];
                        case 4:
                            SetSessionSiteVar('App.theme', null);
                            SetSessionSiteVar('App.themeContrast', null);
                            return [4 /*yield*/, this._loadAppTheme()];
                        case 5:
                            _a.sent();
                            return [4 /*yield*/, this._setDependencies(false, null)];
                        case 6:
                            _a.sent();
                            if (this.APP_GLOBAL.isOpen()) {
                                this.APP_GLOBAL.setVerified();
                                this.APP_GLOBAL.init.next(true);
                                return [2 /*return*/, resolve(true)];
                            }
                            else {
                                this.APP_GLOBAL.init.next(true);
                                return [2 /*return*/, resolve(true)];
                            }
                            _a.label = 7;
                        case 7: return [2 /*return*/];
                    }
                });
            }); });
            setup.catch(function (e) {
                if (i0.isDevMode())
                    console.log('e', e);
                _this.APP_GLOBAL.init.next(true);
            });
        }
        PopInitializerModule.forRoot = function (tasks, appGlobalsParams) {
            if (tasks === void 0) { tasks = []; }
            if (appGlobalsParams === void 0) { appGlobalsParams = {}; }
            return {
                ngModule: PopInitializerModule,
                providers: [
                    {
                        provide: 'APP_GLOBAL',
                        useClass: AppGlobal
                    },
                    {
                        provide: 'APP_GLOBAL_PARAMS',
                        useValue: appGlobalsParams
                    },
                    { provide: i1$1.HTTP_INTERCEPTORS, useClass: HeaderInterceptor, multi: true },
                    { provide: i1$1.HTTP_INTERCEPTORS, useClass: Response401Interceptor, multi: true },
                    { provide: core.DateAdapter, useClass: CustomDateAdapter },
                    {
                        provide: 'APP_INITIALIZER_TASKS',
                        useValue: tasks
                    },
                    {
                        provide: 'APP_MENUS',
                        useClass: AppMenus
                    },
                    {
                        provide: 'APP_WIDGETS',
                        useClass: AppWidgets
                    },
                    {
                        provide: 'APP_THEME',
                        useClass: AppTheme
                    },
                ]
            };
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Load the app dependencies
         * @param business
         */
        PopInitializerModule.prototype._setDependencies = function (authenticated, auth) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.APP_GLOBAL.setAliases(IsDefined(this.env.aliases) ? this.env.aliases : (IsDefined(this.APP_GLOBAL_PARAMS.aliases) ? this.APP_GLOBAL_PARAMS.aliases : true));
                            this.APP_GLOBAL.setFilterBar(IsDefined(this.env.filter) ? this.env.filter : (IsDefined(this.APP_GLOBAL_PARAMS.filter) ? this.APP_GLOBAL_PARAMS.aliases : true));
                            this.APP_GLOBAL.setPipes(IsDefined(this.env.pipes) ? this.env.pipes : (IsDefined(this.APP_GLOBAL_PARAMS.pipes) ? this.APP_GLOBAL_PARAMS.pipes : true));
                            this.APP_GLOBAL.setEntities(IsDefined(this.env.entities) ? this.env.entities : (IsDefined(this.APP_GLOBAL_PARAMS.entities) ? this.APP_GLOBAL_PARAMS.entities : true));
                            this.APP_GLOBAL.setOpen(IsDefined(this.env.open) ? this.env.open : (IsDefined(this.APP_GLOBAL_PARAMS.open) ? this.APP_GLOBAL_PARAMS.open : false));
                            this.APP_GLOBAL.setSecurity(IsDefined(this.env.security) ? this.env.security : (IsDefined(this.APP_GLOBAL_PARAMS.security) ? this.APP_GLOBAL_PARAMS.security : false));
                            this.APP_GLOBAL.setPermissions(IsDefined(this.env.permissions) ? this.env.permissions : (IsDefined(this.APP_GLOBAL_PARAMS.permissions) ? this.APP_GLOBAL_PARAMS.permissions : false));
                            SetServiceInjector(this.injector);
                            SetPopEnv(this.env ? this.env : {});
                            SetPopExternalApi(this.externalApi);
                            SetPopHref(StringReplaceAll(this.platform.getBaseHrefFromDOM(), '/', ''));
                            SetPopLogger(this.log);
                            SetPopRequest(this.request);
                            SetPopTemplate(this.template);
                            SetPopComponentResolver(this.componentFactoryResolver);
                            if (!authenticated) return [3 /*break*/, 3];
                            SetPopDate(this.date);
                            SetPopHistory(this.history);
                            SetPopEntity(this.entity);
                            SetPopPipe(this.pipe);
                            SetPopPortal(this.portal);
                            SetPopSchemeComponent(this.schemeComponent);
                            this._setAuthGlobal(auth);
                            this._setBusinessId(auth);
                            return [4 /*yield*/, Promise.all([
                                    this._setRouteCacheClear(),
                                    this._setRouteErrorHandling(),
                                    this._setBusinessAssets(auth),
                                    this._loadPipeResources(),
                                ])];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this._loadFilterData()];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        PopInitializerModule.prototype._init = function (auth) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._setDependencies(true, auth)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this._setAncillary(auth)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this._configure(auth)];
                        case 3:
                            _a.sent();
                            this.APP_GLOBAL.init.next(true);
                            if (!this.unload.subscription) {
                                exports.PopLog.init(this.name, "registering unload request subscription");
                                this.unload.subscription = this.APP_GLOBAL._unload.subscribe(function () {
                                    exports.PopLog.init(_this.name, "unload: requested");
                                    _this.unload.trigger();
                                });
                            }
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        PopInitializerModule.prototype._setAncillary = function (auth) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._tasks()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        PopInitializerModule.prototype._configure = function (auth) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(IsObject(auth, ['id', 'businesses', 'users', 'token']) && !(this.base.isAuthExpired()) && exports.PopHref)) return [3 /*break*/, 4];
                            if (!IsObject(exports.PopBusiness, ['id'])) return [3 /*break*/, 2];
                            return [4 /*yield*/, Promise.all([
                                    this._setBusinessUserSettings(),
                                    this._setFilterAliases(),
                                    this._setRouteAliasMap(),
                                    this._setDefaultTabs(),
                                ])];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                        case 2:
                            exports.PopLog.init(this.name, "No Business Found");
                            return [2 /*return*/, resolve(true)];
                        case 3: return [3 /*break*/, 5];
                        case 4: return [2 /*return*/, resolve(true)];
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        };
        PopInitializerModule.prototype._tasks = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (IsObject(exports.PopBusiness, true)) {
                        if (IsArray(this.tasks, true)) {
                            this.tasks.map(function (task) {
                                if (IsCallableFunction(task)) {
                                    task();
                                }
                            });
                        }
                    }
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        PopInitializerModule.prototype._setAuthGlobal = function (auth) {
            SetPopAuth({
                id: auth.id,
                name: auth.name,
                first_name: auth.first_name,
                last_name: auth.last_name,
                initials: auth.initials,
                email: auth.email,
                email_verified_at: auth.email_verified_at,
                avatarLink: StorageGetter(auth, ['profile', 'avatar_link'], null),
                username: auth.username,
                created_at: auth.created_at
            });
        };
        PopInitializerModule.prototype._setBusinessId = function (auth) {
            if (IsUndefined(this.businessId))
                this.businessId = 0;
            if (IsObject(auth.businesses, true)) {
                if (!this.businessId)
                    this.businessId = String(GetSiteVar('Business.last', 0));
                if (!(+this.businessId && this.businessId in auth.businesses)) {
                    this.businessId = this.base.getCurrentBusinessId();
                }
                if (+this.businessId && this.businessId in auth.businesses) {
                    this.businessId = +this.businessId;
                }
                else if (+auth.business_fk && auth.business_fk in auth.businesses) {
                    this.businessId = +auth.business_fk;
                }
                else {
                    this.businessId = IsObject(auth.businesses, true) ? +Object.keys(auth.businesses)[0] : 0;
                }
            }
        };
        /**
         * Verify that the current auth storage is still relevant
         * @private
         */
        PopInitializerModule.prototype._verifyAuthStorage = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var auth;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(IsObject(exports.PopAuth, ['created_at']) && IsDefined(exports.PopAuth.email_verified_at, false) && !this.verification.pending)) return [3 /*break*/, 5];
                            exports.PopLog.init(this.name, "Verification: In Progress");
                            if (!this.businessId) {
                                exports.PopLog.init(this.name, "Verification:Complete - no business");
                                this.APP_GLOBAL.setVerified();
                                return [2 /*return*/, resolve(true)];
                            }
                            this.verification.pending = true;
                            return [4 /*yield*/, this.credential.verify(this.businessId)];
                        case 1:
                            auth = _a.sent();
                            if (!auth) return [3 /*break*/, 3];
                            this._setAuthGlobal(auth);
                            this._setBusinessId(auth);
                            return [4 /*yield*/, Promise.all([
                                    this._setBusinessAssets(auth),
                                    this._loadAppTheme(),
                                    this._setAncillary(auth),
                                    this._configure(auth),
                                    this._setRouteAliases()
                                ])];
                        case 2:
                            _a.sent();
                            this.APP_GLOBAL.setVerified();
                            exports.PopLog.init(this.name, "Verification: Complete");
                            this.verification.pending = false;
                            this.APP_GLOBAL.init.next(true);
                            if (!this.verification.subscription) {
                                exports.PopLog.init(this.name, "registering verification request subscription");
                                this.verification.subscription = this.APP_GLOBAL.verification.subscribe(function () {
                                    exports.PopLog.init(_this.name, "_verifyAuthStorage: requested");
                                    _this.verification.trigger();
                                });
                            }
                            return [2 /*return*/, resolve(true)];
                        case 3: return [2 /*return*/, resolve(false)];
                        case 4: return [3 /*break*/, 6];
                        case 5: return [2 /*return*/, resolve(false)];
                        case 6: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * This fx will set up all the necessary business assets that are needed
         * @param auth
         * @private
         */
        PopInitializerModule.prototype._setBusinessAssets = function (auth) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(+this.businessId && IsObject(auth, ['id', 'businesses', 'users', 'token']))) return [3 /*break*/, 2];
                            this.base.setCurrentBusinessId(+this.businessId);
                            SetPopUser(IsObject(auth.users, true) && this.businessId in auth.users ? auth.users[this.businessId] : null);
                            SetPopBusiness(IsObject(auth.businesses, true) && this.businessId in auth.businesses ? auth.businesses[this.businessId] : null);
                            SetPopApp(IsObject(exports.PopBusiness.apps, [exports.PopHref]) ? exports.PopBusiness.apps[exports.PopHref] : null);
                            // if (!IsObject(PopApp, ['id', 'name'])) {
                            //   if (!isDevMode()) {
                            //     window.location.href = window.location.protocol + '//' + window.location.host + '/home';
                            //   }
                            // }
                            return [4 /*yield*/, this._setBusinessAppEntities()];
                        case 1:
                            // if (!IsObject(PopApp, ['id', 'name'])) {
                            //   if (!isDevMode()) {
                            //     window.location.href = window.location.protocol + '//' + window.location.host + '/home';
                            //   }
                            // }
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * This fx will loop through all the apps in the current business, and for each entity in that business register the details
         */
        PopInitializerModule.prototype._setBusinessAppEntities = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var auth, inaccessibleApps_1, permanentApps_1;
                var _this = this;
                return __generator(this, function (_a) {
                    auth = this.base.getAuthDetails();
                    if (IsObject(exports.PopBusiness, ['id', 'apps']) && IsObject(exports.PopBusiness.apps, true)) {
                        inaccessibleApps_1 = [];
                        permanentApps_1 = ['library', 'home'];
                        // console.log('PopUser', PopUser);
                        Object.keys(exports.PopBusiness.apps).map(function (appName) {
                            var app = exports.PopBusiness.apps[appName];
                            app.hasCreateAccess = false;
                            if (IsObject(app, true) && IsObject(app.entities, true)) {
                                Object.keys(app.entities).map(function (name) {
                                    if (IsObject(app.entities[name], ['id', 'name', 'internal_name'])) {
                                        var entity = app.entities[name];
                                        entity.access = {};
                                        if (IsObject(exports.PopUser, ['permissions']) && IsObject(exports.PopUser.permissions, true) && entity.internal_name in exports.PopUser.permissions) {
                                            entity.access = exports.PopUser.permissions[entity.internal_name];
                                            // console.log(entity.internal_name, entity.access.can_read);
                                        }
                                        if (entity.access.can_create)
                                            app.hasCreateAccess = true;
                                        exports.PopEntity.setEntityParams(entity);
                                        exports.PopPipe.updateEntityAlias(entity.id, entity.alias);
                                    }
                                });
                            }
                            if (_this.APP_GLOBAL.isEntities() && !app.hasCreateAccess) {
                                if (!(permanentApps_1.includes((app.name)))) {
                                    inaccessibleApps_1.push(app.name);
                                }
                            }
                        });
                        // console.log('inaccessibleApps', inaccessibleApps);
                        if (IsArray(inaccessibleApps_1, true)) {
                            inaccessibleApps_1.map(function (appName2) {
                                delete exports.PopBusiness.apps[appName2];
                                delete auth.businesses[exports.PopBusiness.id].apps[appName2];
                            });
                        }
                        this.base.setAuthDetails(auth);
                    }
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Load the client,account,campaign data required for the filter bar
         * @param business
         */
        PopInitializerModule.prototype._setBusinessUserSettings = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (IsObject(exports.PopBusiness, ['id'])) {
                        this.date.setCurrentBusinessUnitSettings();
                        exports.PopLog.init(this.name, ":BusinessUserSettings");
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        return [2 /*return*/, resolve(true)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        PopInitializerModule.prototype._welcome = function () {
            if (IsObject(exports.PopAuth, ['created_at'])) {
                var now = new Date().getTime() / 1000;
                var loginTime = new Date(exports.PopAuth.created_at).getTime() / 1000;
                var secondsSinceLogin = (now - loginTime);
                var welcome = +secondsSinceLogin && +secondsSinceLogin < 20;
                if (welcome) {
                    this.template.welcome();
                }
            }
        };
        /**
         * Load the client,account,campaign data required for the filter bar
         * @param business
         */
        PopInitializerModule.prototype._loadFilterData = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.APP_GLOBAL.isFilterBar() && IsObject(exports.PopBusiness, ['id']))) return [3 /*break*/, 4];
                            if (!exports.PopEntity.checkAccess('client', 'can_read')) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.cacFilter.setData(this.name)];
                        case 1:
                            _a.sent();
                            exports.PopLog.init(this.name, ":Filter Data Set");
                            return [3 /*break*/, 3];
                        case 2:
                            exports.PopTemplate.turnOffFilter();
                            _a.label = 3;
                        case 3: return [2 /*return*/, resolve(true)];
                        case 4: return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * Load the resources needed for the PopPipe service
         * @param business
         */
        PopInitializerModule.prototype._loadPipeResources = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.APP_GLOBAL.isPipes() && IsObject(exports.PopBusiness, ['id'])) {
                        this.pipe.loadResources().then(function () {
                            exports.PopLog.init(_this.name, ":Pipe Resources Set");
                            return resolve(true);
                        });
                    }
                    else {
                        return [2 /*return*/, resolve(false)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Set any aliases on the filter columns
         * @private
         */
        PopInitializerModule.prototype._setFilterAliases = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.APP_GLOBAL.isFilterBar() && this.APP_GLOBAL.isEntities() && this.APP_GLOBAL.isAliases())
                        this.cacFilter.setConfigAliases();
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Create a map lookup for route aliases
         * @private
         */
        PopInitializerModule.prototype._setRouteAliasMap = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var aliasMap, auth_1;
                var _this = this;
                return __generator(this, function (_a) {
                    aliasMap = {};
                    if (this.APP_GLOBAL.isEntities() && this.APP_GLOBAL.isAliases()) {
                        auth_1 = GetSiteVar('Auth.details', {});
                        if (+this.businessId && IsObject(auth_1, ['businesses']) && IsObject(auth_1.businesses[this.businessId], ['apps'])) {
                            if (IsObject(auth_1.businesses[this.businessId].apps, true)) {
                                Object.keys(auth_1.businesses[this.businessId].apps).map(function (appName) {
                                    var app = auth_1.businesses[_this.businessId].apps[appName];
                                    if (IsObject(app.entities, true)) {
                                        Object.keys(app.entities).map(function (key) {
                                            var entity = app.entities[key];
                                            if (IsObject(app.entities[key], true) && IsObject(app.entities[key].alias, ['plural'])) {
                                                aliasMap[entity.internal_name] = {
                                                    singular: SpaceToHyphenLower(app.entities[key].alias.name),
                                                    plural: SpaceToHyphenLower(app.entities[key].alias.plural)
                                                };
                                            }
                                        });
                                    }
                                });
                            }
                        }
                    }
                    SetPopRouteAliasMap(aliasMap);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Get the router.config and load all lazy module using the configLoader
         */
        PopInitializerModule.prototype._setRouteAliases = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.APP_GLOBAL.isEntities() && this.APP_GLOBAL.isAliases())) return [3 /*break*/, 2];
                            this.router.config = ParseModuleRoutesForAliases(this.router.config);
                            this.router.config.reduce(function (acc, route) {
                                if (route.loadChildren && route.data && route.data.routeAliases) {
                                    _this.router.configLoader.load(_this.injector, route).subscribe({
                                        next: function (moduleConf) {
                                            route._loadedConfig = moduleConf;
                                            ParseModuleRoutesForAliases(moduleConf.routes);
                                            return route.path;
                                        }
                                    });
                                }
                                return acc;
                            }, []);
                            return [4 /*yield*/, Sleep(5)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                        case 2: return [4 /*yield*/, Sleep(5)];
                        case 3:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * Get the router.config and load all lazy module using the configLoader
         */
        PopInitializerModule.prototype._setRouteCacheClear = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var cacheRoute;
                return __generator(this, function (_a) {
                    if (true) {
                        cacheRoute = this.router.config.find(function (route) { return route.path === 'system/cache/clear'; });
                        if (!cacheRoute) {
                            this.router.config = __spreadArray(__spreadArray([], __read(this.router.config)), [{
                                    path: 'system/cache/clear',
                                    pathMatch: 'full',
                                    canActivate: [PopCacheRedirectGuard],
                                    component: PopCacheRedirectComponent
                                }]);
                        }
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        return [2 /*return*/, resolve(true)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Get the router.config and load all lazy module using the configLoader
         */
        PopInitializerModule.prototype._setRouteErrorHandling = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var guardBlockRoute, errorRoute;
                return __generator(this, function (_a) {
                    if (true) {
                        guardBlockRoute = this.router.config.find(function (route) { return route.path === 'system/route'; });
                        if (!guardBlockRoute) {
                            this.router.config = __spreadArray(__spreadArray([], __read(this.router.config)), [{
                                    path: 'system/route',
                                    pathMatch: 'full',
                                    component: PopGuardRedirectComponent
                                }]);
                        }
                        errorRoute = this.router.config.find(function (route) { return route.path === 'system/error/:code'; });
                        if (!errorRoute) {
                            this.router.config = __spreadArray(__spreadArray([], __read(this.router.config)), [{
                                    path: 'system/error/:code',
                                    pathMatch: 'full',
                                    canActivate: [PopRedirectGuard],
                                    component: PopErrorRedirectComponent
                                }]);
                        }
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        return [2 /*return*/, resolve(true)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Load the theme of the business and apply the theme contrast the user has specified
         * @param business
         */
        PopInitializerModule.prototype._loadAppTheme = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var businessTheme, userThemeContrast;
                return __generator(this, function (_a) {
                    businessTheme = IsObject(exports.PopUser, ['id']) ? StorageGetter(exports.PopUser, ['setting', 'theme'], null) : null;
                    if (!businessTheme)
                        businessTheme = GetSessionSiteVar("App.theme", 'default');
                    userThemeContrast = IsObject(exports.PopUser, ['id']) ? StorageGetter(exports.PopUser, ['setting', 'theme_contrast'], null) : null;
                    if (!userThemeContrast)
                        userThemeContrast = GetSessionSiteVar("App.themeContrast", 'light');
                    SetSessionSiteVar('App.theme', businessTheme);
                    SetSessionSiteVar('App.themeContrast', userThemeContrast);
                    this.APP_THEME.set(businessTheme, userThemeContrast);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Set a default set of tabs that an entity should have, intended to be overridden
         * @param business
         */
        PopInitializerModule.prototype._setDefaultTabs = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.APP_GLOBAL.isEntities())
                        exports.PopEntity.setEntityTabs('default', [EntityGeneralTab, EntityHistoryTab]);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        return PopInitializerModule;
    }());
    PopInitializerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        PopRedirectsModule
                    ],
                    declarations: [],
                    exports: [],
                    providers: [PopCredentialService]
                },] }
    ];
    PopInitializerModule.ctorParameters = function () { return [
        { type: PopBaseService },
        { type: PopCacFilterBarService },
        { type: i0.ComponentFactoryResolver },
        { type: PopCredentialService },
        { type: PopDatetimeService },
        { type: PopEntityService },
        { type: PopRequestExternalService },
        { type: PopLogService },
        { type: PopRouteHistoryResolver },
        { type: icon.MatIconRegistry },
        { type: PopPipeService },
        { type: PopEntityUtilPortalService },
        { type: PopRequestService },
        { type: i1.Router },
        { type: platformBrowser.DomSanitizer },
        { type: PopEntitySchemeComponentService },
        { type: PopTemplateService },
        { type: common.PlatformLocation },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i0.Injector,] }] },
        { type: Array, decorators: [{ type: i0.Inject, args: ['APP_INITIALIZER_TASKS',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL_PARAMS',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_THEME',] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['env',] }] }
    ]; };

    var PopTabMenuSectionBarService = /** @class */ (function () {
        function PopTabMenuSectionBarService(baseRepo, env) {
            this.baseRepo = baseRepo;
            this.env = env;
        }
        /**
         * Store the current tab into onSession memory
         * @param name
         * @returns void
         */
        PopTabMenuSectionBarService.prototype.setSectionSession = function (internal_name, slug) {
            if (internal_name)
                SetSessionSiteVar("Business." + exports.PopBusiness.id + ".Entity." + TitleCase(internal_name) + ".TabMenu.Main.section", slug);
        };
        /**
         * Get latest path
         */
        PopTabMenuSectionBarService.prototype.getPathSession = function (internal_name) {
            return GetSessionSiteVar("Business." + exports.PopBusiness.id + ".Entity." + TitleCase(internal_name) + ".TabMenu.Main.section");
        };
        return PopTabMenuSectionBarService;
    }());
    PopTabMenuSectionBarService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopTabMenuSectionBarService_Factory() { return new PopTabMenuSectionBarService(i0__namespace.ɵɵinject(PopBaseService), i0__namespace.ɵɵinject("env")); }, token: PopTabMenuSectionBarService, providedIn: "root" });
    PopTabMenuSectionBarService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopTabMenuSectionBarService.ctorParameters = function () { return [
        { type: PopBaseService },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['env',] }] }
    ]; };

    var PopTabMenuSectionBarComponent = /** @class */ (function (_super) {
        __extends(PopTabMenuSectionBarComponent, _super);
        function PopTabMenuSectionBarComponent(el, _domRepo, _routeRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._routeRepo = _routeRepo;
            _this._tabRepo = _tabRepo;
            _this.overflow = false;
            _this.name = 'PopTabMenuSectionBarComponent';
            _this.srv = {
                location: exports.ServiceInjector.get(common.Location),
                router: exports.ServiceInjector.get(i1.Router),
                route: undefined,
                section: exports.ServiceInjector.get(PopTabMenuSectionBarService),
                tab: undefined
            };
            _this.ui = {};
            _this.asset = {
                tab: undefined,
                baseUrl: undefined,
                urlSection: undefined,
                map: {}
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this._setCore()];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this._setRoute()];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, this._setSections()];
                            case 3:
                                _a.sent();
                                return [4 /*yield*/, this._setHeight()];
                            case 4:
                                _a.sent();
                                return [4 /*yield*/, this._attachContainer()];
                            case 5:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * Setup this component
         */
        PopTabMenuSectionBarComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * This will load the comonent of the selected section into the view container
         * @param section
         */
        PopTabMenuSectionBarComponent.prototype.onViewSection = function (section) {
            var _this = this;
            this.dom.active.section = section.id;
            this.srv.section.setSectionSession('profile', section.id);
            this.srv.location.go(this.asset.baseUrl + '?section=' + section.id);
            this.dom.setTimeout("view-section", function () {
                _this.template.render([{
                        type: section.component,
                        inputs: section.inputs,
                        position: _this.position,
                    }]);
            }, 0);
        };
        /**
         * Clean up the dom of this component
         */
        PopTabMenuSectionBarComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Protected Method )                                      *
         *                                                                                              *
         ************************************************************************************************/
        PopTabMenuSectionBarComponent.prototype._setCore = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        PopTabMenuSectionBarComponent.prototype._setRoute = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var url, slugs;
                var _this = this;
                return __generator(this, function (_a) {
                    url = String(this.srv.router.url).split('?')[0];
                    slugs = url.split('/');
                    this.asset.baseUrl = slugs.join('/');
                    if (this.srv.section.getPathSession(this.core.params.internal_name))
                        this.asset.urlSection = this.srv.section.getPathSession(this.core.params.internal_name);
                    this.dom.setSubscriber('query-params', this.srv.route.queryParams.subscribe(function (params) {
                        if (params.section)
                            _this.asset.urlSection = params.section;
                    }));
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        PopTabMenuSectionBarComponent.prototype._setSections = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.asset.tab = this.srv.tab.getTab();
                    this.dom.active.section = undefined;
                    if (!this.sections && this.asset.tab.sections) {
                        this.sections = this.asset.tab.sections;
                    }
                    this.asset.map.sections = ArrayMapSetter(this.sections, 'id');
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        PopTabMenuSectionBarComponent.prototype._setHeight = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var defaultHeight;
                return __generator(this, function (_a) {
                    defaultHeight = window.innerHeight - 230;
                    this.dom.setHeight(defaultHeight, 60);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        PopTabMenuSectionBarComponent.prototype._attachContainer = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.template.attach('container');
                    if (IsArray(this.sections, true)) {
                        if (this.asset.urlSection in this.asset.map.sections) {
                            this.onViewSection(this.sections[this.asset.map.sections[this.asset.urlSection]]);
                        }
                        else {
                            this.onViewSection(this.sections[0]);
                        }
                    }
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        return PopTabMenuSectionBarComponent;
    }(PopExtendDynamicComponent));
    PopTabMenuSectionBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-tab-section-bar',
                    template: "<div class=\"pop-entity-tab-section-bar-header\">\n  <nav mat-tab-nav-bar>\n    <a mat-tab-link\n       *ngFor=\"let section of sections\"\n       (click)=\"onViewSection(section)\"\n       [active]=\"dom.active.section === section.id\">\n      {{section.name}}\n    </a>\n  </nav>\n</div>\n<div class=\"pop-entity-tab-section-bar-wrapper\" [ngClass]=\"{'pop-entity-tab-section-bar-overflow': this.overflow}\" [style.height.px]=\"dom.height.inner\">\n  <ng-template #container></ng-template>\n</div>\n",
                    styles: [".pop-entity-tab-section-bar-header{position:relative;border:1px solid transparent;border-radius:3px;margin:-20px 0 0}.pop-entity-tab-section-bar-wrapper{flex:1 1 100%}.pop-entity-tab-section-bar-overflow{overflow-y:scroll}#back-button{font-size:14px;color:red}"]
                },] }
    ];
    PopTabMenuSectionBarComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: i1.ActivatedRoute },
        { type: PopTabMenuService }
    ]; };
    PopTabMenuSectionBarComponent.propDecorators = {
        sections: [{ type: i0.Input }],
        overflow: [{ type: i0.Input }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }]
    };

    var PopTabMenuModule = /** @class */ (function () {
        function PopTabMenuModule() {
        }
        return PopTabMenuModule;
    }());
    PopTabMenuModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        i1$1.HttpClientModule,
                        i1.RouterModule,
                        icon.MatIconModule,
                        tabs.MatTabsModule,
                        button.MatButtonModule,
                        progressBar.MatProgressBarModule,
                        PopIndicatorsModule,
                    ],
                    declarations: [
                        PopTabMenuComponent,
                        PopTabMenuSectionBarComponent
                    ],
                    exports: [
                        PopTabMenuComponent
                    ],
                    providers: [],
                },] }
    ];

    var ErrorComponent = /** @class */ (function () {
        function ErrorComponent(data, dialog, history) {
            this.data = data;
            this.dialog = dialog;
            this.history = history;
        }
        ErrorComponent.prototype.goBack = function () {
            this.history.goBack();
            this.dialog.close();
        };
        return ErrorComponent;
    }());
    ErrorComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-error',
                    template: "<h1>Error: {{data.code}} - {{data.message}}</h1>\n<button mat-raised-button (click)=\"goBack()\">Go Back</button>\n"
                },] }
    ];
    ErrorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] },
        { type: i1$2.MatDialogRef },
        { type: PopRouteHistoryResolver }
    ]; };

    var PopErrorsComponent = /** @class */ (function () {
        function PopErrorsComponent(dialog) {
            this.dialog = dialog;
        }
        PopErrorsComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.loadErrorDialog();
            }, 500);
        };
        PopErrorsComponent.prototype.loadErrorDialog = function () {
            this.dialog.open(ErrorComponent, { data: { code: this.error.code, message: this.error.message } });
        };
        return PopErrorsComponent;
    }());
    PopErrorsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-errors',
                    template: "",
                    styles: [""]
                },] }
    ];
    PopErrorsComponent.ctorParameters = function () { return [
        { type: i1$2.MatDialog }
    ]; };
    PopErrorsComponent.propDecorators = {
        error: [{ type: i0.Input }]
    };

    var PopErrorsModule = /** @class */ (function () {
        function PopErrorsModule() {
        }
        return PopErrorsModule;
    }());
    PopErrorsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        PopErrorsComponent,
                        ErrorComponent,
                    ],
                    imports: [MaterialModule],
                    exports: [
                        PopErrorsComponent,
                    ],
                },] }
    ];

    var InDialogComponent = /** @class */ (function (_super) {
        __extends(InDialogComponent, _super);
        function InDialogComponent(el, dialog, config) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.dialog = dialog;
            _this.config = config;
            _this.events = new i0.EventEmitter();
            _this.http = 'POST';
            _this.name = 'InDialogComponent';
            _this.srv = {
                events: exports.ServiceInjector.get(PopEntityEventService),
                request: exports.ServiceInjector.get(PopRequestService),
                router: exports.ServiceInjector.get(i1.Router),
            };
            _this.asset = {
                visible: 0
            };
            _this.ui = {
                form: undefined
            };
            /**
             * This should transformValue and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    var fieldItems = {};
                    _this.dom.state.validated = false;
                    if (!_this.config.inDialog.submit)
                        _this.config.inDialog.submit = 'Submit';
                    _this.config.fieldItems.map(function (field) {
                        if (field.config && field.config.control) {
                            fieldItems[field.config.name] = field.config.control;
                            _this.asset.visible++;
                        }
                    });
                    _this.dom.setHeight(_this.asset.visible * 40, 0);
                    _this.ui.form = new forms.FormGroup(fieldItems);
                    resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this._triggerFormValidation();
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        InDialogComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Intercept the enter press to check if the form can be submitted
         * @param event
         */
        InDialogComponent.prototype.onEnterPress = function (event) {
            var _this = this;
            event.preventDefault();
            event.stopPropagation();
            if (this.dom.state.validated) {
                this.dom.setTimeout("submit-form", function () {
                    return _this.onFormSubmit();
                }, 500);
            }
        };
        /**
         * The user will press enter or click a submit btn to submit the form
         */
        InDialogComponent.prototype.onFormSubmit = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var params, request;
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.dom.state.validated && !this.dom.state.pending) {
                        this._onSubmissionStart();
                        params = this.ui.form.value;
                        request = this.http === 'POST' ? this.srv.request.doPost(this.config.inDialog.postUrl, params, (this.config.inDialog.postUrlVersion !== null ? this.config.inDialog.postUrlVersion : 1)) : this.srv.request.doPatch(this.config.inDialog.postUrl, params, (this.config.inDialog.postUrlVersion !== null ? this.config.inDialog.postUrlVersion : 1));
                        request.subscribe(function (result) { return __awaiter(_this, void 0, void 0, function () {
                            var goToUrl, newGoToUrl;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        goToUrl = this.config.inDialog.goToUrl;
                                        result = result.data ? result.data : result;
                                        this.config.entity = result;
                                        return [4 /*yield*/, this._onSubmissionSuccess()];
                                    case 1:
                                        _a.sent();
                                        this.dialog.close(this.config.entity);
                                        if (IsString(goToUrl, true)) {
                                            newGoToUrl = ParseLinkUrl(String(goToUrl).slice(), this.config.entity);
                                            this.srv.router.navigate([newGoToUrl]).catch(function (e) {
                                                console.log(e);
                                            });
                                        }
                                        return [2 /*return*/, resolve(true)];
                                }
                            });
                        }); }, function (err) {
                            _this._onSubmissionFail();
                            _this._setErrorMessage(err);
                            return resolve(false);
                        });
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * The user can click a canel btn to close the form dialog
         */
        InDialogComponent.prototype.onFormCancel = function () {
            var _this = this;
            this.dom.state.loaded = false;
            this.dom.setTimeout("close-modal", function () {
                _this.config.entity = null;
                _this.dialog.close(-1);
            }, 500);
        };
        /**
         * Handle the form events to trigger the form validation
         * @param event
         */
        InDialogComponent.prototype.onBubbleEvent = function (event) {
            var _this = this;
            if (event.name === 'onKeyUp') {
                this.dom.state.validated = false;
                this.dom.setTimeout("trigger-validation", function () {
                    _this._triggerFormValidation();
                }, 500);
            }
            if (IsValidFieldPatchEvent(this.core, event) || event.name === 'onBlur') {
                this.dom.setTimeout("trigger-validation", function () {
                    _this._triggerFormValidation();
                }, 500);
            }
            else {
                // if a field is focused we want a chance to validate again
                // this.dom.state.validated = false;
            }
            // if( event.type === 'field' && event.name === 'onChange' ) event.form = this.ui.form;
            this.events.emit(event);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        InDialogComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This fx will trigger the form validation
         * @private
         */
        InDialogComponent.prototype._triggerFormValidation = function () {
            var _this = this;
            this.dom.setTimeout("trigger-form-validation", function () {
                _this._validateForm().then(function (valid) {
                    _this.dom.state.validated = valid;
                });
            }, 50);
        };
        /**
         * The form needs to able to make api calls to verify info for certain fields
         * ToDo:: Allow the config to be able to pass in api validation calls for certain fields
         * @private
         */
        InDialogComponent.prototype._validateForm = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.dom.state.validated = false;
                _this.dom.setTimeout("trigger-form-validation", null);
                _this.dom.setTimeout("validate-form", function () {
                    _this.ui.form.updateValueAndValidity();
                    setTimeout(function () {
                        _this.dom.state.validated = true; // mock stub for now
                        return resolve(_this.ui.form.valid);
                    }, 0);
                }, 0);
            });
        };
        /**
         * This hook is called when the form is submitting
         * @private
         */
        InDialogComponent.prototype._onSubmissionStart = function () {
            this.dom.state.pending = true;
            this.dom.setTimeout("submit-form", null);
            this.dom.setTimeout("trigger-validation", null);
            this.dom.setTimeout("trigger-form-validation", null);
            this.dom.setTimeout("validate-form", null);
            this.dom.error.message = '';
            this.dom.setTimeout("set-error", null);
        };
        /**
         * This hook is called when the form submission has failed
         * @private
         */
        InDialogComponent.prototype._onSubmissionFail = function () {
            this.dom.state.pending = false;
            // this.dom.state.validated = false;
        };
        /**
         * This hook is called when the form has submitted successfully
         * @private
         */
        InDialogComponent.prototype._onSubmissionSuccess = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var event;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.dom.state.pending = false;
                            this.dom.state.validated = false;
                            this.dom.state.success = (this.config.entity.message !== null ? this.config.entity.message : 'Created');
                            event = {
                                source: this.name,
                                method: 'create',
                                type: 'entity',
                                name: this.config.params.name,
                                internal_name: this.config.params.internal_name,
                                data: this.config.entity
                            };
                            if (!IsCallableFunction(this.config.inDialog.callback)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.config.inDialog.callback(this.core, event)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.srv.events.sendEvent(event);
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * This fx will handle errors
         * @param message
         * @private
         */
        InDialogComponent.prototype._setErrorMessage = function (err) {
            var _this = this;
            this.dom.setTimeout("set-err-msg", function () {
                _this.dom.state.pending = false;
                _this.dom.error.message = GetHttpErrorMsg(err);
                _this.ui.form.markAsPristine();
                // this.dom.setTimeout( `clear-err-msg`, () => {
                //   this.dom.error.message = '';
                // }, 5000 );
            }, 500);
        };
        return InDialogComponent;
    }(PopExtendComponent));
    InDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-in-dialog',
                    template: "<div *ngIf=\"dom.state.loaded\" [@slideInOut]>\n  <div class=\"in-dialog-title\" *ngIf=\"config.inDialog.title !== null\">{{config.inDialog.title}}</div>\n  <div class=\"in-dialog-fields\">\n    <form (keyup.enter)=\"onEnterPress($event);\" [formGroup]=\"ui.form\" [className]=\"dom.state.pending ? 'in-dialog-field-lock' : ''\">\n      <lib-group [ngClass]=\"{'in-dialog-disabled': dom.state.pending}\" [config]=\"config\" (events)=\"onBubbleEvent($event);\"></lib-group>\n    </form>\n  </div>\n  <div class=\"in-dialog-buttons\">\n    <button *ngIf=\"config.inDialog.cancel\" class=\"in-dialog-cancel\" mat-raised-button (click)=\"onFormCancel();\" [disabled]=\"dom.state.pending\">\n      Cancel\n    </button>\n    <button class=\"in-dialog-other\" mat-raised-button color=\"accent\" (click)=\"onFormSubmit()\" [disabled]=\"!dom.state.validated || dom.state.pending\">\n      <span *ngIf=\"!dom.state.pending\">{{config.inDialog.submit}}</span>\n      <div *ngIf=\"dom.state.pending\">\n        <mat-spinner diameter=\"20\"></mat-spinner>\n      </div>\n    </button>\n  </div>\n  <div class=\"in-dialog-message-layout\" *ngIf=\"dom.state.success || dom.error?.message\" [@slideInOut]>\n    <div *ngIf=\"dom.state.success\" class=\"in-dialog-success\">{{dom.state.success}}</div>\n    <div *ngIf=\"dom.error.message\" class=\"in-dialog-errors\" [innerHTML]=dom.error.message></div>\n  </div>\n</div>\n",
                    animations: [
                        slideInOut
                    ],
                    styles: [":host{position:relative;display:block;min-width:350px}:host .in-dialog-title{font-weight:500;text-align:center;margin-bottom:10px}:host .in-dialog-fields{position:relative;display:block;width:100%;margin-bottom:10px}:host .in-dialog-fields .in-dialog-field{margin-bottom:10px}:host .in-dialog-fields .in-dialog-field-lock{pointer-events:none!important}:host .in-dialog-fields .in-dialog-field-spinner{position:absolute;left:50%;top:50%;margin-left:-22px;margin-top:-40px}:host .in-dialog-buttons{margin-top:20px;margin-bottom:10px;display:flex;justify-content:flex-end}:host .in-dialog-buttons .in-dialog-cancel{order:1;display:flex;align-items:center;justify-content:center;min-height:35px;min-width:140px}:host .in-dialog-buttons .in-dialog-other{order:2;display:flex;align-items:center;justify-content:center;margin-left:10px;min-width:140px;min-height:35px}:host .in-dialog-errors{color:var(--warn);text-align:center;word-break:break-word}:host .in-dialog-success{color:var(--success);text-align:center;word-break:break-word}:host .in-dialog-message-layout{display:flex;flex-direction:row;min-height:40px;align-items:center;justify-content:center;text-align:center}:host .in-dialog-disabled{pointer-events:none}"]
                },] }
    ];
    InDialogComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1$2.MatDialogRef },
        { type: FieldItemGroupConfig, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] }
    ]; };
    InDialogComponent.propDecorators = {
        events: [{ type: i0.Output }],
        http: [{ type: i0.Input }]
    };

    var GroupComponent = /** @class */ (function (_super) {
        __extends(GroupComponent, _super);
        function GroupComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.subscribers = [];
            _this.name = 'GroupComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    // Attach the container for of the field item list element
                    _this.template.attach('container'); // container references the @viewChild('container')
                    _this.core.entity = {
                        id: 0,
                        name: null
                    };
                    _this.config.fieldItemMap = {};
                    var fieldItemComponentList = [];
                    _this.config.fieldItems.map(function (fieldItem) {
                        var existingValue = 'control' in fieldItem.config ? fieldItem.config.control.value : null;
                        _this.core.entity[fieldItem.model.name] = existingValue;
                    });
                    _this.config.fieldItems.map(function (fieldItem, index) {
                        if (fieldItem && IsObject(fieldItem.model, ['name']) && fieldItem.config && fieldItem.component) {
                            _this.config.fieldItemMap[fieldItem.model.name] = index;
                            if (_this.config.inDialog)
                                fieldItem.config.bubble = true;
                            var component = {
                                type: fieldItem.component,
                                inputs: {
                                    config: fieldItem.config,
                                    position: fieldItem.config['metadata'].position ? fieldItem.config['metadata'].position : 1,
                                    hidden: IsArray(fieldItem.model.when, true) ? !(EvaluateWhenCondition(_this.core, fieldItem.model.when, _this.core)) : false,
                                    when: IsArray(fieldItem.model.when, true) ? fieldItem.model.when : null
                                }
                            };
                            fieldItemComponentList.push(component);
                        }
                    });
                    _this.template.render(fieldItemComponentList, [], true);
                    _this.dom.handler.bubble = function (core, event) {
                        if (IsValidFieldPatchEvent(_this.core, event)) {
                            if (event.config.name in _this.core.entity) {
                                var newValue = isNaN(event.config.control.value) ? event.config.control.value : +event.config.control.value;
                                _this.core.entity[event.config.name] = newValue;
                                if (_this.config.fieldItems.length > 1) {
                                    _this._resetComponentListHidden();
                                    _this.dom.setTimeout("update-relations", function () {
                                        _this._triggerParentChildUpdates(event.config.name);
                                    }, 0);
                                }
                            }
                        }
                        if (event.config.bubble || ['patch', 'portal'].includes(event.name)) {
                            _this.events.emit(event);
                        }
                    };
                    _this.config.getField = function (name) {
                        if (name && name in _this.config.fieldItemMap) {
                            return _this.config.fieldItems[_this.config.fieldItemMap[name]];
                        }
                        return null;
                    };
                    _this.events.emit({ source: 'GroupComponent', type: 'field_group', name: 'init', id: _this.config.id, group: _this.config });
                    resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this.dom.setTimeout("parent-child", function () {
                        _this._triggerParentChildUpdates('client_id');
                    });
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        GroupComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        GroupComponent.prototype.ngOnDestroy = function () {
            this.subscribers.map(function (subscription) {
                if (subscription)
                    subscription.unsubscribe();
            });
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Get a linear list of the parent child relations from a given point
         * @param self the name to start from (usually the field that has just been changed by user)
         * @param list
         */
        GroupComponent.prototype._getRelationList = function (name, list) {
            if (list === void 0) { list = []; }
            var item;
            if (name && name in this.config.fieldItemMap) {
                item = this.config.fieldItems[this.config.fieldItemMap[name]];
                if (IsObject(item, ['config', 'model'])) {
                    list.push({
                        name: item.config.name,
                        autoFill: this._fieldHasAutoFill(name),
                    });
                    if (this._fieldHasChild(name)) {
                        this._getRelationList(this.config.fieldItems[this.config.fieldItemMap[name]].model.options.child, list);
                    }
                }
            }
            return list;
        };
        /**
         * Determine if field has a child relation in the list
         * @param name
         */
        GroupComponent.prototype._fieldHasChild = function (name) {
            if (name in this.config.fieldItemMap && this.config.fieldItems[this.config.fieldItemMap[name]].model && this.config.fieldItems[this.config.fieldItemMap[name]].model.options) {
                if (this.config.fieldItems[this.config.fieldItemMap[name]].model.options.child) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Determine if field should be auto filled with the first item in the list
         * @param name
         */
        GroupComponent.prototype._fieldHasAutoFill = function (name) {
            if (name in this.config.fieldItemMap && this.config.fieldItems[this.config.fieldItemMap[name]].model && this.config.fieldItems[this.config.fieldItemMap[name]].model.options) {
                if (this.config.fieldItems[this.config.fieldItemMap[name]].model.autoFill) {
                    return true;
                }
            }
            return false;
        };
        GroupComponent.prototype._triggerParentChildUpdates = function (name) {
            console.log('triggerParentChildUpdates', name);
            if (this._fieldHasChild(name)) {
                var values = void 0;
                var child_fk = void 0;
                var childField_1;
                var autoFill_1 = false;
                var set = void 0;
                var resource = void 0;
                var relations = this._getRelationList(name);
                // console.log('relations', relations);
                relations.some(function (relation) {
                    if (relation.autoFill) {
                        autoFill_1 = true;
                        return true;
                    }
                });
                if (name && name in this.config.fieldItemMap) {
                    child_fk = this.config.fieldItems[this.config.fieldItemMap[name]].model.options.child;
                    if (child_fk && child_fk in this.config.fieldItemMap) {
                        childField_1 = this.config.fieldItems[this.config.fieldItemMap[child_fk]];
                        // console.log('child field', childField);
                        if (childField_1.model.form === 'select') {
                            if (childField_1.model.options.resource) {
                                // console.log('has resource', childField.model.options.resource, this.config.metadata[ childField.model.options.resource ]);
                                if (IsObject(this.config.metadata[childField_1.model.options.resource], ['data_values'])) {
                                    resource = this.config.metadata[childField_1.model.options.resource].data_values;
                                }
                            }
                            // console.log('resource', resource);
                            if (IsArray(resource, true)) {
                                values = ConvertArrayToOptionList(resource, {
                                    // ensure that an option shows up in list in case other conditions remove it, aka it has been archived
                                    prevent: [],
                                    // parent means this options should all have a common field trait like client_fk, account_fk ....
                                    parent: childField_1.model.options.parent ? {
                                        field: childField_1.model.options.parent,
                                        value: this.core.entity[childField_1.model.options.parent]
                                    } : null,
                                    empty: childField_1.model.options.empty ? childField_1.model.options.empty : null,
                                });
                            }
                            else {
                                values = [];
                            }
                            // console.log('values', values);
                            if (autoFill_1 && values.length) {
                                set = values[values.length - 1].value;
                            }
                            else {
                                set = null;
                            }
                            childField_1.config.options.values = values;
                            autoFill_1 = autoFill_1 && values.length ? values[0].value : null;
                            if (typeof childField_1.config.triggerOnChange === 'function')
                                childField_1.config.triggerOnChange(set);
                            this.dom.setTimeout("clear-message-" + child_fk, function () {
                                if (typeof childField_1.config.clearMessage === 'function') {
                                    childField_1.config.clearMessage();
                                }
                            }, 0);
                        }
                    }
                }
            }
        };
        /**
         * Whenever a update to the core entity happens the fields in the group should be re-evaluated if there are when conditionals set
         * @private
         */
        GroupComponent.prototype._resetComponentListHidden = function () {
            var _this = this;
            //     console.log('_resetComponentListHidden', this.template.refs);
            var name;
            this.template.refs.filter(function (componentRef) {
                return IsObject(componentRef.instance.config, true) && IsArray(componentRef.instance.when, true);
            }).map(function (componentRef) {
                name = componentRef.instance.config.name;
                if (name && name in _this.config.fieldItemMap) {
                    componentRef.instance.hidden = !EvaluateWhenCondition(_this.core, componentRef.instance.when, _this.core);
                }
            });
        };
        return GroupComponent;
    }(PopExtendDynamicComponent));
    GroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-group',
                    template: "<div class=\"field-group-container import-flex-column\">\n  <template #container></template>\n  <div style=\"width: 100%; display: block; clear:both;\"></div>\n</div>\n\n",
                    styles: [".field-group-container{position:relative;display:block;min-height:40px;padding-bottom:15px}"]
                },] }
    ];
    GroupComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    GroupComponent.propDecorators = {
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }],
        config: [{ type: i0.Input }]
    };

    var PopContextMenuComponent = /** @class */ (function () {
        function PopContextMenuComponent() {
        }
        PopContextMenuComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.config.toggle.subscribe(function (active) {
                if (active)
                    _this.trigger.openMenu();
                if (!active)
                    _this.trigger.closeMenu();
            });
        };
        PopContextMenuComponent.prototype.onMenuClick = function (option) {
            if (option.type === 'new_tab')
                window.open(option.url, '_blank');
            if (option.type === 'portal')
                this.config.emitter.emit({
                    source: 'PopContextMenuComponent',
                    type: 'context_menu',
                    name: 'portal',
                    open: true,
                    internal_name: option.metadata.internal_name,
                    id: option.metadata.id,
                    option: option
                });
        };
        return PopContextMenuComponent;
    }());
    PopContextMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-context-menu',
                    template: "<mat-menu #menu=\"matMenu\" >\n    <button *ngFor=\"let option of config.options\" mat-menu-item (click)=\"onMenuClick(option)\">\n        {{option.label}}\n    </button>\n</mat-menu>\n\n<div class=\"pcm-trigger-button\" [matMenuTriggerFor]=\"menu\" [ngStyle]=\"{'left.px': config.x, 'top.px': config.y}\" ></div>",
                    styles: [".pcm-trigger-button{position:fixed}"]
                },] }
    ];
    PopContextMenuComponent.ctorParameters = function () { return []; };
    PopContextMenuComponent.propDecorators = {
        config: [{ type: i0.Input }],
        trigger: [{ type: i0.ViewChild, args: [menu.MatMenuTrigger, { static: true },] }]
    };

    var PopContextMenuModule = /** @class */ (function () {
        function PopContextMenuModule() {
        }
        return PopContextMenuModule;
    }());
    PopContextMenuModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        PopContextMenuComponent
                    ],
                    imports: [
                        MaterialModule,
                        common.CommonModule
                    ],
                    exports: [
                        PopContextMenuComponent
                    ],
                },] }
    ];

    var CharacterIconPipe = /** @class */ (function () {
        function CharacterIconPipe() {
        }
        CharacterIconPipe.prototype.transform = function (name) {
            var character_icon = "";
            var nameArray = name.split(" ");
            if (nameArray.length >= 2) {
                character_icon += nameArray[0].charAt(0).toLocaleUpperCase();
                character_icon += nameArray[1].charAt(0).toLocaleUpperCase();
            }
            else {
                character_icon += name.charAt(0).toLocaleUpperCase();
                character_icon += name.charAt(1).toLocaleLowerCase();
            }
            return (character_icon);
        };
        return CharacterIconPipe;
    }());
    CharacterIconPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'characterIcon', pure: true },] }
    ];

    var PopSideBySideModule = /** @class */ (function () {
        function PopSideBySideModule() {
        }
        return PopSideBySideModule;
    }());
    PopSideBySideModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        PopSideBySideComponent,
                        CharacterIconPipe
                    ],
                    imports: [
                        common.CommonModule,
                        MaterialModule,
                        i1.RouterModule,
                        PopFieldItemModule,
                        PopIndicatorsModule,
                        PopContextMenuModule,
                    ],
                    exports: [
                        PopSideBySideComponent
                    ]
                },] }
    ];

    var PopFieldItemGroupComponent = /** @class */ (function (_super) {
        __extends(PopFieldItemGroupComponent, _super);
        function PopFieldItemGroupComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.close = new i0.EventEmitter();
            _this.name = 'PopFieldItemGroupComponent';
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
            };
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component will take a list of field item configs and render them in a column list
         */
        PopFieldItemGroupComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopFieldItemGroupComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.config.inDialog) {
                this.dom.setTimeout("load-modal", function () {
                    _this._loadGroupInDialogBox();
                }, 0);
            }
        };
        /**
         * This fx will bubble events up the pipeline
         * @param event
         */
        PopFieldItemGroupComponent.prototype.onBubbleEvent = function (event) {
            this.events.emit(event);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopFieldItemGroupComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This fx will load the field item list in a dialog modal, this is for typically for creating entities and such actions.
         * This will allow all the fields items to be placed in an angular form so all the data can be validated collectively.
         * @private
         */
        PopFieldItemGroupComponent.prototype._loadGroupInDialogBox = function () {
            var _this = this;
            var dialogBox = this.srv.dialog.open(InDialogComponent, {
                data: this.config,
                disableClose: true
            });
            dialogBox.componentInstance['http'] = this.config.http;
            dialogBox.componentInstance['debug'] = this.config.debug;
            dialogBox.componentInstance.events.subscribe(function (event) {
                event.group = _this.config;
                _this.events.emit(event);
            });
            dialogBox.afterClosed().subscribe(function (result) {
                _this.close.emit(result);
            });
        };
        return PopFieldItemGroupComponent;
    }(PopExtendComponent));
    PopFieldItemGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-field-item-group',
                    template: '<lib-group *ngIf="config && config.inDialog === null"  (events)="onBubbleEvent($event);" [config]=config></lib-group>'
                },] }
    ];
    PopFieldItemGroupComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopFieldItemGroupComponent.propDecorators = {
        config: [{ type: i0.Input }],
        close: [{ type: i0.Output }]
    };

    var PopFieldItemGroupModule = /** @class */ (function () {
        function PopFieldItemGroupModule() {
        }
        return PopFieldItemGroupModule;
    }());
    PopFieldItemGroupModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        PopFieldItemGroupComponent,
                        InDialogComponent,
                        GroupComponent
                    ],
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        MaterialModule,
                        PopIndicatorsModule,
                        PopFieldItemModule,
                        PopSideBySideModule,
                    ],
                    exports: [
                        PopFieldItemGroupComponent,
                    ],
                },] }
    ];

    var PopCommonService = /** @class */ (function () {
        function PopCommonService() {
            this.name = 'PopCommonService';
        }
        PopCommonService.prototype.arrayContainsAll = function (needles, haystack, strict) {
            if (strict === void 0) { strict = false; }
            return ArrayContainsAll(needles, haystack, strict);
        };
        // function for dynamic sorting an array of objects.
        // - Usage: someArray.sort(dynamicSort('key'));
        // @param key: The name of the key in each object to sort on.
        // @param order: asc (Ascending) or desc (Descending)
        // @return: sorted array.
        PopCommonService.prototype.dynamicSort = function (key, order) {
            if (order === void 0) { order = 'asc'; }
            return DynamicSort(key, order);
        };
        /**
         * Sorts on sort
         * @param a
         * @param b
         * returns int
         */
        PopCommonService.prototype.sortBySort = function (a, b) {
            if (a.sort < b.sort)
                return -1;
            if (a.sort > b.sort)
                return 1;
            return 0;
        };
        /**
         * Sorts on name field
         * @param a
         * @param b
         * returns int
         */
        PopCommonService.prototype.sortByName = function (a, b) {
            if (a.name < b.name)
                return -1;
            if (a.name > b.name)
                return 1;
            return 0;
        };
        /**
         * Sorts on position field
         * @param a
         * @param b
         * returns int
         */
        PopCommonService.prototype.sortByPosition = function (a, b) {
            if (+a.position < +b.position)
                return -1;
            if (+a.position > +b.position)
                return 1;
            return 0;
        };
        /**
         * Sorts on entityId field
         * @param a
         * @param b
         * returns int
         */
        PopCommonService.prototype.sortById = function (a, b) {
            if (a.id < b.id)
                return -1;
            if (a.id > b.id)
                return 1;
            return 0;
        };
        /**
         * Checks if two arrays match
         *
         * @param arr1
         * @param arr2
         * @param field -optional
         *
         * - if field is passed - check to see if the field is the same in both arrays
         *
         * @returns boolean
         */
        PopCommonService.prototype.arraysMatch = function (arr1, arr2, field) {
            return ArraysMatch(arr1, arr2, field);
        };
        /**
         * Convert an object into an array
         * @param obj
         * @returns array
         */
        PopCommonService.prototype.toArray = function (obj) {
            return ToArray(obj);
        };
        /**
         * A helper function to determine if a variable is numreric
         * @param value
         */
        PopCommonService.prototype.isNumber = function (value, requireTruthy) {
            return IsNumber(value, requireTruthy);
        };
        PopCommonService.prototype.isArray = function (arr, requireLength) {
            if (requireLength === void 0) { requireLength = false; }
            return IsArray(arr, requireLength);
        };
        /**
         * A helper function to determine if a variable is a qualified object
         *
         * @param value
         * @param requireKeys
         * @param throwError
         */
        PopCommonService.prototype.isObject = function (value, requireKeys) {
            if (requireKeys === void 0) { requireKeys = false; }
            return IsObject(value, requireKeys);
        };
        /**
         *
         * A helper function to determine if a variable is a qualified string
         * @param value
         * @param requireLength
         * @param throwError
         */
        PopCommonService.prototype.isString = function (value, requireLength) {
            if (requireLength === void 0) { requireLength = false; }
            return IsString(value, requireLength);
        };
        /**
         * Helper method to remove duplicate items from a  flat array [1,2,3,1,1], [['a','b','c','a']
         * @param arr
         */
        PopCommonService.prototype.onlyArrayUnique = function (arr) {
            return ArrayOnlyUnique(arr);
        };
        /**
         * Helper method to remove duplicate objects in an array that share a specific property [{entityId:1, ...},{entityId:2, ...},{entityId:3, ...},{entityId:1, ...}, ]
         * @param arr
         */
        PopCommonService.prototype.removeArrayDuplicates = function (array, prop) {
            return array.filter(function (obj, pos, arr) {
                return arr.map(function (mapObj) { return mapObj[prop]; }).indexOf(obj[prop]) === pos;
            });
        };
        /**
         * Map an array by a array key field
         * @param obj
         * @returns array
         */
        PopCommonService.prototype.mapArrayWithKey = function (array, array_key_field) {
            return ArrayMapSetter(array, array_key_field);
        };
        /**
         * Convert an Array to Object
         * @param arr
         * @returns Object
         */
        PopCommonService.prototype.toObject = function (arr) {
            return ToObject(arr);
        };
        /**
         * Convert an Array of objects  to Dictionary(object)
         * @param arr
         * @returns Object
         */
        PopCommonService.prototype.toDictionary = function (arr, key) {
            var dictionary = {};
            if (arr && Array.isArray(arr) && arr.length) {
                arr.map(function (item) {
                    if (typeof item[key] !== undefined)
                        dictionary[item[key]] = item;
                });
            }
            return dictionary;
        };
        PopCommonService.prototype.toUri = function (obj) {
            return ConvertObjectToUri(obj);
        };
        /**
         * Capitalize the first Letter of every word in a string
         * @param str
         * @returns str
         */
        PopCommonService.prototype.toTitleCase = function (str) {
            return TitleCase(str);
        };
        /**
         * Convert a date to yyyy:mm:dd 00:00:00
         * @param value date
         */
        PopCommonService.prototype.dateTimeFormat = function (value) {
            return ConvertDateToDateTimeFormat(value);
        };
        /**
         * Convert a date to yyyy:mm:dd
         * @param value date
         */
        PopCommonService.prototype.dateFormat = function (value, format) {
            if (format === void 0) { format = 'yyyy-mm-dd'; }
            return ConvertDateFormat(value, format);
        };
        PopCommonService.prototype.today = function (format) {
            if (format === void 0) { format = 'yyyy-mm-dd'; }
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0');
            var yyyy = today.getFullYear();
            return this.dateFormat(mm + '/' + dd + '/' + yyyy);
        };
        PopCommonService.prototype.addDays = function (date, days) {
            var copy = new Date(Number(date));
            copy.setDate(date.getDate() + days);
            return copy;
        };
        /**
         * Replace all occurrences of an sequence within a string
         * @param str
         * @param find
         * @param replace
         */
        PopCommonService.prototype.replaceAll = function (str, find, replace) {
            return StringReplaceAll(str, find, replace);
        };
        /**
         * Convert a string from snake case to Pascal Case
         * @param field
         * @returns string
         */
        PopCommonService.prototype.snakeToPascal = function (field) {
            return SnakeToPascal(field);
        };
        /**
         * Convert a string with hyphens to Pascal Case
         * @param field
         * @returns string
         */
        PopCommonService.prototype.hyphenToPascal = function (field) {
            return HyphenToPascal(field);
        };
        /**
         * Convert a string with spaces to snake case .. 'this is snake case' to 'this_is_snake_case'
         * @param field
         * @returns string
         */
        PopCommonService.prototype.spaceToSnake = function (pascal) {
            return SpaceToSnake(pascal);
        };
        /**
         * A complex fuzzy search to determine if an object's values contains a series of filter "tags"
         * @param object obj: The Object that you want to see if the fieldItems match the filter
         * @param string tags: The filter string you want to match against obj.
         *                       Uses (!)not, (&)and, (,)or syntax for complex chaining.
         *                       example: 'john' returns true if a field value contains 'john'
         *                       example: 'john,jane,doe' returns true if a field value contains any of the values
         *                       example: 'john&doe' returns true only if obj contains 'john' and  contains 'doe'
         *                       example: 'john,!doe' returns true only if obj contains 'john' and does not contain 'doe'
         *
         *
         * @returns boolean
         */
        PopCommonService.prototype.hasFilter = function (obj, tags) {
            return ObjectContainsTagSearch(obj, tags);
        };
        PopCommonService.prototype.deepCopy = function (obj) {
            return DeepCopy(obj);
        };
        PopCommonService.prototype.getHttpErrorMsg = function (err) {
            return GetHttpErrorMsg(err);
        };
        PopCommonService.prototype.getStoragePath = function (storage, steps, defaultValue) {
            if (defaultValue === void 0) { defaultValue = null; }
            return StorageGetter(storage, steps, defaultValue);
        };
        PopCommonService.prototype.uid = function () {
            return PopUid();
        };
        return PopCommonService;
    }());
    PopCommonService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopCommonService_Factory() { return new PopCommonService(); }, token: PopCommonService, providedIn: "root" });
    PopCommonService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var PopTableDialogComponent = /** @class */ (function () {
        function PopTableDialogComponent(tableDialogRef, cs, ds, data) {
            this.tableDialogRef = tableDialogRef;
            this.cs = cs;
            this.ds = ds;
            this.data = data;
            this.dom = {
                state: {},
                asset: {},
                height: {
                    outer: null,
                    inner: null,
                    default: null
                }
            };
            this.options = data.options;
        }
        PopTableDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dom.height.outer = window.innerHeight - 300;
            this.dom.height.inner = this.dom.height.outer - 150;
            this.buildToggles();
            this.buildColumns();
            this.buildLockedColumns();
            this.lockedColumns.control.valueChanges.subscribe(function (value) { return _this.updateLockedColumns(value); });
        };
        PopTableDialogComponent.prototype.buildLockedColumns = function () {
            var lockedColumns = 0;
            this.columns.forEach(function (col, index) {
                if (col.sticky === true) {
                    lockedColumns = ++index;
                }
            });
            this.lockedColumns = new SelectConfig({
                label: 'Locked columns',
                options: {
                    values: [
                        { value: 0, name: 'No columns locked' },
                        { value: 1, name: 'Lock first column' },
                        { value: 2, name: 'Lock first 2 columns' },
                        { value: 3, name: 'Lock first 3 columns' },
                    ]
                },
                value: lockedColumns
            });
        };
        PopTableDialogComponent.prototype.updateLockedColumns = function (value) {
            this.clearColSticky();
            if (value > 0) {
                this.updateStickyColumns(value);
            }
        };
        PopTableDialogComponent.prototype.clearColSticky = function () {
            this.columns.forEach(function (col) { return col.sticky = false; });
        };
        PopTableDialogComponent.prototype.updateStickyColumns = function (value) {
            this.columns.forEach(function (col, index) {
                if (index < value) {
                    col.sticky = true;
                }
            });
        };
        PopTableDialogComponent.prototype.handleInputEvents = function (event) {
            console.log('event', event);
        };
        PopTableDialogComponent.prototype.buildToggles = function () {
            this.toggles = {
                allowColumnSearchToggle: new SwitchConfig({
                    bubble: true,
                    label: 'Column Search',
                    value: this.options.currentOptions.searchColumns,
                    metadata: { option: 'searchColumns' }
                }),
                allowColumnSortToggle: new SwitchConfig({
                    bubble: true,
                    label: 'Column Sort',
                    value: this.options.currentOptions.sort,
                    metadata: { option: 'sort' }
                }),
                allowHeaderStickyToggle: new SwitchConfig({
                    bubble: true,
                    label: 'Sticky Header',
                    value: this.options.currentOptions.headerSticky,
                    metadata: { option: 'headerSticky' }
                }),
                allowHeaderDisplayToggle: new SwitchConfig({
                    bubble: true,
                    label: 'Display Header',
                    value: this.options.currentOptions.headerDisplay,
                    metadata: { option: 'headerDisplay' }
                }),
                allowPaginatorToggle: new SwitchConfig({
                    bubble: true,
                    label: 'Pagination',
                    value: this.options.currentOptions.paginator,
                    metadata: { option: 'paginator' }
                }),
            };
        };
        PopTableDialogComponent.prototype.setAllShow = function (checked) {
            this.columns.map(function (c) { return c.visible = checked; });
        };
        PopTableDialogComponent.prototype.buildColumns = function () {
            var e_1, _a, e_2, _b, e_3, _c;
            // Display column order: Current order of visible items then alphabetized list of non visible items.
            var currentColumns = [];
            var otherColumns = [];
            // Account for current column def set.
            for (var col in this.options.currentOptions.columnDefinitions) {
                this.options.currentOptions.columnDefinitions[col].display = this.ds.set(col, this.options.currentOptions.columnDefinitions[col]);
                if (!this.options.currentOptions.columnDefinitions[col].name)
                    this.options.currentOptions.columnDefinitions[col].name = col;
                if (this.options.currentOptions.columnDefinitions[col].visible) {
                    currentColumns.push(this.options.currentOptions.columnDefinitions[col]);
                }
                else {
                    otherColumns.push(this.options.currentOptions.columnDefinitions[col]);
                }
                // If this column has a checkbox then account for it in the list.
                if (this.options.currentOptions.columnDefinitions[col].checkbox) {
                    if (this.options.currentOptions.columnDefinitions[col].checkbox.visible) {
                        currentColumns.push(Object.assign({ name: col + '_checkbox', ref: col, display: this.ds.set(col + '_checkbox') }, this.options.currentOptions.columnDefinitions[col].checkbox));
                    }
                    else {
                        otherColumns.push(Object.assign({ name: col + '_checkbox', ref: col, display: this.ds.set(col + '_checkbox') }, this.options.currentOptions.columnDefinitions[col].checkbox));
                    }
                }
                // Remove from columns so we don't have duplicates.
                if (this.options.columns.indexOf(col) !== -1)
                    this.options.columns.splice(this.options.columns.indexOf(col), 1);
            }
            // Account for other columns in the dataset.
            if (!otherColumns.length) {
                try {
                    for (var _d = __values(this.options.columns), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var col = _e.value;
                        otherColumns.push({ name: col, display: this.ds.set(col), visible: false, sticky: false, sort: 0 });
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            // Sort current columns by their sort number and sort other columns by their name.
            currentColumns.sort(this.cs.dynamicSort('sort'));
            otherColumns.sort(this.cs.dynamicSort('name'));
            // Update the sort to reflect the new order.
            var order = 0;
            try {
                for (var currentColumns_1 = __values(currentColumns), currentColumns_1_1 = currentColumns_1.next(); !currentColumns_1_1.done; currentColumns_1_1 = currentColumns_1.next()) {
                    var col = currentColumns_1_1.value;
                    col.sort = ++order;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (currentColumns_1_1 && !currentColumns_1_1.done && (_b = currentColumns_1.return)) _b.call(currentColumns_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            try {
                for (var otherColumns_1 = __values(otherColumns), otherColumns_1_1 = otherColumns_1.next(); !otherColumns_1_1.done; otherColumns_1_1 = otherColumns_1.next()) {
                    var col = otherColumns_1_1.value;
                    col.sort = ++order;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (otherColumns_1_1 && !otherColumns_1_1.done && (_c = otherColumns_1.return)) _c.call(otherColumns_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this.columns = __spreadArray(__spreadArray([], __read(currentColumns)), __read(otherColumns));
        };
        PopTableDialogComponent.prototype.handleToggleEvents = function (event) {
            if (event.name === 'onChange') {
                var option = event.config.metadata.option;
                var value = event.config.control.value;
                this.options.currentOptions[event.config.metadata.option] = event.config.control.value;
                switch (option) {
                    case 'headerDisplay':
                        if (!value) {
                            this.options.currentOptions.sort = false;
                            this.toggles.allowColumnSortToggle.switchRef.checked = false;
                            this.toggles.allowColumnSortToggle.control.setValue(false);
                            this.toggles.allowHeaderStickyToggle.switchRef.checked = false;
                            this.toggles.allowHeaderStickyToggle.control.setValue(false);
                            this.options.currentOptions.headerSticky = false;
                            this.toggles.allowColumnSearchToggle.switchRef.checked = false;
                            this.toggles.allowColumnSearchToggle.control.setValue(false);
                            this.options.currentOptions.searchColumns = false;
                        }
                        break;
                    default:
                        break;
                }
            }
        };
        PopTableDialogComponent.prototype.onSave = function () {
            var e_4, _a, e_5, _b, e_6, _c;
            // Set our order to be the same as the index in the array.
            var order = 0;
            try {
                for (var _d = __values(this.columns), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var col = _e.value;
                    col.sort = ++order;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_4) throw e_4.error; }
            }
            // Build the column definitions based on user selection.
            var columnDefinitions = {};
            try {
                for (var _f = __values(this.columns), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var col = _g.value;
                    if (col.ref)
                        continue; // Ignore checkboxes for now as they belong under a specific field.
                    columnDefinitions[col.name] = {
                        display: col.display,
                        helper: (col.helper ? col.helper : null),
                        icon: (col.icon ? col.icon : null),
                        sort: col.sort,
                        route: (col.route ? col.route : null),
                        sticky: col.sticky,
                        visible: col.visible,
                    };
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_5) throw e_5.error; }
            }
            try {
                // Account for checkboxes
                for (var _h = __values(this.columns), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var col = _j.value;
                    if (!col.ref)
                        continue;
                    columnDefinitions[col.ref] = Object.assign(Object.assign({}, columnDefinitions[col.ref]), { checkbox: { sort: col.sort, sticky: col.sticky, visible: col.visible } });
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                }
                finally { if (e_6) throw e_6.error; }
            }
            this.options.currentOptions.columnDefinitions = columnDefinitions;
            this.tableDialogRef.close({ type: 'save', options: this.options });
        };
        PopTableDialogComponent.prototype.onResetToDefault = function () {
            this.tableDialogRef.close({ type: 'reset', options: this.options });
        };
        PopTableDialogComponent.prototype.onCancel = function () {
            this.tableDialogRef.close({ type: 'cancel', options: this.options });
        };
        PopTableDialogComponent.prototype.drop = function (event) {
            dragDrop.moveItemInArray(this.columns, event.previousIndex, event.currentIndex);
        };
        PopTableDialogComponent.prototype.ngOnDestroy = function () {
        };
        return PopTableDialogComponent;
    }());
    PopTableDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-dialog',
                    template: "<div>\n  <div>\n    <span class=\"mat-h3\">Settings</span>\n\n    <div class=\"options-container\">\n      <div class=\"options-column\">\n        <div class=\"dialog-option\" *ngIf=\"options.allowHeaderDisplayToggle\">\n          <lib-pop-switch [config]=\"toggles?.allowHeaderDisplayToggle\"\n                          (events)=\"handleToggleEvents($event)\"></lib-pop-switch>\n        </div>\n\n        <div class=\"dialog-option\" *ngIf=\"options.allowColumnSearchToggle && toggles.allowColumnSearchToggle\"\n             [hidden]=\"!this.options.currentOptions.headerDisplay\">\n          <lib-pop-switch [config]=\"toggles?.allowColumnSearchToggle\"\n                          (events)=\"handleToggleEvents($event)\"></lib-pop-switch>\n        </div>\n\n\n        <div class=\"dialog-option\" *ngIf=\"options.allowColumnSortToggle\"\n             [hidden]=\"!this.options.currentOptions.headerDisplay\">\n          <lib-pop-switch [config]=\"toggles.allowColumnSortToggle\"\n                          (events)=\"handleToggleEvents($event)\"></lib-pop-switch>\n        </div>\n\n\n        <div class=\"dialog-option\" *ngIf=\"options.allowHeaderStickyToggle\"\n             [hidden]=\"!this.options.currentOptions.headerDisplay\">\n          <lib-pop-switch [config]=\"toggles.allowHeaderStickyToggle\"\n                          (events)=\"handleToggleEvents($event)\"></lib-pop-switch>\n        </div>\n\n\n      </div>\n      <div style=\"flex: 1 1 auto;\"></div>\n      <div >\n        <div class=\"dialog-option\" style=\"overflow:hidden\">\n          <button class=\"dialog-button\" mat-raised-button (click)=\"onResetToDefault()\" style=\"float: right\">Reset to Default</button>\n        </div>\n        <div  class=\"dialog-option\" style=\"width: 175px;\" *ngIf=\"options.allowColumnStickyToggle\">\n          <lib-pop-select [config]=\"lockedColumns\" (events)=\"handleInputEvents($event)\"></lib-pop-select>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"dialog-container\" [style.maxHeight.px]=dom.height.outer>\n      <div class=\"dialog-options\" [style.minHeight.px]=dom.height.inner>\n        <div class=\"dialog-draggable-header\">\n          <div class=\"dialog-draggable-show\">\n            <mat-checkbox (change)=\"setAllShow($event.checked)\" color=\"accent\"></mat-checkbox>\n          </div>\n          <div class=\"dialog-draggable-name\">Column Label</div>\n\n          <!--          <div class=\"dialog-draggable-sticky\">Sticky</div>-->\n          <div class=\"dialog-draggable-handle\"></div>\n        </div>\n\n        <div cdkDropList class=\"dialog-draggable-columns\" [style.maxHeight.px]=dom.height.inner\n             (cdkDropListDropped)=\"drop($event)\">\n          <div class=\"dialog-draggable-column\" *ngFor=\"let col of columns\" cdkDrag cdkDragLockAxis=\"y\"\n               cdkDragBoundary=\".dialog-draggable-columns\">\n            <mat-checkbox class=\"dialog-draggable-show\" [(ngModel)]=\"col.visible\" color=\"accent\"></mat-checkbox>\n            <div class=\"dialog-draggable-name\">{{col.display}}</div>\n\n            <!--            <mat-checkbox class=\"dialog-draggable-sticky\" [(ngModel)]=\"col.sticky\" color=\"accent\" disabled=\"true\"-->\n            <!--                          *ngIf=\"!options.allowColumnStickyToggle\"></mat-checkbox>-->\n            <!--            <mat-checkbox class=\"dialog-draggable-sticky\" [(ngModel)]=\"col.sticky\" color=\"accent\"-->\n            <!--                          *ngIf=\"options.allowColumnStickyToggle\"></mat-checkbox>-->\n            <mat-icon class=\"dialog-draggable-handle\" cdkDragHandle>drag_handle</mat-icon>\n          </div>\n        </div>\n      </div>\n      <!--      <div class=\"dialog-options\" [style.minHeight.px]=dom.height.inner>-->\n      <!--        &lt;!&ndash; Display Header Option &ndash;&gt;-->\n\n\n      <!--        &lt;!&ndash;Paginator Option &ndash;&gt;-->\n      <!--        &lt;!&ndash;<div class=\"pop-table-dialog-option\" *ngIf=\"options.allowPaginatorToggle\">&ndash;&gt;-->\n      <!--        &lt;!&ndash;<lib-pop-switch [config]=\"toggles.allowPaginatorToggle\" (events)=\"handleToggleEvents($event)\"></lib-pop-switch>&ndash;&gt;-->\n      <!--        &lt;!&ndash;</div>&ndash;&gt;-->\n      <!--      </div>-->\n      <!--    </div>-->\n\n    </div>\n    <div class=\"dialog-buttons\">\n      <button class=\"dialog-button\" mat-raised-button (click)=\"onCancel()\">Cancel</button>\n\n      <button class=\"dialog-button\" mat-raised-button (click)=\"onSave()\" color=\"accent\">Save</button>\n    </div>\n\n  </div>\n\n</div>\n",
                    styles: [".options-container{display:flex;padding-bottom:var(--gap-m)}.dialog-container{display:flex;flex-direction:row;min-width:800px;min-height:300px;overflow:hidden}.dialog-options{flex:1 1 100%;flex-direction:column;min-height:300px;margin:5px}.dialog-option{margin-top:3px;padding:2px}.dialog-draggable-header{display:flex;flex-direction:row;justify-content:space-between;flex-wrap:nowrap;max-height:20px!important;border:1px solid var(--border);padding:15px 5px!important;align-items:center;background-color:var(--tableheader)}.dialog-draggable-columns{display:flex;flex-direction:column;overflow-y:auto;overflow-x:hidden;min-height:300px;max-height:calc(100vh - 300px)}.dialog-draggable-column{display:flex;flex-direction:row;justify-content:space-between;flex-wrap:nowrap;max-height:20px!important;border:1px solid var(--border);padding:15px 5px!important;align-items:center;background-color:var(--bg-3)}.dialog-draggable-name{flex-grow:5;padding-left:10px}.dialog-draggable-show{padding-left:var(--gap-s)}.dialog-draggable-sticky{width:50px}.dialog-draggable-handle{width:25px;text-align:right}.dialog-draggable-handle:hover{cursor:-webkit-grab;cursor:grab}.dialog-draggable-handle:active{cursor:grabbing;cursor:-webkit-grabbing;cursor:-moz-grabbing}.dialog-buttons{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-end;margin-top:20px}.dialog-button{margin-left:10px}.dialog-cancel{margin-left:-10px;display:flex;flex-grow:2}"]
                },] }
    ];
    PopTableDialogComponent.ctorParameters = function () { return [
        { type: i1$2.MatDialogRef },
        { type: PopCommonService },
        { type: PopDisplayService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] }
    ]; };

    var PopTableComponent = /** @class */ (function (_super) {
        __extends(PopTableComponent, _super);
        /**
         * @param el
         * @param cdr
         * @param _baseRepo
         * @param _dialogRepo
         * @param _domRepo
         * @param _routerRepo
         * @param _pipeRepo
         */
        function PopTableComponent(el, cdr, _baseRepo, _dialogRepo, _domRepo, _routerRepo, _pipeRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.cdr = cdr;
            _this._baseRepo = _baseRepo;
            _this._dialogRepo = _dialogRepo;
            _this._domRepo = _domRepo;
            _this._routerRepo = _routerRepo;
            _this._pipeRepo = _pipeRepo;
            _this.name = 'PopTableComponent';
            _this.srv = {
                base: undefined,
                dialog: undefined,
                router: undefined,
                pipe: undefined,
            };
            _this.asset = {
                data: undefined,
                filter: {
                    column: {},
                    predicate: undefined,
                    search: undefined
                }
            };
            /**
             * Configure the specifics of this component
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, Promise.all([
                                    this._setInitialConfig(),
                                    this._setHeight(),
                                    this._updateButtonControl(),
                                    this._attachPaginator(),
                                    this._handleConfigEvents(),
                                    this._setConfigHooks(),
                                    this._initSearchFilter(),
                                    this._configureTable() // Prep the table for display.
                                ])];
                            case 1:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this._setFilterPredicate(this.dom.session.searchValue); // Set up the filter predicates to use with this table
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            return _this;
        }
        /**
         * This component should have a purpose
         */
        PopTableComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The table will generate a slew of action and event triggers that need passed up the chain
         * @param name
         * @param event
         */
        PopTableComponent.prototype.onBubbleEvent = function (name, event) {
            // All selections of table rows should come through here so _update the buttonControls.
            var tableEvent = {
                source: this.name,
                type: 'table',
                name: name,
                data: event,
                metadata: this.config.metadata
            };
            this.log.event("onBubbleEvent", tableEvent);
            // We want a copy being emitted not the actual objects.
            this.events.emit(JSON.parse(JSON.stringify(tableEvent)));
        };
        /**
         * This will apply the search value that the user enters behind a debouncer
         * @param searchValue
         * @param col
         */
        PopTableComponent.prototype.onApplySearchValue = function (searchValue, col) {
            var _this = this;
            this.dom.setTimeout('apply-search', function () {
                _this.asset.filter.search(searchValue, col);
                _this.onBubbleEvent('search', searchValue);
            }, 250);
        };
        /**
         * The user can click on a button to edit their preferences for this table in a modal
         */
        PopTableComponent.prototype.onEditTablePreferencesClick = function () {
            var _this = this;
            // Get a copy of the current options.
            var searchColumns = this.config.searchColumns;
            var options = JSON.parse(JSON.stringify(this.config.options));
            // Defaults and allowables should be set by the coder but if not they will use the TableOptionsConfig defaults.
            // But we still need to set the current options.
            options.currentOptions = {
                columnDefinitions: this.config.columnDefinitions,
                headerDisplay: this.config.headerDisplay,
                headerSticky: this.config.headerSticky,
                paginator: this.config.paginator,
                search: this.config.search,
                searchColumns: this.config.searchColumns,
                sort: this.config.sort,
            };
            // If the coder didn't pass into options the available columns then get a list of all possible columns from the data.
            if (!options.columns.length && this.asset.data && this.asset.data[0]) {
                for (var col in this.asset.data[0]) {
                    if (!this.asset.data[0].hasOwnProperty(col))
                        continue;
                    if (IsString(this.asset.data[0][col]) || IsNumber(this.asset.data[0][col])) {
                        options.columns.push(col);
                    }
                }
            }
            this.onBubbleEvent('options_open', options);
            var dialogRef = this.srv.dialog.open(PopTableDialogComponent, {
                data: { options: options }
            });
            dialogRef.afterClosed().subscribe(function (dialog) {
                if (dialog) {
                    console.log('here', dialog);
                    if (dialog.type === 'save') {
                        _this.dom.refreshing();
                        try {
                            _this.cdr.detectChanges();
                        }
                        catch (e) {
                        }
                        var newOptions = JSON.parse(JSON.stringify(dialog.options));
                        _this.onBubbleEvent('options_save', newOptions);
                        // Build a new config object instead of updating the old one so that Angular's change detection will auto _update the view.
                        // - Certain things (column sort / search) wont auto-_update otherwise.
                        // - Requires the updating of the column defs in the setTimeout.
                        // - Might be an Angular bug: https://github.com/angular/material2/issues/13030
                        _this.config.headerDisplay = newOptions.currentOptions.headerDisplay;
                        _this.config.headerSticky = newOptions.currentOptions.headerSticky;
                        _this.config.paginator = newOptions.currentOptions.paginator;
                        _this.config.searchColumns = newOptions.currentOptions.searchColumns;
                        _this.config.sort = newOptions.currentOptions.sort;
                        _this.config.updateColumnDefinitions(newOptions.currentOptions.columnDefinitions);
                        if (searchColumns !== _this.config.searchColumns)
                            _this._setFilterPredicate();
                        try {
                            _this.cdr.detectChanges();
                        }
                        catch (e) {
                        }
                        _this._resetTable();
                    }
                    else if (dialog.type === 'reset') {
                        _this.dom.refreshing();
                        try {
                            _this.cdr.detectChanges();
                        }
                        catch (e) {
                        }
                        // Build a new config object instead of updating the old one so that Angular's change detection will auto _update the view.
                        // - Certain things (column sort / search) wont auto-_update otherwise.
                        // - Requires the updating of the column defs in the setTimeout.
                        // - Might be an Angular bug: https://github.com/angular/material2/issues/13030
                        _this.onBubbleEvent('options_reset', dialog.options);
                        _this.config.headerDisplay = _this.config.options.defaultOptions.headerDisplay;
                        _this.config.headerSticky = _this.config.options.defaultOptions.headerSticky;
                        // this.config.paginator = this.config.options.defaultOptions.paginator;
                        _this.config.searchColumns = _this.config.options.defaultOptions.searchColumns;
                        _this.config.sort = _this.config.options.defaultOptions.sort;
                        _this.config.dealWithAngularChangeDetectionFailure = false;
                        var columnDefinitions = JSON.parse(JSON.stringify(dialog.options.defaultOptions.columnDefinitions));
                        _this.config.updateColumnDefinitions(columnDefinitions);
                        if (searchColumns !== _this.config.searchColumns)
                            _this._setFilterPredicate();
                        try {
                            _this.cdr.detectChanges();
                        }
                        catch (e) {
                        }
                        _this._resetTable();
                    }
                    else if (dialog.type === 'cancel') {
                        _this.onBubbleEvent('options_cancel', {});
                    }
                }
                else {
                    _this.onBubbleEvent('options_cancel', {});
                }
            });
        };
        /**
         * Clean up the dom of this component
         */
        PopTableComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Protected Method )                                      *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Setup an intial config for this component here
         * @private
         */
        PopTableComponent.prototype._setInitialConfig = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    // Ensure config
                    this.config = IsObjectThrowError(this.config, true, this.name + ":configure: - this.config") ? this.config : null;
                    // Set a data container to hold raw data
                    this.asset.data = [];
                    if (IsDefined(this.config.id))
                        this.id = this.config.id;
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Handle table events
         * @param event
         */
        PopTableComponent.prototype._onTableEvent = function (event) {
            var goToUrl;
            var routeApp;
            if (event.type === 'table') {
                switch (event.name) {
                    case 'columnStandardClick':
                        // If global route was set then let the table handle the routing else emit the event.
                        if (this.config.route) {
                            goToUrl = this._parseGoToUrl(this.config.route, event.data.row);
                            routeApp = String(goToUrl).split('/');
                            if (routeApp[1] && routeApp[1] === exports.PopHref) {
                                // Since we are in the same app then use Angular to route.
                                var route_1 = routeApp.slice(2).join('/');
                                this.srv.router.navigate([route_1]).catch(function (e) {
                                    exports.PopTemplate.error({ message: "Invalid Client Route: " + route_1, code: 500 });
                                    console.log(e);
                                });
                            }
                            else {
                                // do a hard reload if we aren't.
                                SetSiteVar('redirect', goToUrl);
                                this.srv.base.redirect();
                            }
                        }
                        else {
                            this.onBubbleEvent('row_clicked', event.data.row);
                        }
                        break;
                    case 'columnRouteClick':
                        if (this.config.linkBehavior === 'route') {
                            goToUrl = this._parseGoToUrl(this.config.columnDefinitions[event.data.name].route, event.data.row);
                            if (!goToUrl)
                                return false;
                            routeApp = String(goToUrl).split('/');
                            if (routeApp[1] && routeApp[1] === exports.PopHref) {
                                var route_2 = routeApp.slice(2).join('/');
                                this.srv.router.navigate([route_2]).catch(function (e) {
                                    console.log(e);
                                    exports.PopTemplate.error({ message: "Invalid Client Route: " + route_2, code: 500 });
                                });
                            }
                            else {
                                SetSiteVar('redirect', goToUrl);
                                this.srv.base.redirect();
                            }
                        }
                        else {
                            this.onBubbleEvent(event.name, event.data);
                        }
                        break;
                    case 'columnLinkClick':
                        this.onBubbleEvent('columnLinkClick', {
                            link: this.config.columnDefinitions[event.data.name].link,
                            row: event.data.row,
                            col: event.data.name
                        });
                        break;
                    case 'filter':
                        this.onApplySearchValue(event.data.filter, event.data.col);
                        break;
                    default:
                        this.onBubbleEvent(event.name, event.data);
                        break;
                }
            }
            if (event.type === 'context_menu') {
                this.events.emit(event);
            }
        };
        /**
         * This determine what the height of the table should be
         * @param height
         */
        PopTableComponent.prototype._setHeight = function (height) {
            var _this = this;
            if (height === void 0) { height = null; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.dom.overhead = 0;
                    if (this.config) {
                        if (height)
                            this.config.height = height;
                        if (this.config.height) {
                            if (this.config.options || this.config.buttons.length || (this.config.search && !this.config.searchColumns))
                                this.dom.overhead = this.dom.overhead + 55;
                            if (this.config.paginator)
                                this.dom.overhead = this.dom.overhead + 65;
                            this.dom.setHeight(this.config.height, this.dom.overhead);
                            return [2 /*return*/, resolve(true)];
                        }
                    }
                    else {
                        this.dom.setHeight(0, 0);
                        this.dom.height.outer = null;
                        this.dom.height.inner = null;
                    }
                    return [2 /*return*/, resolve(false)];
                });
            }); });
        };
        /**
         * The user can choose from a global search or a column search
         */
        PopTableComponent.prototype._setFilterPredicate = function (searchValue) {
            if (searchValue === void 0) { searchValue = null; }
            if (this.config.searchColumns) {
                this.config.matData.filter = '';
                this.config.matData.filterPredicate = this.asset.filter.predicate.column;
            }
            else {
                this.config.matData.filterPredicate = this.asset.filter.predicate.tag;
                this.onApplySearchValue((searchValue ? searchValue : ''), '');
            }
        };
        PopTableComponent.prototype._updateData = function (data) {
            this.dom.refreshing();
            if (!this.config.matData.paginator)
                this.config.matData.paginator = this.matPaginator;
            if (IsObject(this.config.columnDefinitions, true)) {
                if (IsArray(data)) {
                    this.asset.data = data;
                    this.config.matData.data = this.asset.data.slice();
                    if (!this.config.searchColumns && this.dom.session.searchValue) {
                        this.asset.filter.search(this.dom.session.searchValue, '');
                    }
                    this._setTableLayout();
                }
            }
            else if (IsArray(data, true)) {
                this.config.data = data;
                this.onBubbleEvent('column_definitions', data[0]);
            }
        };
        PopTableComponent.prototype._resetTable = function (data) {
            var _this = this;
            if (data === void 0) { data = null; }
            this.log.info("_resetTable");
            this.dom.setTimeout("reset-table", function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.dom.refreshing();
                            return [4 /*yield*/, this._configureTable()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this._updateButtonControl()];
                        case 2:
                            _a.sent();
                            if (Array.isArray(data)) {
                                this._updateData(data);
                            }
                            else {
                                this.dom.setTimeout("view-ready", function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        this.dom.ready();
                                        return [2 /*return*/];
                                    });
                                }); }, 200);
                            }
                            return [2 /*return*/];
                    }
                });
            }); }, 0);
        };
        /**
         * This will bring in the table config,user preferences,data set and tie it all together
         * The structure of the data set is important to what the table will render
         */
        PopTableComponent.prototype._configureTable = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var templates, visible, visibleOrdered, validDefinition, col, template, cbName, i, col, availableFields_1;
                var _this = this;
                return __generator(this, function (_a) {
                    this.log.info("_configureTable");
                    this.config.matData.data.length = 0;
                    templates = {};
                    visible = [];
                    visibleOrdered = [];
                    validDefinition = false;
                    if (!IsObject(this.config.columnDefinitions, true)) {
                        this.dom.state.hasColumnDefinitions = true;
                        this.config.columnDefinitions = {
                            description: { name: "description", label: "Description", visible: true, sort: 3 },
                            id: { name: "id", label: "ID", checkbox: { visible: true, sort: 0 }, visible: true, sort: 999 },
                            name: { name: "name", label: "Name", visible: true, sort: 2 }
                        };
                    }
                    else {
                        this.dom.state.hasColumnDefinitions = IsObject(this.config.columnDefinitions, true);
                    }
                    for (col in this.config.columnDefinitions) {
                        if (!this.config.columnDefinitions.hasOwnProperty(col))
                            continue;
                        // Marking this as true so that the auto config does not run.
                        validDefinition = true;
                        template = 'Standard';
                        if (this.config.columnDefinitions[col].route) {
                            if (this.config.columnDefinitions[col].icon) {
                                template = this.config.columnDefinitions[col].helper ? 'RouteIconHelper' : 'RouteIcon';
                            }
                            else {
                                template = this.config.columnDefinitions[col].helper ? 'RouteHelper' : 'Route';
                            }
                        }
                        else if (this.config.columnDefinitions[col].link) {
                            if (this.config.columnDefinitions[col].icon) {
                                template = this.config.columnDefinitions[col].helper ? 'LinkIconHelper' : 'LinkIcon';
                            }
                            else {
                                template = this.config.columnDefinitions[col].helper ? 'LinkHelper' : 'Link';
                            }
                        }
                        else if (this.config.columnDefinitions[col].icon) {
                            template = this.config.columnDefinitions[col].helper ? 'IconHelper' : 'Icon';
                        }
                        else if (this.config.columnDefinitions[col].helper) {
                            template = 'StandardHelper';
                        }
                        // Populate the template with anything it may need.
                        templates[col] = {
                            template: template,
                            name: col,
                            display: this.srv.pipe.label.transform(col, this.config.columnDefinitions[col]),
                            icon: this.config.columnDefinitions[col].icon,
                            helper: {
                                text: (!this.config.columnDefinitions[col].helper ? '' : (typeof this.config.columnDefinitions[col].helper === 'string' ? this.config.columnDefinitions[col].helper : this.config.columnDefinitions[col].helper.text)),
                                position: (!this.config.columnDefinitions[col].helper ? 'left' : (typeof this.config.columnDefinitions[col].helper === 'string' ? 'left' : this.config.columnDefinitions[col].helper.position)),
                            },
                            sticky: !this.config.columnDefinitions[col].sticky ? false : this.config.columnDefinitions[col].sticky
                        };
                        // If Visible
                        if (this.config.columnDefinitions[col].visible)
                            visible.push({
                                name: col,
                                sort: this.config.columnDefinitions[col].sort
                            });
                        // Check if this column should also have a checkbox.
                        if (this.config.columnDefinitions[col].checkbox) {
                            cbName = 'checkbox_' + col;
                            templates[cbName] = {
                                template: 'Checkbox',
                                name: col,
                                helper: { text: '', position: 'left' },
                                sticky: !this.config.columnDefinitions[col].checkbox.sticky ? false : this.config.columnDefinitions[col].checkbox.sticky
                            };
                            if (this.config.columnDefinitions[col].checkbox.visible) {
                                visible.push({
                                    name: cbName,
                                    sort: this.config.columnDefinitions[col].checkbox.sort ? this.config.columnDefinitions[col].checkbox.sort : 0
                                });
                            }
                        }
                    }
                    // Put the visible columns are in the correct order.
                    visible.sort(DynamicSort('sort'));
                    for (i in visible)
                        visibleOrdered.push(visible[i].name);
                    // If no column configs were passed in then use the data set and just display all the columns.
                    if (!validDefinition && this.asset.data && this.asset.data[0]) {
                        for (col in this.asset.data[0]) {
                            if (!this.asset.data[0].hasOwnProperty(col))
                                continue;
                            visibleOrdered.push(col);
                            templates[col] = {
                                template: 'Standard',
                                name: col,
                                display: exports.PopPipe.label.transform(col)
                            };
                        }
                    }
                    // Just in case, remove any columns in the visibleOrdered that do not exist in the data set.
                    if (Array.isArray(this.asset.data) && this.asset.data.length) {
                        availableFields_1 = Object.keys(this.asset.data[0]);
                        visibleOrdered = visibleOrdered.filter(function (col) {
                            return (col.includes('checkbox_') ? true : availableFields_1.includes(col));
                        });
                    }
                    // Set the config.
                    this.config.columnConfig = { templates: templates, visible: visibleOrdered };
                    // Clear previous selections.
                    if (this.config.selection)
                        this.config.selection.clear();
                    // Set the data.
                    if (IsArray(this.config.data, false)) {
                        this._updateData(this.config.data);
                    }
                    setTimeout(function () {
                        _this.dom.ready();
                        _this.onBubbleEvent('ready', 1);
                    });
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        PopTableComponent.prototype._setTablePagination = function () {
            var _this = this;
            if (this.config && this.config.height) {
                var viewableRows = void 0;
                if (this.config.paginator && this.matPaginator && IsArray(this.asset.data, false)) {
                    this.dom.state.hasPagination = this.asset.data.length > 50;
                    // viewableRows = this.asset.data ? this.asset.data.length : 0;
                    // if( this.dom.state.hasPagination ){
                    // viewableRows = parseInt(String(( ( this.dom.height.inner - 25 ) / 50 )), 10);
                    viewableRows = 50;
                    // if( this.config.headerSticky ) viewableRows--;
                    // }
                    setTimeout(function () {
                        _this.config.matData.paginator.pageSize = 50;
                        _this.config.matData.paginator.pageSizeOptions = [50];
                        _this.config.matData.paginator.pageIndex = 0;
                        _this.config.matData.paginator.page.next({ pageIndex: 0, pageSize: 50, length: 50 });
                    });
                }
            }
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopTableComponent.prototype._updateColumnDefinitions = function (definitions) {
            this.config.columnDefinitions = definitions;
            this._configureTable().then(function () { return true; });
        };
        /**
         * This function will attach and configure a paginator if it is needed
         */
        PopTableComponent.prototype._attachPaginator = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.matPaginator) {
                        this.matPaginator.hidePageSize = true;
                        if (this.config && this.config.matData)
                            this.config.matData.paginator = this.matPaginator;
                    }
                    return [2 /*return*/, resolve(false)];
                });
            }); });
        };
        /**
         * This will manage the button interface
         * Buttons can have a dependency on what the user has currently selected(list items have a checkbox selection)
         */
        PopTableComponent.prototype._updateButtonControl = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var selectCount;
                return __generator(this, function (_a) {
                    // Initialize the ui button control
                    if (IsUndefined(this.ui.buttonControl)) {
                        this.ui.buttonControl = {
                            requireSelected: false,
                            requireOneSelected: false,
                            requireNoneSelected: true
                        };
                    }
                    if (this.config.selection) {
                        selectCount = this.config.selection.selected.length;
                        this.ui.buttonControl.requireSelected = +selectCount > 0;
                        this.ui.buttonControl.requireOneSelected = +selectCount === 1;
                        this.ui.buttonControl.requireNoneSelected = +selectCount === 0;
                    }
                    else {
                        this.ui.buttonControl.requireSelected = false;
                        this.ui.buttonControl.requireOneSelected = false;
                        this.ui.buttonControl.requireNoneSelected = true;
                    }
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * The table config has its own event emitter that need to be handled
         */
        PopTableComponent.prototype._handleConfigEvents = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (!this.config.onEvent)
                        this.config.onEvent = new rxjs.Subject();
                    this.dom.setSubscriber('config-events', this.config.onEvent.subscribe(function (event) {
                        _this._updateButtonControl().then(function () { return true; });
                        _this._onTableEvent(event);
                    }));
                    return [2 /*return*/, resolve(false)];
                });
            }); });
        };
        /**
         * This will allow an outside component to trigger specific functionality through the config of this component
         */
        PopTableComponent.prototype._setConfigHooks = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.config.setHeight = function (height) {
                        _this._setTableHeight(height);
                    };
                    this.config.clearSelected = function () {
                        return new Promise(function (clearResolver) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.config.selection.clear();
                                        return [4 /*yield*/, Sleep(250)];
                                    case 1:
                                        _a.sent();
                                        this._updateButtonControl().then(function () {
                                            return clearResolver(true);
                                        });
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    };
                    this.config.updateColumnDefinitions = function (definitions) {
                        _this._updateColumnDefinitions(definitions);
                    };
                    this.config.updateData = function (data) {
                        _this._updateData(data);
                    };
                    this.config.setLayout = function (height) {
                        _this._setTableLayout(height);
                    };
                    this.config.reset = function (data) {
                        if (data === void 0) { data = null; }
                        _this._resetTable(data);
                    };
                    this.config.applyFilter = function (searchValue, col) {
                        if (!_this.config.searchColumns) {
                            _this.onApplySearchValue(searchValue, col);
                        }
                    };
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Initialize and manage the filter predicates that this table will use
         */
        PopTableComponent.prototype._initSearchFilter = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.dom.session.searchValue = this.dom.session.searchValue ? this.dom.session.searchValue : (this.config.searchValue ? this.config.searchValue : '');
                    this.asset.filter.predicate = {
                        default: this.config.matData.filterPredicate,
                        column: function (data, filter) {
                            var exists = true;
                            for (var i in _this.asset.filter.column) {
                                if (data[i] && data[i].toLowerCase) {
                                    exists = data[i].toLowerCase().includes(_this.asset.filter.column[i]);
                                }
                                else {
                                    // Cast numbers to strings.
                                    exists = String(data[i]).includes(_this.asset.filter.column[i]);
                                }
                                if (!exists)
                                    return false;
                            }
                            return true;
                        },
                        tag: function (data, filter) {
                            return ObjectContainsTagSearch(data, filter);
                        }
                    };
                    this.asset.filter.search = function (searchValue, col) {
                        searchValue = searchValue.trim().toLocaleLowerCase();
                        if (!col) {
                            _this.config.matData.filter = searchValue;
                        }
                        else {
                            if (searchValue) {
                                // Make sure that this column is in the list.
                                _this.asset.filter.column[col] = searchValue;
                            }
                            else if (_this.asset.filter.column[col]) {
                                // Since filter is empty this column shouldn't be considered.
                                delete (_this.asset.filter.column[col]);
                            }
                            _this.config.matData.filter = searchValue;
                        }
                        if (_this.config.paginator && _this.config.matData.paginator)
                            _this.config.matData.paginator.firstPage();
                    };
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        PopTableComponent.prototype._setTableLayout = function (height) {
            var _this = this;
            if (height === void 0) { height = null; }
            this.dom.setTimeout('table-layout', function () {
                _this.dom.loading();
                if (_this.config && IsArray(_this.asset.data, false)) {
                    _this._setHeight(height).then(function () {
                    });
                    setTimeout(function () {
                        _this.dom.ready();
                        _this._setTablePagination();
                    }, 0);
                }
            }, 0);
        };
        PopTableComponent.prototype._setTableHeight = function (height) {
            var _this = this;
            if (height === void 0) { height = null; }
            if (this.config && IsArray(this.asset.data, false)) {
                this._setHeight(height);
                setTimeout(function () {
                    _this.dom.ready();
                    _this._setTablePagination();
                }, 0);
            }
        };
        PopTableComponent.prototype._parseGoToUrl = function (goToUrl, row) {
            if (goToUrl === void 0) { goToUrl = ''; }
            if (!goToUrl)
                return goToUrl;
            // Check for alias
            if (goToUrl.includes('alias:')) {
                var start = goToUrl.indexOf('alias:');
                var end = goToUrl.indexOf('/', start) !== -1 ? goToUrl.indexOf('/', start) : goToUrl.length;
                var aliasString = goToUrl.substring(start, end);
                var aliasArray = aliasString.split(':');
                aliasArray.shift();
                var alias = exports.PopPipe.label.getAlias(aliasArray.shift());
                goToUrl = goToUrl.replace(aliasString, alias);
            }
            // Check for other id.
            if (goToUrl.includes(':') && row) {
                goToUrl = ParseLinkUrl(goToUrl, row);
            }
            return goToUrl;
        };
        return PopTableComponent;
    }(PopExtendComponent));
    PopTableComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-table',
                    template: "<div class=\"pop-table-container\" [style.height.px]=dom.height.outer>\n  <div class=\"pt-dark-text pop-table-control\" *ngIf=\"config?.options || config?.buttons.length || ( config?.search && !config?.searchColumns )\">\n    <div class=\"search-control\">\n      <div *ngIf=\"config.search && !config.searchColumns\">\n        <mat-form-field class=\"sw-search\" appearance=\"outline\" color=\"accent\">\n          <a matPrefix>\n            <mat-icon>search</mat-icon>\n          </a>\n          <mat-icon class=\"sw-pointer\" matSuffix (click)=\"onApplySearchValue('',''); dom.session.searchValue = '';\">\n            close\n          </mat-icon>\n          <input matInput [(ngModel)]=\"dom.session.searchValue\" (keyup)=\"onApplySearchValue($event.target.value, '')\"\n                 placeholder=\"Search\">\n        </mat-form-field>\n      </div>\n    </div>\n    <div *ngIf=\"config.buttons.length && ui.buttonControl\">\n      <div class=\"pop-table-button-control\">\n        <div *ngFor=\"let button of config.buttons; last as isLast\">\n          <div [ngClass]=\"{'last-button': isLast && !config.options}\">\n            <button mat-raised-button class=\"pop-table-buttons\"\n                    (click)=\"onBubbleEvent((button.id ? button.id : button.name), config.selection?.selected)\" [ngClass]=\"{'sw-hidden': (\n                ( button.requireSelected && !ui.buttonControl.requireSelected ) ||\n                ( button.requireOneSelected && !ui.buttonControl.requireOneSelected ) ||\n                ( button.requireNoneSelected && !ui.buttonControl.requireNoneSelected )\n              )}\">\n              {{button.name}}\n            </button>\n          </div>\n        </div>\n        <button mat-raised-button *ngIf=\"config.options\" (click)=\"onEditTablePreferencesClick()\" class=\"sw-icon-button\">\n          <span class=\"sw-pop-icon\">Q</span>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class=\"pop-table-loader\">\n    <mat-progress-bar *ngIf=\"config?.loading\" mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n  <div #wrapper class=\"pop-table-wrapper\" [style.maxHeight.px]=null [style.minHeight.px]=dom.height.inner\n       [ngClass]=\"{'pop-table-wrapper-pagination': this.dom.state.hasPagination, 'pop-table-pagination-inactive pop-table-wrapper-scroll': !this.dom.state.hasPagination}\">\n    <!-- Needs some design process -->\n    <h1 *ngIf=\"!dom.state['hasColumnDefinitions']\">No Data Available</h1>\n    <!--  -->\n    <lib-pop-table-view *ngIf=\"dom.state.loaded && !dom.state.refresh\" [config]=config></lib-pop-table-view>\n  </div>\n  <div class=\"pop-table-footer\" class=\"sw-hidden\"[ngClass]=\"{'sw-hidden': true || !config?.paginator}\">\n    <div >\n      <mat-paginator></mat-paginator>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.Emulated,
                    styles: [".pop-table-container{position:relative;display:flex;flex-direction:column;overflow:hidden;box-sizing:border-box;margin:0 5px}.pop-table-container .pop-table-control{display:flex;justify-content:space-between;height:45px}.pop-table-container .pop-table-control .search-control{flex-grow:0.5}.pop-table-container .pop-table-control .pop-table-button-control{display:flex;justify-content:flex-end;align-items:flex-end;flex-grow:1;margin-bottom:7px;margin-right:-5px}.pop-table-container .pop-table-control .pop-table-button-control button{font-size:14px;margin-top:1px;margin-right:10px!important;line-height:20px!important;height:34px}.pop-table-container .pop-table-wrapper{display:flex;flex-direction:column;overflow-x:auto}.pop-table-container .pop-table-footer{position:absolute;display:flex;flex-direction:column;left:0;right:0;bottom:0;height:40px;border:1px solid var(--background-border);background:var(--background-item-menu);border-bottom-left-radius:var(--radius-xs);border-bottom-right-radius:var(--radius-xs)}.pop-table-loader{position:relative;top:-1px;height:1px;overflow:hidden;clear:both;z-index:1}.pop-table-wrapper-pagination,.pop-table-wrapper-scroll{overflow-y:auto!important}:host ::ng-deep .pop-table-wrapper-scroll mat-paginator .mat-icon-button{opacity:.1;pointer-events:none}:host ::ng-deep .search-control .mat-form-field .mat-form-field-infix{width:200px}::ng-deep td.mat-cell,::ng-deep th.mat-header-cell{font-size:14px;height:0!important;padding:0}::ng-deep .mat-header-row{height:40px!important}::ng-deep .mat-header-row,::ng-deep .mat-row{height:40px!important}"]
                },] }
    ];
    PopTableComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: PopBaseService },
        { type: i1$2.MatDialog },
        { type: PopDomService },
        { type: i1.Router },
        { type: PopPipeService }
    ]; };
    PopTableComponent.propDecorators = {
        config: [{ type: i0.Input }],
        wrapper: [{ type: i0.ViewChild, args: ['wrapper', { static: true },] }],
        footer: [{ type: i0.ViewChild, args: ['footer',] }],
        matPaginator: [{ type: i0.ViewChild, args: [paginator.MatPaginator, { static: true },] }]
    };

    var PopTableViewComponent = /** @class */ (function (_super) {
        __extends(PopTableViewComponent, _super);
        /**
         * @param el
         * @param _displayRepo
         * @param _domRepo
         */
        function PopTableViewComponent(el, _displayRepo, _domRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._displayRepo = _displayRepo;
            _this._domRepo = _domRepo;
            _this.name = 'PopTableViewComponent';
            _this.srv = {
                display: undefined,
            };
            _this.ui = {
                helperText: []
            };
            /**
             * Configure the specifics of this component
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this._attachContextMenu();
                    // Assign this so it is available inside the filterBarConfig.
                    _this.config.matData.sort = _this.tableSort;
                    // Create a container for helper texts
                    _this.ui.helperText = [];
                    // Add to the config so it's available to prepTable.
                    _this.config.selection = new collections.SelectionModel(true, []);
                    _this.config.headerSticky = true;
                    setTimeout(function () {
                        _this.config.matData.sort = _this.tableSort;
                        if (_this.config.initialSort)
                            _this.tableSort.sort({
                                id: _this.config.initialSort,
                                start: _this.config.initialSortDirection,
                                disableClear: true
                            });
                    }, 500);
                    resolve(true);
                });
            };
            return _this;
        }
        PopTableViewComponent.prototype.sortDisplay = function (col) {
            var isActive = this.tableSort.active === col ? true : false;
            var display = 'arrow_drop_down';
            if (isActive) {
                if (this.tableSort.direction === 'asc') {
                    display = 'arrow_drop_up';
                }
            }
            return display;
        };
        // sort(column,direction){
        //   // console.log(this.tableSort);
        //   this.tableSort.direction = direction === 'asc' ? 'desc' : 'asc';
        //   this.tableSort.sort({ id: column, start: direction, disableClear: true });
        // }
        PopTableViewComponent.prototype.sort = function (col) {
            var isActive = this.tableSort.active === col ? true : false;
            var direction = 'asc';
            if (isActive) {
                direction = this.tableSort.direction === 'asc' ? 'desc' : 'asc';
            }
            else {
                direction = 'asc';
            }
            this.tableSort.direction = direction === 'asc' ? 'desc' : 'asc';
            this.tableSort.sort({ id: col, start: direction, disableClear: true });
        };
        /**
         * This component is a child component of pop table
         * This component specifically handles the view that renders the data
         */
        PopTableViewComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Trigger an event when the user click on a name
         * @param name
         * @param row
         */
        PopTableViewComponent.prototype.onColumnStandardClick = function (name, row) {
            this.config.onEvent.next({
                source: this.name,
                type: 'table',
                name: 'columnStandardClick',
                data: {
                    name: name,
                    row: row
                }
            });
        };
        /**
         * Trigger an event when the user click on a name that is linked to a route
         * @param name
         * @param row
         */
        PopTableViewComponent.prototype.onColumnRouteClick = function (name, row) {
            this.config.onEvent.next({
                source: this.name,
                type: 'table',
                name: 'columnRouteClick',
                data: {
                    name: name,
                    row: row
                }
            });
        };
        /**
         * Create a helper text for a name
         * @param index
         * @param col
         * @param row
         */
        PopTableViewComponent.prototype.onHelperText = function (index, col, row) {
            if (!row[col])
                return '';
            var text = this.config.columnConfig.templates[col].helper.text;
            // Check for alias
            if (text.includes('alias:')) {
                var start = text.indexOf('alias:');
                var end = text.indexOf(' ', start) !== -1 ? text.indexOf(' ', start) : text.length;
                var aliasString = text.substring(start, end);
                var aliasArray = aliasString.split(':');
                aliasArray.shift();
                var alias = this.srv.display.alias(aliasArray.shift());
                text = text.replace(aliasString, alias);
            }
            // If no text is wrapped in < > then this is the text we want.
            if (text.indexOf('<') === -1) {
                this.ui.helperText[index] = text;
                return text;
            }
            // Replace any text between < > with the corresponding name data.
            var textArray = text.split('<');
            text = '';
            for (var i = 0; i < textArray.length; i++) {
                if (!textArray[i])
                    continue;
                if (textArray[i].indexOf('>') === -1) {
                    text += textArray[i];
                }
                else {
                    var fieldArray = textArray[i].split('>');
                    for (var ii = 0; ii < fieldArray.length; ii++) {
                        if (!fieldArray[ii])
                            continue;
                        if (ii === 0) {
                            text += (row[fieldArray[ii]] ? row[fieldArray[ii]] : '');
                        }
                        else {
                            text += fieldArray[ii];
                        }
                    }
                }
            }
            this.ui.helperText[index] = text;
            return text;
        };
        /**
         * Trigger an doAction when a name link is clicked
         * @param name
         * @param row
         */
        PopTableViewComponent.prototype.onColumnLinkClick = function (name, row) {
            this.config.onEvent.next({
                source: this.name,
                type: 'table',
                name: 'columnLinkClick',
                data: {
                    name: name,
                    row: row
                }
            });
        };
        /**
         * Selects all rows if they are not all selected; otherwise clear all row selections.
         */
        PopTableViewComponent.prototype.onMasterRowToggleClick = function () {
            var _this = this;
            if (this.config.selection.hasValue() && !this.isAllRowsSelected()) {
                this.config.selection.clear();
                this.checkbox.checked = false;
            }
            else {
                this.isAllRowsSelected() ? this.config.selection.clear() : this.config.matData.filteredData.forEach(function (row) { return _this.config.selection.select(row); });
                this.config.onEvent.next({
                    source: this.name,
                    type: 'table',
                    name: 'rows_selected',
                    data: this.config.selection.selected
                });
            }
        };
        /**
         * This will pass up to the table component
         * @param filter
         * @param col
         */
        PopTableViewComponent.prototype.onApplySearchValue = function (filter, col) {
            this.config.onEvent.next({
                source: this.name,
                type: 'table',
                name: 'filter',
                data: {
                    filter: filter,
                    col: col,
                }
            });
        };
        /**
         * Asks whether the number of selected elements matches the total number of rows.
         */
        PopTableViewComponent.prototype.isAllRowsSelected = function () {
            var numSelected = this.config.selection.selected.length;
            var numRows = this.config.matData.filteredData.length;
            return numSelected === numRows;
        };
        /**
         * This will bubble events with the table signature
         * @param name
         * @param event
         */
        PopTableViewComponent.prototype.onBubbleEvent = function (name, event) {
            this.config.onEvent.next({
                source: this.name,
                type: 'table',
                name: name,
                data: event
            });
        };
        /**
         * *ngFor track by for columns
         * Prevents columns from re-rendering when the item is the same
         * @param index
         * @param item
         */
        PopTableViewComponent.prototype.trackColumnByItem = function (index, item) {
            if (!item)
                return null;
            return item;
        };
        /**
         * *ngFor track by for rows
         * Prevents rows from re-rendering when the item entityId is still the same
         * @param index
         * @param item
         */
        PopTableViewComponent.prototype.trackRowByItemId = function (index, item) {
            if (!item)
                return null;
            return item.id;
        };
        /**
         * Clean up the dom of this component
         */
        PopTableViewComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /**
         * This will a build a context-menu that can used when user right clicks a certain element
         */
        PopTableViewComponent.prototype._attachContextMenu = function () {
            var _this = this;
            this.dom.contextMenu.config = new PopContextMenuConfig();
            //
            this.dom.contextMenu.configure = function (name, row, event) {
                var goToUrl = '';
                var internal_name;
                // check if it is a route, get the url from the route given from name definition
                if (_this.config.columnDefinitions[name].route) {
                    goToUrl = ParseLinkUrl(_this.config.columnDefinitions[name].route, row);
                }
                else if (_this.config.route) {
                    // else check if a global route exists on the table config. If it does, route to that
                    // this will most likely be used to route to an entityId by their entityId
                    goToUrl = ParseLinkUrl(_this.config.route, row);
                }
                if (_this.config.columnDefinitions[name].internal_name) {
                    internal_name = _this.config.columnDefinitions[name].internal_name;
                }
                else {
                    internal_name = row.internal_name ? row.internal_name : _this.config.internal_name ? _this.config.internal_name : null;
                }
                if (!goToUrl && !internal_name)
                    return false;
                // if we haven't returned, prevent the default behavior of the right click.
                event.preventDefault();
                // reset the context menu, and configure it to load at the position clicked.
                _this.dom.contextMenu.config.resetOptions();
                if (internal_name) {
                    _this.dom.contextMenu.config.addPortalOption(internal_name, row.id ? +row.id : +row[internal_name + '_fk']);
                }
                if (goToUrl)
                    _this.dom.contextMenu.config.addNewTabOption(goToUrl);
                _this.dom.contextMenu.config.x = event.clientX;
                _this.dom.contextMenu.config.y = event.clientY;
                _this.dom.contextMenu.config.toggle.next(true);
            };
            this.dom.setSubscriber('context-menu', this.dom.contextMenu.config.emitter.subscribe(function (event) {
                _this.config.onEvent.next(event);
            }));
        };
        return PopTableViewComponent;
    }(PopExtendComponent));
    PopTableViewComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-table-view',
                    template: "<table mat-table  [trackBy]=\"trackRowByItemId\" [dataSource]=\"config.matData\" matSort class=\"table\" full-width>\n\n  <ng-container\n    *ngFor=\"let col of config.columnConfig.visible;\"\n    matColumnDef=\"{{col}}\"\n    [ngSwitch]=\"config.columnConfig.templates[col].template\"\n    sticky=\"{{config.columnConfig.templates[col].sticky === true}}\">\n\n    <!-- DEFAULT -->\n    <div *ngSwitchDefault></div>\n\n    <!-- STANDARD -->\n    <div  *ngSwitchCase=\"'Standard'\">\n      <th *ngIf=\"!config.searchColumns && !config.sort; then HeaderStandard\"></th>\n      <th *ngIf=\"config.searchColumns && !config.sort; then HeaderSearch\"></th>\n      <th *ngIf=\"!config.searchColumns && config.sort; then HeaderSort\"></th>\n      <th *ngIf=\"config.searchColumns && config.sort; then HeaderSortSearch\"></th>\n      <td\n        mat-cell *matCellDef=\"let row;let index = index;\" [ngClass]=\"{'first-row-no-header': index === 0 && !config.headerDisplay}\"\n        (click)=\"( row[col] ? onColumnStandardClick(col, row) : onBubbleEvent('row_clicked', row) )\"\n        (contextmenu)=\"( row[col] ? dom.contextMenu.configure(col, row, $event) : onBubbleEvent('row_right_clicked', row) )\"\n      >{{row[col]}}\n      </td>\n    </div>\n\n    <!-- STANDARD WITH HELPER TEXT -->\n    <div *ngSwitchCase=\"'StandardHelper'\">\n      <th *ngIf=\"!config.searchColumns && !config.sort; then HeaderStandard\"></th>\n      <th *ngIf=\"config.searchColumns && !config.sort; then HeaderSearch\"></th>\n      <th *ngIf=\"!config.searchColumns && config.sort; then HeaderSort\"></th>\n      <th *ngIf=\"config.searchColumns && config.sort; then HeaderSortSearch\"></th>\n      <td\n        (mouseenter)=\"ui.helperText[ii] = '';\"\n        (mouseleave)=\"ui.helperText.splice(ii, 1)\"\n        matTooltip=\"{{ui.helperText[ii] ? ui.helperText[ii] : onHelperText(ii, col, row)}}\"\n        matTooltipPosition=\"{{config.columnConfig.templates[col].helper.position}}\"\n        mat-cell *matCellDef=\"let row; let ii = index\" [ngClass]=\"{'first-row-no-header': ii === 0 && !config.headerDisplay}\"\n        (click)=\"( row[col] ? onColumnStandardClick(col, row) : onBubbleEvent('row_clicked', row) )\"\n        (contextmenu)=\"( row[col] ? dom.contextMenu.configure(col, row, $event) : onBubbleEvent('row_right_clicked', row) )\"\n      >{{row[col]}}\n      </td>\n    </div>\n\n\n    <!-- ROUTE -->\n    <div *ngSwitchCase=\"'Route'\">\n      <th *ngIf=\"!config.searchColumns && !config.sort; then HeaderStandard\"></th>\n      <th *ngIf=\"config.searchColumns && !config.sort; then HeaderSearch\"></th>\n      <th *ngIf=\"!config.searchColumns && config.sort; then HeaderSort\"></th>\n      <th *ngIf=\"config.searchColumns && config.sort; then HeaderSortSearch\"></th>\n      <td [ngClass]=\"row[col] ? 'sw-a' : ''\"\n        mat-cell *matCellDef=\"let row; let index = index\" [ngClass]=\"{'first-row-no-header': index === 0 && !config.headerDisplay}\"\n        (click)=\"( row[col] ? onColumnRouteClick(col, row) : onBubbleEvent('row_clicked', row) )\"\n        (contextmenu)=\"( row[col] ? dom.contextMenu.configure(col, row, $event) : onBubbleEvent('row_right_clicked', row) )\"\n      >{{row[col]}}\n      </td>\n    </div>\n\n\n    <!-- ROUTE WITH HELPER TEXT -->\n    <div *ngSwitchCase=\"'RouteHelper'\">\n      <th *ngIf=\"!config.searchColumns && !config.sort; then HeaderStandard\"></th>\n      <th *ngIf=\"config.searchColumns && !config.sort; then HeaderSearch\"></th>\n      <th *ngIf=\"!config.searchColumns && config.sort; then HeaderSort\"></th>\n      <th *ngIf=\"config.searchColumns && config.sort; then HeaderSortSearch\"></th>\n      <td\n        [ngClass]=\"{'sw-a': row[col],  'first-row-no-header': ii === 0 && !config.headerDisplay}\"\n        (mouseenter)=\"ui.helperText[ii] = ''\"\n        (mouseleave)=\"ui.helperText.splice(ii, 1)\"\n        matTooltip=\"{{ ui.helperText[ii] ? ui.helperText[ii] : onHelperText(ii, col, row)}}\"\n        matTooltipPosition=\"{{config.columnConfig.templates[col].helper.position}}\"\n        mat-cell *matCellDef=\"let row; let ii = index\"\n        (click)=\"( row[col] ? onColumnRouteClick(col, row) : onBubbleEvent('row_clicked', row) )\"\n        (contextmenu)=\"( row[col] ? dom.contextMenu.configure(col, row, $event) : onBubbleEvent('row_right_clicked', row) )\"\n      >{{row[col]}}\n      </td>\n    </div>\n\n\n    <!-- ROUTE WITH ICON -->\n    <div *ngSwitchCase=\"'RouteIcon'\">\n      <th mat-header-cell *matHeaderCellDef>{{config.columnConfig.templates[col].display}}</th>\n      <td\n        class=\"sw-a site-pointer\"\n        mat-cell *matCellDef=\"let row; let index = i\" [ngClass]=\"{'first-row-no-header': index === 0 && !config.headerDisplay}\"\n        (click)=\"onColumnRouteClick(col, row)\"\n        (contextmenu)=\"( row[col] ? dom.contextMenu.configure(col, row, $event) : onBubbleEvent('row_right_clicked', row) )\"\n      >\n        <div [ngSwitch]=\"config.columnConfig.templates[col].icon.type\">\n          <div *ngSwitchCase=\"'IconImg'\">\n            <img src=\"{{config.columnConfig.templates[col].icon.name}}\" alt=\"{{row[col]}}\">\n          </div>\n          <div *ngSwitchCase=\"'IconMat'\">\n            <mat-icon class=\"sw-cursor-pointer\">{{config.columnConfig.templates[col].icon.name}}</mat-icon>\n          </div>\n          <div *ngSwitchCase=\"'IconPop'\">\n            <span class=\"sw-pop-icon\">{{config.columnConfig.templates[col].icon.name}}</span>\n          </div>\n          <div *ngSwitchDefault>{{row[col]}}</div>\n        </div>\n      </td>\n    </div>\n\n\n    <!-- ROUTE WITH ICON AND HELPER TEXT -->\n    <div *ngSwitchCase=\"'RouteIconHelper'\">\n      <th mat-header-cell *matHeaderCellDef>{{config.columnConfig.templates[col].display}}</th>\n      <td\n        class=\"sw-a site-pointer\"\n        (mouseenter)=\"ui.helperText[ii] = '';\"\n        (mouseleave)=\"ui.helperText.splice(ii, 1)\"\n        matTooltip=\"{{ui.helperText[ii] ? ui.helperText[ii] : onHelperText(ii, col, row)}}\"\n        matTooltipPosition=\"{{config.columnConfig.templates[col].helper.position}}\"\n        mat-cell *matCellDef=\"let row; let ii = index\" [ngClass]=\"{'first-row-no-header': ii === 0 && !config.headerDisplay}\"\n        (click)=\"onColumnRouteClick(col, row)\"\n        (contextmenu)=\"( row[col] ? dom.contextMenu.configure(col, row, $event) : onBubbleEvent('row_right_clicked', row) )\"\n      >\n        <div [ngSwitch]=\"config.columnConfig.templates[col].icon.type\">\n          <div *ngSwitchCase=\"'IconImg'\">\n            <img src=\"{{config.columnConfig.templates[col].icon.name}}\" alt=\"{{row[col]}}\">\n          </div>\n          <div *ngSwitchCase=\"'IconMat'\">\n            <mat-icon class=\"sw-cursor-pointer\">{{config.columnConfig.templates[col].icon.name}}</mat-icon>\n          </div>\n          <div *ngSwitchCase=\"'IconPop'\">\n            <span class=\"sw-pop-icon\">{{config.columnConfig.templates[col].icon.name}}</span>\n          </div>\n          <div *ngSwitchDefault>{{row[col]}}</div>\n        </div>\n      </td>\n    </div>\n\n\n    <!-- LINK -->\n    <div *ngSwitchCase=\"'Link'\">\n      <th *ngIf=\"!config.searchColumns && !config.sort; then HeaderStandard\"></th>\n      <th *ngIf=\"config.searchColumns && !config.sort; then HeaderSearch\"></th>\n      <th *ngIf=\"!config.searchColumns && config.sort; then HeaderSort\"></th>\n      <th *ngIf=\"config.searchColumns && config.sort; then HeaderSortSearch\"></th>\n      <td class=\"site-pointer\"\n        [ngClass]=\"row[col] ? 'sw-a' : ''\"\n        mat-cell *matCellDef=\"let row; let index = index\" [ngClass]=\"{'first-row-no-header': index === 0 && !config.headerDisplay}\"\n        (click)=\"( row[col] ? onColumnLinkClick(col, row) : onBubbleEvent('row_clicked', row) )\"\n      >{{row[col]}}\n      </td>\n    </div>\n\n    <!-- LINK WITH HELPER TEXT -->\n    <div *ngSwitchCase=\"'LinkHelper'\">\n      <th *ngIf=\"!config.searchColumns && !config.sort; then HeaderStandard\"></th>\n      <th *ngIf=\"config.searchColumns && !config.sort; then HeaderSearch\"></th>\n      <th *ngIf=\"!config.searchColumns && config.sort; then HeaderSort\"></th>\n      <th *ngIf=\"config.searchColumns && config.sort; then HeaderSortSearch\"></th>\n      <td class=\"site-pointer\"\n        [ngClass]=\"row[col] ? 'sw-a' : ''\"\n        (mouseenter)=\"ui.helperText[ii] = '';\"\n        (mouseleave)=\"ui.helperText.splice(ii, 1)\"\n        matTooltip=\"{{ui.helperText[ii] ? ui.helperText[ii] : onHelperText(ii, col, row)}}\"\n        matTooltipPosition=\"{{config.columnConfig.templates[col].helper.position}}\"\n        mat-cell *matCellDef=\"let row; let ii = index\" [ngClass]=\"{'first-row-no-header': ii === 0 && !config.headerDisplay}\"\n        (click)=\"( row[col] ? onColumnLinkClick(col, row) : onBubbleEvent('row_clicked', row) )\"\n      >{{row[col]}}\n      </td>\n    </div>\n\n    <!-- LINK WITH ICON -->\n    <div *ngSwitchCase=\"'LinkIcon'\">\n      <th mat-header-cell *matHeaderCellDef>{{config.columnConfig.templates[col].display}}</th>\n      <td\n        class=\"sw-a site-pointer\"\n        mat-cell *matCellDef=\"let row; let index = index\" [ngClass]=\"{'first-row-no-header': index === 0 && !config.headerDisplay}\"\n        (click)=\"onColumnLinkClick(col, row)\"\n      >\n        <div [ngSwitch]=\"config.columnConfig.templates[col].icon.type\">\n          <div *ngSwitchCase=\"'IconImg'\">\n            <img src=\"{{config.columnConfig.templates[col].icon.name}}\" alt=\"{{row[col]}}\">\n          </div>\n          <div *ngSwitchCase=\"'IconMat'\">\n            <mat-icon class=\"sw-cursor-pointer\">{{config.columnConfig.templates[col].icon.name}}</mat-icon>\n          </div>\n          <div *ngSwitchCase=\"'IconPop'\">\n            <span class=\"sw-pop-icon\">{{config.columnConfig.templates[col].icon.name}}</span>\n          </div>\n          <div *ngSwitchDefault>{{row[col]}}</div>\n        </div>\n      </td>\n    </div>\n\n    <!-- LINK WITH ICON AND HELPER TEXT -->\n    <div *ngSwitchCase=\"'LinkIconHelper'\">\n      <th mat-header-cell *matHeaderCellDef>{{config.columnConfig.templates[col].display}}</th>\n      <td\n        class=\"sw-a site-pointer\"\n        (mouseenter)=\"ui.helperText[ii] = '';\"\n        (mouseleave)=\"ui.helperText.splice(ii, 1)\"\n        matTooltip=\"{{ui.helperText[ii] ? ui.helperText[ii] : onHelperText(ii, col, row)}}\"\n        matTooltipPosition=\"{{config.columnConfig.templates[col].helper.position}}\"\n        mat-cell *matCellDef=\"let row; let ii = index\" [ngClass]=\"{'first-row-no-header': ii === 0 && !config.headerDisplay}\"\n        (click)=\"onColumnLinkClick(col, row)\"\n      >\n        <div [ngSwitch]=\"config.columnConfig.templates[col].icon.type\">\n          <div *ngSwitchCase=\"'IconImg'\">\n            <img src=\"{{config.columnConfig.templates[col].icon.name}}\" alt=\"{{row[col]}}\">\n          </div>\n          <div *ngSwitchCase=\"'IconMat'\">\n            <mat-icon class=\"sw-cursor-pointer\">{{config.columnConfig.templates[col].icon.name}}</mat-icon>\n          </div>\n          <div *ngSwitchCase=\"'IconPop'\">\n            <span class=\"sw-pop-icon\">{{config.columnConfig.templates[col].icon.name}}</span>\n          </div>\n          <div *ngSwitchDefault>{{row[col]}}</div>\n        </div>\n      </td>\n    </div>\n\n\n    <!-- ICON -->\n    <div *ngSwitchCase=\"'Icon'\">\n      <th mat-header-cell *matHeaderCellDef>{{config.columnConfig.templates[col].display}}</th>\n      <td class=\"site-pointer\"\n        mat-cell *matCellDef=\"let row; let index = index\" [ngClass]=\"{'first-row-no-header': index === 0 && !config.headerDisplay}\"\n        (click)=\"( row[col] ? onColumnStandardClick(col, row) : onBubbleEvent('row_right_clicked', row) )\"\n      >\n        <div [ngSwitch]=\"config.columnConfig.templates[col].icon.type\">\n          <div *ngSwitchCase=\"'IconImg'\">\n            <img src=\"{{config.columnConfig.templates[col].icon.name}}\" alt=\"{{row[col]}}\">\n          </div>\n          <div *ngSwitchCase=\"'IconMat'\">\n            <mat-icon class=\"sw-cursor-pointer\">{{config.columnConfig.templates[col].icon.name}}</mat-icon>\n          </div>\n          <div *ngSwitchCase=\"'IconPop'\">\n            <span class=\"sw-pop-icon\">{{config.columnConfig.templates[col].icon.name}}</span>\n          </div>\n          <div *ngSwitchDefault>{{row[col]}}</div>\n        </div>\n      </td>\n    </div>\n\n\n    <!-- ICON WITH HELPER TEXT -->\n    <div *ngSwitchCase=\"'IconHelper'\">\n      <th mat-header-cell *matHeaderCellDef>{{config.columnConfig.templates[col].display}}</th>\n      <td class=\"site-pointer\"\n        (mouseenter)=\"ui.helperText[ii] = '';\"\n        (mouseleave)=\"ui.helperText.splice(ii, 1)\"\n        matTooltip=\"{{ui.helperText[ii] ? ui.helperText[ii] : onHelperText(ii, col, row)}}\"\n        matTooltipPosition=\"{{config.columnConfig.templates[col].helper.position}}\"\n        mat-cell *matCellDef=\"let row; let ii = index\" [ngClass]=\"{'first-row-no-header': ii === 0 && !config.headerDisplay}\"\n        (click)=\"( row[col] ? onColumnStandardClick(col, row) : onBubbleEvent('row_right_clicked', row) )\"\n      >\n        <div [ngSwitch]=\"config.columnConfig.templates[col].icon.type\">\n          <div *ngSwitchCase=\"'IconImg'\">\n            <img src=\"{{config.columnConfig.templates[col].icon.name}}\" alt=\"{{row[col]}}\">\n          </div>\n          <div *ngSwitchCase=\"'IconMat'\">\n            <mat-icon class=\"sw-cursor-pointer\">{{config.columnConfig.templates[col].icon.name}}</mat-icon>\n          </div>\n          <div *ngSwitchCase=\"'IconPop'\">\n            <span class=\"sw-pop-icon\">{{config.columnConfig.templates[col].icon.name}}</span>\n          </div>\n          <div *ngSwitchDefault>{{row[col]}}</div>\n        </div>\n      </td>\n    </div>\n\n\n    <!-- CHECKBOX -->\n    <div *ngSwitchCase=\"'Checkbox'\">\n      <th mat-header-cell *matHeaderCellDef class=\"checkbox-column\">\n        <mat-checkbox [ngClass]=\"{'column-search-checkbox': config?.searchColumns}\" #checkbox color=\"accent\" (change)=\"$event ? onMasterRowToggleClick() : null\"\n                      [checked]=\"config.selection?.hasValue() && isAllRowsSelected()\"\n                      [indeterminate]=\"config.selection?.hasValue() && !isAllRowsSelected()\">\n        </mat-checkbox>\n      </th>\n      <td mat-cell *matCellDef=\"let row; let i = index\" class=\"checkbox-column\" [ngClass]=\"{'first-row-no-header': i === 0 && !config.headerDisplay}\">\n        <mat-checkbox color=\"accent\" (click)=\"$event.stopPropagation()\"\n                      (change)=\"($event ? config.selection?.toggle(row) : null); onBubbleEvent(($event.checked ? 'row_selected' : 'row_unselected'), row)\"\n                      [checked]=\"config.selection?.isSelected(row)\">\n        </mat-checkbox>\n      </td>\n    </div>\n\n    <!-- HEADER TEMPLATES -->\n    <ng-template #HeaderStandard>\n      <th mat-header-cell *matHeaderCellDef>{{config.columnConfig.templates[col].display}}</th>\n    </ng-template>\n\n    <ng-template #HeaderSort>\n      <th class=\"sortable-header\" mat-header-cell *matHeaderCellDef (click)=\"sort(config.columnConfig?.templates[col].name)\">\n\n\n        <div class=\"column-header-sort\">\n          <div>\n            {{config.columnConfig.templates[col].display}}\n          </div>\n\n          <div >\n            <mat-icon class=\"sort-top-searchable\"\n                      [ngClass]=\"{visible: tableSort.active === config.columnConfig?.templates[col].name, hidden: tableSort.active !== config.columnConfig?.templates[col].name}\"\n\n                      >{{sortDisplay(config.columnConfig?.templates[col].name)}}</mat-icon>\n\n<!--            <mat-icon class=\"sort-top-searchable\"-->\n<!--                      [ngClass]=\"{'sort-selected': tableSort.active === config.columnConfig?.templates[col].name && tableSort.direction === 'asc'}\"-->\n<!--                      (click)=\"sort(config.columnConfig?.templates[col].name, 'asc')\">arrow_drop_up</mat-icon>-->\n<!--            <mat-icon class=\"sort-bottom-searchable\"-->\n<!--                      [ngClass]=\"{'sort-selected': tableSort.active === config.columnConfig?.templates[col].name && tableSort.direction === 'desc'}\"-->\n<!--                      (click)=\"sort(config.columnConfig?.templates[col].name, 'desc')\">arrow_drop_down</mat-icon>-->\n          </div>\n        </div>\n      </th>\n    </ng-template>\n\n    <ng-template #HeaderSearch>\n      <th  mat-header-cell *matHeaderCellDef >\n        <div style=\"padding-top: var(--gap-m)\">{{config.columnConfig?.templates[col].display}}</div>\n\n        <div class=\"column-sort\">\n          <mat-form-field appearance=\"outline\" class=\"sw-search\" style=\"padding-bottom: var(--gap-s)\">\n            <!--          <mat-label><mat-icon>search</mat-icon> </mat-label>-->\n            <!--          <mat-label>{{config.columnConfig.templates[col].display}}</mat-label>-->\n            <!--          <a matPrefix><mat-icon>search</mat-icon></a>-->\n            <input matInput (keyup)=\"onApplySearchValue($event.target.value, col)\" placeholder=\"Search\">\n          </mat-form-field>\n        </div>\n\n      </th>\n    </ng-template>\n\n    <ng-template #HeaderSortSearch>\n      <th class=\"sortable-header\" mat-header-cell *matHeaderCellDef (click)=\"sort(config.columnConfig?.templates[col].name)\">\n        <div class=\"column-header-sort\" style=\"padding-top: var(--gap-m)\">\n          <div>\n            {{config.columnConfig?.templates[col].display}}\n          </div>\n\n          <div >\n            <mat-icon class=\"sort-top-searchable\"\n                      [ngClass]=\"{visible: tableSort.active === config.columnConfig?.templates[col].name, hidden: tableSort.active !== config.columnConfig?.templates[col].name}\"\n\n                      (click)=\"sort(config.columnConfig?.templates[col].name)\">{{sortDisplay(config.columnConfig?.templates[col].name)}}</mat-icon>\n<!--            <mat-icon class=\"sort-top-searchable\"-->\n<!--                      [ngClass]=\"{'sort-selected': tableSort.active === config.columnConfig.templates[col].name && tableSort.direction === 'asc'}\"-->\n<!--                      (click)=\"sort(config.columnConfig?.templates[col].name, 'asc')\">arrow_drop_up</mat-icon>-->\n<!--            <mat-icon class=\"sort-bottom-searchable\"-->\n<!--                      [ngClass]=\"{'sort-selected': tableSort.active === config.columnConfig.templates[col].name && tableSort.direction === 'desc'}\"-->\n<!--                      (click)=\"sort(config.columnConfig?.templates[col].name, 'desc')\">arrow_drop_down</mat-icon>-->\n          </div>\n        </div>\n\n        <div class=\"column-sort\" >\n          <mat-form-field appearance=\"outline\" class=\"sw-search\" style=\"padding-bottom: var(--gap-s)\">\n            <!--          <mat-label><mat-icon>search</mat-icon> </mat-label>-->\n            <!--          <mat-label>{{config.columnConfig.templates[col].display}}</mat-label>-->\n            <!--          <a matPrefix><mat-icon>search</mat-icon></a>-->\n            <input matInput (keyup)=\"onApplySearchValue($event.target.value, col)\" placeholder=\"Search\">\n          </mat-form-field>\n        </div>\n      </th>\n    </ng-template>\n\n  </ng-container>\n\n  <tr [ngClass]=\"{'sw-hidden': !config.headerDisplay}\" mat-header-row\n      *matHeaderRowDef=\"config.columnConfig?.visible; sticky:config.headerSticky\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: config.columnConfig?.visible;\"></tr>\n  <tr class=\"mat-row\" *matNoDataRow>\n    <td class=\"mat-cell\" colspan=\"12\">No Data Found</td>\n  </tr>\n</table>\n<lib-pop-context-menu *ngIf=\"dom.contextMenu?.config\" [config]=\"dom.contextMenu.config\"></lib-pop-context-menu>\n",
                    animations: [
                        fadeInOut,
                    ],
                    styles: [".sw-a{color:var(--accent)}.mat-sort-header-container{align-items:center;color:red}.column-sort{display:flex;white-space:nowrap}.sticky-row{padding-top:55px}:host ::ng-deep .table{width:100%;overflow-x:auto}:host ::ng-deep .mat-form-field{width:100%}.sort-header{position:relative;top:10px}.sort-bottom,.sort-bottom:hover,.sort-top,.sort-top:hover{position:relative;opacity:.6;cursor:pointer}.sort-bottom,.sort-bottom:hover{top:12px;left:-24px}.sort-bottom:hover,.sort-top:hover{opacity:1;cursor:pointer}.sort-selected{color:var(--primary-foreground);opacity:1}.column-header-sort{display:flex}.column-search-checkbox{position:relative;top:10px}.sort-top-searchable{top:-4px;left:5px}.sort-bottom-searchable,.sort-top-searchable{display:inherit;height:0;position:relative;opacity:.6;cursor:pointer}.sort-bottom-searchable{top:0}.visible{visibility:visible}.hidden{visibility:hidden}.sort-bottom-searchable:hover{opacity:1}.sortable-header{cursor:pointer}.sortable-header:hover .hidden{visibility:visible}.mat-row:hover{background-color:var(--background-main-menu)}"]
                },] }
    ];
    PopTableViewComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDisplayService },
        { type: PopDomService }
    ]; };
    PopTableViewComponent.propDecorators = {
        config: [{ type: i0.Input }],
        tableSort: [{ type: i0.ViewChild, args: [sort.MatSort, { static: true },] }],
        checkbox: [{ type: i0.ViewChild, args: ['checkbox',] }]
    };

    var PopTableModule = /** @class */ (function () {
        function PopTableModule() {
        }
        return PopTableModule;
    }());
    PopTableModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        PopTableComponent,
                        PopTableDialogComponent,
                        PopTableViewComponent,
                    ],
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        MaterialModule,
                        table.MatTableModule,
                        i1$2.MatDialogModule,
                        sort.MatSortModule,
                        paginator.MatPaginatorModule,
                        PopFieldItemModule,
                        PopContextMenuModule,
                        dragDrop.DragDropModule
                    ],
                    exports: [
                        PopTableComponent,
                        PopTableViewComponent,
                        dragDrop.DragDropModule
                    ],
                },] }
    ];

    var DialogComponent = /** @class */ (function () {
        function DialogComponent(data, dialog, history, requestService) {
            this.data = data;
            this.dialog = dialog;
            this.history = history;
            this.requestService = requestService;
        }
        DialogComponent.prototype.ngOnInit = function () {
            this.setSpinnerOptions();
            if (this.data.patch)
                this.makeRequest();
            else
                this.closeDialogAfterDelay();
        };
        DialogComponent.prototype.makeRequest = function () {
            this.loading = true;
            switch (this.data.patch.type) {
                case 'delete':
                    this.doDelete();
                    break;
                case 'get':
                    this.doGet();
                    break;
                case 'patch':
                    this.doPatch();
                    break;
                case 'post':
                    this.doPost();
                    break;
            }
        };
        DialogComponent.prototype.doPatch = function () {
            var _this = this;
            this.requestService.doPatch(this.data.patch.path, this.data.patch.body, this.data.patch.version, false).subscribe(function (res) {
                _this.data.response = res;
                _this.loading = false;
                _this.closeDialogAfterDelay();
            }, function (err) {
                _this.loading = false;
                _this.httpError = {
                    error: typeof err.error !== 'undefined' ? err.error.message : err.statusText,
                    code: err.status
                };
            });
        };
        DialogComponent.prototype.doDelete = function () {
            var _this = this;
            this.requestService.doDelete(this.data.patch.path, this.data.patch.body, this.data.patch.version, false).subscribe(function (res) {
                _this.data.response = res;
                _this.loading = false;
                _this.closeDialogAfterDelay();
            }, function (err) {
                _this.loading = false;
                _this.httpError.error = typeof err.error !== 'undefined' ? err.error.message : err.statusText;
                _this.httpError.code = err.status;
            });
        };
        DialogComponent.prototype.doPost = function () {
            var _this = this;
            this.requestService.doPost(this.data.patch.path, this.data.patch.body, this.data.patch.version, false).subscribe(function (res) {
                _this.data.response = res;
                _this.loading = false;
                _this.closeDialogAfterDelay();
            }, function (err) {
                _this.loading = false;
                _this.httpError.error = typeof err.error !== 'undefined' ? err.error.message : err.statusText;
                _this.httpError.code = err.status;
            });
        };
        DialogComponent.prototype.doGet = function () {
            var _this = this;
            this.requestService.doGet(this.data.patch.path, {}, this.data.patch.version, false).subscribe(function (res) {
                _this.loading = false;
                _this.data.response = res;
                _this.closeDialogAfterDelay();
            }, function (err) {
                _this.loading = false;
                _this.httpError.error = typeof err.error !== 'undefined' ? err.error.message : err.statusText;
                _this.httpError.code = err.status;
            });
        };
        DialogComponent.prototype.close = function () {
            this.dialog.close();
        };
        DialogComponent.prototype.closeDialogAfterDelay = function () {
            var _this = this;
            setTimeout(function () {
                _this.dialog.close();
            }, this.data.timeDelay ? this.data.timeDelay : 1000);
        };
        DialogComponent.prototype.setSpinnerOptions = function () {
            this.mainSpinner = {
                diameter: 100,
                strokeWidth: 10,
            };
        };
        return DialogComponent;
    }());
    DialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-dialog',
                    template: "<lib-main-spinner *ngIf=\"loading\" [options]=\"mainSpinner\"></lib-main-spinner>\n\n<h1 *ngIf=\"!loading && data.message && !httpError\">{{data.message}} </h1>\n<h2 *ngIf=\"!loading && data.body && !httpError\" class=\"dc-data-body\"> {{data.body}} </h2>\n<h2 *ngIf=\"!loading && httpError\">Error: {{httpError.code}} - {{httpError.error}}</h2>\n<button *ngIf=\"!loading && httpError\" mat-raised-button (click)=\"close()\">Close</button>\n",
                    styles: [".dc-data-body{font-size:var(--text-lg);text-transform:capitalize}"]
                },] }
    ];
    DialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] },
        { type: i1$2.MatDialogRef },
        { type: PopRouteHistoryResolver },
        { type: PopRequestService }
    ]; };

    var PopAjaxDialogComponent = /** @class */ (function () {
        function PopAjaxDialogComponent(dialog, baseService, router) {
            this.dialog = dialog;
            this.baseService = baseService;
            this.router = router;
            this.close = new i0.EventEmitter();
        }
        PopAjaxDialogComponent.prototype.ngOnInit = function () {
        };
        PopAjaxDialogComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.loadDialog();
            }, 250);
        };
        PopAjaxDialogComponent.prototype.loadDialog = function () {
            var _this = this;
            var dialogBox = this.dialog.open(DialogComponent, {
                width: '500px',
                data: this.ajaxDialogConfig
            });
            dialogBox.afterClosed().subscribe(function () {
                _this.close.emit(_this.ajaxDialogConfig.response);
                if (_this.ajaxDialogConfig.redirect)
                    _this.redirect();
            });
        };
        PopAjaxDialogComponent.prototype.redirect = function () {
            if (this.ajaxDialogConfig.redirect.app == exports.PopHref) {
                this.router.navigateByUrl("" + this.ajaxDialogConfig.redirect.path).catch(function (e) {
                });
            }
            else {
                SetSiteVar('redirect', "/" + this.ajaxDialogConfig.redirect.app + "/" + this.ajaxDialogConfig.redirect.path);
                this.baseService.redirect();
            }
        };
        return PopAjaxDialogComponent;
    }());
    PopAjaxDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-ajax-dialog',
                    template: ''
                },] }
    ];
    PopAjaxDialogComponent.ctorParameters = function () { return [
        { type: i1$2.MatDialog },
        { type: PopBaseService },
        { type: i1.Router }
    ]; };
    PopAjaxDialogComponent.propDecorators = {
        ajaxDialogConfig: [{ type: i0.Input }],
        close: [{ type: i0.Output }]
    };

    var PopAjaxDialogModule = /** @class */ (function () {
        function PopAjaxDialogModule() {
        }
        return PopAjaxDialogModule;
    }());
    PopAjaxDialogModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        MaterialModule,
                        PopIndicatorsModule,
                        common.CommonModule
                    ],
                    declarations: [
                        PopAjaxDialogComponent,
                        DialogComponent,
                    ],
                    exports: [
                        PopAjaxDialogComponent,
                    ],
                },] }
    ];

    var PopNavigationDialogComponent = /** @class */ (function () {
        function PopNavigationDialogComponent(data, dialog, router) {
            this.data = data;
            this.dialog = dialog;
            this.router = router;
        }
        PopNavigationDialogComponent.prototype.ngOnInit = function () {
            if (!this.data.display)
                this.data.display = 'Navigation List';
            if (!this.data.list || !Array.isArray(this.data.list))
                this.data.list = [];
            if (!this.data.basePath || !(typeof this.data.basePath === 'string'))
                this.data.basePath = null;
        };
        PopNavigationDialogComponent.prototype.navigate = function (item) {
            this.dialog.close();
            if (item.path) {
                this.router.navigateByUrl(item.path).catch(function (e) { return false; });
            }
            else if (this.data.basePath && item.id) {
                this.router.navigateByUrl(this.data.basePath + "/" + item.id + "/general").catch(function (e) { return false; });
            }
        };
        PopNavigationDialogComponent.prototype.cancel = function () {
            this.dialog.close(null);
        };
        return PopNavigationDialogComponent;
    }());
    PopNavigationDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-navigation-dialog',
                    template: "<h1 class=\"navigation-header\">{{data.display}}</h1>\n<mat-nav-list class=\"pt-10\">\n  <mat-list-item matRipple *ngFor=\"let item of data.list\" (click)=\"navigate(item);\"> {{item.name}}</mat-list-item>\n</mat-nav-list>\n",
                    styles: [".navigation-header{text-align:center}mat-list-item{padding:2px 20px}mat-dialog-container{padding:12px!important}mat-nav-list{padding:2px!important;min-height:30px;max-height:400px;overflow-y:auto}"]
                },] }
    ];
    PopNavigationDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] },
        { type: i1$2.MatDialogRef },
        { type: i1.Router }
    ]; };

    var PopSuccessDialogComponent = /** @class */ (function (_super) {
        __extends(PopSuccessDialogComponent, _super);
        function PopSuccessDialogComponent(el, dialog, data) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.dialog = dialog;
            _this.data = data;
            _this.name = 'PopSuccessDialogComponent';
            _this.srv = {
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
            };
            _this.asset = {};
            _this.ui = {
                submitText: 'Ok',
                header: 'Success',
                message: 'Action was Successful'
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.ui = Object.assign(Object.assign({}, this.ui), this.data);
                        return [2 /*return*/, resolve(true)];
                    });
                }); });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopSuccessDialogComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The user can click a cancel btn to close the action dialog
         */
        PopSuccessDialogComponent.prototype.onFormClose = function () {
            var _this = this;
            this.dom.setTimeout("close-modal", function () {
                _this.dialog.close(-1);
            }, 250);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopSuccessDialogComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopSuccessDialogComponent;
    }(PopExtendComponent));
    PopSuccessDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-success-dialog',
                    template: "<div [ngClass]=\"{'sw-hidden': !dom.state.loaded}\" class=\"pop-success-close-btn sw-pointer\" (click)=\"onFormClose();\">\n  <mat-icon>close</mat-icon>\n</div>\n<div [ngClass]=\"{'sw-hidden': !dom.state.loaded}\">\n  <div class=\"pop-success-dialog-header\" *ngIf=\"ui.header\">{{ui.header}}</div>\n  <div class=\"pop-success-dialog-content\">\n    <p class=\"theme-background-success\" [innerHTML]=\"ui.message\"></p>\n  </div>\n  <div class=\"pop-success-dialog-buttons\">\n    <button class=\"pop-success-dialog-other\" mat-raised-button color=\"accent\" (click)=\"onFormClose()\">\n      {{ui.submitText}}\n    </button>\n  </div>\n\n</div>\n<div class=\"pop-success-spinner-box\" *ngIf=\"dom.state.loader\">\n  <lib-main-spinner></lib-main-spinner>\n</div>\n",
                    styles: [":host{position:relative;display:block;min-width:350px}.pop-success-close-btn{position:absolute;top:-20px;right:-20px}.pop-success-dialog-header{font-weight:500;text-align:center;margin-bottom:var(--gap-s);color:var(--valid)}.pop-success-dialog-content{position:relative;display:block;width:100%;min-height:30px;margin-bottom:10px}.pop-success-dialog-content .pop-success-dialog-field{margin-bottom:10px}.pop-success-dialog-content .pop-success-dialog-field-lock{pointer-events:none!important}.pop-success-dialog-buttons{margin-top:20px;margin-bottom:10px;display:flex;justify-content:flex-end}.pop-success-dialog-buttons .pop-success-dialog-cancel{order:1;display:flex;align-items:center;justify-content:center;min-height:35px;min-width:120px}.pop-success-dialog-buttons .pop-success-dialog-other{order:2;display:flex;align-items:center;justify-content:center;margin-left:10px;min-width:120px;min-height:35px}.pop-success-dialog-message-layout{display:flex;flex-direction:row;min-height:40px;align-items:center;justify-content:center;text-align:center}.pop-success-dialog-disabled{pointer-events:none}.pop-success-spinner-box{height:150px}"]
                },] }
    ];
    PopSuccessDialogComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1$2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] }
    ]; };

    var PopMessageDialogComponent = /** @class */ (function () {
        function PopMessageDialogComponent(config, dialog) {
            this.config = config;
            this.dialog = dialog;
        }
        PopMessageDialogComponent.prototype.ngOnInit = function () {
        };
        PopMessageDialogComponent.prototype.onCancel = function () {
            this.dialog.close(null);
        };
        return PopMessageDialogComponent;
    }());
    PopMessageDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-message-dialog',
                    template: "<h1 class=\"pop-confirmation-dialog-header\">{{config.heading}}</h1>\n<div class=\"pop-confirmation-body\" [innerHTML]=\"config.message\"></div>\n\n<mat-divider [style.width.%]=100 [style.marginBottom.px]=15></mat-divider>\n\n<div class=\"pop-confirmation-dialog-footer\">\n  <button class=\"pop-confirmation-btn\" mat-raised-button (click)=\"onCancel()\" cdkFocusInitial>Close</button>\n</div>\n\n",
                    styles: [".pop-confirmation-dialog-header{margin-top:0;text-align:center}.pop-confirmation-body{margin:var(--gap-s) 0 var(--gap-lm) 0;padding:var(--gap-m);min-height:30px;max-height:400px;overflow-y:auto;text-align:center}.pop-confirmation-dialog-footer{display:flex;min-height:var(--gap-m);justify-content:flex-end;align-items:center}.pop-confirmation-btn{margin-left:var(--gap-s)}"]
                },] }
    ];
    PopMessageDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] },
        { type: i1$2.MatDialogRef }
    ]; };

    var PopDialogsModule = /** @class */ (function () {
        function PopDialogsModule() {
        }
        return PopDialogsModule;
    }());
    PopDialogsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        MaterialModule,
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        portal.PortalModule,
                        PopIndicatorsModule,
                        PopTableModule,
                        PopErrorsModule,
                        PopFieldItemGroupModule
                    ],
                    declarations: [
                        PopConfirmationDialogComponent,
                        PopNavigationDialogComponent,
                        PopTableDialogComponent$1,
                        PopActionDialogComponent,
                        PopSuccessDialogComponent,
                        PopMessageDialogComponent
                    ],
                    exports: [
                        PopConfirmationDialogComponent,
                        PopNavigationDialogComponent,
                        PopTableDialogComponent$1,
                        PopActionDialogComponent,
                        PopSuccessDialogComponent,
                        PopMessageDialogComponent
                    ],
                },] }
    ];

    var PopBaseModule = /** @class */ (function () {
        function PopBaseModule() {
        }
        return PopBaseModule;
    }());
    PopBaseModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [],
                    declarations: [
                        PopExtendComponent,
                        PopExtendDynamicComponent,
                    ],
                    exports: [
                        PopTabMenuModule,
                        PopFieldItemModule,
                        PopMenuModule,
                        PopTableModule,
                        PopIndicatorsModule,
                        PopErrorsModule,
                        PopFieldItemGroupModule,
                        PopSideBySideModule,
                        PopAjaxDialogModule,
                        PopDialogsModule,
                        PopContextMenuModule,
                    ],
                },] }
    ];

    var PopEntityAdvancedSearchComponent = /** @class */ (function (_super) {
        __extends(PopEntityAdvancedSearchComponent, _super);
        function PopEntityAdvancedSearchComponent(el, advancedSearchDialogRef, route, data) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.advancedSearchDialogRef = advancedSearchDialogRef;
            _this.route = route;
            _this.data = data;
            _this.name = 'PopEntityAdvancedSearchComponent';
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.internal_name = 'role';
                    _this.ui.fields = [];
                    var searchFields = {};
                    var needsMetadata = false;
                    var model;
                    if (!_this.internal_name)
                        _this.internal_name = exports.PopEntity.getRouteInternalName(_this.route);
                    _this.dom.setHeightWithParent(null, 145, 600).then(function (res) { return true; });
                    exports.PopEntity.getCoreConfig(_this.internal_name).then(function (entityConfig) {
                        _this.asset.entityId = entityConfig;
                        if (IsObject(_this.asset.entity.repo.model.field, true)) {
                            Object.keys(_this.asset.entity.repo.model.field).map(function (column) {
                                if (column in _this.asset.entity.repo.model.field[column]['itemMap']) {
                                    model = Object.assign({}, _this.asset.entity.repo.model.field[column].items[entityConfig.fields[column]['itemMap'][column]].model);
                                    delete model.api; // doAction fields don't patch
                                    delete model.metadata;
                                    delete model.transformation;
                                    searchFields[column] = model;
                                    if (model.options && model.options.metadata) {
                                        needsMetadata = true;
                                    }
                                }
                            });
                        }
                        // if needsMetadata go grab it before you try to build out the fields
                        if (needsMetadata) {
                            _this.asset.entity.repo.getUiResources(_this.core).subscribe(function (metadata) {
                                if (!_this.asset.entity.entity)
                                    _this.asset.entity.entityId = {};
                                _this.asset.entity.entity.metadata = metadata;
                                Object.keys(searchFields).map(function (field) {
                                    // this.ui.fields.push(this.config.getCoreFieldItem(this.asset.entity, field, searchFields[ field ]));
                                });
                                _this.ui.fields.sort(function (a, b) {
                                    if (a.model.sort_top < b.model.sort_top)
                                        return -1;
                                    if (a.model.sort_top > b.model.sort_top)
                                        return 1;
                                    return 0;
                                });
                                console.log('fields', _this.ui.fields);
                            });
                        }
                        else {
                            // no metadata was needed for any of these fields
                            Object.keys(searchFields).map(function (field) {
                                // this.ui.fields.push(this.config.getCoreFieldItem(this.asset.entity, field, searchFields[ field ]));
                            });
                            _this.ui.fields.sort(function (a, b) {
                                if (a.model.sort_top < b.model.sort_top)
                                    return -1;
                                if (a.model.sort_top > b.model.sort_top)
                                    return 1;
                                return 0;
                            });
                            console.log('fields', _this.ui.fields);
                        }
                    });
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a specific purpose
         */
        PopEntityAdvancedSearchComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntityAdvancedSearchComponent.prototype.onSearch = function () {
            this.advancedSearchDialogRef.close(this.data);
        };
        PopEntityAdvancedSearchComponent.prototype.onCancel = function () {
            this.advancedSearchDialogRef.close(null);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityAdvancedSearchComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityAdvancedSearchComponent;
    }(PopExtendComponent));
    PopEntityAdvancedSearchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-advanced-search',
                    template: "<div class=\"pop-entity-advanced-search-container\">\n  <div class=\"pop-entity-advanced-search-header\"><h3>Entity Advanced Search</h3></div>\n  <div class=\"pop-entity-advanced-search-content\" [style.height.px]=dom.height.inner>\n    <mat-list class=\"field-builder-items\">\n      <mat-list-item *ngFor=\"let field of ui.fields\">\n        {{field.model.display}}\n      </mat-list-item>\n    </mat-list>\n  </div>\n  <div class=\"pop-entity-advanced-search-buttons\">\n    <div class=\"pop-entity-advanced-search-cancel\">\n      <button class=\"pop-entity-advanced-search-button\" mat-raised-button (click)=\"onCancel()\">Cancel</button>\n    </div>\n    <button class=\"pop-entity-advanced-search-button\" mat-raised-button (click)=\"onSearch()\" color=\"accent\">Search\n    </button>\n  </div>\n</div>\n\n",
                    styles: [".mat-dialog-container{padding:0!important}.pop-entity-advanced-search-container{position:relative;flex:1 1 100%;background:pink}.pop-entity-advanced-search-header{background:#00f;min-height:35px;border-bottom:1px solid var(--border)}.pop-entity-advanced-search-header h3{margin:0;font-weight:500;text-align:center;padding-bottom:5px}.pop-entity-advanced-search-content{flex:1 1 100%;background:green;overflow:hidden;overflow-y:scroll;overflow-x:hidden}.pop-entity-advanced-search-buttons{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-end;background:red;height:40px;padding:10px 20px}.pop-entity-advanced-search-button{margin-left:10px}.pop-entity-advanced-search-cancel{margin-left:-10px;display:flex;flex-grow:2}:host ::ng-deep .mat-list-base{padding-top:0;margin-right:5px;margin-left:1px;margin-top:1px}:host ::ng-deep .mat-list-item{margin-bottom:1px}"]
                },] }
    ];
    PopEntityAdvancedSearchComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1$2.MatDialogRef },
        { type: i1.ActivatedRoute },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$2.MAT_DIALOG_DATA,] }] }
    ]; };
    PopEntityAdvancedSearchComponent.propDecorators = {
        internal_name: [{ type: i0.Input }]
    };

    var PopEntityListComponent = /** @class */ (function (_super) {
        __extends(PopEntityListComponent, _super);
        function PopEntityListComponent(el, route, _domRepo, APP_GLOBAL) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.route = route;
            _this._domRepo = _domRepo;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.dataFactory = null;
            _this.name = 'PopEntityListComponent';
            _this.table = {
                data: [],
                buttons: [
                    // { id: 'custom', name: 'Custom', accessType: 'can_read', requireSelected: true },
                    // { id: 'advanced_search', name: 'Advanced Search', accessType: 'can_read', requireSelected: false },
                    { id: 'archive', name: 'Archive', accessType: 'can_create', requireSelected: true },
                    { id: 'restore', name: 'Activate', accessType: 'can_create', requireSelected: true },
                    { id: 'show_archived', name: 'Show Archived', accessType: 'can_read', requireSelected: false },
                    { id: 'show_active', name: 'Show Active', accessType: 'can_read', requireSelected: false },
                    { id: 'new', name: 'New', accessType: 'can_create', requireSelected: false },
                ],
                interface: undefined,
                spinner: { diameter: 0, strokeWidth: 0 },
                config: null,
            };
            _this.srv = {
                action: exports.ServiceInjector.get(PopEntityActionService),
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                entity: exports.ServiceInjector.get(PopEntityService),
                events: exports.ServiceInjector.get(PopEntityEventService),
                filter: exports.ServiceInjector.get(PopCacFilterBarService),
                pipe: exports.ServiceInjector.get(PopPipeService),
                param: exports.ServiceInjector.get(PopEntityUtilParamService),
                portal: exports.ServiceInjector.get(PopEntityUtilPortalService),
                router: exports.ServiceInjector.get(i1.Router),
                tab: undefined
            };
            _this.ui = {
                actionModal: undefined,
            };
            _this.asset = {
                blueprintData: {},
                fieldKeys: undefined,
                blueprint: undefined,
                transformations: undefined,
                tableInterface: undefined,
                tabMenuSessionPath: '',
                showArchivedSessionPath: '',
                searchValueSessionPath: ''
            };
            _this.dom.configure = function () {
                // this component set the outer height boundary of this view
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: 
                            // Ensure that a CoreConfig exists for this component
                            return [4 /*yield*/, this.APP_GLOBAL.isVerified()];
                            case 1:
                                // Ensure that a CoreConfig exists for this component
                                _a.sent();
                                return [4 /*yield*/, this._setCoreConfig()];
                            case 2:
                                _a.sent();
                                this.id = this.core.params.internal_name;
                                // #1: Enforce a CoreConfig
                                this.core = IsObjectThrowError(this.core, true, this.name + ":configureDom: - this.core") ? this.core : {};
                                return [4 /*yield*/, rxjs.forkJoin([
                                        this._transformRouteExtension(),
                                        this._setConfig(),
                                        this._setSessionSettings(),
                                        this._configureFilterBar(),
                                        this._setCrudHandler(),
                                        this._configureTable(),
                                        this._setHeight(), // account for the filter bar , and determine the height of this table try to fill all vertical height
                                    ])];
                            case 3:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            /**
             * This function will call after the dom registration
             */
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this.dom.setTimeout("height-adjustment-check", function () {
                        _this._setHeight().then(function () {
                            return resolve(true);
                        });
                    }, 250);
                });
            };
            return _this;
        }
        /**
         * This component will display a list of entities that the user can interact with
         */
        PopEntityListComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Trigger the table to reset itself
         */
        PopEntityListComponent.prototype.onResetTable = function () {
            var _this = this;
            this.dom.setTimeout('reset', function () {
                _this.dom.state.loading = true;
                var overhead = (+_this.core.repo.model.table.filter.active ? _this.srv.filter.getHeight() : 25);
                _this.dom.setHeightWithParent('sw-target-outlet', overhead, window.innerHeight - 65).then(function (res) {
                    if (_this.table.config && typeof _this.table.config.setLayout === 'function')
                        _this.table.config.setLayout(_this._getTableHeight());
                });
            }, 0);
        };
        /**
         * Trigger the table to reset itself
         */
        PopEntityListComponent.prototype.onResetHeight = function () {
            var _this = this;
            this._setHeight().then(function () {
                if (_this.table.config && typeof _this.table.config.setHeight === 'function')
                    _this.table.config.setHeight(_this._getTableHeight());
            });
        };
        /**
         * A table will generate a slew of event and action triggers
         * @param event
         */
        PopEntityListComponent.prototype.onTableEvent = function (event) {
            var _this = this;
            //     console.log( this.name, event );
            if (event.type === 'table') {
                var ids = void 0;
                if (event && Array.isArray(event.data)) {
                    ids = event.data.map(function (row) { return row.id; }).join();
                }
                switch (event.name) {
                    case 'search':
                        if (IsString(this.asset.searchValueSessionPath))
                            SetSessionSiteVar(this.asset.searchValueSessionPath, event.data);
                        // console.log('this.asset.searchValueSessionPath', this.asset.searchValueSessionPath);
                        break;
                    case 'row_clicked':
                        this.onTableRowClicked(event.data);
                        break;
                    case 'columnRouteClick':
                        this.onTableColumnClicked(event.data);
                        break;
                    case 'options_save':
                        this.onSaveOptions(event.data);
                        break;
                    case 'options_reset':
                        this.onOptionsReset();
                        break;
                    case 'new':
                        this.onActionButtonClicked('new');
                        break;
                    case 'show_archived':
                        this.onShowArchivedButtonClicked();
                        break;
                    case 'show_active':
                        this.onShowArchivedButtonClicked();
                        break;
                    case 'archive':
                        this.onArchiveButtonClicked(ids, true);
                        break;
                    case 'restore':
                        this.onArchiveButtonClicked(ids, false);
                        break;
                    case 'advanced_search':
                        this.onViewAdvancedSearch();
                        break;
                    case 'column_definitions':
                        if (IsObject(event.data, true)) {
                            this.dom.setTimeout('build-columns', function () { return __awaiter(_this, void 0, void 0, function () {
                                var columns;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            this._setFieldKeys(event.data);
                                            return [4 /*yield*/, this._getDefaultColumns()];
                                        case 1:
                                            columns = _a.sent();
                                            // this.table.config.columnDefinitions=columns;
                                            this.table.config.updateColumnDefinitions(columns);
                                            return [2 /*return*/];
                                    }
                                });
                            }); }, 0);
                        }
                        break;
                    case 'ready':
                        // if( this.table.config && this.table.config.matData && !this.table.config.matData.data.length ) this._configureTable();
                        break;
                    default:
                        break;
                }
                if (!['search', 'ready'].includes(event.name)) {
                    // console.log('kill trigger refresh');
                    this.dom.setTimeout("lazy-load-fresh-data", null);
                }
            }
            if (event.type === 'context_menu') {
                if (event.name === 'portal' && event.internal_name && event.id) {
                    this.onViewEntityPortal(event.internal_name, +event.id);
                }
            }
        };
        /**
         * This is exploratory??? Idea is to pop a modal to make the user create an advanced search before we fetch the data for the table
         */
        PopEntityListComponent.prototype.onViewAdvancedSearch = function () {
            var _this = this;
            if (!this.dom.state.blockModal && this.srv.dialog.openDialogs.length == 0) {
                this.dom.state.blockModal = true;
                if (true) {
                    var dialogRef = this.srv.dialog.open(PopEntityAdvancedSearchComponent, {
                        width: window.innerWidth * .50 + "px",
                        height: window.innerHeight * .75 + "px",
                        panelClass: 'sw-relative',
                        data: { test: 'yo yo' }
                    });
                    this.dom.subscriber.dialog = dialogRef.beforeClosed().subscribe(function (changed) {
                        if (changed || _this.dom.state.refresh) {
                            // this._configureTable();up
                        }
                        _this.dom.state.blockModal = false;
                    });
                }
            }
        };
        /**
         * A user can click on a row in a table to navigate the a view for that entity
         * @param row
         */
        PopEntityListComponent.prototype.onTableRowClicked = function (row) {
            if (!this.dom.state.blockModal && this.srv.dialog.openDialogs.length == 0) {
                // custom function
                this.onViewEntityPortal(this.core.params.internal_name, +row['id']);
            }
        };
        /**
         * A user can click on a specific column of a table and get a default action
         * @param data
         */
        PopEntityListComponent.prototype.onTableColumnClicked = function (data) {
            // placeholder
            if (!this.dom.state.blockModal && this.srv.dialog.openDialogs.length == 0) {
                this.dom.state.blockModal = true;
                if (data && data.name && data.row[data.name] && +data.row[data.name + '_id']) {
                    this.onViewEntityPortal(data.row[data.name], +data.row[data.name + '_id']);
                }
            }
        };
        /**
         * A user can click a link to view a specific entity details in a modal
         * @param internal_name
         * @param id
         */
        PopEntityListComponent.prototype.onViewEntityPortal = function (internal_name, id) {
            var _this = this;
            if (!this.dom.state.blockModal && this.srv.dialog.openDialogs.length == 0) {
                this.dom.state.blockModal = true;
                if (internal_name && id) {
                    this.srv.portal.view(internal_name, id).then(function (changed) {
                        _this.core.repo.clearCache('entity', String(id), 'PopEntityListComponent:onViewEntityPortal');
                        if (changed || _this.dom.state.refresh) {
                            _this.core.repo.clearAllCache('PopEntityListComponent:onViewEntityPortal');
                            _this._configureTable().then(function () { return true; });
                        }
                        _this.dom.state.blockModal = false;
                    });
                }
            }
        };
        /**
         * A user can save custom settings for how they want to view this table
         * @param options
         */
        PopEntityListComponent.prototype.onSaveOptions = function (options) {
            var _this = this;
            // We only want to save the current column defs and options.
            var preferences = {
                settings: {
                    columns: options.currentOptions.columnDefinitions,
                    options: options.currentOptions
                },
            };
            var existingID = StorageGetter(this.core.preference, ['table', 'id'], 0);
            this.dom.setSubscriber('save-preferences', this.core.repo.savePreference(+existingID, 'table', preferences).subscribe(function (preference) {
                // console.log('saved-preferences', preference);
                _this.srv.entity.updateBaseCoreConfig(_this.core.params.internal_name, 'preference:table', preference);
                console.log('this.core', _this.core);
                if (StorageGetter(_this.core, ['preference'])) {
                    _this.core.preference.table = preference;
                }
                // console.log('this.core.preference.table', this.core.preference.table);
            }));
        };
        /**
         * A user can reset their preferences for this table to default
         */
        PopEntityListComponent.prototype.onOptionsReset = function () {
            var _this = this;
            this.dom.setTimeout("lazy-load-fresh-data", null);
            if (IsObject(this.core.preference, ['table']) && this.core.preference.table.id) {
                this.core.repo.deletePreference(this.core.preference.table.id, 'table').then(function (defaultPreference) {
                    if (defaultPreference) {
                        _this.core.preference.table = defaultPreference;
                    }
                    else {
                        _this.core.preference.table = {};
                    }
                    _this.srv.entity.updateBaseCoreConfig(_this.core.params.internal_name, 'preference:table', _this.core.preference.table);
                });
            }
        };
        /**
         * A user can archive a list of entities
         * @param ids
         * @param archive
         */
        PopEntityListComponent.prototype.onArchiveButtonClicked = function (ids, archive) {
            var _this = this;
            this.table.config.loading = true;
            this.dom.setSubscriber('archive-entities', this.core.repo.archiveEntities(ids, archive).subscribe(function () {
                _this.table.config.loading = false;
                _this.core.repo.clearCache('table', 'data');
                _this._triggerDataFetch(1);
                _this.srv.events.sendEvent({
                    source: _this.name,
                    method: 'archive',
                    type: 'entity',
                    name: _this.core.params.name,
                    internal_name: _this.core.params.internal_name,
                    id: ids,
                    data: archive
                });
            }, function (err) {
                _this.table.config.loading = false;
                _this.dom.error.code = err.error.code;
                _this.dom.error.message = err.error.message;
                _this.dom.setTimeout("reset-selected-items", function () {
                    if (typeof _this.table.config.clearSelected === 'function')
                        _this.table.config.clearSelected();
                }, 0);
            }));
        };
        /**
         * The user can click on a btn to show active, archived, or both?
         */
        PopEntityListComponent.prototype.onShowArchivedButtonClicked = function () {
            var _this = this;
            this.dom.state.showArchived = !this.dom.state.showArchived;
            this.core.repo.clearCache('table');
            this._configureTable().then(function () { return true; });
            this.dom.setTimeout("reset-selected-items", function () {
                if (typeof _this.table.config.clearSelected === 'function')
                    _this.table.config.clearSelected();
                _this.table.config.buttons = _this._buildTableButtons();
                if (IsString(_this.asset.showArchivedSessionPath))
                    SetSessionSiteVar(_this.asset.showArchivedSessionPath, _this.dom.state.showArchived);
            }, 0);
        };
        /**
         * This will open a modal to create a new entity when the user clicks on the new button
         */
        PopEntityListComponent.prototype.onActionButtonClicked = function (actionName) {
            var _this = this;
            // if( IsString( actionName, true ) ){
            //   this.srv.action.doAction( this.core, actionName, this.extension ).then( ( config: FieldItemGroupConfig ) => {
            //     console.log( 'action config', config );
            //     if( config ){
            //       this.ui.actionModal = config;
            //     }else{
            //       this.ui.actionModal = null;
            //     }
            //
            //     this.log.config( `onNewButtonClicked`, this.ui.actionModal );
            //   } );
            // }
            if (IsString(actionName, true)) {
                this.dom.setTimeout("do-action", function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.srv.action.do(this.core, actionName, this.extension)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); }, 0);
            }
        };
        /**
         * When the modal for creating a new entity is closed, the config needs to be cleared
         */
        PopEntityListComponent.prototype.onActionModalClose = function () {
            this.ui.actionModal = null;
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityListComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Protected Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Allow for a CoreConfig to be passed in
         * If a CoreConfig does not exits this component needs to be able to create it for itself, uses the internal_name that comes directly for the route
         * or tries to extrapolate it from the current url of the app
         *
         */
        PopEntityListComponent.prototype._setCoreConfig = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    // #1: Grab Route Extension settings
                    this._setRouteExtension();
                    if (!this.internal_name)
                        this.internal_name = this.srv.entity.getRouteInternalName(this.route, this.extension);
                    if (!IsObject(this.core, true)) {
                        this.srv.entity.getCoreConfig(this.internal_name, 0, this.dom.repo).then(function (core) {
                            _this.core = core;
                            return resolve(true);
                        });
                    }
                    else {
                        return [2 /*return*/, resolve(true)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Setup basic config
         * Intended to be overridden
         * @private
         */
        PopEntityListComponent.prototype._setConfig = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Attach a handler to handle an crud events
         * @private
         */
        PopEntityListComponent.prototype._setCrudHandler = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.dom.setSubscriber('entity', this.srv.events.events.subscribe(function (event) { return _this._crudEventHandler(event); }));
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Determine the height of the table
         * @private
         */
        PopEntityListComponent.prototype._setHeight = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var menu, filterHeight, overhead, defaultHeight;
                return __generator(this, function (_a) {
                    menu = 48;
                    filterHeight = this.dom.state.filter ? this.srv.filter.getHeight() : 25;
                    overhead = 25;
                    defaultHeight = window.innerHeight - menu - filterHeight;
                    this.dom.setHeight(defaultHeight, overhead);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Manage the sessionStorage settings
         * @private
         */
        PopEntityListComponent.prototype._setSessionSettings = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    // Set session path for variables
                    this.asset.tabMenuSessionPath = "Entity." + TitleCase(this.core.params.internal_name) + ".Menu";
                    this.asset.showArchivedSessionPath = "Business." + exports.PopBusiness.id + ".Entity." + TitleCase(this.core.params.internal_name) + ".Table.Main.showArchived";
                    this.asset.searchValueSessionPath = "Business." + exports.PopBusiness.id + ".Entity." + TitleCase(this.core.params.internal_name) + ".Table.Main.searchValue";
                    // Set any session variables
                    SetSessionSiteVar(this.asset.tabMenuSessionPath, null); // remove any menu session data for this entity
                    this.dom.state.showArchived = GetSessionSiteVar(this.asset.showArchivedSessionPath, false);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Determine how to fetch the data for this table
         * @param update
         * @private
         */
        PopEntityListComponent.prototype._fetchData = function (update) {
            var _this = this;
            if (update === void 0) { update = false; }
            return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var params;
                var _this = this;
                return __generator(this, function (_a) {
                    params = {};
                    if (!update)
                        this.dom.setTimeout("lazy-load-fresh-data", null);
                    if (IsObject(this.table, ['config']) && IsObject(this.table.config, ['clearSelected']) && typeof this.table.config.clearSelected === 'function')
                        this.table.config.clearSelected();
                    if (this.dataFactory) {
                        this.dataFactory(null, this.dom.state.showArchived ? 1 : 0).then(function (data) {
                            // console.log('data', data);
                            data = _this._transformData(data);
                            if (update && _this.table.config && typeof _this.table.config.updateData === 'function') {
                                _this.table.config.updateData(data);
                            }
                            exports.PopTemplate.clear();
                            return resolve(data);
                        }, function () {
                            reject([]);
                        });
                    }
                    else {
                        this.core.repo.getEntities(Object.assign({ archived: (this.dom.state.showArchived ? 1 : 0) }, params)).then(function (data) {
                            data = _this._transformData(data);
                            _this.core.repo.setCache('table', 'data', data, 5);
                            if (update && typeof _this.table.config.updateData === 'function') {
                                _this.table.config.updateData(data);
                            }
                            exports.PopTemplate.clear();
                            return resolve(data);
                        }, function (err) {
                            reject(err);
                        });
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        PopEntityListComponent.prototype._transformData = function (data) {
            if (!(IsObject(this.asset.fieldKeys, true)))
                this._setFieldKeys(data[0]);
            if (!(IsObject(this.asset.transformations, true)))
                this._setFieldTableTransformations();
            data = this._prepareTableData(data);
            this.core.repo.setCache('table', 'data', data, 5);
            return data;
        };
        /**
         * Cleans the row data to remove any unwanted fields
         * @param row
         * @private
         */
        PopEntityListComponent.prototype._setFieldKeys = function (row) {
            var _this = this;
            this.asset.fieldKeys = {};
            var Decorator = StorageGetter(this.core, ['repo', 'model', 'decorator'], null);
            if (IsCallableFunction(Decorator)) {
                row = Decorator(this.core, row);
            }
            if (IsObject(row, true)) {
                var allowedTypes_1 = ['string', 'number', 'boolean'];
                var blacklist_1 = StorageGetter(this.core.repo, ['model', 'table', 'blacklist'], {});
                var whitelist_1 = StorageGetter(this.core.repo, ['model', 'table', 'whitelist'], {});
                var appendlist = StorageGetter(this.core.repo, ['model', 'table', 'appendlist'], {});
                Object.keys(row).map(function (key) {
                    if (!(key in blacklist_1)) {
                        if (key in whitelist_1 || allowedTypes_1.includes(typeof row[key])) {
                            _this.asset.fieldKeys[key] = 1;
                        }
                        else if (IsObject(row[key], ['id', 'name'])) {
                            _this.asset.fieldKeys[key] = 1;
                        }
                    }
                });
                if (IsObject(appendlist, true)) {
                    Object.keys(appendlist).map(function (key) {
                        _this.asset.fieldKeys[key] = 1;
                    });
                }
            }
        };
        /**
         * Apply the transformations to the dataset
         * @private
         */
        PopEntityListComponent.prototype._setFieldTableTransformations = function () {
            var _this = this;
            this.asset.transformations = {};
            var fields = this.core.repo.model.field;
            Object.keys(this.asset.fieldKeys).map(function (key) {
                var field = fields[key];
                if (IsObject(field, ['table', 'model'])) {
                    if (field.model.name && field.table.transformation) {
                        _this.asset.transformations[field.model.name] = CleanObject({
                            type: field.table.transformation.type,
                            arg1: field.table.transformation.arg1 ? field.table.transformation.arg1 : null,
                            arg2: field.table.transformation.arg2 ? field.table.transformation.arg2 : null,
                            arg3: field.table.transformation.arg3 ? field.table.transformation.arg3 : null,
                        });
                    }
                }
            });
        };
        /**
         * A method that preps entity list data for tables
         * @param dataSet
         * @param fieldMap
         */
        PopEntityListComponent.prototype._prepareTableData = function (dataSet) {
            var _this = this;
            this.log.info("_prepareTableData: this.asset.fieldKeys", this.asset.fieldKeys);
            var Decorator = StorageGetter(this.core, ['repo', 'model', 'decorator'], null);
            var Filter = StorageGetter(this.core, ['repo', 'model', 'filter'], null);
            var appendlist = StorageGetter(this.core.repo, ['model', 'table', 'appendlist'], {});
            if (IsArray(dataSet, true)) {
                if (Filter)
                    dataSet = dataSet.filter(Filter);
                dataSet.sort(DynamicSort('id', 'desc'));
                return dataSet.map(function (row) {
                    row = Object.keys(row).reduce(function (obj, k) {
                        if (k in _this.asset.fieldKeys)
                            obj[k] = row[k];
                        return obj;
                    }, {});
                    if (IsObject(appendlist, true)) {
                        Object.keys(appendlist).map(function (name) {
                            var value = appendlist[name];
                            row[name] = ParseModelValue(value, row);
                        });
                    }
                    if (Decorator)
                        row = Decorator(_this.core, row);
                    return _this.srv.pipe.transformObjectValues(row, _this.asset.transformations, _this.core);
                });
            }
            else {
                return dataSet;
            }
        };
        /**
         * Retrieves the data set that this view will represent
         * @param hardReset
         *
         */
        PopEntityListComponent.prototype._getTableData = function (hardReset) {
            var _this = this;
            if (hardReset === void 0) { hardReset = false; }
            return new Promise(function (resolve, reject) {
                if (_this.dom.delay.data)
                    clearTimeout(_this.dom.delay.data);
                _this.core.repo.getCache('table', 'data').then(function (cache) {
                    if (IsArray(cache, true)) {
                        _this._triggerDataFetch();
                        return resolve({ data: cache });
                    }
                    else {
                        _this._fetchData(false).then(function (data) {
                            return resolve({ data: data });
                        });
                    }
                });
            });
        };
        /**
         * Trigger the table to re-fetch the data
         * @param seconds
         * @private
         */
        PopEntityListComponent.prototype._triggerDataFetch = function (seconds) {
            var _this = this;
            if (seconds === void 0) { seconds = 5; }
            this.dom.setTimeout("lazy-load-fresh-data", function () {
                // PopTemplate.buffer(`Loading Fresh Data`);
                _this._fetchData(true).catch(function () { return true; });
            }, (seconds * 1000)); // allows for cached data to be presented for x amount of seconds before refreshed data is triggered
        };
        /**
         * The table need to know when new entities are created or update so that they can be updated in its view
         * @param event
         *
         */
        PopEntityListComponent.prototype._crudEventHandler = function (event) {
            this.core.repo.clearCache('table', null, "PopEntityListComponent:crudEventHandler");
            this.core.repo.clearCache('entity', null, "PopEntityListComponent:crudEventHandler");
            if (event.method === 'create' || event.method === 'delete') {
                this.dom.state.refresh = true;
                this.core.params.refresh = true;
            }
            else if (event.method === 'update') {
                if (event.type === 'entity') {
                    if (event.name === 'archive') {
                        this._configureTable(true).then(function () { return true; });
                    }
                }
                else if (event.type === 'field' && event.name === 'patch') {
                    this.dom.state.refresh = true;
                    this.core.params.refresh = true;
                }
            }
            else if (event.method === 'read') {
                if (event.type === 'dialog') {
                    if (event.name === 'close') {
                        this.core.repo.clearCache('table', 'data', "PopEntityListComponent:crudEventHandler");
                        this._configureTable().then(function () { return true; });
                    }
                }
            }
        };
        /**
         * THe filter bar needs to be configured for this specific entity
         *
         */
        PopEntityListComponent.prototype._configureFilterBar = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    // return this.srv.filter.setActive(false);
                    if (+this.core.repo.model.table.filter.active) {
                        this.dom.state.filter = true;
                        // this.srv.filter.setArchived(this.dom.state.showArchived);
                        this.srv.filter.setView(this.core.repo.model.table.filter.view);
                        this.srv.filter.setActive(true);
                        this.dom.setSubscriber('filters', this.srv.filter.event.bubble.subscribe(function (event) {
                            _this._filterEventHandler(event);
                        }));
                        return [2 /*return*/, resolve(true)];
                    }
                    else {
                        this.srv.filter.setActive(false);
                        this.dom.state.filter = false;
                        return [2 /*return*/, resolve(true)];
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Generates a table config that will be used by the nested view component
         * @param reset
         *
         */
        PopEntityListComponent.prototype._configureTable = function (reset) {
            var _this = this;
            if (reset === void 0) { reset = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var tableData;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.table.config) return [3 /*break*/, 3];
                            return [4 /*yield*/, this._getTableData(reset)];
                        case 1:
                            tableData = _a.sent();
                            if (IsArray(tableData.data, true)) {
                                this.asset.blueprintData = tableData.data[0];
                                this.asset.blueprint = tableData.data[0];
                            }
                            return [4 /*yield*/, this._getTableInterface()];
                        case 2:
                            _a.sent();
                            this.table.config = new TableConfig(Object.assign(Object.assign({}, this.asset.tableInterface), tableData));
                            return [3 /*break*/, 4];
                        case 3:
                            this.table.config.loading = true;
                            this._getTableData().then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (IsArray(result.data, true)) {
                                                this.asset.blueprintData = result.data[0];
                                                this.asset.blueprint = result.data[0];
                                            }
                                            this.table.config.buttons = this._buildTableButtons();
                                            return [4 /*yield*/, Sleep(10)];
                                        case 1:
                                            _a.sent();
                                            if (reset && typeof this.table.config.reset === 'function') {
                                                this.table.config.reset(result.data);
                                            }
                                            else {
                                                if (typeof this.table.config.updateData === 'function')
                                                    this.table.config.updateData(result.data);
                                            }
                                            this.table.config.loading = false;
                                            this.dom.state.refresh = false;
                                            this.core.params.refresh = false;
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            _a.label = 4;
                        case 4: return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * Allows route to have a resolvable syntax
         *
         */
        PopEntityListComponent.prototype._transformRouteExtension = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!IsObject(this.extension))
                        this.extension = {};
                    if (IsString(this.extension.goToUrl, true)) {
                        this.extension.goToUrl = ParseLinkUrl(this.extension.goToUrl, this.core.params, [':id']);
                    }
                    if (IsObject(this.extension.table, true)) {
                        if (this.extension.table.route) {
                            this.extension.table.route = ParseLinkUrl(this.extension.table.route, this.core.params, [':id']);
                        }
                    }
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Generates a table config interface to produce a config
         * @param row
         *
         */
        PopEntityListComponent.prototype._getTableInterface = function () {
            var _this = this;
            return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var defaultColumns, userColumns, baseApp, tableInterface;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!IsObject(this.asset.tableInterface, true)) return [3 /*break*/, 1];
                            return [2 /*return*/, resolve(true)];
                        case 1: return [4 /*yield*/, this._getDefaultFieldKeys()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this._getDefaultColumns()];
                        case 3:
                            defaultColumns = _a.sent();
                            userColumns = void 0;
                            if (IsObject(this.core.preference, ['table']) && IsObject(this.core.preference.table.columns, true)) {
                                userColumns = this.core.preference.table.columns;
                            }
                            if (!userColumns)
                                userColumns = defaultColumns;
                            baseApp = (this.core.params.app ? this.core.params.app : exports.PopHref);
                            baseApp = baseApp ? "/" + baseApp + "/" : '/';
                            tableInterface = {
                                id: this.core.params.internal_name,
                                internal_name: this.core.params.internal_name,
                                paginator: true,
                                height: this._getTableHeight(),
                                buttons: this._buildTableButtons(),
                                route: "" + baseApp + GetRouteAlias(this.core.params.internal_name) + "/:id/general",
                                data: [],
                                searchValue: GetSessionSiteVar(this.asset.searchValueSessionPath, ''),
                                options: new TableOptionsConfig(Object.assign({ defaultOptions: { columnDefinitions: defaultColumns } }, this.core.repo.model.table.permission)),
                                columnDefinitions: userColumns
                            };
                            if (this.extension.goToUrl)
                                this.extension.goToUrl = ParseModelValue(this.extension.goToUrl, this.core, true);
                            if (this.extension.table && this.extension.table.route)
                                this.extension.table.route = ParseModelValue(this.extension.table.route, this.core, true);
                            if (this.extension.table && Object.keys(this.extension.table).length)
                                tableInterface = Object.assign(Object.assign({}, tableInterface), this.extension.table);
                            if (IsObject(this.core.preference, ['table'])) {
                                // console.log('this.core.preference.table.options', this.core.preference.table.options);
                                if (this.core.preference.table.options) {
                                    tableInterface = Object.assign(Object.assign({}, tableInterface), this.core.preference.table.options);
                                }
                            }
                            this.asset.tableInterface = tableInterface;
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * A table will have a set of actions that it will need a button set to achieve
         *
         */
        PopEntityListComponent.prototype._buildTableButtons = function () {
            var _this = this;
            var buttons = [];
            if (IsObject(this.core.repo.model.table.button, true)) {
                buttons = this.table.buttons.filter(function (button) {
                    // if( button.id === 'custom' && !this.core.repo.model.table.button.custom ) return false; // allow custom actions to be performed on a set of entities
                    // if( button.id === 'advanced_search' && !this.core.repo.model.table.button.advanced_search ) return false; // allow for a advanced search on the entity data set
                    if (button.id === 'archive' && (!_this.core.repo.model.table.button.archived || _this.dom.state.showArchived))
                        return false;
                    if (button.id === 'restore' && (!_this.core.repo.model.table.button.archived || !_this.dom.state.showArchived))
                        return false;
                    if (button.id === 'show_active' && (!_this.core.repo.model.table.button.archived || !_this.dom.state.showArchived))
                        return false;
                    if (button.id === 'show_archived' && (!_this.core.repo.model.table.button.archived || _this.dom.state.showArchived))
                        return false;
                    if (button.id === 'new' && !_this.core.repo.model.table.button.new)
                        return false;
                    if (!button.accessType)
                        return true;
                    if (!_this.srv.entity.checkAccess(_this.core.params.internal_name, button.accessType))
                        return false;
                    return true;
                });
            }
            return buttons;
        };
        /**
         * The filter bar and the table view need to be in sync
         * @param event
         *
         */
        PopEntityListComponent.prototype._filterEventHandler = function (event) {
            var _this = this;
            this.log.event("_filterEventHandler", event);
            if (event.type === 'filter') {
                switch (event.name) {
                    case 'clear':
                    case 'apply':
                        this.srv.entity.bustAllCache();
                        this.dom.setTimeout('reconfigure-table', function () {
                            _this._configureTable().then(function () { return true; });
                        }, 0);
                        break;
                    case 'init':
                    case 'state':
                        if (event.model === 'open') {
                            this.onResetHeight();
                        }
                        break;
                    default:
                        break;
                }
            }
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Allows the route to set/override specific settings
         *
         */
        PopEntityListComponent.prototype._setRouteExtension = function () {
            var _this = this;
            if (!this.extension)
                this.extension = {};
            if (!this.extension.table)
                this.extension.table = {};
            if (!this.extension.goToUrl)
                this.extension.goToUrl = null;
            if (this.route.snapshot.data && Object.keys(this.route.snapshot.data).length) {
                Object.keys(this.route.snapshot.data).map(function (key) {
                    _this.extension[key] = _this.route.snapshot.data[key];
                });
            }
        };
        PopEntityListComponent.prototype._getDefaultFieldKeys = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (IsObject(_this.asset.fieldKeys, true)) {
                    return resolve(true);
                }
                else {
                    _this.core.repo.getCache('table', 'fieldKeys').then(function (fieldKeys) {
                        if (IsObject(fieldKeys, true)) {
                            _this.asset.fieldKeys = fieldKeys;
                        }
                        else {
                            _this._setFieldKeys(_this.asset.blueprint);
                        }
                        return resolve(true);
                    }, function () {
                        _this._setFieldKeys(_this.asset.blueprint);
                        return resolve(true);
                    });
                }
            });
        };
        PopEntityListComponent.prototype._getDefaultColumns = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var defaultColumns = {};
                _this.core.repo.getCache('table', 'columns').then(function (columns) {
                    if (IsObject(columns, true)) {
                        return resolve(columns);
                    }
                    else {
                        defaultColumns = {};
                        var fields_1 = IsObjectThrowError(_this.core.repo.model.field, true, "Repo contained no field model") ? _this.core.repo.model.field : null;
                        if (IsObject(_this.asset.fieldKeys, true)) {
                            Object.keys(_this.asset.fieldKeys).map(function (fieldName) {
                                if (fieldName in fields_1) {
                                    var field = fields_1[fieldName];
                                    if (IsObject(field.model, ['route'])) {
                                        field.model.route = ParseModelValue(field.model.route, _this.core);
                                    }
                                    if (field.table.visible)
                                        defaultColumns[fieldName] = Object.assign({
                                            name: field.model.name,
                                            label: field.model.label,
                                        }, field.table);
                                }
                            });
                        }
                        else {
                            // console.log('cache redirect');
                            // console.log(this.asset.blueprintData);
                            // SetPopCacheRedirectUrl(this.srv.router.url);
                            // this.srv.router.navigateByUrl('system/cache/clear',{skipLocationChange:true});
                        }
                        if (IsObject(defaultColumns, true)) {
                            _this.core.repo.setCache('table', 'columns', defaultColumns, 60);
                        }
                        return resolve(defaultColumns);
                    }
                });
            });
        };
        /**
         * Helper function that sets the height of the child view
         *
         */
        PopEntityListComponent.prototype._getTableHeight = function () {
            var height = this.dom.height.inner;
            if (this.srv.filter.isActive()) {
                height -= 20;
            }
            return height;
        };
        return PopEntityListComponent;
    }(PopExtendComponent));
    PopEntityListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-list',
                    template: "<div class=\"entity-list-container\" [style.height.px]=\"dom.height.inner\" [ngStyle]=\"!dom.state.filter && {'margin-top': '25px'}\" (window:resize)=\"onResetTable();\">\n  <lib-pop-table #list *ngIf=\"table.config\" [core]=core [config]=\"table.config\" (events)=\"onTableEvent($event)\"></lib-pop-table>\n  <div class=\"entity-list-spinner-box\" *ngIf=\"dom.state.loader\">\n    <lib-main-spinner></lib-main-spinner>\n  </div>\n</div>\n<!--<lib-pop-field-item-group *ngIf=\"ui.actionModal\" [config]=\"ui.actionModal\" (close)=\"onActionModalClose()\"></lib-pop-field-item-group>-->\n<lib-pop-errors *ngIf=\"dom.error?.message\" [error]=\"dom.error\"></lib-pop-errors>\n",
                    providers: [PopDomService],
                    styles: [".entity-list-container{position:relative;display:flex;width:auto;height:auto;flex-direction:column;box-sizing:border-box;margin:5px 25px 0}.entity-list-container lib-pop-table{position:absolute;left:0;top:0;right:0;bottom:10px}:host ::ng-deep tr{height:48px;max-height:48px}:host ::ng-deep td,:host ::ng-deep th{min-width:50px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;height:48px;max-height:48px}:host ::ng-deep th>.mat-sort-header-container{display:flex;min-width:50px}:host ::ng-deep .checkbox-column{min-width:25px!important;width:25px!important;padding:0 5px!important;text-align:center!important}::ng-deep th[class*=fk],:host ::ng-deep td[class*=fk]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=fk]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=id],:host ::ng-deep th[class*=id]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=active]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=active],:host ::ng-deep th[class*=active]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=system]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=system],:host ::ng-deep th[class*=system]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=id]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=-name],:host ::ng-deep th[class*=-name]{text-align:left!important;padding-left:20px!important;max-width:200px}:host ::ng-deep th[class*=-name] .mat-sort-header-container{padding-left:0!important;justify-content:left!important;max-width:500px}:host ::ng-deep td[class*=-first],:host ::ng-deep th[class*=-first]{text-align:left!important;padding-left:20px!important}:host ::ng-deep th[class*=-first] .mat-sort-header-container{min-width:50px!important;padding-left:0!important;justify-content:left!important}:host ::ng-deep td[class*=-last],:host ::ng-deep th[class*=-last]{text-align:left!important;padding-left:20px!important}:host ::ng-deep th[class*=-last] .mat-sort-header-container{padding-left:0!important;justify-content:left!important}:host ::ng-deep td[class*=-display],:host ::ng-deep th[class*=-display]{text-align:left!important;padding-left:20px!important}:host ::ng-deep th[class*=-display] .mat-sort-header-container{padding-left:0!important;justify-content:left!important}:host ::ng-deep td[class*=-description],:host ::ng-deep th[class*=-description]{text-align:left!important;padding-left:20px!important;max-width:500px}:host ::ng-deep th[class*=-description] .mat-sort-header-container{padding-left:0!important;justify-content:left!important;max-width:500px}:host ::ng-deep td[class*=email],:host ::ng-deep th[class*=email]{min-width:50px!important;text-align:left!important;padding-left:20px!important}:host ::ng-deep th[class*=email] .mat-sort-header-container{min-width:50px!important;padding-left:0!important;justify-content:left!important}.entity-list-spinner-box{height:75vh}"]
                },] }
    ];
    PopEntityListComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1.ActivatedRoute },
        { type: PopDomService },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] }
    ]; };
    PopEntityListComponent.propDecorators = {
        internal_name: [{ type: i0.Input }],
        extension: [{ type: i0.Input }],
        list: [{ type: i0.ViewChild, args: ['list',] }],
        dataFactory: [{ type: i0.Input }]
    };

    var PopEntityAccessComponent = /** @class */ (function (_super) {
        __extends(PopEntityAccessComponent, _super);
        function PopEntityAccessComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.srv = GetServiceContainer();
            _this.name = 'PopEntityAccessComponent';
            _this.extendServiceContainer();
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.dom.state.expansion = 'compact';
                    _this.core.repo.getEntity(_this.core.params.entityId, { select: 'permissions' }).subscribe(function (res) {
                        var entity = res.data ? res.data : res.data;
                        var appDisabled;
                        var appHasEntitiesAccess, appEntitiesWithAccess;
                        _this.ui.access = IsArrayThrowError(entity.permissions, true, _this.name + ":configure: - entity.permissions") ? DeepCopy(entity.permissions) : [];
                        _this.ui.access.forEach(function (app) {
                            app.expanded = false;
                            appDisabled = _this.core.entity.system || !_this.core.access.can_update || app.entities.length === 0 ? true : false;
                            app.can_read = { all: app.entities.length ? true : false, disabled: appDisabled, indeterminate: app.entities.length ? true : false };
                            app.can_create = { all: app.entities.length ? true : false, disabled: appDisabled, indeterminate: app.entities.length ? true : false };
                            app.can_update = { all: app.entities.length ? true : false, disabled: appDisabled, indeterminate: app.entities.length ? true : false };
                            app.can_delete = { all: app.entities.length ? true : false, disabled: appDisabled, indeterminate: app.entities.length ? true : false };
                            appHasEntitiesAccess = { can_read: 0, can_create: 0, can_update: 0, can_delete: 0 };
                            appEntitiesWithAccess = { can_read: 0, can_create: 0, can_update: 0, can_delete: 0 };
                            app.entities.forEach(function (entityToken) {
                                entityToken.field = {};
                                Object.keys(entityToken.access).forEach(function (entityAccess) {
                                    entityToken.field[entityAccess] = new CheckboxConfig({
                                        align: 'left',
                                        // patch: { path: `admin/security-profiles/${this.tab.securityProfile.id}/entities/add`, field: access, metadata: { access: 1, entity_fk: entity.id } },
                                        bubble: true,
                                        value: +entityToken.access[entityAccess],
                                        disabled: _this.core.entity.system || !entityToken[entityAccess] ? true : false,
                                        metadata: {
                                            app: app,
                                            entity: entityToken,
                                            access: entityAccess,
                                        },
                                    });
                                    if (entityToken[entityAccess])
                                        appHasEntitiesAccess[entityAccess]++;
                                    if (entityToken.access[entityAccess])
                                        appEntitiesWithAccess[entityAccess]++;
                                    if (+entityToken.access[entityAccess] === 0) {
                                        if (entityAccess in app) {
                                            app[entityAccess].all = false;
                                        }
                                    }
                                });
                            });
                            // if none of the entities are able to use an access just disable the all checkbox
                            Object.keys(appHasEntitiesAccess).forEach(function (entityAccess) {
                                if (!appHasEntitiesAccess[entityAccess] && entityAccess in app)
                                    app[entityAccess].disabled = true;
                                if (app[entityAccess].all)
                                    app[entityAccess].indeterminate = false;
                                if (appEntitiesWithAccess[entityAccess] && !app[entityAccess].all)
                                    app[entityAccess].indeterminate = true;
                                if (!appEntitiesWithAccess[entityAccess] && !app[entityAccess].all)
                                    app[entityAccess].indeterminate = false;
                            });
                        });
                        _this.setExpansionState(_this.dom.state.expansion);
                        resolve(true);
                    }, function (err) {
                        _this.dom.error = {
                            code: err.error ? err.error.code : err.status,
                            message: err.error ? err.error.message : err.statusText
                        };
                        resolve(false);
                    });
                });
            };
            return _this;
        }
        PopEntityAccessComponent.prototype.extendServiceContainer = function () {
            this.srv.request = exports.ServiceInjector.get(PopRequestService);
        };
        /**
         * This component should have a specific purpose
         */
        PopEntityAccessComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        PopEntityAccessComponent.prototype.checkAll = function (app, access) {
            var _this = this;
            if (app && access in app) {
                var all_1 = true, indeterminate_1 = false;
                var entity_fks_1 = [];
                var value_1 = +app[access].all;
                if (app.entities.length) {
                    all_1 = +value_1 === 1;
                    app.entities.forEach(function (entity) {
                        if (!_this.core.entity.system && _this.core.access.can_update && entity[access]) {
                            if (+entity.field[access].control.value !== value_1) {
                                // entity.field[ access ].patch.running = true;
                                entity.access[access] = value_1;
                                entity.field[access].control.setValue(value_1);
                                entity.field[access].message = '';
                                entity.field[access].startPatch();
                                entity_fks_1.push(entity.id);
                            }
                        }
                        else {
                            if (+entity.field[access].control.value !== value_1) {
                                indeterminate_1 = true;
                                all_1 = !value_1;
                            }
                        }
                    });
                    if (entity_fks_1.length) {
                        var patch_1 = { access: 1, entity_fk: entity_fks_1.join() };
                        patch_1[access] = value_1;
                        var method = patch_1[access] === 1 ? 'add' : 'remove';
                        this.srv.request.doPatch(this.core.params.path + "/" + this.core.params.entityId + "/entities/" + method, patch_1, 1).subscribe(function (res) {
                            app.entities.forEach(function (entity) {
                                entity.field[access]._patchSuccess();
                            });
                            setTimeout(function () {
                                app[access].all = all_1;
                                app[access].indeterminate = indeterminate_1;
                            });
                            var sendEvent = {
                                source: _this.name,
                                type: 'permissions',
                                model: 'entity',
                                name: 'patch',
                                method: 'update',
                                success: true,
                                config: _this.core,
                                data: app,
                                ids: entity_fks_1,
                                access: access,
                                value: patch_1[access]
                            };
                            _this.sessionChanges(sendEvent);
                            if (_this.log.repo.enabled('event', _this.name))
                                console.log(_this.log.repo.message(_this.name + ":event"), _this.log.repo.color('event'), sendEvent);
                        }, function (err) {
                            app.entities.forEach(function (entity) {
                                entity.patchFail((err.error && err.error.message) ? err.error.message : err.message);
                            });
                            setTimeout(function () {
                                app[access].all = all_1;
                                app[access].indeterminate = indeterminate_1;
                            });
                            _this.dom.error = {
                                code: (err.error ? err.error.code : err.status),
                                message: (err.error ? err.error.message : err.statusText)
                            };
                        });
                    }
                    else {
                        setTimeout(function () {
                            // app[ access ].all = all;
                            app[access].indeterminate = true;
                        });
                    }
                }
                else {
                    setTimeout(function () {
                        app[access].all = false;
                        app[access].indeterminate = false;
                    });
                }
            }
        };
        PopEntityAccessComponent.prototype.setExpansionState = function (state) {
            if (state) {
                this.dom.state.expansion = state;
            }
            switch (this.dom.state.expansion) {
                case 'none':
                    this.ui.access.forEach(function (app) {
                        app.expanded = false;
                    });
                    break;
                case 'compact':
                    this.ui.access.forEach(function (app) {
                        app.expanded = app.can_read.indeterminate || app.can_update.indeterminate || app.can_create.indeterminate || app.can_delete.indeterminate ? true : false;
                    });
                    break;
                case 'full':
                    this.ui.access.forEach(function (app) {
                        app.expanded = true;
                    });
                    break;
                default:
                    break;
            }
        };
        PopEntityAccessComponent.prototype.handleInputEvents = function (event) {
            var _this = this;
            if (event.type === 'field') {
                if (this.log.repo.enabled())
                    console.log(this.log.repo.message('PopEntityAccessComponent:event'), this.log.repo.color('event'), event);
                switch (event.name) {
                    case 'onChange':
                        var patch_2 = { access: 1, entity_fk: event.config.metadata.entity.id };
                        patch_2[event.config.metadata.access] = +event.config.control.value;
                        var method = +event.config.control.value === 1 ? 'add' : 'remove';
                        event.config.startPatch();
                        this.srv.request.doPatch(this.core.params.path + "/" + this.core.params.entityId + "/entities/" + method, patch_2, 1).subscribe(function () {
                            event.config._patchSuccess();
                            _this.checkAppAll(event.config.metadata.app, event.config.metadata.access, +event.config.control.value);
                            var sendEvent = {
                                source: _this.name,
                                method: 'update',
                                model: 'entity',
                                type: 'permissions',
                                name: 'patch',
                                success: true,
                                config: _this.core,
                                data: event.config.metadata.app,
                                ids: [event.config.metadata.entity.id],
                                access: event.config.metadata.access,
                                value: patch_2[event.config.metadata.access]
                            };
                            setTimeout(function () {
                                _this.sessionChanges(sendEvent);
                            }, 0);
                        }, function (err) {
                            event.config.patchFail((err.error && err.error.message) ? err.error.message : err.message);
                        });
                        break;
                    case patch_2:
                        if (event.success) {
                            this.checkAppAll(event.config.metadata.app, event.config.metadata.access, event.config.control.value);
                        }
                        break;
                    default:
                        break;
                }
            }
        };
        PopEntityAccessComponent.prototype.checkAppAll = function (app, access, val) {
            val = +val;
            var indeterminate = false;
            var all = true;
            if (!val) {
                all = false;
                app.entities.some(function (entity) {
                    if (entity.field[access].control.value) {
                        indeterminate = true;
                        return true;
                    }
                });
            }
            else {
                app.entities.some(function (entity) {
                    if (!entity.field[access].control.value) {
                        all = false;
                        indeterminate = true;
                        return true;
                    }
                });
            }
            setTimeout(function () {
                app[access].all = all;
                app[access].indeterminate = indeterminate;
            });
        };
        PopEntityAccessComponent.prototype.sessionChanges = function (event) {
            var appId;
            var storedPermissions;
            var storedApp;
            var storedEntity;
            if (event.type === 'permissions' && event.name === 'patch' && event.success && event.config && +event.config.params.id === +this.core.entity.id) {
                if (this.log.repo.enabled('event', this.name))
                    console.log(this.name + " made an access permissions patch session", this.log.repo.color('event'), event);
                if (this.core.entity.metadata && this.core.entity.metadata.permissions) {
                    storedPermissions = this.core.entity.metadata.permissions;
                    appId = event.data.id;
                    var appMap = ArrayMapSetter(storedPermissions, 'id');
                    if (appId in appMap) {
                        if (IsArray(storedPermissions[appMap[appId]].entities, true)) {
                            storedApp = storedPermissions[appMap[appId]];
                            var entityMap_1 = ArrayMapSetter(storedApp.entities, 'id');
                            if (IsArray(event.ids, true)) {
                                event.ids.map(function (entityID) {
                                    if (entityID in entityMap_1) {
                                        storedEntity = storedApp.entities[entityMap_1[entityID]];
                                        if (storedEntity.access && event.access in storedEntity.access)
                                            storedEntity.access[event.access] = event.value;
                                    }
                                });
                            }
                        }
                    }
                }
                return true;
            }
        };
        PopEntityAccessComponent.prototype.toggleApp = function (app) {
            app.expanded = !app.expanded;
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityAccessComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityAccessComponent;
    }(PopExtendComponent));
    PopEntityAccessComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-access',
                    template: "<div class=\"access-permissions-container\">\n  <div class=\"sw-label-container\">\n    Access Permissions\n    <mat-form-field class=\"access-expansion-state-select\" appearance=\"outline\">\n      <mat-label>Expand</mat-label>\n      <mat-select [(ngModel)]=\"dom.state.expansion\" (selectionChange)=\"setExpansionState();\">\n        <mat-option value=\"none\">None</mat-option>\n        <mat-option value=\"compact\">Compact</mat-option>\n        <mat-option value=\"full\">Full</mat-option>\n      </mat-select>\n    </mat-form-field>\n    <!--<mat-icon class=\"admin-icon-top-right\"-->\n    <!--[ngClass]=\"{'sw-hidden': state.expansion === 'full'}\"-->\n    <!--matTooltip=\"Expand\"-->\n    <!--matTooltipPosition=\"left\"-->\n    <!--(click)=\"setExpansionState('full');\">expand_more</mat-icon>-->\n    <!--<mat-icon class=\"admin-icon-top-right\"-->\n    <!--[ngClass]=\"{'sw-hidden': state.expansion === 'compact'}\"-->\n    <!--matTooltip=\"Compact\"-->\n    <!--matTooltipPosition=\"left\"-->\n    <!--(click)=\"setExpansionState('compact');\">expand_less</mat-icon>-->\n  </div>\n  <mat-divider></mat-divider>\n  <div class=\"access-filter-bar-loader\">\n    <mat-progress-bar *ngIf=\"dom.state.loading\" mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n  <div class=\"access-permissions-content\">\n    <mat-accordion *ngIf=\"ui.access\" multi=\"true\" [displayMode]=\"'flat'\">\n      <mat-expansion-panel *ngFor=\"let app of ui.access\" [ngClass]=\"{'sw-hidden':!app.entities.length}\"\n                           [expanded]=\"app.expanded\" hideToggle=\"true\">\n        <mat-expansion-panel-header>\n          <div class=\"access-app-permission-header pt-bg-1\" (click)=\"$event.stopPropagation();\">\n            <div class=\"access-app-title-container mat-h2\">\n              <div class=\"access-app-title\">{{app.name}}</div>\n              <div class=\"access-app-toggle-container\">\n                <mat-icon *ngIf=\"!app.expanded\" (click)=\"toggleApp(app);\">keyboard_arrow_right\n                </mat-icon>\n                <mat-icon *ngIf=\"app.expanded\" (click)=\"toggleApp(app);\">keyboard_arrow_down\n                </mat-icon>\n              </div>\n            </div>\n            <div class=\"access-spacer\"></div>\n            <div class=\"access-app-permission-container\">\n              <mat-checkbox [(ngModel)]=\"app.can_read.all\"\n                            [indeterminate]=\"app.can_read.indeterminate\"\n                            (change)=\"checkAll(app, 'can_read');\" [disabled]=\"app.can_read.disabled\">\n                View\n              </mat-checkbox>\n            </div>\n            <div class=\"access-app-permission-container\">\n              <mat-checkbox [(ngModel)]=\"app.can_create.all\"\n                            [indeterminate]=\"app.can_create.indeterminate\"\n                            (change)=\"checkAll(app, 'can_create');\"\n                            [disabled]=\"app.can_create.disabled\">Create\n              </mat-checkbox>\n            </div>\n            <div class=\"access-app-permission-container\">\n              <mat-checkbox [(ngModel)]=\"app.can_update.all\"\n                            [indeterminate]=\"app.can_update.indeterminate\"\n                            (change)=\"checkAll(app, 'can_update');\"\n                            [disabled]=\"app.can_update.disabled\">Edit\n              </mat-checkbox>\n            </div>\n            <div class=\"access-app-permission-container\">\n              <mat-checkbox [(ngModel)]=\"app.can_delete.all\"\n                            [indeterminate]=\"app.can_delete.indeterminate\"\n                            (change)=\"checkAll(app, 'can_delete');\"\n                            [disabled]=\"app.can_delete.disabled\">Delete\n              </mat-checkbox>\n            </div>\n          </div>\n        </mat-expansion-panel-header>\n        <div class=\"mat-expansion-panel-body\">\n          <div class=\"access-app-entity-header\" *ngFor=\"let entity of app.entities\">\n            <div class=\"access-entity-title-container mat-h2\">\n              <div class=\"access-entity-title\">{{entity.name}}</div>\n            </div>\n            <div class=\"access-spacer\"></div>\n            <div class=\"access-app-permission-container\">\n              <lib-pop-checkbox [config]=\"entity.field.can_read\"\n                                (events)=\"handleInputEvents($event)\"></lib-pop-checkbox>\n            </div>\n            <div class=\"access-app-permission-container\">\n              <lib-pop-checkbox [config]=\"entity.field.can_create\"\n                                (events)=\"handleInputEvents($event)\"></lib-pop-checkbox>\n            </div>\n            <div class=\"access-app-permission-container\">\n              <lib-pop-checkbox [config]=\"entity.field.can_update\"\n                                (events)=\"handleInputEvents($event)\"></lib-pop-checkbox>\n            </div>\n            <div class=\"access-app-permission-container\">\n              <lib-pop-checkbox [config]=\"entity.field.can_delete\"\n                                (events)=\"handleInputEvents($event)\"></lib-pop-checkbox>\n            </div>\n          </div>\n        </div>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</div>\n",
                    styles: [":host{flex:1 1}.access-permissions-container{flex:1 1;padding:0 20px}.access-permissions-content{flex:1 1 100%;height:calc(100vh - 235px);clear:both;overflow-y:scroll;overflow-x:hidden;padding-top:2px}.access-expansion-state-select{position:absolute;right:5px;top:0;max-width:200px}.access-app-permission-header{flex:1 1 100%;min-height:48px;display:flex;justify-content:flex-start;flex-direction:row;align-items:center;border-top:1px solid #ccc;border-bottom:1px solid #ccc}.access-app-title-container{display:flex;height:48px;padding:0 0 0 2%;pointer-events:all;align-items:center;width:30%;max-width:30%;overflow:hidden}.access-spacer{display:flex;flex-grow:1;height:48px;padding:0 1%}.access-app-title{font-size:18px}.access-app-title,.access-entity-title{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.access-entity-title{font-size:16px}.access-app-permission-container{min-width:16%}.access-app-toggle-container{display:flex;margin-left:10px;align-items:center;height:48px}.access-app-entity-header{flex:1 1 100%;min-height:48px;display:flex;justify-content:flex-start;flex-direction:row;align-items:center;border-bottom:1px solid #ccc}.access-entity-title-container{display:flex;height:48px;padding:0 0 0 3%;pointer-events:all;align-items:center;width:30%;max-width:30%}.access-filter-bar-loader{position:relative;display:block;width:100%;height:7px;clear:both}:host ::ng-deep.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:none!important}:host ::ng-deep mat-expansion-panel{margin-bottom:40px!important;border:1px solid #ccc}:host ::ng-deep .mat-expansion-panel-body{padding:0!important}:host ::ng-deep mat-expansion-panel-header{padding:0!important;max-height:48px!important}"]
                },] }
    ];
    PopEntityAccessComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };

    var PopEntityFieldActionBtnComponent = /** @class */ (function () {
        function PopEntityFieldActionBtnComponent(env) {
            this.env = env;
            this.events = new i0.EventEmitter();
        }
        PopEntityFieldActionBtnComponent.prototype.ngOnInit = function () {
            if (!this.action)
                this.action = 'add';
            this.tooltip = TitleCase(this.action);
        };
        PopEntityFieldActionBtnComponent.prototype.callAction = function () {
            this.events.emit({ source: 'PopEntityFieldActionBtnComponent', type: 'field', name: this.action, field: this.field });
        };
        PopEntityFieldActionBtnComponent.prototype.ngOnDestroy = function () {
        };
        return PopEntityFieldActionBtnComponent;
    }());
    PopEntityFieldActionBtnComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-field-btn',
                    template: "\n    <div class=\"field-action-btn\" *ngIf=\"field.multiple\">\n      <mat-icon class=\"sw-pointer\" matTooltip=\"{{tooltip}}\" matTooltipPosition=\"above\" (click)=\"callAction();\">{{action}}</mat-icon>\n    </div>\n  ",
                    styles: ['.field-doAction-btn {background: var(--bg-1);border-radius: 50%;width: 14px;height: 14px; mar-top:2px; color: var(--accent);border-width: 1px;border-style: solid;border-color: var(--bg-3);box-shadow: 0 2px 5px 0 var(--darken18), 0 2px 10px 0 var(--darken12) !important; } .field-doAction-btn mat-icon {position:relative; top:-2px; left:1px; width: 12px;height: 12px;font-size: 12px;line-height: 16px;}']
                },] }
    ];
    PopEntityFieldActionBtnComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: ['env',] }] }
    ]; };
    PopEntityFieldActionBtnComponent.propDecorators = {
        field: [{ type: i0.Input }],
        action: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var PopEntityFieldEditIconComponent = /** @class */ (function () {
        function PopEntityFieldEditIconComponent() {
            this.events = new i0.EventEmitter();
        }
        PopEntityFieldEditIconComponent.prototype.ngOnInit = function () {
        };
        PopEntityFieldEditIconComponent.prototype.onEdit = function () {
            this.dom.state.open = true;
            this.field.state = 'template_edit';
            this.events.emit({ source: 'PopEntityFieldEditIconComponent', type: 'field', name: 'edit', field: this.field });
        };
        return PopEntityFieldEditIconComponent;
    }());
    PopEntityFieldEditIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field-edit-icon',
                    template: "<mat-icon class=\"sw-pointer\" (click)=\"onEdit();\" [ngClass]=\"{'sw-disabled':this.dom.state.open}\">\n  edit\n</mat-icon>\n\n",
                    styles: [""]
                },] }
    ];
    PopEntityFieldEditIconComponent.ctorParameters = function () { return []; };
    PopEntityFieldEditIconComponent.propDecorators = {
        dom: [{ type: i0.Input }],
        field: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var PopEntityFieldDashComponent = /** @class */ (function () {
        function PopEntityFieldDashComponent() {
        }
        return PopEntityFieldDashComponent;
    }());
    PopEntityFieldDashComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field-dash',
                    template: "\n    <div class=\"entity-field-dash\">\n      <mat-icon>\n        remove\n      </mat-icon>\n    </div>\n  ",
                    styles: [':host ::ng-deep mat-icon {width: auto; height: auto; font-size: .9em;} .entityId-field-dash { display: flex;align-items: center; justify-content: center; box-sizing: border-box; height: 100%; }']
                },] }
    ];

    var PopEntityFieldSpacerComponent = /** @class */ (function () {
        function PopEntityFieldSpacerComponent() {
        }
        PopEntityFieldSpacerComponent.prototype.ngOnInit = function () {
        };
        return PopEntityFieldSpacerComponent;
    }());
    PopEntityFieldSpacerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field-spacer',
                    template: '<div class="entityId-field-spacer sw-clear"></div>',
                    styles: ['.entityId-field-spacer { display: flex; height: 10px; clear:both; }']
                },] }
    ];
    PopEntityFieldSpacerComponent.ctorParameters = function () { return []; };

    var PopEntityTabColumnComponent = /** @class */ (function (_super) {
        __extends(PopEntityTabColumnComponent, _super);
        function PopEntityTabColumnComponent(el, _domRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this.name = 'PopEntityTabColumnComponent';
            _this.srv = {
                tab: undefined
            };
            _this.ui = {
                tabId: undefined,
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    //  Enforce CoreConfig
                    _this.core = IsObjectThrowError(_this.core, true, _this.name + ":: - this.core") ? _this.core : null;
                    //  Set Attributes
                    _this.position = +_this.column.id;
                    _this.id = _this.column.id;
                    // Event Handlers
                    _this.trait.bubble = true; // passes bubble events up to parent
                    _this.dom.handler.bubble = function (core, event) {
                        _this.onBubbleEvent(event);
                    };
                    var tab = _this.srv.tab.getTab();
                    if (tab && tab.id) {
                        _this.ui.tabId = tab.id;
                    }
                    return resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this.dom.setSubscriber('name-reset', _this.column.reset.subscribe(function (e) { return _this._onColumnResetEvent(e); }));
                    _this._determineHeight();
                    // Attach Template Container
                    _this.template.attach('container');
                    //  Render the dynamic list of components
                    _this._templateRender();
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * The component should take a specific section/column of a defined tab, and dynamically render all of the components that belong in that section
         */
        PopEntityTabColumnComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Event handler for the parent tab to tell this column to reset itself
         * @param reset
         */
        PopEntityTabColumnComponent.prototype.onBubbleEvent = function (event) {
            this.log.event("onBubbleEvent", event);
            if (IsValidFieldPatchEvent(this.core, event) || event.type === 'context_menu') {
                this.events.emit(event);
            }
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityTabColumnComponent.prototype.ngOnDestroy = function () {
            this._setScrollTop();
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Event handler for the parent tab to tell this column to reset itself
         * @param reset
         */
        PopEntityTabColumnComponent.prototype._onColumnResetEvent = function (reset) {
            var _this = this;
            if (reset && typeof reset === 'boolean') {
                if (this.dom.delay.render)
                    clearTimeout(this.dom.delay.render);
                this.dom.delay.render = setTimeout(function () {
                    _this._templateRender();
                }, 250);
            }
            else if (typeof reset === 'string') {
                if (reset === 'scrollTop') {
                    this._setScrollTop();
                }
            }
        };
        /**
         * Helper function that determines what the height of this component should be
         *
         */
        PopEntityTabColumnComponent.prototype._determineHeight = function () {
            this.dom.state.hasHeader = this.column.header ? true : false;
            var columnHeight = StorageGetter(this.dom.repo, ['position', String(this.column.id), 'height'], 650);
            this.dom.height.outer = +columnHeight;
            this.dom.height.inner = this.dom.height.outer - 30;
        };
        /**
         * Helper function that renders the list of dynamic components
         *
         */
        PopEntityTabColumnComponent.prototype._templateRender = function () {
            var transfer = ['core', 'position'];
            if (IsObject(this.column.extension, true)) {
                this.extension = this.column.extension;
                transfer.push('extension');
            }
            var components = IsArray(this.column.components, true) ? this.column.components : [];
            this.template.render(components, transfer);
            this._applyScrollTop();
        };
        /**
         * Reaches up to the parent container and sets the current scroll position
         * The parent container component uses an *ngIf that prevents using @viewChild to do this
         */
        PopEntityTabColumnComponent.prototype._applyScrollTop = function () {
            var _this = this;
            setTimeout(function () {
                if (_this.dom.session.scroll && _this.ui.tabId && _this.dom.session.scroll[_this.ui.tabId]) {
                    _this.el.nativeElement.parentElement.scrollTop = _this.dom.session.scroll[_this.ui.tabId];
                }
            }, 0);
        };
        /**
         * Reaches up to the parent container and stores the current scroll position
         * The parent container component uses an *ngIf that prevents using @viewChild to do this
         */
        PopEntityTabColumnComponent.prototype._setScrollTop = function () {
            if (!this.dom.session.scroll)
                this.dom.session.scroll = {};
            if (this.ui.tabId) {
                this.dom.session.scroll[this.ui.tabId] = this.el.nativeElement.parentElement.scrollTop;
            }
        };
        return PopEntityTabColumnComponent;
    }(PopExtendDynamicComponent));
    PopEntityTabColumnComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-tab-column',
                    template: '<ng-template #container></ng-template>'
                },] }
    ];
    PopEntityTabColumnComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopTabMenuService }
    ]; };
    PopEntityTabColumnComponent.propDecorators = {
        column: [{ type: i0.Input }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }],
        extension: [{ type: i0.Input }]
    };

    var FieldInputSettingComponent = /** @class */ (function (_super) {
        __extends(FieldInputSettingComponent, _super);
        function FieldInputSettingComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.name = 'FieldInputSettingComponent';
            /**
             * Configure the specifics of this component
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.ui.param = new InputConfig({
                        label: _this.config.label,
                        name: _this.config.name,
                        value: IsDefined(_this.config.value) ? _this.config.value : _this.config.defaultValue,
                        readonly: _this.config.readonly,
                        patch: _this.config.patch
                    });
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component will product an html field to capture a field item setting value
         */
        FieldInputSettingComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Handle events from the data capture
         * @param event
         */
        FieldInputSettingComponent.prototype.onBubbleEvent = function (event) {
            this.events.emit(event);
        };
        /**
         * Clean up the dom of this component
         */
        FieldInputSettingComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return FieldInputSettingComponent;
    }(PopExtendComponent));
    FieldInputSettingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-asset-param',
                    template: "\n    <lib-pop-input (events)=\"onBubbleEvent($event);\" [config]=ui.param></lib-pop-input><div class=\"sw-mar-vrt-sm sw-clear\"></div>"
                },] }
    ];
    FieldInputSettingComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    FieldInputSettingComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var FieldLabelSettingComponent = /** @class */ (function () {
        function FieldLabelSettingComponent(commonRepo, changeDetectorRef) {
            this.commonRepo = commonRepo;
            this.changeDetectorRef = changeDetectorRef;
            this.state = {
                selected: 0,
                system: false,
                loaded: false,
                loading: false,
                error: { code: 0, message: '' },
            };
            this.subscriber = {
                data: undefined,
            };
            this.field = {
                type: '',
                items: undefined,
                active: {},
            };
            this.active = {
                item: undefined
            };
            this.models = {};
            this.configs = {};
        }
        FieldLabelSettingComponent.prototype.ngOnInit = function () {
        };
        return FieldLabelSettingComponent;
    }());
    FieldLabelSettingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-asset-param',
                    template: "\n    <div class=\"field-builder-param-container\">\n      <div class=\"field-builder-param-title-container mat-h2\">\n        <div class=\"field-builder-param-title\">{{config.name}}</div>\n      </div>\n    </div>"
                },] }
    ];
    FieldLabelSettingComponent.ctorParameters = function () { return [
        { type: PopCommonService },
        { type: i0.ChangeDetectorRef }
    ]; };
    FieldLabelSettingComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var FieldRadioSettingComponent = /** @class */ (function () {
        function FieldRadioSettingComponent(commonRepo, changeDetectorRef) {
            this.commonRepo = commonRepo;
            this.changeDetectorRef = changeDetectorRef;
            this.events = new i0.EventEmitter();
        }
        FieldRadioSettingComponent.prototype.ngOnInit = function () {
            this.param = new RadioConfig({
                label: this.config.label,
                name: this.config.name,
                layout: 'row',
                value: this.config.value,
                patch: this.config.patch,
                options: this.config.options
            });
        };
        FieldRadioSettingComponent.prototype.ngOnDestroy = function () {
        };
        return FieldRadioSettingComponent;
    }());
    FieldRadioSettingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-radio-param',
                    template: "<lib-pop-radio (events)=\"events.emit($event);\" [config]=param></lib-pop-radio><div class=\"sw-mar-vrt-sm sw-clear\"></div>"
                },] }
    ];
    FieldRadioSettingComponent.ctorParameters = function () { return [
        { type: PopCommonService },
        { type: i0.ChangeDetectorRef }
    ]; };
    FieldRadioSettingComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var FieldSelectSettingComponent = /** @class */ (function () {
        function FieldSelectSettingComponent() {
            this.events = new i0.EventEmitter();
            this.state = {
                selected: 0,
                system: false,
                loaded: false,
                loading: false,
                error: { code: 0, message: '' },
            };
            this.subscriber = {
                data: undefined,
            };
            this.field = {
                type: '',
                items: undefined,
                active: {},
            };
            this.active = {
                item: undefined
            };
            this.models = {};
            this.configs = {};
        }
        FieldSelectSettingComponent.prototype.ngOnInit = function () {
            this.param = new SelectConfig({
                label: this.config.label,
                name: this.config.name,
                value: this.config.value ? this.config.value : this.config.default,
                options: { values: ConvertArrayToOptionList(this.config.options.values) },
                patch: this.config.patch
            });
        };
        return FieldSelectSettingComponent;
    }());
    FieldSelectSettingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-select-setting',
                    template: "\n    <lib-pop-select (events)=\"events.emit($event);\" [config]=param></lib-pop-select><div class=\"sw-mar-vrt-sm sw-clear\"></div>"
                },] }
    ];
    FieldSelectSettingComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var FieldSwitchSettingComponent = /** @class */ (function () {
        function FieldSwitchSettingComponent(commonRepo, changeDetectorRef) {
            this.commonRepo = commonRepo;
            this.changeDetectorRef = changeDetectorRef;
            this.events = new i0.EventEmitter();
        }
        FieldSwitchSettingComponent.prototype.ngOnInit = function () {
            this.param = new SwitchConfig({
                label: this.config.label,
                name: this.config.name,
                value: this.config.value,
                patch: this.config.patch
            });
        };
        return FieldSwitchSettingComponent;
    }());
    FieldSwitchSettingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-switch-setting',
                    template: "<lib-pop-switch (events)=\"events.emit($event);\" [config]=param></lib-pop-switch>"
                },] }
    ];
    FieldSwitchSettingComponent.ctorParameters = function () { return [
        { type: PopCommonService },
        { type: i0.ChangeDetectorRef }
    ]; };
    FieldSwitchSettingComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var FieldTextareaSettingComponent = /** @class */ (function () {
        function FieldTextareaSettingComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this.events = new i0.EventEmitter();
        }
        FieldTextareaSettingComponent.prototype.ngOnInit = function () {
            this.param = new TextareaConfig({
                label: this.config.label,
                name: this.config.name,
                value: this.config.value ? this.config.value : this.config.default,
                height: 70,
            });
        };
        return FieldTextareaSettingComponent;
    }());
    FieldTextareaSettingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-textarea-setting',
                    template: "<lib-pop-textarea (events)=\"events.emit($event);\" [config]=param></lib-pop-textarea>"
                },] }
    ];
    FieldTextareaSettingComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    FieldTextareaSettingComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var PopEntityAssetComponentModalComponent = /** @class */ (function (_super) {
        __extends(PopEntityAssetComponentModalComponent, _super);
        function PopEntityAssetComponentModalComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.config = {};
            _this.name = 'PopEntityAssetComponentModalComponent';
            /**
             * Configure the specifics of this component
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component should have a purpose
         */
        PopEntityAssetComponentModalComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityAssetComponentModalComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityAssetComponentModalComponent;
    }(PopExtendComponent));
    PopEntityAssetComponentModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-asset-component-modal',
                    template: "<div class=\"profile-scheme-asset-container\" [style.height.px]=\"dom.height.outer\">\n  <div class=\"profile-scheme-asset-header\">\n    <div class=\"sw-label-container-sm\">Edit Component</div>\n  </div>\n\n  <div class=\"profile-scheme-asset-content\">\n    <div class=\"profile-scheme-asset-section-wrapper\">\n      <div class=\"profile-scheme-asset-header pt-02\">\n        <div>{{config.asset.name}} Attributes</div>\n        <!--<div class=\"profile-scheme-asset-item-label-helper\">-->\n        <!--<div class=\"sw-pop-icon profile-scheme-asset-section-header-helper-icon\"-->\n        <!--matTooltip=\"{{dom.asset['fieldItemHelper']}}\"-->\n        <!--matTooltipPosition=\"left\">X-->\n        <!--</div>-->\n        <!--</div>-->\n      </div>\n      <mat-divider></mat-divider>\n      Content\n      <!--<div class=\"profile-scheme-asset-item sw-pointer\" [ngClass]=\"{'profile-scheme-asset-active-selection':dom.active['item']?.entityId === item.entityId}\" (click)=\"onActiveItemSelection(item);\">-->\n        <!--<div class=\"profile-scheme-asset-item-active-selector\" (click)=\"$event.stopPropagation()\">-->\n          <!--&lt;!&ndash;<lib-pop-checkbox *ngIf=\"dom.active['items'][item.entityId]\" [config]=\"dom.active['items'][item.entityId]\" (events)=\"onItemActiveChange($event);\"></lib-pop-checkbox>&ndash;&gt;-->\n        <!--</div>-->\n        <!--<div class=\"profile-scheme-asset-item-label-name\">{{item.name}}</div>-->\n        <!--<div class=\"profile-scheme-asset-item-label-helper\">-->\n          <!--<div class=\"sw-pop-icon profile-scheme-asset-item-helper-icon\"-->\n               <!--matTooltip=\"{{item.display}}\"-->\n               <!--matTooltipPosition=\"left\">X-->\n          <!--</div>-->\n        <!--</div>-->\n      <!--</div>-->\n    </div>\n\n    <div class=\"profile-scheme-asset-section-wrapper\">\n      asDAsd\n    </div>\n\n    <div class=\"profile-scheme-asset-section-wrapper\">\n      SDAFSADF\n    </div>\n\n  </div>\n</div>\n",
                    styles: [".profile-scheme-asset-container{min-width:700px;flex-direction:column}.profile-scheme-asset-container,.profile-scheme-asset-content{position:relative;display:flex;height:100%;box-sizing:border-box}.profile-scheme-asset-content{width:100%;flex-direction:row}.profile-scheme-asset-section-wrapper{flex:1;border:1px solid var(--border);width:300px;margin:15px;box-sizing:border-box}.profile-scheme-asset-item:hover{background-color:var(--darken02)}.profile-scheme-asset-header{position:relative;display:flex;flex-direction:row;height:40px;padding:0 5px 0 10px;align-items:center;justify-content:space-between;font-size:1em;font-weight:700;clear:both;box-sizing:border-box}.profile-scheme-asset-item{justify-content:flex-start;border-bottom:1px solid var(--border);padding-left:5px}.profile-scheme-asset-item,.profile-scheme-asset-item-active-selector{display:flex;align-items:center;box-sizing:border-box;-moz-box-sizing:border-box}.profile-scheme-asset-item-active-selector{position:relative;flex-direction:row;width:15%;justify-content:center}.profile-scheme-asset-active-selection{padding-left:0!important;border-left:5px solid var(--primary)}.profile-scheme-asset-item-label-name{width:75%;align-items:center;justify-content:start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.profile-scheme-asset-item-label-helper{display:flex;width:10%;align-items:center;justify-content:center;min-height:40px}.profile-scheme-asset-item-helper-icon{margin-top:10px;margin-right:2px;width:20px;height:20px;font-size:.7em;z-index:2}"]
                },] }
    ];
    PopEntityAssetComponentModalComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PopEntityAssetComponentModalComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopEntityAssetFieldModalComponent = /** @class */ (function (_super) {
        __extends(PopEntityAssetFieldModalComponent, _super);
        function PopEntityAssetFieldModalComponent(el, dialogRef, _containerRepo, _domRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.dialogRef = dialogRef;
            _this._containerRepo = _containerRepo;
            _this._domRepo = _domRepo;
            _this.config = {};
            _this.name = 'PopEntityAssetFieldModalComponent';
            _this.srv = {
                container: undefined,
                field: exports.ServiceInjector.get(PopFieldEditorService),
            };
            _this.asset = {
                defaultContentHeight: undefined,
                model: new Map(),
                config: new Map(),
                coreField: undefined,
                coreFields: undefined,
                coreFieldItems: undefined,
                params: undefined,
                map: {}
            };
            _this.ui = {
                activeConfigs: {},
                field: undefined,
                name: undefined,
                items: [],
                sections: [],
                map: {
                    items: {}
                }
            };
            _this.extendServiceContainer();
            _this.srv.container.onContainerCreated(function (container) {
                _this.template.attach(container);
                _this._setActiveItemParamConfiguration();
            });
            /**
             * Configure the specifics of this component
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.internal_name = IsStringError(_this.config.asset.fieldgroup.name, true, _this.name + ":configureDom - internal_name") ? _this.config.asset.fieldgroup.name : '';
                    var defaultHeight = +(window.innerHeight * .75) - 60;
                    _this.dom.setHeight(defaultHeight, 50);
                    _this.dom.height.content = _this.dom.height.inner - 200;
                    _this.dom.active.items = {};
                    _this.asset.defaultContentHeight = _this.dom.height.content;
                    _this.asset.coreFields = IsArrayThrowError(_this.core.resource.fields.data_values, true, _this.name + ": - this.core.entity.resource.fields") ? ArrayKeyBy(_this.core.resource.fields.data_values, 'name') : {};
                    _this.asset.params = _this.srv.field.getViewParams();
                    _this.asset.coreField = IsObjectThrowError(_this.asset.coreFields[_this.internal_name], true, _this.name + ": - this.asset.coreFields[ this.internal_name ]") ? _this.asset.coreFields[_this.internal_name] : {};
                    _this.asset.coreFieldItems = IsArrayThrowError(_this.asset.coreField.items, true, _this.name + ": - this.asset.coreField.items") ? ArrayKeyBy(_this.asset.coreField.items, 'name') : {};
                    _this.ui.field = _this.config.asset;
                    _this.ui.sections = [];
                    _this.ui.name = new InputConfig({
                        value: _this.ui.field.name,
                        readonly: true
                    });
                    _this.ui.map.items = {};
                    var items = IsArrayThrowError(_this.config.asset.items, true, _this.name + ":configureDom: - this.config.asset.items") ? JSON.parse(JSON.stringify(_this.config.asset.items)) : [];
                    // const items = this.srv.common.isArray(this.config.asset.items, true, `${this.name}:configureDom - items`) ? JSON.parse(JSON.stringify(this.asset.coreField.items)) : {};
                    items.map(function (item, index) {
                        item = CleanObject(item, {
                            blacklist: ['entries', 'object_name', 'depth_level', 'storage']
                        });
                        var coreFieldItem = _this.asset.coreFieldItems[item.name];
                        coreFieldItem.rules = ArrayKeyBy(coreFieldItem.itemrules, 'name');
                        // console.log('coreFieldItem', coreFieldItem);
                        item.required = _this.srv.field.getViewRequired(_this.asset.coreField.name, item.name);
                        if (item.required)
                            item.active = 1;
                        if (+item.active) {
                            item.name = SnakeToPascal(item.name);
                            item.model = {
                                id: item.id,
                                name: item.name,
                                label: item.label,
                            };
                            item.config = {
                                options: {
                                    values: item.options
                                }
                            };
                            if (IsObject(item.view, ['name']))
                                item.model.form = item.view.name;
                            if (IsObject(item.rules, true))
                                item.model = Object.assign(Object.assign({}, item.model), item.rules);
                            if (IsObject(item.settings, true))
                                item.model = Object.assign(Object.assign({}, item.model), item.settings);
                            _this.dom.active.items[item.name] = item.active;
                            _this.asset.model.set(item.name, item.model);
                            _this.asset.config.set(item.name, item.config);
                            _this.ui.activeConfigs[item.name] = new CheckboxConfig({
                                id: item.id,
                                name: 'active',
                                disabled: item.required ? true : false,
                                value: +item.active,
                                // patch: column.required ? null : {
                                //   field: 'active',
                                //   path: `cis/fields/${this.config.id}/item/${column.id}`,
                                //   displayIndicator: false,
                                // }
                            });
                            _this.ui.items.push(item);
                        }
                        _this.ui.map.items[item.name] = index;
                    });
                    _this.ui.sections = [
                        {
                            id: 'params',
                            name: 'Params',
                            inputs: {},
                            component: null,
                            metadata: {},
                            requireRefresh: false,
                            active: true,
                        },
                        {
                            id: 'options',
                            name: 'Options',
                            inputs: {},
                            component: null,
                            metadata: {},
                            requireRefresh: false,
                            active: true,
                        },
                        // {
                        //   id: 'defaultValues',
                        //   name: 'Default Values',
                        //   inputs: {},
                        //   component: DemoTwoComponent,
                        //   metadata: {},
                        //   requireRefresh: false,        // require an api call to refresh the entity on every load
                        // }
                    ];
                    if (_this.ui.items[0]) {
                        // this.onSelection(this.ui.items[ 0 ]);
                        // if( this.dom.active.item ){
                        // setTimeout(() => {
                        _this.onActiveItemSelection(_this.ui.items[0]);
                        // });
                        // }
                    }
                    return resolve(true);
                });
            };
            return _this;
        }
        PopEntityAssetFieldModalComponent.prototype.extendServiceContainer = function () {
            this.srv.container = this._containerRepo;
            delete this._containerRepo;
        };
        /**
         * This component will allow a user to configure custom settings for each of items that it holds
         * The CoreConfig of this component will be a specific scheme
         * The config of this component is expected to be a scheme asset that is of type field
         */
        PopEntityAssetFieldModalComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * The user will be able to active/deactive a specific item in the list of items for this field
         * @param item
         */
        PopEntityAssetFieldModalComponent.prototype.onItemStatusChange = function (event) {
            if (event.type === 'field' && event.name === 'patch' && event.success) {
                this.log.event('onItemStatusChange', event);
                this.dom.active.items[event.config.id] = +event.config.control.value;
            }
        };
        /**
         * The user will be able to select from a list of item an active item in which to configure settings
         * @param item
         */
        PopEntityAssetFieldModalComponent.prototype.onActiveItemSelection = function (item) {
            console.log('onActiveItemSelection', item);
            this.dom.active.item = item;
            if (this.dom.active.item.options)
                this._setActiveItemOptionConfiguration();
            this.dom.active.model = IsObjectThrowError(this.dom.active.item.model, true, this.name + ":onSelection - model") ? JSON.parse(JSON.stringify(this.dom.active.item.model)) : {};
            // this.dom.active.params = IsObjectThrowError(this.dom.active.item.config, true, `${this.name}:onSelection - config`) ? JSON.parse(JSON.stringify(this.dom.active.item.config)) : {};
            // this.dom.active.config = IsObjectThrowError(this.config.asset.items[ this.ui.map.items[ item.name ] ].config, true, `${this.name}:onSelection - config`) ? JSON.parse(JSON.stringify(this.config.asset.items[ this.ui.map.items[ item.name ] ].config)) : {};
            if (this.dom.active.item.id && this.dom.session[this.dom.active.item.id]) {
                this.onActiveItemSettingSectionSelection(this.dom.session[this.dom.active.item.id]);
            }
            else {
                this.onActiveItemSettingSectionSelection(this.ui.sections[0]); // params
            }
            this._setActiveItemParamConfiguration();
        };
        /**
         * The user needs the changes it active item options to be saved to the database
         * @param event
         */
        PopEntityAssetFieldModalComponent.prototype.onSaveActiveItemOptions = function (event) {
            console.log('triggerSaveFieldOptions:stub', event);
        };
        /**
         * There might be multiple tab sections to the setting of this active item
         * @param section
         */
        PopEntityAssetFieldModalComponent.prototype.onActiveItemSettingSectionSelection = function (section) {
            this.dom.active.section = section.id;
            this.dom.session[this.dom.active.item.id] = section;
        };
        /**
         * The user is able to sort the options that should be used to populate the field, if applicable
         */
        PopEntityAssetFieldModalComponent.prototype.onActiveItemOptionSortDrop = function (event) {
            dragDrop.moveItemInArray(this.dom.active.options, event.previousIndex, event.currentIndex);
            this.onSaveActiveItemOptions({ name: 'onChange' });
        };
        /**
         * The user should be able to click a button to close the modal
         */
        PopEntityAssetFieldModalComponent.prototype.onModalClose = function () {
            this.dialogRef.close(0);
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityAssetFieldModalComponent.prototype.ngOnDestroy = function () {
            this.template.destroy();
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntityAssetFieldModalComponent.prototype._setActiveItemParamConfiguration = function () {
            var _this = this;
            if (IsObject(this.dom.active.config, true) && IsObject(this.dom.active.params, true)) {
                this._getParamConfigurationComponentList(this.dom.active.config, this.dom.active.params).then(function (paramComponentList) {
                    _this.template.render(paramComponentList, [], true);
                });
            }
        };
        PopEntityAssetFieldModalComponent.prototype._getParamConfigurationComponentList = function (fieldItem, params) {
            var _this = this;
            return new Promise(function (resolve) {
                var paramComponentList = [];
                var component;
                var configInterface;
                if (_this.dom.active.model.form in _this.asset.params) {
                    Object.keys(params).map(function (paramKey) {
                        if (paramKey in _this.asset.params[_this.dom.active.model.form]) {
                            configInterface = Object.assign({
                                name: TitleCase(SnakeToPascal(paramKey)),
                                value: fieldItem[paramKey],
                                column: paramKey,
                                readonly: ['api', 'column'].includes(paramKey) ? true : false,
                                patch: { field: paramKey, path: fieldItem.api_path + "/config" }
                            }, params[paramKey]);
                            configInterface.patch.path = ''; // ToDo: need to be the correct path to save setting to profile_scheme setting storage????
                            // console.log('configInterface', configInterface);
                            component = {
                                type: _this._determineParamSettingComponent(paramKey),
                                inputs: {
                                    config: configInterface,
                                }
                            };
                            paramComponentList.push(component);
                        }
                    });
                }
                resolve(paramComponentList);
            });
        };
        /**
         * Determine the correct component for the form type
         * @param form
         */
        PopEntityAssetFieldModalComponent.prototype._determineParamSettingComponent = function (form) {
            switch (form) {
                case 'label':
                    return FieldLabelSettingComponent;
                    break;
                case 'display':
                case 'api':
                case 'column':
                case 'sort_top':
                case 'sort':
                case 'helpText':
                    return FieldInputSettingComponent;
                    break;
                case 'select':
                case 'mask':
                case 'pattern':
                case 'maxlength':
                case 'transformation':
                    return FieldSelectSettingComponent;
                    break;
                case 'hidden':
                case 'visible':
                case 'disabled':
                case 'readonly':
                case 'required':
                    return FieldSwitchSettingComponent;
                    break;
                case 'layout':
                    return FieldRadioSettingComponent;
                    break;
                case 'metadata':
                    return FieldTextareaSettingComponent;
                    break;
                default:
                    return FieldLabelSettingComponent;
            }
        };
        PopEntityAssetFieldModalComponent.prototype._setActiveItemOptionConfiguration = function () {
            var _this = this;
            this.dom.active.options = [];
            if (this.dom.active.item.options && Array.isArray(this.dom.active.item.options.values)) {
                this.dom.active.item.options.values.map(function (option, index) {
                    option.sort = index;
                    if (typeof option.active !== 'boolean')
                        option.active = true;
                    if (typeof option.name !== 'string')
                        option.name = '';
                    if (typeof option.value !== 'string')
                        option.value = '';
                    _this.dom.active.options.push({
                        active: new CheckboxConfig({
                            label: null,
                            value: +option.active,
                            bubble: true,
                        }),
                        name: new InputConfig({
                            label: null,
                            value: option.name,
                            validators: [forms.Validators.required],
                            transformation: 'title',
                            bubble: true,
                            pattern: 'AlphaNoSpaceOnlyDash',
                            maxlength: 12,
                            readonly: true
                        }),
                        value: new InputConfig({
                            label: null,
                            value: option.value || 0,
                            bubble: true,
                            pattern: 'AlphaNumeric',
                            transformation: 'lower',
                            maxlength: 128,
                            readonly: true
                        }),
                        sort: new InputConfig({
                            label: null,
                            value: option.sort || 0,
                            bubble: true,
                        }),
                    });
                });
            }
            else {
                this.onActiveItemSettingSectionSelection(this.ui.sections[0]); // params
            }
        };
        return PopEntityAssetFieldModalComponent;
    }(PopExtendDynamicComponent));
    PopEntityAssetFieldModalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-asset-field-modal',
                    template: "<div class=\"entity-scheme-asset-container\" *ngIf=\"dom.state.loaded\" [style.height.px]=\"dom.height.inner\">\n  <div class=\"entity-scheme-asset-header\">\n    <div class=\"sw-label-container-sm\">Edit Field</div>\n  </div>\n  <div class=\"entity-scheme-asset-row sw-mar-top-md\">\n    <div class=\"entity-scheme-asset-divider sw-disabled\">\n      <h4>{{ui.field.name}}</h4>\n      <!--<lib-pop-input class=\"sw-disabled\" [config]=\"ui.name\"></lib-pop-input>-->\n    </div>\n\n    <div class=\"entity-scheme-asset-divider\"></div>\n  </div>\n  <div class=\"entity-scheme-asset-content\">\n    <div class=\"entity-scheme-asset-section-wrapper\">\n      <div class=\"entity-scheme-asset-header pt-02\">\n        <div>Attributes</div>\n        <div class=\"entity-scheme-asset-item-label-helper\">\n          <div class=\"sw-pop-icon entity-scheme-asset-section-header-helper-icon\"\n               matTooltip=\"{{ui.field.fieldgroup.description}}\"\n               matTooltipPosition=\"left\">X\n          </div>\n        </div>\n      </div>\n      <mat-divider></mat-divider>\n      <div class=\"entity-scheme-asset-item sw-pointer\" [ngClass]=\"{'entity-scheme-asset-active-selection':dom.active['item']?.id === item.id}\" *ngFor=\"let item of ui.items\" (click)=\"onActiveItemSelection(item);\">\n        <div class=\"entity-scheme-asset-item-active-selector\" (click)=\"$event.stopPropagation()\">\n          <lib-pop-checkbox *ngIf=\"ui.activeConfigs[item.name]\" [config]=\"ui.activeConfigs[item.name]\" (events)=\"onItemStatusChange($event);\"></lib-pop-checkbox>\n        </div>\n        <div class=\"entity-scheme-asset-item-label-name\">{{item.name}}</div>\n        <div class=\"entity-scheme-asset-item-label-helper\">\n          <div class=\"sw-pop-icon entity-scheme-asset-item-helper-icon\"\n               matTooltip=\"{{item.display}}\"\n               matTooltipPosition=\"left\">X\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"entity-scheme-asset-section-wrapper\">\n      <div class=\"entity-scheme-asset-header pt-02\">\n        <div>{{dom.active.item?.name}} Settings</div>\n        <div class=\"entity-field-editor-item-label-helper\">\n          <div class=\"sw-pop-icon entity-scheme-asset-section-header-helper-icon\"\n               matTooltip=\"{{dom.active.item?.description}}\"\n               matTooltipPosition=\"left\">X\n          </div>\n        </div>\n      </div>\n      <mat-divider></mat-divider>\n      <div class=\"entity-scheme-asset-setting-header\" [ngClass]=\"{'sw-hidden': !dom.active.item?.options}\">\n        <nav mat-tab-nav-bar>\n          <a mat-tab-link\n             *ngFor=\"let section of ui.sections\"\n             (click)=\"onActiveItemSettingSectionSelection(section)\"\n             [ngClass]=\"{'sw-hidden':!section.active}\"\n             [active]=\"dom.active.section === section.id\">\n            {{section.name}}\n          </a>\n        </nav>\n      </div>\n      <div class=\"entity-scheme-asset-setting-content entity-scheme-asset-setting-active-config\">\n        <div class=\"entity-scheme-asset-setting-content\" [ngClass]=\"{'sw-hidden':dom.active.section !== 'params' }\" [style.height.px]=\"dom.height.content\">\n          <ng-container libTemplateContainer></ng-container>\n        </div>\n\n        <div class=\"entity-scheme-asset-setting-content\" [ngClass]=\"{'sw-hidden': dom.active.section !== 'options'}\" [style.height.px]=\"dom.height.content\">\n          <div class=\"entity-scheme-asset-setting-options-headers\">\n            <div class=\"entity-scheme-asset-setting-options-sort\">\n              Sort\n            </div>\n            <div class=\"entity-scheme-asset-setting-options-active\">\n              Active\n            </div>\n            <div class=\"entity-scheme-asset-setting-options-input\">\n              <label>Name</label>\n            </div>\n            <div class=\"entity-scheme-asset-setting-options-input\">\n              Value\n            </div>\n            <div class=\"entity-scheme-asset-setting-options-icon \">\n              <!--<i class=\"material-icons entityId-scheme-asset-setting-options-new sw-pointer sw-hover\" matTooltip=\"Add\"-->\n              <!--(click)=\"addFieldItemOption()\" [ngClass]=\"{'sw-hidden':dom.active.item?.options.enum}\">-->\n              <!--add-->\n              <!--</i>-->\n            </div>\n          </div>\n          <mat-divider></mat-divider>\n          <div class=\"entity-scheme-asset-setting-options-container\" cdkDropList (cdkDropListDropped)=\"onActiveItemOptionSortDrop($event)\">\n            <div class=\"entity-scheme-asset-setting-options-headers\" *ngFor=\"let option of dom.active.options; let i = index;\" cdkDrag cdkDragLockAxis=\"y\" cdkDragBoundary=\".entity-scheme-asset-setting-options-container\">\n              <div class=\"entity-scheme-asset-setting-options-sort\">\n                <i class=\"entity-scheme-asset-handle material-icons\" cdkDragHandle>drag_indicator</i>\n              </div>\n              <div class=\"entity-scheme-asset-setting-options-active\">\n                <lib-pop-checkbox (events)=\"onSaveActiveItemOptions($event);\" [config]=\"option.active\"></lib-pop-checkbox>\n              </div>\n              <div class=\"entity-scheme-asset-setting-options-input sw-mar-rgt-md\">\n                <lib-pop-input [config]=\"option.name\"></lib-pop-input>\n              </div>\n              <div class=\"entity-scheme-asset-setting-options-input\" [ngClass]=\"{'sw-disabled':dom.active.item?.options?.enum}\">\n                <lib-pop-input [config]=\"option.value\"></lib-pop-input>\n              </div>\n              <div class=\"entity-scheme-asset-setting-options-icon \" matTooltip=\"Remove\">\n                <!--<i class=\"material-icons entityId-scheme-asset-setting-options-new sw-pointer sw-hover\"-->\n                <!--(click)=\"removeFieldItemOption(i)\" [ngClass]=\"{'sw-hidden':dom.active.item.options.enum}\">-->\n                <!--remove-->\n                <!--</i>-->\n              </div>\n              <div class=\"entity-scheme-asset-setting-options-headers\" *cdkDragPreview></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n\n  <div class=\"entity-scheme-asset-row entity-scheme-asset-buttons\">\n    <!--<div class=\"in-pop-table-dialog-cancel\">-->\n    <!--<button mat-raised-button (click)=\"onCancel();\">Cancel</button>-->\n    <!--</div>-->\n\n    <div class=\"in-dialog-other\">\n      <button mat-raised-button (click)=\"onModalClose()\">Close</button>\n    </div>\n  </div>\n\n</div>\n",
                    providers: [PopContainerService],
                    styles: [".entity-scheme-asset-container{min-width:700px;flex-direction:column}.entity-scheme-asset-container,.entity-scheme-asset-content{position:relative;display:flex;height:100%;box-sizing:border-box}.entity-scheme-asset-content{width:100%;flex-direction:row}.entity-scheme-asset-row{position:relative;display:flex;flex-direction:row;height:40px;align-items:center;clear:both;box-sizing:border-box}.entity-scheme-asset-divider,.entity-scheme-asset-section-wrapper{flex:1;width:300px;margin:15px;box-sizing:border-box}.entity-scheme-asset-section-wrapper{border:1px solid var(--border)}.entity-scheme-asset-item:hover{background-color:var(--darken02)}.entity-scheme-asset-header{position:relative;display:flex;flex-direction:row;height:40px;padding:0 5px 0 15px;align-items:center;justify-content:space-between;font-size:1em;font-weight:700;clear:both;box-sizing:border-box}.entity-scheme-asset-item{display:flex;align-items:center;justify-content:flex-start;border-bottom:1px solid var(--border);box-sizing:border-box;padding-left:5px;-moz-box-sizing:border-box}.entity-scheme-asset-item ::ng-deep .pop-checkbox-container{margin-top:0!important}.entity-scheme-asset-item-active-selector{position:relative;display:flex;flex-direction:row;width:15%;box-sizing:border-box;-moz-box-sizing:border-box;align-items:center;justify-content:center}.entity-scheme-asset-active-selection{padding-left:0!important;border-left:5px solid var(--primary)}.entity-scheme-asset-item-label-name{width:75%;align-items:center;justify-content:start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.entity-scheme-asset-item-label-helper{display:flex;width:10%;align-items:center;justify-content:center;min-height:40px}.entity-scheme-asset-item-helper-icon{margin-top:10px;margin-right:2px;width:20px;height:20px;font-size:.7em;z-index:2}.entity-scheme-asset-buttons{margin:0 15px 10px;display:flex;justify-content:flex-end}.entity-scheme-asset-buttons .in-dialog-cancel{order:1;flex-grow:1;display:flex;justify-content:flex-start}.entity-scheme-asset-buttons .in-dialog-other{order:2;flex-grow:2;display:flex;justify-content:flex-end;margin-left:10px}.entity-scheme-asset-setting-wrapper{position:relative;flex:1;border:1px solid var(--border);border-bottom:none;box-sizing:border-box;-moz-box-sizing:border-box;overflow-x:hidden;overflow-y:scroll}.entity-scheme-asset-setting-header{position:relative}.entity-scheme-asset-setting-content{flex:1;padding:10px 15px 10px 10px;box-sizing:border-box;min-height:100px;overflow-y:scroll;overflow-x:hidden}.entity-scheme-asset-setting-active-config{border-left:5px solid var(--primary)}.entity-scheme-asset-setting-options-headers{display:flex;align-items:center;justify-content:flex-start;margin-top:2px;height:32px}.entity-scheme-asset-setting-options-sort{display:flex;width:10%;align-items:center;justify-content:center}.entity-scheme-asset-setting-options-active{display:flex;width:75px;text-align:center;align-items:center;justify-content:center}.entity-scheme-asset-setting-options-input{display:flex;width:30%;flex-grow:1}.entity-scheme-asset-setting-options-icon{display:flex;width:50px;align-items:center;justify-content:center}.entity-scheme-asset-setting-options-new{float:right}.entity-scheme-asset-setting-options-container{position:relative;width:100%;min-height:30px;padding:5px 0;box-sizing:border-box}.entity-scheme-asset-handle{cursor:move}.entity-scheme-btm-border{border-bottom:1px solid var(--border)}:host ::ng-deep .entity-scheme-asset-setting-options-container .mat-form-field-infix{width:auto;padding:6px!important;margin-top:6px!important;border:0!important}:host ::ng-deep .entity-scheme-asset-setting-options-container .pop-input-container{margin:2px}:host ::ng-deep .entity-scheme-asset-setting-options-container .pop-input-feedback-container{margin-top:-4px}:host ::ng-deep .entity-scheme-asset-setting-reset-box{position:relative;display:block;margin:0;padding:0;width:100%}:host ::ng-deep .entity-scheme-asset-setting-box .pop-textarea-container,:host ::ng-deep .entity-scheme-asset-setting-reset-box .pop-input-container,:host ::ng-deep .entity-scheme-asset-setting-reset-box .pop-select-container{margin:2px 0}"]
                },] }
    ];
    PopEntityAssetFieldModalComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1$2.MatDialogRef },
        { type: PopContainerService },
        { type: PopDomService }
    ]; };
    PopEntityAssetFieldModalComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var EntitySchemeLayoutSectionComponent = /** @class */ (function (_super) {
        __extends(EntitySchemeLayoutSectionComponent, _super);
        /**
         * @param el
         * @param _domRepo - transfer
         * @param _schemeRepo - transfer
         */
        function EntitySchemeLayoutSectionComponent(el, _domRepo, _schemeRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._schemeRepo = _schemeRepo;
            _this.section = {};
            _this.name = 'EntitySchemeLayoutSectionComponent';
            _this.srv = {
                scheme: undefined
            };
            _this.ui = {
                header: undefined,
                primaryIds: []
            };
            _this.dom.session.expanded = {};
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                // #1: Enforce a CoreConfig
                                this.core = IsObjectThrowError(this.core, true, this.name + ":configureDom: - this.core") ? this.core : null;
                                this.id = this.section.position;
                                this.ui.primaryIds = this.srv.scheme.ui.primaryIds;
                                this._buildHeader();
                                return [4 /*yield*/, this.dom.setWithComponentInnerHeight('PopEntityTabColumnComponent', this.section.position, 75, 700)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * The purpose of this component is to manage a specific section of the scheme layout
         * A user should be able to drag as sort assets, and apply custom settings to an asset
         * An asset is basically refers to something that the user can position in the scheme layout, field, component, etc
         */
        EntitySchemeLayoutSectionComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * A user can dragSort assets from one column to another in the scheme layout
         * @param event
         */
        EntitySchemeLayoutSectionComponent.prototype.onAssetSortDrop = function (event) {
            this.srv.scheme.onAssetSortDrop(event);
        };
        /**
         * A user can click on an edit button an edit the config settings of an asset
         * @param asset
         */
        EntitySchemeLayoutSectionComponent.prototype.onEditAsset = function (asset) {
            var _this = this;
            this.dom.setTimeout('edit-asset', function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.srv.scheme.onEditAsset(asset)];
                        case 1:
                            _a.sent();
                            if (this.dom.session.expanded[asset.id]) {
                                this.onExpandAssetContent(asset);
                                this.dom.setTimeout('reset-asset', function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        this.onExpandAssetContent(asset);
                                        return [2 /*return*/];
                                    });
                                }); }, 0);
                            }
                            return [2 /*return*/];
                    }
                });
            }); }, 0);
        };
        /**z
         * A user can click on a toggle to expand/close the content section of an asset
         * @param asset
         */
        EntitySchemeLayoutSectionComponent.prototype.onExpandAssetContent = function (asset) {
            if (asset.id) {
                this.dom.session.expanded[asset.id] = !this.dom.session.expanded[asset.id];
            }
        };
        /**
         * Triggers when user mouseleaves an asset
         * @param asset
         */
        EntitySchemeLayoutSectionComponent.prototype.onHideAssetMenu = function (asset) {
            asset.menu = false;
        };
        /**
         * Triggers when user mouseenters an asset
         * @param asset
         */
        EntitySchemeLayoutSectionComponent.prototype.onShowAssetMenu = function (asset) {
            if (asset.asset_type != 'table') {
                asset.menu = true;
            }
        };
        /**
         * A user can click a remove button to remove an asset/child from the scheme layout
         * @param position
         * @param asset
         */
        EntitySchemeLayoutSectionComponent.prototype.onRemoveChildFromLayout = function (position, child) {
            // console.log( 'onRemoveChildFromLayout', position, child );
            this.srv.scheme.onRemoveChildFromLayout(position, child).then(function () {
            });
        };
        /**
         * Clean up the dom of this component
         */
        EntitySchemeLayoutSectionComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        EntitySchemeLayoutSectionComponent.prototype._buildHeader = function () {
            this.ui.header = new InputConfig({
                value: this.section.name,
                label: "Column " + this.section.position,
                pattern: 'AlphaNumeric',
                maxlength: 24,
                // hint: true,
                // transformation: 'toTitleCase',
                // hintText: 'This text will appear as a Header',
                patch: {
                    field: 'name',
                    path: "profile-schemes/" + this.section.id
                }
            });
        };
        return EntitySchemeLayoutSectionComponent;
    }(PopExtendComponent));
    EntitySchemeLayoutSectionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-entity-scheme-layout-section',
                    template: "<div class=\"entity-scheme-asset-layout-section\" *ngIf=\"dom.state.loaded\">\n  <mat-accordion\n    class=\"entity-scheme-asset-list\"\n    multi=\"true\"\n    [displayMode]=\"'flat'\"\n    [style.height.px]=dom.height.outer>\n    <div class=\"entity-scheme-asset-layout-section-header\">\n      <!--<div>{{section.name}}</div>-->\n      <lib-pop-input [config]=\"ui.header\"></lib-pop-input>\n    </div>\n    <div class=\"entity-scheme-asset-list-content\"\n         cdkDropList\n         id=\"column-{{section.position}}\"\n         [attr.data-position]=section.position\n         [attr.data-start-index]=section.startIndex\n         [attr.data-id]=section.id\n         [cdkDropListData]=\"section.children\"\n         (cdkDropListDropped)=\"onAssetSortDrop($event)\"\n         [cdkDropListEnterPredicate]=\"section.predicate\"\n         [style.height.px]=dom.height.inner>\n      <div class=\"sw-mar-vrt-xs sw-clear\"></div>\n      <div *ngFor=\"let child of section.children\">\n\n        <div class=\"entity-scheme-asset\" *ngIf=\"child.container\">\n          Container\n        </div>\n\n        <div class=\"entity-scheme-asset\" *ngIf=\"!child.container\"\n             [ngClass]=\"{'entity-scheme-asset-field-container': true, 'sw-disabled': child.asset_type === 'table'}\"\n             (mouseenter)=\"onShowAssetMenu(child)\"\n             (mouseleave)=\"onHideAssetMenu(child)\"\n             cdkDrag\n             (cdkDragDrop)=\"onAssetSortDrop($event)\"\n             [cdkDragData]=\"{id: child.id, asset_id: child.asset_id,asset_type: child.asset_type, position: section.position, compact: child.compact}\"\n             cdkDragBoundary=\".entity-scheme-asset-layout-container\">\n          <div class=\"import-flex-row\">\n            <div class=\"import-flex-column-break import-flex-column import-flex-start-center\" [style.maxWidth.px]=\"12\">\n              <i *ngIf=\"child.asset.required\" class=\"sw-pointer entity-scheme-required\" [matTooltip]=\"'required'\">\n                *\n              </i>\n            </div>\n            <div class=\"import-flex-column-break import-flex-column\">\n              <div class=\"entity-scheme-asset-layout-row\">\n                <div class=\"entity-scheme-asset-handle\" [ngClass]=\"{'entity-scheme-asset-handle-disabled': child.asset_type === 'table'}\" cdkDragHandle>\n                  <!--<div>-->\n                    {{child.name}}\n                  <!--</div>-->\n                </div>\n                <div class=\"entity-scheme-asset-menu\" *ngIf=\"!child.menu\" [@fadeInOut]=\"'in'\">\n                  <div class=\"entity-scheme-asset-menu-icon\" *ngIf=\"child.asset.primary\">\n                    <i class=\"material-icons sw-pointer entity-scheme-primary\" [matTooltip]=\"'Primary'\">\n                      star\n                    </i>\n                  </div>\n                </div>\n                <!--<div class=\"entity-scheme-asset-trait-container\">-->\n                  <!--<mat-icon class=\"entity-scheme-asset-trait-icon sw-pointer\" *ngFor=\"let trait of entry.traits\" matTooltip=\"{{trait.label}}\" matTooltipPosition=\"above\">{{trait.icon}}</mat-icon>-->\n                <!--</div>-->\n                <div class=\"entity-scheme-asset-menu\" *ngIf=\"child.menu\" [@fadeInOut]=\"'in'\">\n                  <div class=\"entity-scheme-asset-menu-icon\">\n                    <i class=\"material-icons sw-pointer\"\n                       (click)=\"onEditAsset(child)\">\n                      edit\n                    </i>\n                  </div>\n                  <div class=\"entity-scheme-asset-menu-icon\" *ngIf=\"!child.asset.primary\">\n                    <i class=\"material-icons sw-pointer\"\n                       (click)=\"onRemoveChildFromLayout(section.position, child)\">\n                      clear\n                    </i>\n                  </div>\n\n                </div>\n              </div>\n              <div class=\"entity-scheme-asset-layout-subrow\" [ngSwitch]=\"child.asset_type\">\n                <div *ngSwitchCase=\"'table'\">Default Column</div>\n                <div *ngSwitchCase=\"'field'\">{{child.asset?.fieldgroup?.label}} Field</div>\n                <div *ngSwitchCase=\"'component'\">Component</div>\n              </div>\n            </div>\n\n          </div>\n          <div class=\"entity-scheme-asset-layout-content-row\" *ngIf=\"dom.session.expanded[child.id]\" [ngClass]=\"{'entity-scheme-asset-layout-row-expanded': dom.session.expanded[child.id]}\" [ngSwitch]=\"child.asset_type\">\n            <lib-entity-scheme-table-content *ngSwitchCase=\"'table'\" [core]=\"core\" [config]=\"child\"></lib-entity-scheme-table-content>\n            <lib-entity-scheme-field-content *ngSwitchCase=\"'field'\" [core]=\"core\" [config]=\"child\"></lib-entity-scheme-field-content>\n            <lib-entity-scheme-component-content *ngSwitchCase=\"'component'\" [core]=\"core\" [config]=\"child\"></lib-entity-scheme-component-content>\n          </div>\n          <div class=\"entity-scheme-asset-toggle-row sw-pointer\" *ngIf=\"child.id && child.asset && child.asset.multiple && child.asset.entries && child.asset.entries.length > 1\" (click)=\"onExpandAssetContent(child)\">\n            <div class=\"material-icons sw-pointer\" [ngClass]=\"{'sw-hidden': dom.session.expanded[child.id]}\">\n              expand_more\n            </div>\n            <div class=\"material-icons sw-pointer\" [ngClass]=\"{'sw-hidden': !dom.session.expanded[child.id]}\">\n              expand_less\n            </div>\n          </div>\n\n        </div>\n\n      </div>\n\n    </div>\n  </mat-accordion>\n</div>\n",
                    animations: [
                        fadeInOut,
                        slideInOut
                    ],
                    styles: [".entity-scheme-asset-layout-section-header{height:50px;padding:2px 5px;border-bottom:1px solid var(--border);box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host .entity-scheme-asset-layout-section-header ::ng-deep input{font-size:1.2em}:host .entity-scheme-asset-layout-section-header ::ng-deep mat-label{position:relative;top:2px;font-size:1.2em}:host .entity-scheme-asset-layout-section-header ::ng-deep .pop-input-container{margin:0!important;border:0!important}:host .entity-scheme-asset-layout-section-header ::ng-deep .mat-form-field-outline{color:transparent;display:none}"]
                },] }
    ];
    EntitySchemeLayoutSectionComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopEntitySchemeService }
    ]; };
    EntitySchemeLayoutSectionComponent.propDecorators = {
        section: [{ type: i0.Input }]
    };

    var EntitySchemeFieldContentComponent = /** @class */ (function (_super) {
        __extends(EntitySchemeFieldContentComponent, _super);
        /**
         * @param el
         * @param _schemeRepo - transfer
         * @param _fieldRepo - transfer
         */
        function EntitySchemeFieldContentComponent(el, _schemeRepo, _fieldRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._schemeRepo = _schemeRepo;
            _this._fieldRepo = _fieldRepo;
            _this.config = {};
            _this.name = 'EntitySchemeFieldContentComponent';
            _this.srv = {
                scheme: undefined,
                field: undefined,
            };
            _this.asset = {
                field: undefined,
                groupName: undefined,
                mapping: undefined,
                primary: undefined,
                traits: undefined,
                traitMap: {},
                entryTraitMap: {},
            };
            _this.ui = {
                entries: [],
                traits: [],
            };
            _this.dom.configure = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this._setInitialConfig()];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this._setEntryTraitMap()];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, this._setEntries()];
                            case 3:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        /**
         * This component is responsible to render the inner contents of field asset
         * A field asset is custom field that has been created on an entity in the business unit
         */
        EntitySchemeFieldContentComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Clean up the dom of this component
         */
        EntitySchemeFieldContentComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Set the initial config of this component
         * @private
         */
        EntitySchemeFieldContentComponent.prototype._setInitialConfig = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.asset.field = _this.config.asset;
                _this.asset.groupName = _this.config.asset.fieldgroup.name;
                _this.asset.mapping = _this.srv.scheme.getFieldMapping(+_this.config.asset_id);
                _this.asset.primary = _this.srv.field.getSchemePrimary(_this.core.entity);
                _this.dom.state.isPrimary = +_this.config.asset_id === _this.asset.primary[_this.asset.groupName];
                _this.asset.traits = _this.srv.field.getFieldTraits(_this.asset.field.fieldgroup.name).sort(DynamicSort('name'));
                _this.asset.traitMap = ArrayMapSetter(_this.asset.traits, 'name');
                return resolve(true);
            });
        };
        /**
         * Organizes the trait that should be assigned on this field
         * @private
         */
        EntitySchemeFieldContentComponent.prototype._setEntryTraitMap = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.asset.entryTraitMap = {};
                if (IsArray(_this.asset.traits, true) && IsObject(_this.asset.mapping.trait_entry, true)) {
                    Object.keys(_this.asset.mapping.trait_entry).map(function (traitName) {
                        var entryId = +_this.asset.mapping.trait_entry[traitName];
                        if (+entryId) {
                            if (!(IsArray(_this.asset.entryTraitMap[entryId]))) {
                                _this.asset.entryTraitMap[entryId] = [];
                            }
                            _this.asset.entryTraitMap[entryId].push(traitName);
                        }
                    });
                }
                return resolve(true);
            });
        };
        /**
         * Set the entries of this field
         * @private
         */
        EntitySchemeFieldContentComponent.prototype._setEntries = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var _a;
                _this.ui.entries = [];
                (_a = _this.ui.entries).push.apply(_a, __spreadArray([], __read(_this.asset.field.entries)));
                if (IsObject(_this.config, ['asset'])) {
                    if (IsArray(_this.ui.entries, true)) {
                        _this.ui.entries.map(function (entry) {
                            entry.disabled = IsArray(_this.asset.mapping.disabled_entries, true) && _this.asset.mapping.disabled_entries.includes(+entry.id);
                            entry.traits = _this._getEntryTraits(entry);
                        });
                        _this.ui.entries.sort(DynamicSort('sort_order'));
                    }
                }
                return resolve(true);
            });
        };
        /**
         * Set the traits that belong to a field entry
         * @param entry
         * @private
         */
        EntitySchemeFieldContentComponent.prototype._getEntryTraits = function (entry) {
            var _this = this;
            var traits = [];
            if (IsObject(entry, ['id']) && IsArray(this.asset.traits, true) && this.dom.state.isPrimary) {
                if (entry.id in this.asset.entryTraitMap && IsArray(this.asset.entryTraitMap[entry.id], true)) {
                    this.asset.entryTraitMap[entry.id].map(function (traitName) {
                        if (traitName in _this.asset.traitMap) {
                            var trait = _this.asset.traits[_this.asset.traitMap[traitName]];
                            if (IsObject(trait, ['icon', 'name'])) {
                                if (!trait.label)
                                    trait.label = TitleCase(SnakeToPascal(trait.name));
                                traits.push(trait);
                            }
                        }
                    });
                }
            }
            return traits;
        };
        return EntitySchemeFieldContentComponent;
    }(PopExtendComponent));
    EntitySchemeFieldContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-entity-scheme-field-content',
                    template: "<div class=\"entity-scheme-asset-item-row\" *ngFor=\"let entry of ui.entries;\" [ngClass]=\"{'sw-disabled': entry.disabled}\">\n  {{entry.name}}\n  <div class=\"entity-scheme-asset-trait-container\">\n    <mat-icon class=\"entity-scheme-asset-trait-icon sw-pointer\" *ngFor=\"let trait of entry.traits\" matTooltip=\"{{trait.label}}\" matTooltipPosition=\"above\">{{trait.icon}}</mat-icon>\n  </div>\n</div>\n",
                    styles: [".entity-scheme-asset-item-row{padding-left:var(--gap-m);align-items:center;justify-content:space-between!important}.entity-scheme-asset-trait-container{min-width:20px;padding-top:var(--gap-s);padding-right:var(--gap-xs)}.entity-scheme-asset-trait-icon{font-size:14px}"]
                },] }
    ];
    EntitySchemeFieldContentComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopEntitySchemeService },
        { type: PopFieldEditorService }
    ]; };
    EntitySchemeFieldContentComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var EntitySchemeTableContentComponent = /** @class */ (function (_super) {
        __extends(EntitySchemeTableContentComponent, _super);
        function EntitySchemeTableContentComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.config = {};
            _this.name = 'EntitySchemeTableContentComponent';
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component is responsible to render the inner contents of table asset
         * A table asset is basically a column that exists on the base table of an entity, ..ie: id, name, description ...
         */
        EntitySchemeTableContentComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Clean up the dom of this component
         */
        EntitySchemeTableContentComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return EntitySchemeTableContentComponent;
    }(PopExtendComponent));
    EntitySchemeTableContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-entity-scheme-table-content',
                    template: "<p>\n  profile-scheme-table-asset works!\n</p>\n",
                    styles: [""]
                },] }
    ];
    EntitySchemeTableContentComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    EntitySchemeTableContentComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var EntitySchemeComponentContentComponent = /** @class */ (function (_super) {
        __extends(EntitySchemeComponentContentComponent, _super);
        function EntitySchemeComponentContentComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.config = {};
            _this.name = 'EntitySchemeComponentContentComponent';
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    resolve(true);
                });
            };
            return _this;
        }
        /**
         * This component is responsible to render the inner contents of component asset
         * A component asset is custom widget that has been created for the entityId
         */
        EntitySchemeComponentContentComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.dom.configure().then(function () {
                _this.dom.register();
                _this.dom.ready();
            });
        };
        /**
         * Clean up the dom of this component
         */
        EntitySchemeComponentContentComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return EntitySchemeComponentContentComponent;
    }(PopExtendComponent));
    EntitySchemeComponentContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-entity-scheme-component-content',
                    template: "<p>\n  profile-scheme-component-asset works!\n</p>\n",
                    styles: [".entity-scheme-asset-layout-container{display:flex;flex-direction:row;border-top:1px solid var(--border);border-left:1px solid var(--border);border-bottom:1px solid var(--border);box-sizing:border-box;overflow:hidden}lib-entity-scheme-layout-section{flex:1;flex-basis:150px;border-right:1px solid var(--border)}.entity-scheme-asset-layout-section{flex:1}.entity-scheme-asset-list-content{overflow-y:auto;overflow-x:hidden}.entity-scheme-asset{box-sizing:border-box;margin:10px;border:1px solid var(--border);background:var(--bg-3);font-size:12px}.entity-scheme-asset-menu{position:absolute;justify-content:space-around;top:15px;right:5px;opacity:.8;width:55px;padding-left:5px;z-index:2}.entity-scheme-asset-menu,.entity-scheme-asset-menu-icon{display:flex;align-items:center;height:20px;background:var(--bg-3)}.entity-scheme-asset-menu-icon{justify-content:center;opacity:1!important;width:20px}.entity-scheme-asset-menu-icon .material-icons{font-size:18px}.entity-scheme-asset-handle{position:relative;box-sizing:border-box;cursor:move;width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.entity-scheme-asset-handle-disabled{pointer-events:none;cursor:none}.entity-scheme-asset-field-container{display:flex;flex-direction:column}.entity-scheme-asset-layout-row{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:row;justify-content:flex-start;align-items:center;height:25px;font-size:14px;padding:0 10px;z-index:1}.entity-scheme-asset-layout-row-expanded{border-bottom:1px solid var(--border)}.entity-scheme-asset-layout-subrow{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:row;justify-content:flex-start;align-items:flex-start;height:20px;color:var(--disabled);padding:0 10px;font-size:12px;top:2px}.entity-scheme-asset-layout-content-row{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:column;min-height:30px}.entity-scheme-asset-item-row{justify-content:flex-start;height:30px;padding:0 10px;border-top:1px solid var(--border);z-index:1}.entity-scheme-asset-item-row,.entity-scheme-asset-toggle-row{position:relative;display:flex;box-sizing:border-box;width:100%;flex-direction:row;align-items:center}.entity-scheme-asset-toggle-row{justify-content:center;height:10px;margin-bottom:5px;overflow:hidden;z-index:3}.entity-scheme-asset-toggle-row .material-icons{position:relative;top:2px;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-size:18px}.entity-scheme-primary{color:var(--primary-background)}.entity-scheme-required{color:var(--error);font-size:30px;line-height:0px;margin:0;width:10px;position:relative;top:20px;z-index:2}.cdk-drag-preview{overflow:hidden;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);height:35px}.cdk-drag-preview .entity-scheme-asset-handle{box-sizing:border-box}.cdk-drag-preview .entity-scheme-asset-menu{display:none!important}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating,.entity-scheme-asset-list.cdk-drop-list-dragging .entity-scheme-asset:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}.entity-scheme-asset-field-container{background:#000}"]
                },] }
    ];
    EntitySchemeComponentContentComponent.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    EntitySchemeComponentContentComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var PopEntityFieldItemsComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldItemsComponent, _super);
        /**
         * @param el
         * @param _domRepo - transfer
         * @param _fieldRepo - transfer
         */
        function PopEntityFieldItemsComponent(el, _domRepo, _fieldRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._fieldRepo = _fieldRepo;
            _this.scheme = null;
            _this.name = 'PopEntityFieldItemsComponent';
            _this.srv = {
                field: undefined
            };
            _this.asset = {
                fieldgroup: undefined,
            };
            _this.ui = {
                field: undefined,
                coreItems: undefined,
                items: undefined,
                fieldItemHelper: '',
                map: {},
                customSetting: {}
            };
            /**
             * This should transformValue and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    // #1: Enforce a CoreConfig
                    _this.core = IsObjectThrowError(_this.core, ['entity'], _this.name + ":configureDom: - this.core") ? _this.core : null;
                    // Set the height boundary
                    if (!_this.field)
                        _this.field = _this.core.entity;
                    _this._setHeight();
                    // Set event Handlers
                    _this.dom.handler.core = function (core, event) { return _this._coreEventHandler(event); };
                    // Create a container to track the active items
                    _this.dom.active.items = {};
                    // Transfer any resources for the entityId data
                    _this.asset.fieldgroup = IsObjectThrowError(_this.core.entity, ['fieldgroup'], _this.name + ":: - this.core.entity.fieldgroup") ? CleanObject(_this.core.entity.fieldgroup) : null;
                    // this.asset.coreRules = {};  // the settings that can be changed
                    // this.asset.coreItemModels = {}; // where the settings that can be changed are stored
                    _this.ui.coreItems = IsArrayThrowError(_this.core.resource.items.data_values, true, _this.name + ":configureDom: - this.core.resource.items") ? _this.core.resource.items.data_values.filter(function (item) {
                        return !(_this.srv.field.getViewIgnored(_this.asset.fieldgroup.name, item.name, _this.scheme));
                    }).map(function (value) { return CleanObject(value); }) : [];
                    _this.ui.map.coreItems = ArrayMapSetter(_this.ui.coreItems, 'name');
                    _this.ui.fieldItemHelper = "Select which attributes will be part of this " + _this.asset.fieldgroup.name + " field. Click on a field to edit individual field item settings.";
                    _this.ui.items = IsArrayThrowError(_this.core.entity.items, true, _this.name + ":: - this.core.entity.items") ? _this.core.entity.items.map(function (item) { return CleanObject(item); }) : null;
                    if (IsObject(_this.scheme)) {
                        _this.ui.items = _this.ui.items.filter(function (item) {
                            return +item.active === 1;
                        });
                    }
                    _this.ui.map.items = ArrayMapSetter(_this.ui.items, 'name');
                    // Build the custom settings
                    _this._buildCustomSettings();
                    // Build the Active Items for this field
                    _this._buildActiveItems();
                    _this._selectDefaultItem();
                    // Select the first field attribute item so that the view will have something to render
                    return resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    if (_this.dom.active.labelSettings) {
                        _this.onActiveLabelSelection();
                        setTimeout(function () {
                            _this.onActiveLabelSelection();
                        });
                    }
                    else if (IsObject(_this.dom.active.item, ['id'])) {
                        _this.onActiveItemSelection(_this.dom.active.item);
                        setTimeout(function () {
                            _this.onActiveItemSelection(_this.dom.active.item);
                        });
                    }
                    else if (true) {
                        _this.onActiveLabelSelection();
                        setTimeout(function () {
                            _this.onActiveLabelSelection();
                        });
                    }
                    else {
                        _this._selectDefaultItem();
                    }
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * We expect the core to represent a field
         * This component lists out all of the field attributes that this field has, and allows for the user to active/deactivate specific items.
         */
        PopEntityFieldItemsComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * This handles when a user click on a checkbox to activate/deactivate a specific field attribute
         * @param event
         */
        PopEntityFieldItemsComponent.prototype.onItemActiveChange = function (event) {
            // #1: Make sure that change was stored in the database
            if (event.type === 'field' && event.name === 'patch' && event.success) {
                if (this.log.repo.enabled('event', this.name))
                    console.log(this.log.repo.message(this.name + ":itemActiveHandler"), this.log.repo.color('event'), event);
                // #2: Update the change on the domRepo so other components can now about the change
                this.dom.repo.ui.activeItems[event.config.id] = +event.config.control.value;
                // #3: Send an event to the FieldBuilderPreviewComponent to update that this field attribute was activated/deactivated
                this.core.channel.next({ source: this.name, target: 'PopEntityFieldPreviewComponent', type: 'component', name: 'update' });
            }
        };
        /**
         * This handles when a user click on a checkbox to activate/deactivate a specific field attribute
         * @param event
         */
        PopEntityFieldItemsComponent.prototype.onEditLabelChange = function (event) {
            console.log('onCustomSettingChange', event);
        };
        /**
         * On selection is an event when a user click on a specific field attribute to manage its settings
         * @param item
         */
        PopEntityFieldItemsComponent.prototype.onActiveItemSelection = function (item) {
            this.log.info("onActiveItemSelection", item);
            if (!this.dom.state.saving && IsObject(item, ['id'])) {
                this.dom.active.labelSettings = false;
                // #1. Build a data package to send to the FieldBuilderItemSettingsComponent component
                this.dom.active.item = item;
                // #2: Send an event with the data package to the FieldBuilderItemSettingsComponent component
                var event = {
                    type: 'component',
                    name: 'active-item',
                    source: this.name,
                    target: 'PopEntityFieldItemParamsComponent',
                    data: item
                    // data: { item: item, models: itemModels, config: itemConfig }
                };
                this.dom.store('active');
                this.core.channel.emit(event); // core channel is the shared radio between all components on the core
            }
        };
        /**
         * On selection is an event when a user click on a specific field attribute to manage its settings
         * @param item
         */
        PopEntityFieldItemsComponent.prototype.onActiveLabelSelection = function () {
            this.log.info("onActiveLabelSelection");
            this.dom.active['item'] = null;
            this.dom.active.labelSettings = true;
            var event = {
                type: 'component',
                name: 'label-settings',
                source: this.name,
                target: 'PopEntityFieldItemParamsComponent',
                data: {}
            };
            this.core.channel.emit(event); // core channel is the shared radio between all components on the core
            this.dom.store('active');
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityFieldItemsComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Select the the first field item available
         */
        PopEntityFieldItemsComponent.prototype._selectDefaultItem = function () {
            var _this = this;
            if (this.ui.coreItems[0]) {
                var coreItem = this.ui.coreItems[0];
                var realItem_1 = this.ui.items[this.ui.map.items[coreItem.name]];
                this.onActiveItemSelection(realItem_1);
                if (this.dom.active.item) { // seems to need a double tap  to be consistent
                    setTimeout(function () {
                        _this.onActiveItemSelection(realItem_1);
                    });
                }
            }
        };
        /**
         * This handler is for managing an cross-communication between components on the core channel
         * @param event
         */
        PopEntityFieldItemsComponent.prototype._coreEventHandler = function (event) {
            this.log.event("_coreEventHandler", event);
            // if( IsValidFieldPatchEvent(this.core, event) ){
            //   if( event.config.name === 'multiple' && !event.config.control.value && this.dom.active.labelSettings ){
            //     this._selectDefaultItem();
            //     // this._setHeight();
            //   }
            // }
        };
        /**
         * Build configs that control the active state for each field item
         */
        PopEntityFieldItemsComponent.prototype._buildActiveItems = function () {
            var _this = this;
            this.dom.repo.ui.activeItems = {}; // stored on domRepo so that other components can use it
            var isScheme = IsObject(this.scheme, true);
            this.ui.coreItems.map(function (coreItem, index) {
                var realItem = _this.ui.items[_this.ui.map.items[coreItem.name]];
                if (IsObject(realItem, ['id', 'name'])) {
                    // item.required = typeof coreItem.required !== 'undefined' ? +coreItem.required : 1;
                    // console.log('item', item);
                    // console.log('coreItem', coreItem);
                    // ToDo:: coreFieldItem needs to have required attribute
                    // this.ui.map.items[ item.name ] = index;
                    // item.name = SnakeToPascal(item.name);
                    coreItem.required = _this.srv.field.getViewRequired(_this.asset.fieldgroup.name, realItem.name);
                    if (coreItem.required)
                        realItem.active = 1;
                    var itemActive = +realItem.active;
                    if (isScheme) {
                        var schemeFieldItemSession = _this.srv.field.getSchemeFieldItemMapping(_this.scheme, +_this.field.id, realItem.id);
                        console.log('schemeFieldItemSession', realItem.id, schemeFieldItemSession);
                        if (IsDefined(schemeFieldItemSession.active)) {
                            itemActive = +schemeFieldItemSession.active;
                        }
                    }
                    _this.dom.active.items[realItem.id] = new CheckboxConfig({
                        id: realItem.id,
                        name: 'active',
                        align: 'left',
                        disabled: coreItem.required || !_this.core.access.can_update ? true : false,
                        value: itemActive,
                        facade: isScheme,
                        patch: coreItem.required ? null : {
                            field: 'active',
                            path: isScheme ? null : "fields/customs/" + realItem.id,
                            displayIndicator: true,
                            callback: isScheme ? function (core, event) { return __awaiter(_this, void 0, void 0, function () {
                                var session;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            session = this.srv.field.getSchemeFieldItemMapping(this.scheme, +this.field.id, realItem.id);
                                            if (!IsObject(session)) return [3 /*break*/, 2];
                                            session.active = event.config.control.value;
                                            return [4 /*yield*/, this.srv.field.updateSchemeFieldMapping(this.scheme)];
                                        case 1:
                                            _a.sent();
                                            _a.label = 2;
                                        case 2: return [2 /*return*/];
                                    }
                                });
                            }); } : null
                        },
                    });
                    _this.dom.repo.ui.activeItems[realItem.id] = +realItem.active;
                }
            });
        };
        /**
         * Build the configs for any relevant custom settings
         * @private
         */
        PopEntityFieldItemsComponent.prototype._buildCustomSettings = function () {
            var _this = this;
            if (IsObject(this.field.custom_setting, ['edit_label'])) {
                var setting_1 = this.field.custom_setting.edit_label;
                this.ui.customSetting['edit_label'] = new CheckboxConfig({
                    id: setting_1.id,
                    align: 'left',
                    name: 'edit_label',
                    disabled: true,
                    value: true,
                    metadata: { setting: setting_1 },
                    facade: true,
                    patch: {
                        field: "",
                        path: "",
                        callback: function (core, event) {
                            _this.dom.state.saving = true;
                            if (IsObject(_this.scheme, true)) {
                                console.log('save setting to a scheme');
                                console.log('event', event);
                                console.log('setting', setting_1);
                            }
                            else {
                                _this.srv.field.storeCustomSetting(core, event).then(function (res) {
                                    if (IsString(res, true)) {
                                        _this.ui.customSetting['edit_label'].message = res;
                                    }
                                    _this.dom.setTimeout('allow-save', function () {
                                        _this.dom.state.saving = false;
                                    }, 500);
                                });
                            }
                        }
                    }
                });
            }
        };
        /**
         * Determine the layout height to control overflow
         *
         */
        PopEntityFieldItemsComponent.prototype._setHeight = function () {
            this.dom.overhead = 135;
            // this.dom.height.outer = +this.dom.repo.position[ this.position ].height - 121;
            // const field = <FieldInterface>this.core.entity;
            //
            // if( false && field.multiple ){
            //   this.dom.height.outer -= 20;
            //   this.dom.height.outer -= ( +field.multiple_min * 60 );
            // }
            // if( this.dom.height.outer < 400 ) this.dom.height.outer = 400;
            this.dom.setHeight(400, this.dom.overhead);
        };
        return PopEntityFieldItemsComponent;
    }(PopExtendComponent));
    PopEntityFieldItemsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-builder-items',
                    template: "<div class=\"entity-field-items-container\" *ngIf=\"dom.state.loaded\" [style.height.px]=dom.height.outer>\n  <!--<div>-->\n    <!--<div class=\"entity-field-editor-item sw-pointer\" [ngClass]=\"{'entity-field-editor-active-selection':dom.active.labelSettings}\" (click)=\"onActiveLabelSelection();\">-->\n      <!--<div class=\"entity-field-editor-item-active-selector\" (click)=\"$event.stopPropagation()\">-->\n        <!--<lib-pop-checkbox [config]=\"ui.customSetting.edit_label\" (events)=\"onEditLabelChange($event);\"></lib-pop-checkbox>-->\n      <!--</div>-->\n      <!--<div class=\"editor-field-editor-item-label-name\">-->\n        <!--<div *ngIf=\"!field?.multiple\">Entry</div>-->\n        <!--<div *ngIf=\"field?.multiple\">Entries</div>-->\n      <!--</div>-->\n      <!--<div class=\"entityId-field-editor-item-label-helper\">-->\n        <!--&lt;!&ndash;<div class=\"sw-pop-icon entityId-field-editor-item-helper-icon\" matTooltip=\"{{realItem.view.description}}\" matTooltipPosition=\"left\">&ndash;&gt;-->\n        <!--&lt;!&ndash;X&ndash;&gt;-->\n        <!--&lt;!&ndash;</div>&ndash;&gt;-->\n      <!--</div>-->\n    <!--</div>-->\n  <!--</div>-->\n  <div *ngFor=\"let coreItem of ui.coreItems\">\n    <div class=\"entity-field-editor-item sw-pointer\" [ngClass]=\"{'entity-field-editor-active-selection':dom.active['item']?.id === realItem.id}\" *ngIf=\"ui.items[ui.map.items[coreItem.name]]; let realItem;\" (click)=\"onActiveItemSelection(realItem);\">\n      <div class=\"entity-field-editor-item-active-selector\" (click)=\"$event.stopPropagation()\">\n        <lib-pop-checkbox *ngIf=\"dom.active['items'][realItem.id]\" [config]=\"dom.active['items'][realItem.id]\" (events)=\"onItemActiveChange($event);\"></lib-pop-checkbox>\n      </div>\n      <div class=\"editor-field-editor-item-label-name\">{{coreItem.label}}</div>\n      <div class=\"entityId-field-editor-item-label-helper\">\n        <!--<div class=\"sw-pop-icon entityId-field-editor-item-helper-icon\" matTooltip=\"{{realItem.view.description}}\" matTooltipPosition=\"left\">-->\n        <!--X-->\n        <!--</div>-->\n      </div>\n    </div>\n  </div>\n\n  <div class=\"entity-field-editor-item-filler\"></div>\n</div>\n",
                    styles: [".entity-field-editor-header{display:flex;flex-direction:column;height:97px}.entity-field-editor-header-section{position:relative;width:100%;box-sizing:border-box;height:30px;clear:both}.entity-field-editor-container{min-height:100px;position:relative}.entity-field-editor-border{border:1px solid var(--border)}.entity-field-editor-section-header{position:relative;display:flex;flex-direction:row;height:40px;padding:0 5px 0 10px;align-items:center;justify-content:space-between;font-size:1em;font-weight:700;clear:both;box-sizing:border-box;background:var(--darken02)}.entity-field-editor-section-header-helper-icon{width:20px;height:20px;font-size:1em;z-index:2}.entity-field-editor-active-selection{padding-left:0!important;border-left:5px solid var(--primary)}.entity-field-editor-active-config{border-left:5px solid var(--primary)}.entity-field-items-container{display:flex;flex-direction:column;min-width:200px;overflow-x:hidden;overflow-y:auto}.entity-field-editor-item{display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;-moz-box-sizing:border-box;border:1px solid transparent;border-right:1px solid var(--border);border-bottom:none;height:40px}.entity-field-editor-item-filler{flex:1;border-right:1px solid var(--border)}.entity-field-editor-item:hover{background-color:var(--darken02)}.entity-field-editor-item-active-selector{position:relative;display:flex;flex-direction:row;width:15%;box-sizing:border-box;-moz-box-sizing:border-box;align-items:center;justify-content:center;padding-left:10px}.editor-field-editor-item-label-name{width:75%;display:flex;align-items:center;justify-content:flex-start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.entity-field-editor-item-label-helper{display:flex;width:10%;align-items:center;justify-content:center;min-height:40px}.entity-field-editor-item-helper-icon{margin-top:10px;margin-right:2px;width:20px;height:20px;font-size:.7em;z-index:2}.entity-field-editor-active-selection{border:1px solid var(--border)!important;border-right:1px solid transparent!important}:host ::ng-deep .pop-checkbox-container{margin-top:0!important}"]
                },] }
    ];
    PopEntityFieldItemsComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopFieldEditorService }
    ]; };
    PopEntityFieldItemsComponent.propDecorators = {
        field: [{ type: i0.Input }],
        scheme: [{ type: i0.Input }]
    };

    var PopEntityFieldValuesComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldValuesComponent, _super);
        function PopEntityFieldValuesComponent(el, domRepo, fieldRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.domRepo = domRepo;
            _this.fieldRepo = fieldRepo;
            _this.name = 'PopEntityFieldValuesComponent';
            _this.srv = {
                field: undefined,
                request: exports.ServiceInjector.get(PopRequestService),
            };
            _this.asset = {
                basePath: undefined,
                field: undefined,
                type: undefined,
                typeOption: undefined,
            };
            _this.transformSrvContainer();
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.dom.handler.core = function (core, event) { return _this._coreEventHandler(event); };
                    _this.asset.field = IsObjectThrowError(_this.core, true, "Invalid Core") && IsObjectThrowError(_this.core.entity, ['id', 'fieldgroup'], "Invalid Field") ? _this.core.entity : null;
                    _this.asset.type = _this.asset.field.fieldgroup.name; // the field group name , ie.. address, phone
                    _this.asset.typeOption = _this.srv.field.getDefaultLabelTypeOptions(); // the select options that belong to the types
                    _this.asset.basePath = "fields/" + _this.asset.field.id + "/entries"; // api endpoint to hit for field entries
                    _this.ui.asset = {
                        entries: [], // list of configs for each entry record
                    };
                    _this.dom.session.controls = new Map(); // store the entry configs so that changes are not lost when the tabs are changed
                    return resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) {
                    _this.dom.setTimeout('show-entries', function () {
                        _this._showEntries();
                    }, 0);
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * Nest all service related classes under srv
         */
        PopEntityFieldValuesComponent.prototype.transformSrvContainer = function () {
            this.srv.field = this.fieldRepo;
            this.dom.repo = this.domRepo;
            delete this.fieldRepo;
            delete this.domRepo;
        };
        /**
         * This component should have a specific purpose
         */
        PopEntityFieldValuesComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * When the type of an entry is changed in the database, make sure the changes is updated locally
         * @param index
         * @param event
         */
        PopEntityFieldValuesComponent.prototype.onEntryTypeChange = function (index, event) {
            var _this = this;
            if (IsValidFieldPatchEvent(this.core, event)) {
                var config = this.ui.entries[index];
                var entry = this.asset.field.entries[index];
                var session = this.dom.session.controls.get(index);
                if (entry && session) {
                    entry.type = config.type.control.value;
                    this._updateEntryTypeSession(session.type, entry);
                    this.dom.session.controls.set(index, session);
                    this.setDomSession(index, session);
                }
                setTimeout(function () {
                    _this._triggerFieldPreviewUpdate();
                }, 0);
            }
        };
        /**
         * When the display/label of an entry is changed in the database, make sure the changes is updated locally
         * @param index
         * @param event
         */
        PopEntityFieldValuesComponent.prototype.onEntryDisplayChange = function (index, event) {
            var _this = this;
            if (IsValidFieldPatchEvent(this.core, event)) {
                var config = this.ui.entries[index];
                var entry = this.asset.field.entries[index];
                var session = this.dom.session.controls.get(index);
                if (entry && session) {
                    entry.name = config.display.control.value;
                    this._updateEntryDisplaySession(session.display, entry);
                    this.dom.session.controls.set(index, session);
                    this.setDomSession(index, session);
                }
            }
            setTimeout(function () {
                _this._triggerFieldPreviewUpdate();
            }, 0);
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityFieldValuesComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Listen for when the min_multiple && max_multiple values change
         * @param event
         * @private
         */
        PopEntityFieldValuesComponent.prototype._coreEventHandler = function (event) {
            var _this = this;
            this.log.info("_coreEventHandler", event);
            if (IsValidFieldPatchEvent(this.core, event)) {
                if (event.source === 'PopMinMaxComponent') {
                    this.dom.setTimeout('show-entries', function () {
                        _this._showEntries();
                    }, 250);
                }
            }
        };
        /**
         * Produce a list of the entry values for this field
         * @private
         */
        PopEntityFieldValuesComponent.prototype._showEntries = function () {
            var _this = this;
            this.dom.state.pending = true;
            this._setValueEntries().then(function (entries) {
                _this._setEntrySessionControls(entries).then(function () {
                    _this._setEntries().then(function () {
                        _this.dom.state.pending = false;
                        setTimeout(function () {
                            _this._triggerFieldPreviewUpdate();
                        }, 0);
                    });
                });
            });
        };
        /**
         * Ensure that the database records match the min/max settings
         * This will remove any excess records in the database that exceed the multiple_min
         * This will create records for an entries that are needed in the database
         * @param patch
         * @private
         */
        PopEntityFieldValuesComponent.prototype._setValueEntries = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var storedEntries = JSON.parse(JSON.stringify(_this.asset.field.entries));
                var excess = storedEntries.splice(_this.asset.field.multiple_min);
                var index = 0;
                var needed = [];
                while (index < _this.asset.field.multiple_min) {
                    var existing = index in storedEntries ? storedEntries[index] : null;
                    if (!existing)
                        needed.push(index);
                    index++;
                }
                var requests = []; // contains all the create/remove api/requests
                // delete any excess entries from database
                excess.map(function (entry) {
                    requests.push(_this.srv.request.doDelete(_this.asset.basePath + "/" + entry.id));
                });
                // create any needed entries in database
                needed.map(function (sessionIndex) {
                    var session = _this.dom.session.controls.get(sessionIndex);
                    requests.push(_this.srv.request.doPost("" + _this.asset.basePath, {
                        name: session ? session.display.value : null,
                        type: session ? session.type.value : _this.asset.type in _this.asset.typeOption ? _this.asset.typeOption[_this.asset.type].defaultValue : 'n/a'
                    }, 1, false));
                });
                if (requests.length) { // need to update the data base to match min/max settings
                    _this._makeApiRequests(requests).then(function (serverEntries) {
                        return resolve(serverEntries);
                    });
                }
                else { // stored entries already match min/max settings
                    return resolve(storedEntries);
                }
            });
        };
        /**
         * Will make all of the needed api requests
         * @param requests
         * @private
         */
        PopEntityFieldValuesComponent.prototype._makeApiRequests = function (requests) {
            var _this = this;
            return new Promise(function (resolve) {
                rxjs.forkJoin(requests).subscribe(function () {
                    _this.srv.request.doGet(_this.asset.basePath).subscribe(function (res) {
                        res = res.data ? res.data : res;
                        _this.asset.field.entries = IsArray(res, true) ? res : [];
                        _this.core.entity.entries = JSON.parse(JSON.stringify(_this.asset.field.entries));
                        resolve(res);
                    });
                }, function (err) {
                    exports.PopLog.error(_this.name, "_makeApiRequests", GetHttpErrorMsg(err));
                    resolve([]);
                });
            });
        };
        /**
         * Store a set of controls that can store values as the user changes the settings
         * @private
         */
        PopEntityFieldValuesComponent.prototype._setEntrySessionControls = function (entries) {
            var _this = this;
            return new Promise(function (resolve) {
                var index = 0;
                while (index < _this.asset.field.multiple_min) {
                    var entry = index in entries ? entries[index] : null;
                    var session = _this.dom.session.controls.has(index) ? _this.dom.session.controls.get(index) : {
                        id: entry ? entry.id : null,
                        type: _this._getTypeConfig(),
                        display: _this._getDisplayConfig(),
                        increment: index + 1,
                    };
                    _this._updateSessionControl(index, session, entry);
                    index++;
                }
                return resolve(true);
            });
        };
        /**
         * Update the entry config to use the stored record, and update the sessions for it
         * @param index
         * @param session
         * @param entry
         * @private
         */
        PopEntityFieldValuesComponent.prototype._updateSessionControl = function (index, session, entry) {
            if (entry === void 0) { entry = null; }
            session.increment = index + 1;
            session.id = entry ? entry.id : null;
            this._updateEntryTypeSession(session.type, entry);
            this._updateEntryDisplaySession(session.display, entry);
            this.dom.session.controls.set(index, session);
            this.setDomSession(index, session);
            return session;
        };
        /**
         * Update the entry type config to use correct value and path
         * @param config
         * @param entry
         * @private
         */
        PopEntityFieldValuesComponent.prototype._updateEntryTypeSession = function (config, entry) {
            if (entry === void 0) { entry = null; }
            config.value = entry ? entry.type : this.asset.type in this.asset.typeOption ? this.asset.typeOption[this.asset.type].defaultValue : 'n/a';
            config.control.setValue(config.value, { emitEvent: false });
            config.patch.path = entry ? this.asset.basePath + "/" + entry.id : null;
        };
        /**
         * Update the entry display config to use correct value and path
         * @param config
         * @param entry
         * @private
         */
        PopEntityFieldValuesComponent.prototype._updateEntryDisplaySession = function (config, entry) {
            if (entry === void 0) { entry = null; }
            config.value = entry ? entry.name : '';
            config.control.setValue(config.value, { emitEvent: false });
            config.patch.path = entry ? this.asset.basePath + "/" + entry.id : null;
        };
        /**
         * Store each entry config in a dom session so that it can be restored when the users is switching tabs
         * @param index
         * @param session
         */
        PopEntityFieldValuesComponent.prototype.setDomSession = function (index, session) {
            var domStorage = StorageGetter(this.dom.repo, ['components', this.name, this.id + '', 'session']);
            if (IsObject(domStorage, ['controls'])) {
                var controls = domStorage.controls;
                controls.set(index, session);
            }
        };
        /**
         * Set entry config objects that will be used in the html template
         * @private
         */
        PopEntityFieldValuesComponent.prototype._setEntries = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.ui.entries = [];
                if (_this.dom.session.controls) {
                    var index = 0;
                    while (index < _this.asset.field.multiple_min) {
                        _this.ui.entries.push(_this.dom.session.controls.get(index));
                        index++;
                    }
                }
                return resolve(true);
            });
        };
        /**
         * Manage the type of each entry
         * @param ind
         * @private
         */
        PopEntityFieldValuesComponent.prototype._getTypeConfig = function () {
            var disabled = false;
            var options = this.asset.type in this.asset.typeOption ? this.asset.typeOption[this.asset.type].options : [];
            if (!IsArray(options, true)) {
                options = [{ value: 'n/a', name: 'N/A' }];
                disabled = true;
            }
            return new SelectConfig({
                label: 'Type',
                options: { values: options },
                disabled: disabled,
                patch: {
                    field: 'type',
                    path: null,
                }
            });
        };
        /**
         * Manage the display of each entry
         * @param index
         * @private
         */
        PopEntityFieldValuesComponent.prototype._getDisplayConfig = function () {
            return new InputConfig({
                label: 'Display Name',
                patch: {
                    field: 'name',
                    path: null
                }
            });
        };
        PopEntityFieldValuesComponent.prototype._triggerFieldPreviewUpdate = function () {
            this.core.channel.next({ source: this.name, target: 'PopEntityFieldPreviewComponent', type: 'component', name: 'update' });
        };
        return PopEntityFieldValuesComponent;
    }(PopExtendComponent));
    PopEntityFieldValuesComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field-values',
                    template: "<mat-divider [style.width.%]=100 [style.marginTop.px]=5 [style.marginBottom.px]=5></mat-divider>\n<div class=\"entity-field-values-container\" [ngClass]=\"{'sw-disabled': dom.state.pending}\">\n  <div class=\"entity-field-values-row\" *ngFor=\"let entry of ui.entries; let index = index;\">\n    <div class=\"entity-field-values-row import-flex-item-sm import-flex-grow-xs\">\n      <div class=\"entity-field-values-section import-flex-column-break import-flex-item-xs import-flex-start-center\" [style.maxWidth.px]=30>\n        {{entry.increment}}.\n      </div>\n      <div class=\"entity-field-values-section import-flex-column-break import-flex-item-sm import-flex-grow-xs\">\n        <lib-pop-select class=\"import-flex-item-full\" [config]=\"entry.type\" (events)=\"onEntryTypeChange(index, $event)\"></lib-pop-select>\n      </div>\n    </div>\n    <div class=\"entity-field-values-row import-flex-item-sm import-flex-grow-xs\">\n      <div class=\"entity-field-values-section import-flex-column-break import-flex-item-sm import-flex-grow-xs sw-mar-lft-md\">\n        <lib-pop-input class=\"import-flex-item-full\" [config]=\"entry.display\" (events)=\"onEntryDisplayChange(index, $event)\"></lib-pop-input>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                    styles: [".import-flex-row,.import-flex-row-wrap{display:flex;flex-direction:row}.import-flex-row-wrap{flex-wrap:wrap;padding:0;flex-basis:100%;box-sizing:border-box}.import-flex-row-break{flex-basis:100%;height:0}.import-flex-column-break{flex-basis:100%;width:0}.import-flex-item-icon{min-width:var(--field-icon-width);height:var(--field-icon-height);display:flex;justify-content:center;align-items:center}.import-flex-column-xs{display:flex;flex-direction:column;width:12.5%;min-height:30px}.import-flex-column-sm{flex:1;flex-direction:column;width:25%;min-height:30px}.import-flex-column-md{flex:1;flex-direction:column;width:50%}.import-flex-column-lg{flex:1;flex-direction:column;width:75%;min-height:30px}.import-flex-item-xs{flex-basis:12.5%}.import-flex-item-sm{flex-basis:25%}.import-flex-item-md{flex-basis:50%}.import-flex-item-full{flex-basis:100%}.import-flex-grow-xs{flex-grow:1}.import-flex-grow-sm{flex-grow:2}.import-flex-grow-md{flex-grow:3}.import-flex-grow-lg{flex-grow:4}.import-flex-column{display:flex;flex-direction:column}.import-flex-center{display:flex;align-items:center;justify-content:center}.import-flex-space-center{justify-content:space-around;align-items:center}.import-flex-space-between-center{justify-content:space-between;align-items:center}.import-flex-center-start{display:flex;justify-content:center;align-items:flex-start}.import-flex-start-center{display:flex;justify-content:flex-start;align-items:center}.import-flex-end-center{display:flex;justify-content:flex-end;align-items:center}.import-flex-end{display:flex;align-items:flex-end;justify-content:flex-end}.import-flex-align-end{display:flex;align-self:flex-end}.import-flex-stretch-center{display:flex;justify-content:stretch;align-items:center}.sw-mar-xs{margin:var(--xs)}.sw-mar-sm{margin:var(--sm)}.sw-mar-md{margin:var(--md)}.sw-mar-lg{margin:var(--lg)}.sw-mar-xlg{margin:var(--xlg)}.sw-mar-hrz-xs{margin-left:var(--xs);margin-right:var(--xs)}.sw-mar-hrz-md,.sw-mar-hrz-sm{margin-left:var(--md);margin-right:var(--md)}.sw-mar-hrz-lg{margin-left:var(--lg);margin-right:var(--lg)}.sw-mar-hrz-xlg{margin-left:var(--xlg);margin-right:var(--xlg)}.sw-mar-vrt-xs{margin-top:var(--xs);margin-bottom:var(--xs)}.sw-mar-vrt-md,.sw-mar-vrt-sm{margin-top:var(--md);margin-bottom:var(--md)}.sw-mar-vrt-lg{margin-top:var(--lg);margin-bottom:var(--lg)}.sw-mar-vrt-xlg{margin-top:var(--xlg);margin-bottom:var(--xlg)}.sw-mar-lft-xs{margin-left:var(--xs)}.sw-mar-lft-sm{margin-left:var(--sm)}.sw-mar-lft-md{margin-left:var(--md)}.sw-mar-lft-lg{margin-left:var(--lg)}.sw-mar-lft-xlg{margin-left:var(--xlg)}.sw-mar-rgt-xs{margin-right:var(--xs)}.sw-mar-rgt-sm{margin-right:var(--sm)}.sw-mar-rgt-md{margin-right:var(--md)}.sw-mar-rgt-lg{margin-right:var(--lg)}.sw-mar-rgt-xlg{margin-right:var(--xlg)}.sw-mar-btm-xs{margin-bottom:var(--xs)}.sw-mar-btm-sm{margin-bottom:var(--sm)}.sw-mar-btm-md{margin-bottom:var(--md)}.sw-mar-btm-lg{margin-bottom:var(--lg)}.sw-mar-btm-xlg{margin-bottom:var(--xlg)}.sw-mar-top-xs{margin-top:var(--xs)}.sw-mar-top-sm{margin-top:var(--sm)}.sw-mar-top-md{margin-top:var(--md)}.sw-mar-top-lg{margin-top:var(--lg)}.sw-mar-top-xlg{margin-top:var(--xlg)}:host{width:100%}.entity-field-values-container{display:flex;flex-direction:column;width:100%;position:relative;box-sizing:border-box;max-height:245px;overflow-x:hidden;overflow-y:auto}.entity-field-values-row{height:60px;display:flex;width:100%;box-sizing:border-box}.entity-field-values-section{display:flex;height:60px}"]
                },] }
    ];
    PopEntityFieldValuesComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopFieldEditorService }
    ]; };
    // export interface FieldEntrySession {
    //   id: number;
    //   type: SelectConfig;
    //   display: InputConfig;
    //   increment: number;
    // }

    var FieldLabelParamComponent = /** @class */ (function () {
        function FieldLabelParamComponent() {
        }
        /**
         * This component expects config to be a Label config
         */
        FieldLabelParamComponent.prototype.ngOnInit = function () {
        };
        return FieldLabelParamComponent;
    }());
    FieldLabelParamComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-label-param',
                    template: "\n    <div class=\"field-builder-param-container\">\n      <div class=\"field-builder-param-title-container mat-h2\">\n        <div class=\"field-builder-param-title\">{{config.name}}</div>\n      </div>\n    </div>"
                },] }
    ];
    FieldLabelParamComponent.propDecorators = {
        config: [{ type: i0.Input }]
    };

    var FieldTextareaParamComponent = /** @class */ (function () {
        function FieldTextareaParamComponent() {
            this.events = new i0.EventEmitter();
        }
        FieldTextareaParamComponent.prototype.ngOnInit = function () {
            this.param = new TextareaConfig({
                name: this.config.name,
                label: this.config.label,
                column: this.config.column,
                value: IsDefined(this.config.value) ? this.config.value : this.config.defaultValue,
                height: 70,
                facade: this.config.facade,
                patch: this.config.patch,
                metadata: this.config.metadata ? this.config.metadata : {}
            });
        };
        return FieldTextareaParamComponent;
    }());
    FieldTextareaParamComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-textarea-param',
                    template: "\n    <lib-pop-textarea (events)=\"events.emit($event);\" [config]=param></lib-pop-textarea>"
                },] }
    ];
    FieldTextareaParamComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var FieldRadioParamComponent = /** @class */ (function () {
        function FieldRadioParamComponent(commonRepo, changeDetectorRef) {
            this.commonRepo = commonRepo;
            this.changeDetectorRef = changeDetectorRef;
            this.events = new i0.EventEmitter();
        }
        FieldRadioParamComponent.prototype.ngOnInit = function () {
            this.param = new RadioConfig({
                label: (this.config.label ? this.config.label : this.config.name),
                name: this.config.name,
                layout: 'row',
                value: this.config.value ? this.config.value : this.config.defaultValue,
                patch: this.config.patch,
                options: this.config.options,
                facade: this.config.facade,
                metadata: this.config.metadata ? this.config.metadata : {}
            });
        };
        FieldRadioParamComponent.prototype.ngOnDestroy = function () {
        };
        return FieldRadioParamComponent;
    }());
    FieldRadioParamComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-radio-param',
                    template: "<lib-pop-radio (events)=\"events.emit($event);\" [config]=param></lib-pop-radio>"
                },] }
    ];
    FieldRadioParamComponent.ctorParameters = function () { return [
        { type: PopCommonService },
        { type: i0.ChangeDetectorRef }
    ]; };
    FieldRadioParamComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var FieldSelectParamComponent = /** @class */ (function () {
        function FieldSelectParamComponent() {
            this.events = new i0.EventEmitter();
            this.hidden = false;
        }
        FieldSelectParamComponent.prototype.ngOnInit = function () {
            if (IsObject(this.config, true)) {
                this.param = new SelectConfig({
                    label: (this.config.label ? this.config.label : this.config.name),
                    name: this.config.name,
                    value: this.config.value ? this.config.value : this.config.defaultValue,
                    options: {
                        values: IsObject(this.config.options, ['values']) ? ConvertArrayToOptionList(this.config.options.values) : []
                    },
                    facade: this.config.facade,
                    patch: this.config.patch,
                    metadata: this.config.metadata ? this.config.metadata : {}
                });
            }
            this.hidden = this.param.options.values.length === 0 ? true : false;
        };
        return FieldSelectParamComponent;
    }());
    FieldSelectParamComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-select-param',
                    template: "\n    <lib-pop-select *ngIf=\"param\" (events)=\"events.emit($event);\" [config]=param></lib-pop-select>"
                },] }
    ];
    FieldSelectParamComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }],
        hidden: [{ type: i0.HostBinding, args: ['class.sw-hidden',] }, { type: i0.Input }]
    };

    var FieldInputParamComponent = /** @class */ (function () {
        function FieldInputParamComponent() {
            this.events = new i0.EventEmitter();
        }
        FieldInputParamComponent.prototype.ngOnInit = function () {
            var validators = [];
            if (this.config.required)
                validators.push(forms.Validators.required);
            this.param = new InputConfig({
                name: this.config.name,
                label: this.config.label,
                value: this.config.value ? this.config.value : this.config.defaultValue,
                readonly: this.config.readonly,
                validators: validators,
                patch: this.config.patch,
                facade: this.config.facade,
                metadata: this.config.metadata ? this.config.metadata : {}
            });
        };
        return FieldInputParamComponent;
    }());
    FieldInputParamComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-input-param',
                    template: "\n    <lib-pop-input (events)=\"events.emit($event);\" [config]=param></lib-pop-input>"
                },] }
    ];
    FieldInputParamComponent.ctorParameters = function () { return []; };
    FieldInputParamComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var FieldNumberParamComponent = /** @class */ (function () {
        function FieldNumberParamComponent() {
            this.events = new i0.EventEmitter();
        }
        FieldNumberParamComponent.prototype.ngOnInit = function () {
            var defaultValue = IsDefined(this.config.default_value) ? +this.config.default_value : 255;
            var configInterface = {
                label: this.config.label,
                name: this.config.name,
                value: this.config.value ? this.config.value : this.config.default_value,
                patch: this.config.patch,
                facade: this.config.facade,
                min: 1,
                max: defaultValue,
                metadata: this.config.metadata ? this.config.metadata : {}
            };
            if (this.config.name === 'maxlength') {
                configInterface.helpText = "Limit: " + defaultValue;
            }
            this.param = new NumberConfig(configInterface);
        };
        FieldNumberParamComponent.prototype.ngOnDestroy = function () {
        };
        return FieldNumberParamComponent;
    }());
    FieldNumberParamComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-number-param',
                    template: "\n    <lib-pop-number (events)=\"events.emit($event);\" [config]=param></lib-pop-number>"
                },] }
    ];
    FieldNumberParamComponent.ctorParameters = function () { return []; };
    FieldNumberParamComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var PopEntityFieldItemParamsComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldItemParamsComponent, _super);
        function PopEntityFieldItemParamsComponent(el, _domRepo, _fieldRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._fieldRepo = _fieldRepo;
            _this.scheme = null;
            _this.name = 'PopEntityFieldItemParamsComponent';
            _this.asset = {
                field: undefined,
                viewParams: undefined,
                viewOptions: undefined,
                viewTemplate: undefined,
            };
            _this.srv = {
                entity: exports.ServiceInjector.get(PopEntityService),
                field: undefined,
                request: exports.ServiceInjector.get(PopRequestService),
            };
            /**
             * This should transformValue and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    // #1: Enforce a CoreConfig
                    _this.core = IsObjectThrowError(_this.core, true, _this.name + ":configureDom: - this.core") ? _this.core : null;
                    _this.field = IsObjectThrowError(_this.core.entity, true, "") ? _this.core.entity : null;
                    // Set the outer height boundary of the component
                    _this._setHeight();
                    // Set the template container for the field item list
                    _this.template.attach('container');
                    // Set event Handlers
                    _this.dom.handler.core = function (core, event) { return _this.coreEventHandler(event); };
                    _this.dom.handler.bubble = function (core, event) { return _this.onBubbleEvent(event); };
                    _this.dom.state.showOptions = false;
                    _this.asset.viewParams = _this.srv.field.getViewParams();
                    _this.asset.viewOptions = _this.srv.field.getViewOptions();
                    return resolve(true);
                });
            };
            return _this;
        }
        /**
         * We expect the core to represent a field
         * This component allows the user to configure the settings of the specific field attribute item
         * The FieldBuilderItemsComponent is responsible to communicate which field attribute item is active
         */
        PopEntityFieldItemParamsComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * This handler handles any events that come up from the settings fields
         * @param event
         */
        PopEntityFieldItemParamsComponent.prototype.onBubbleEvent = function (event) {
            var _this = this;
            exports.PopLog.event(this.name, "onBubbleEvent", event);
            if (event.type === 'field' && event.name === 'patch' && event.success) {
                if (IsDefined(event.config.name)) {
                    var field = this.dom.active.item;
                    var value_1 = event.config.control.value;
                    if (event.config.name === 'active') {
                        field.active = +value_1;
                    }
                    else if (IsObject(event.config.metadata, ['session'])) {
                        if (IsArray(event.config.metadata.session)) {
                            event.config.metadata.session.map(function (storage) {
                                if (IsObject(storage)) {
                                    storage[event.config.name] = value_1;
                                }
                            });
                        }
                        else if (IsObject(event.config.metadata.session)) {
                            event.config.metadata.session[event.config.name] = value_1;
                        }
                    }
                }
                this.dom.setTimeout('update-preview', function () {
                    _this.core.channel.next({ source: _this.name, type: 'component', name: 'update', target: 'PopEntityFieldPreviewComponent' });
                }, 250);
            }
        };
        /**
         * This is action that initiates setting up the preview
         */
        PopEntityFieldItemParamsComponent.prototype.setActiveFieldItem = function () {
            if (this.dom.active.item) {
                this._setFieldItemOptions();
                this._setFieldItemParams();
            }
        };
        /**
         * This is action that initiates setting up the preview
         */
        PopEntityFieldItemParamsComponent.prototype.setLabelSettings = function () {
            var _this = this;
            this.dom.active.item = null;
            this.dom.state.showOptions = false;
            this._configureLabelList().then(function (paramComponentList) {
                _this.template.render(paramComponentList, [], true);
            });
        };
        /**
         * The user can add entries in to the options that this field should use
         */
        PopEntityFieldItemParamsComponent.prototype.addFieldItemOption = function () {
            this.dom.active.options.push({
                active: new CheckboxConfig({
                    label: null,
                    value: 1,
                    bubble: true,
                }),
                name: new InputConfig({
                    label: null,
                    value: '',
                    pattern: 'AlphaNumeric',
                    bubble: true,
                    maxlength: 128,
                    minimal: true,
                }),
                value: new InputConfig({
                    label: null,
                    value: '',
                    pattern: 'AlphaNumericNoSpace',
                    bubble: true,
                    maxlength: 128,
                    minimal: true,
                }),
                sort: new InputConfig({
                    label: null,
                    minimal: true,
                    value: this.dom.active.options.length,
                    bubble: true,
                }),
            });
        };
        /**
         * The user can remove an existing option that this field is using
         * @param index
         */
        PopEntityFieldItemParamsComponent.prototype.removeFieldItemOption = function (index) {
            if (index in this.dom.active.options) {
                this.dom.active.options.splice(index, 1);
                this.dom.active.options.map(function (option, i) {
                    option.sort.control.setValue(i);
                });
            }
            this.triggerSaveFieldOptions({ name: 'onChange' });
        };
        /**
         * This will allow the user to make consecutive changes with minimal api calls
         * @param event
         */
        PopEntityFieldItemParamsComponent.prototype.triggerSaveFieldOptions = function (event) {
            var _this = this;
            if (event && (event.name === 'onKeyUp' || event.name === 'onChange')) {
                if (this.dom.delay.saveFieldOptions) {
                    clearTimeout(this.dom.delay.saveFieldOptions);
                }
                this.dom.delay.saveFieldOptions = setTimeout(function () {
                    _this.saveFieldItemOptions();
                }, 500);
            }
        };
        /**
         * Reset the option values with the root source
         * @param event
         */
        PopEntityFieldItemParamsComponent.prototype.onOptionSourceReset = function (event) {
            var field = this.dom.active.item;
            if (IsArray(field.source, true)) {
                field.options.values = [];
                field.source.map(function (item, index) {
                    field.options.values.push({
                        active: item.active ? +item.active : 1,
                        name: item.name ? item.name : item.label ? item.label : 'Item ' + (index + 1),
                        value: item.id ? item.id : item.value ? item.value : (index + 1),
                        sort: index
                    });
                });
                this._setFieldItemOptions();
                this.triggerSaveFieldOptions({ name: 'onChange' });
            }
        };
        /**
         * This will store the option changes that the user makes
         */
        PopEntityFieldItemParamsComponent.prototype.saveFieldItemOptions = function () {
            var _this = this;
            // #1: Create the payload structure
            this.dom.state.saving = true;
            var field = this.dom.active.item;
            var json = JSON.parse(JSON.stringify(field.options));
            json.values = [];
            var opt;
            this.dom.active.options.map(function (option) {
                opt = {};
                Object.keys(option).map(function (key) {
                    opt[key] = option[key].control.value;
                });
                json.values.push(opt);
            });
            var ignore401 = null;
            var version = 1;
            var patch = {
                'options': json
            };
            // #2: Clear/Store the subscriber so that it can be ignored if needed
            this.dom.setSubscriber('options-api-call', this.srv.request.doPatch("/fields/customs/" + field.id, patch, version, ignore401).subscribe(function (res) {
                _this.dom.active.item.options.values = json.values;
                _this.dom.state.saving = false;
                // #3: Inform the FieldBuilderPreviewComponent to update the new settings
                _this.core.channel.next({ source: _this.name, type: 'component', name: 'update', target: 'PopEntityFieldPreviewComponent' });
                if (_this.dom.subscriber.api)
                    _this.dom.subscriber.api.unsubscribe();
            }, function (err) {
                _this.dom.state.saving = false;
            }));
        };
        /**
         * This allows the user to sort the list of options that this field uses
         * @param event
         */
        PopEntityFieldItemParamsComponent.prototype.onOptionSortDrop = function (event) {
            dragDrop.moveItemInArray(this.dom.active.options, event.previousIndex, event.currentIndex);
            this.triggerSaveFieldOptions({ name: 'onChange' });
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityFieldItemParamsComponent.prototype.ngOnDestroy = function () {
            this.template.destroy();
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * This handler is for managing any cross-communication between components on the core channel
         * @param event
         */
        PopEntityFieldItemParamsComponent.prototype.coreEventHandler = function (event) {
            var _this = this;
            this.log.event("coreEventHandler", event);
            if (event.type === 'component') {
                if (event.source === 'PopEntityFieldItemsComponent') {
                    if (event.name === 'active-item') {
                        // #1: An event has triggered that the view needs to change the active item,  debounce this trigger so that this action does not get called on top of itself
                        this.dom.setTimeout('reset-view', function () {
                            _this.dom.loading();
                            // #2: Transfer in the data package from the event
                            _this.dom.active.item = event.data;
                            // this.asset.viewParams = event.data.config;
                            // this.asset.model = event.data.model;
                            // #3: Render the Active Item settings that are available
                            _this.setActiveFieldItem();
                            setTimeout(function () {
                                _this.dom.ready();
                            }, 0);
                        }, 100);
                    }
                    else if (event.name === 'label-settings') {
                        // #1: An event has triggered that the view needs to change the active item,  debounce this trigger so that this action does not get called on top of itself
                        if (this.dom.delay.reset)
                            clearTimeout(this.dom.delay.reset);
                        this.dom.delay.reset = setTimeout(function () {
                            _this.dom.loading();
                            _this.setLabelSettings();
                            setTimeout(function () {
                                _this.dom.ready();
                            }, 0);
                        }, 100);
                    }
                }
            }
            else if (IsValidFieldPatchEvent(this.core, event)) {
                this._setHeight();
            }
        };
        /**
         * This handles rendering the dynamic list of  param settings into the view
         * @param form
         * @param fieldItem
         * @param params
         */
        PopEntityFieldItemParamsComponent.prototype._setFieldItemParams = function () {
            var _this = this;
            if (IsObject(this.dom.active.item, true)) {
                this._configureParamList().then(function (paramComponentList) {
                    _this.template.render(paramComponentList, [], true);
                });
            }
        };
        /**
         * This will return a list of all the inputs that the settings require
         * @param fieldItem
         * @param params
         */
        PopEntityFieldItemParamsComponent.prototype._configureParamList = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var paramComponentList = [];
                var component;
                var configInterface;
                var fieldItem = _this.dom.active.item;
                var view = fieldItem.view;
                var rules = fieldItem.rules.sort(DynamicSort('name')).map(function (rule) { return CleanObject(rule); });
                var allowed = _this.asset.viewParams[view.name];
                var group = _this.field.fieldgroup.name;
                var itemCustomSettings = fieldItem.custom_setting;
                // ToDo: Put the custom Settings into the paramList
                // console.log('itemCustomSettings', itemCustomSettings);
                var isScheme = IsObject(_this.scheme, ['id']) ? true : false;
                _this.log.config("activeItem", {
                    item: fieldItem,
                    rules: rules,
                    group: group,
                    allowed: allowed,
                    settings: itemCustomSettings,
                    view: view
                });
                if (_this.dom.active.item.name !== 'value') {
                    var labelValue = fieldItem.label;
                    if (isScheme) {
                        var mapping = _this.srv.field.getSchemeFieldItemMapping(_this.scheme, +_this.field.id, _this.dom.active.item.id);
                        if (IsString(mapping.label, true)) {
                            labelValue = mapping.label;
                        }
                    }
                    var display = {
                        type: _this._getParamComponent('display'),
                        inputs: {
                            config: configInterface = Object.assign({
                                value: labelValue,
                                defaultValue: '',
                            }, {
                                label: 'Label',
                                name: 'label',
                                readonly: false,
                                required: true,
                                metadata: {
                                    session: fieldItem
                                },
                                facade: isScheme,
                                patch: {
                                    field: 'label',
                                    path: "fields/customs/" + fieldItem.id,
                                    callback: isScheme ? function (core, event) { return __awaiter(_this, void 0, void 0, function () {
                                        var session;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    session = this.srv.field.getSchemeFieldItemMapping(this.scheme, +this.field.id, this.dom.active.item.id);
                                                    session.label = event.config.control.value;
                                                    return [4 /*yield*/, this.srv.field.updateSchemeFieldMapping(this.scheme)];
                                                case 1:
                                                    _a.sent();
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); } : null,
                                }
                            })
                        }
                    };
                    paramComponentList.push(display);
                }
                if (group === 'selection') {
                    var display = {
                        type: _this._getParamComponent('view'),
                        inputs: {
                            config: configInterface = Object.assign({
                                value: view.id,
                                defaultValue: '',
                            }, {
                                label: 'Template View',
                                name: 'field_view_id',
                                readonly: false,
                                required: true,
                                options: {
                                    defaultValue: 2,
                                    values: [
                                        { value: 2, name: 'Select', sort_order: 0 },
                                        { value: 10, name: 'Radio', sort_order: 1 },
                                    ]
                                },
                                metadata: {
                                    session: fieldItem
                                },
                                patch: {
                                    field: 'field_view_id',
                                    path: "fields/" + fieldItem.id,
                                    callback: function (core, event) {
                                        var session = event.config.metadata.session;
                                        session.view = FieldItemView(event.response.view);
                                    }
                                }
                            })
                        }
                    };
                    paramComponentList.push(display);
                }
                // if(!this.field.multiple){
                //   const helpText = <DynamicComponentInterface>{
                //     type: this._getParamComponent('helpText'),
                //     inputs: {
                //       config: configInterface = {
                //         ...{
                //           value: fieldItem.helpText ? fieldItem.helpText : null,
                //           defaultValue: '',
                //         },
                //         ...{
                //           label: 'Help Text',
                //           name: 'helpText',
                //           readonly: false,
                //           metadata: {
                //             session: fieldItem
                //           },
                //           patch: { field: 'helpText', path: `fields/customs/${fieldItem.id}` }
                //         }
                //       }
                //     }
                //   };
                //   paramComponentList.push(helpText);
                // }
                if (view.name in _this.asset.viewParams) {
                    var ruleSchemeSession_1 = _this.srv.field.getSchemeFieldItemSection(_this.scheme, +_this.field.id, _this.dom.active.item.id, 'rule');
                    rules.map(function (rule) {
                        //           console.log('rule', rule);
                        var ruleValue = rule.value;
                        if (isScheme) {
                            if (IsDefined(ruleSchemeSession_1[rule.name])) {
                                ruleValue = ruleSchemeSession_1[rule.name];
                            }
                        }
                        if (rule.name in allowed) {
                            configInterface = Object.assign(Object.assign({}, rule), {
                                value: ruleValue,
                                name: rule.name,
                                label: TitleCase(SnakeToPascal(rule.name)),
                                metadata: { rule: rule },
                                facade: true,
                                patch: {
                                    duration: 0,
                                    field: "",
                                    path: "",
                                    callback: function (core, event) { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (!IsObject(this.scheme, true)) return [3 /*break*/, 3];
                                                    if (!IsObject(ruleSchemeSession_1)) return [3 /*break*/, 2];
                                                    ruleSchemeSession_1[rule.name] = event.config.control.value;
                                                    return [4 /*yield*/, this.srv.field.updateSchemeFieldMapping(this.scheme)];
                                                case 1:
                                                    _a.sent();
                                                    _a.label = 2;
                                                case 2: return [3 /*break*/, 4];
                                                case 3:
                                                    this.srv.field.storeFieldItemRule(core, fieldItem, event).then(function () { return true; });
                                                    _a.label = 4;
                                                case 4: return [2 /*return*/];
                                            }
                                        });
                                    }); }
                                }
                            });
                            if (IsObject(rule.options, true)) {
                                configInterface.options = rule.options;
                            }
                            component = {
                                type: _this._getParamComponent(rule.name),
                                inputs: {
                                    config: configInterface,
                                }
                            };
                            paramComponentList.push(component);
                        }
                    });
                }
                if (IsObject(itemCustomSettings, true)) {
                    Object.keys(itemCustomSettings).map(function (settingName) {
                        var setting = itemCustomSettings[settingName];
                        // console.log('setting', setting);
                        if (setting.type !== 'model') {
                            paramComponentList.push(_this.srv.field.getCustomSettingComponent(_this.core, _this.core.entity, setting, _this.scheme));
                        }
                    });
                }
                resolve(paramComponentList);
            });
        };
        /**
         * This will return a list of all the inputs that the label settings require
         * @param fieldItem
         * @param params
         */
        PopEntityFieldItemParamsComponent.prototype._configureLabelList = function () {
            return new Promise(function (resolve) {
                // const paramComponentList: DynamicComponentInterface[] = [];
                //
                // const values = <DynamicComponentInterface>{
                //   type: PopEntityFieldLabelComponent,
                //   inputs: {
                //     core: this.core
                //   }
                // };
                // paramComponentList.push(values);
                //
                //
                resolve([]);
            });
        };
        PopEntityFieldItemParamsComponent.prototype._setHeight = function () {
            this.dom.overhead = 125;
            // this.dom.height.outer = +this.dom.repo.position[ this.position ].height - 121;
            // const field = <FieldInterface>this.core.entity;
            // if( false && field.multiple ){
            //   this.dom.height.outer -= 20;
            //   this.dom.height.outer -= ( +field.multiple_min * 60 );
            // } // values box
            //
            // if( this.dom.height.outer < 400 ) this.dom.height.outer = 400;
            // this.dom.height.outer -= 2;
            this.dom.setHeight(399, this.dom.overhead);
        };
        /**
         * Return the the field input component that should be used for the type of setting param;
         * @param form
         */
        PopEntityFieldItemParamsComponent.prototype._getParamComponent = function (form) {
            switch (form) {
                case 'label':
                    return FieldLabelParamComponent;
                    break;
                case 'display':
                case 'api':
                case 'sort_top':
                case 'regex':
                case 'sort':
                case 'helpText':
                    return FieldInputParamComponent;
                    break;
                case 'select':
                case 'mask':
                case 'pattern':
                case 'validation':
                case 'transformation':
                    return FieldSelectParamComponent;
                    break;
                case 'hidden':
                case 'visible':
                case 'disabled':
                case 'readonly':
                case 'required':
                    return FieldSwitchParamComponent;
                    break;
                case 'layout':
                    return FieldRadioParamComponent;
                    break;
                case 'minlength':
                case 'maxlength':
                    return FieldNumberParamComponent;
                case 'metadata':
                    return FieldTextareaParamComponent;
                    break;
                case 'view':
                    return FieldRadioParamComponent;
                    break;
                default:
                    return FieldLabelParamComponent;
            }
        };
        /**
         * This will make sure the options will get set up properly if the active items uses them
         * @param form
         * @param options
         * @param params
         */
        PopEntityFieldItemParamsComponent.prototype._setFieldItemOptions = function () {
            var _this = this;
            this.dom.state.showOptions = false;
            var field = this.dom.active.item;
            var form = field.view ? field.view.name : null;
            if (!form)
                exports.PopLog.warn(this.name, "_setFieldItemOptions: Invalid Form", field);
            this.dom.active.options = [];
            if (form && form in this.asset.viewOptions) {
                // if( field.options.fixed ){
                //   field.options.enum = true;
                // }
                if (IsArray(field.source, true)) {
                    field.options.enum = true;
                    this.dom.state.isOptionSource = true;
                }
                if (!(IsObject(field.options, ['values'])) && !(field.source)) {
                    field.options = this.asset.viewOptions[form];
                }
                if (IsObject(field.options, ['values']) && Array.isArray(field.options.values)) {
                    field.options.values.map(function (option, index) {
                        option.name = option.name ? String(option.name) : 'Item ' + (index + 1);
                        option.value = option.id ? String(option.id) : option.value ? String(option.value) : String((index + 1));
                        option.sort = index;
                        if (typeof option.active !== 'boolean')
                            option.active = true;
                        _this.dom.active.options.push({
                            active: new CheckboxConfig({
                                label: null,
                                value: +option.active,
                                bubble: true,
                            }),
                            name: new InputConfig({
                                label: null,
                                value: option.name,
                                transformation: 'title',
                                bubble: _this.dom.state.isOptionSource ? false : true,
                                pattern: 'AlphaNumeric',
                                validators: [forms.Validators.required],
                                maxlength: 32,
                                readonly: _this.dom.state.isOptionSource ? true : false,
                            }),
                            value: new InputConfig({
                                label: null,
                                value: option.value,
                                bubble: field.options.enum ? false : true,
                                validators: [forms.Validators.required],
                                pattern: 'AlphaNumericNoSpace',
                                transformation: 'lower',
                                maxlength: 32,
                                readonly: field.options.enum ? true : false,
                            }),
                            sort: new InputConfig({
                                label: null,
                                value: option.sort || 0,
                                bubble: true,
                            }),
                        });
                    });
                    this.dom.state.showOptions = true;
                }
            }
        };
        return PopEntityFieldItemParamsComponent;
    }(PopExtendDynamicComponent));
    PopEntityFieldItemParamsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-builder-items-params',
                    template: "<div class=\"entity-field-item-settings-container\" [style.height.px]=dom.height.outer>\n  <div class=\"entity-field-editor-section-wrapper\">\n    <div class=\"field-builder-config-content\" [style.height.px]=\"dom.height.outer\">\n      <ng-container #container></ng-container>\n      <div class=\"field-builder-options-content\" *ngIf=\"dom.state.showOptions\" [style.maxHeight.px]=\"dom.height.inner\">\n        <div class=\"field-builder-source-header\">\n          <label>Options</label>\n          <lib-pop-button\n            *ngIf=\"dom.state.isOptionSource\"\n            [config]=\"{value:'Reset', size: 24, text: 12, color: 'default', bubble: true, event: 'reset-source'}\"\n            (events)=\"onOptionSourceReset($event);\"\n          ></lib-pop-button>\n        </div>\n        <mat-divider *ngIf=\"dom.state.showOptions\"></mat-divider>\n        <div class=\"field-builder-item-options-headers\">\n          <div class=\"field-builder-item-options-sort\">\n            Sort\n          </div>\n          <div class=\"field-builder-item-options-active\">\n            Active\n          </div>\n          <div class=\"field-builder-item-name-input field-builder-mar-rgt\">\n            <label>Name</label>\n          </div>\n          <div class=\"field-builder-item-value-input\">\n            Value\n          </div>\n          <div class=\"field-builder-item-options-icon\" [ngClass]=\"{'sw-hidden':dom.active.item?.options.enum}\">\n            <i class=\"material-icons field-builder-item-options-new sw-pointer sw-hover\" matTooltip=\"Add\"\n               (click)=\"addFieldItemOption()\">\n              add\n            </i>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <div class=\"field-builder-item-options-loader\">\n          <mat-progress-bar *ngIf=\"dom.state.saving\" mode=\"indeterminate\"></mat-progress-bar>\n        </div>\n        <div class=\"field-builder-item-options-container\" cdkDropList (cdkDropListDropped)=\"onOptionSortDrop($event)\">\n          <div class=\"field-builder-item-options-headers\" *ngFor=\"let option of dom.active.options; let i = index;\" cdkDrag cdkDragLockAxis=\"y\" cdkDragBoundary=\".field-builder-item-options-container\">\n            <div class=\"field-builder-item-options-sort\" [ngClass]=\"{'sw-hidden':dom.active.item?.options.fixed}\">\n              <i class=\"material-icons\" cdkDragHandle>\n                drag_indicator\n              </i>\n            </div>\n            <div class=\"field-builder-item-options-active\" [ngClass]=\"{'sw-hidden':dom.active.item?.options.fixed}\">\n              <lib-pop-checkbox (events)=\"triggerSaveFieldOptions($event);\" [config]=\"option.active\"></lib-pop-checkbox>\n            </div>\n            <div class=\"field-builder-item-name-input field-builder-mar-rgt\">\n              <lib-pop-input [config]=\"option.name\" (events)=\"triggerSaveFieldOptions($event);\"></lib-pop-input>\n            </div>\n            <div class=\"field-builder-item-value-input\">\n              <lib-pop-input [config]=\"option.value\" (events)=\"triggerSaveFieldOptions($event);\"></lib-pop-input>\n            </div>\n            <div class=\"field-builder-item-options-icon\" matTooltip=\"Remove\" [ngClass]=\"{'sw-hidden':dom.active.item?.options.enum}\">\n              <i class=\"material-icons field-builder-item-options-new sw-pointer sw-hover\"\n                 (click)=\"removeFieldItemOption(i)\">\n                remove\n              </i>\n            </div>\n            <div class=\"field-builder-item-options-headers\" *cdkDragPreview></div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: [".entity-field-editor-header{display:flex;flex-direction:column;height:97px}.entity-field-editor-header-section{position:relative;width:100%;box-sizing:border-box;height:30px;clear:both}.entity-field-editor-container{min-height:100px;position:relative}.entity-field-editor-border{border:1px solid var(--border)}.entity-field-editor-section-header{position:relative;display:flex;flex-direction:row;height:40px;padding:0 5px 0 10px;align-items:center;justify-content:space-between;font-size:1em;font-weight:700;clear:both;box-sizing:border-box;background:var(--darken02)}.entity-field-editor-section-header-helper-icon{width:20px;height:20px;font-size:1em;z-index:2}.entity-field-editor-active-selection{padding-left:0!important;border-left:5px solid var(--primary)}.entity-field-editor-active-config{border-left:5px solid var(--primary)}.entity-field-item-settings-container{min-height:100px;position:relative;border:1px solid var(--border);border-left:none;min-width:200px}.field-builder-config-row{position:relative;height:30px;max-height:30px;min-width:200px;font-size:20px;line-height:20px;flex:1 1 100%;flex-direction:row;margin:4px 0 4px 10px;align-items:center;justify-content:flex-start;clear:both}.field-builder-config-content{padding:5px 15px 10px;box-sizing:border-box;display:flex;flex-flow:column;align-items:stretch;overflow-y:scroll;overflow-x:hidden}.field-builder-options-content{flex:1;flex-grow:1;flex-direction:column;box-sizing:border-box}.field-builder-source-header{position:relative;width:100%;display:flex;align-items:center;justify-content:space-between;box-sizing:border-box;height:35px;margin-top:10px;clear:both}.field-builder-item-options-new{float:right}.field-builder-item-options-headers{display:flex;align-items:center;justify-content:flex-start;margin-top:2px;height:32px}.field-builder-item-options-active{display:flex;width:55px;text-align:center;align-items:center;justify-content:center}.field-builder-item-options-loader{position:relative;display:block;width:100%;height:2px;clear:both;overflow:hidden;margin-bottom:2px}.field-builder-item-options-input{display:flex;width:25%;flex-grow:1}.field-builder-item-options-input lib-pop-input{width:100%}.field-builder-item-name-input{display:flex;width:40%;flex-grow:1}.field-builder-item-name-input lib-pop-input{width:100%}.field-builder-item-value-input{display:flex;width:20%;flex-grow:1}.field-builder-item-value-input lib-pop-input{width:100%}.field-builder-item-options-container{flex:1;flex-direction:column;padding:8px 0;box-sizing:border-box}.field-builder-item-options-sort{display:flex;width:10%;align-items:center;justify-content:center}.field-builder-item-options-sort i{margin-top:var(--gap-xs)}.field-builder-item-options-icon{display:flex;width:40px;align-items:center;justify-content:center}.field-builder-preview-content{position:relative;margin-top:5px;padding:5px}.field-builder-state-selector-wrapper{position:absolute;right:5px;top:-5px;width:50%;height:30px;font-size:12px}.field-builder-mar-rgt{margin-right:5px}:host ::ng-deep .field-builder-param-container{position:relative;display:flex;flex-direction:row;box-sizing:border-box;-moz-box-sizing:border-box;align-items:center;justify-content:flex-start;margin-bottom:4px}:host ::ng-deep .field-builder-param-title-container{display:flex;padding:0 0 0 2%;pointer-events:all;align-items:center;width:30%;max-width:30%;overflow:hidden;box-sizing:border-box;-moz-box-sizing:border-box}:host ::ng-deep .field-builder-param-title{font-size:16px;display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host ::ng-deep .field-builder-param-config-container{display:flex;padding:0 5%;pointer-events:all;width:70%;max-width:70%;overflow:hidden;box-sizing:border-box;-moz-box-sizing:border-box;overflow-y:scroll;overflow-x:hidden}:host ::ng-deep .field-builder-param-reset-box{position:relative;display:block;margin:0;padding:0;width:100%}:host ::ng-deep .field-builder-param-reset-box .pop-input-container,:host ::ng-deep .field-builder-param-reset-box .pop-select-container,:host ::ng-deep .field-builder-param-reset-box .pop-textarea-container{margin:2px 0}:host ::ng-deep .field-builder-param-spacer-xs{display:flex;flex-grow:1;height:5px;padding:0 1%}:host ::ng-deep .field-builder-param-spacer-sm{display:flex;flex-grow:1;height:10px;padding:0 1%}:host ::ng-deep .field-builder-param-spacer-md{display:flex;flex-grow:1;height:20px;padding:0 1%}:host ::ng-deep .field-builder-param-spacer{display:flex;flex-grow:1;height:30px;padding:0 1%}:host ::ng-deep .field-builder-item-options-container .mat-form-field-infix{width:auto;padding:6px 0!important;margin-top:6px!important;border:0!important;font-size:.8em}:host ::ng-deep .field-builder-item-options-active .pop-checkbox-container{margin:2px;min-height:0;height:20px;margin-top:var(--gap-xs)}:host ::ng-deep .field-builder-item-options-container .pop-input-container{margin:5px 2px 0;min-height:20px}:host ::ng-deep .field-builder-item-options-container .pop-input-feedback-container{margin-top:-4px}.cdk-drag-preview{box-sizing:border-box;border-radius:4px;justify-content:center;align-items:center;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.cdk-drag-placeholder{opacity:.6;background:rgba(0,0,0,.1)}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.field-builder-settings-header{padding-top:3px;position:relative;height:35px}:host ::ng-deep .mat-tab-link{height:35px;padding:5px;min-width:100px}"]
                },] }
    ];
    PopEntityFieldItemParamsComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopFieldEditorService }
    ]; };
    PopEntityFieldItemParamsComponent.propDecorators = {
        field: [{ type: i0.Input }],
        scheme: [{ type: i0.Input }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }]
    };

    var FieldSliderParamComponent = /** @class */ (function () {
        function FieldSliderParamComponent() {
            this.events = new i0.EventEmitter();
            this.name = 'FieldSliderParamComponent';
        }
        /**
         * This component expects config to be a Label config
         */
        FieldSliderParamComponent.prototype.ngOnInit = function () {
            if (!this.config.value)
                this.config.value = this.config.defaultValue;
            this.param = new SliderConfig({
                name: this.config.name,
                label: this.config.label,
                column: this.config.column,
                value: this.config.value ? this.config.value : this.config.defaultValue,
                min: this.config.min ? this.config.min : 1,
                max: this.config.defaultValue,
                facade: this.config.facade,
                patch: this.config.patch,
                metadata: this.config.metadata ? this.config.metadata : {}
            });
            exports.PopLog.init(this.name, "init", this);
        };
        return FieldSliderParamComponent;
    }());
    FieldSliderParamComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-field-slider-param',
                    template: "\n    <lib-pop-slider (events)=\"events.emit($event);\" [config]=param></lib-pop-slider>\n  "
                },] }
    ];
    FieldSliderParamComponent.propDecorators = {
        config: [{ type: i0.Input }],
        events: [{ type: i0.Output }]
    };

    var PopEntityFieldEntriesComponent = /** @class */ (function (_super) {
        __extends(PopEntityFieldEntriesComponent, _super);
        function PopEntityFieldEntriesComponent(el, _domRepo, _fieldRepo, _tabRepo) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._domRepo = _domRepo;
            _this._fieldRepo = _fieldRepo;
            _this._tabRepo = _tabRepo;
            _this.scheme = null;
            _this.name = 'PopEntityFieldEntriesComponent';
            _this.srv = {
                action: exports.ServiceInjector.get(PopEntityActionService),
                dialog: exports.ServiceInjector.get(i1$2.MatDialog),
                field: undefined,
                request: exports.ServiceInjector.get(PopRequestService),
                tab: exports.ServiceInjector.get(PopTabMenuService),
            };
            _this.asset = {
                basePath: undefined,
                entries: [],
                entriesMap: {},
                schemeFieldStorage: undefined,
                type: undefined,
                typeOption: undefined,
            };
            _this.ui = {
                label: undefined,
                minMax: undefined,
                editLabel: undefined,
                uniqueLabel: undefined,
                customLabel: undefined,
                entries: [],
                map: {},
                entryLimit: 4
            };
            _this.extendServiceContainer();
            /**
             * This should transform and validate the data. The view should try to only use data that is stored on ui so that it is not dependent on the structure of data that comes from other sources. The ui should be the source of truth here.
             */
            _this.dom.configure = function () {
                return new Promise(function (resolve) {
                    _this.core = IsObjectThrowError(_this.core, true, _this.name + ":configureDom: - this.core") ? _this.core : null;
                    if (!_this.field)
                        _this.field = IsObjectThrowError(_this.core, ['entity'], "Invalid Core") && IsObjectThrowError(_this.core.entity, ['id', 'fieldgroup'], "Invalid Field") ? _this.core.entity : null;
                    _this.asset.type = _this.field.fieldgroup.name; // the field group name , ie.. address, phone
                    _this.asset.typeOption = _this.srv.field.getDefaultLabelTypeOptions(); // the select options that belong to the types
                    _this.asset.basePath = "fields/" + _this.field.id + "/entries"; // api endpoint to hit for field entries
                    _this._setCustomTraits();
                    _this.ui.entries = IsArrayThrowError(_this.core.entity.entries, false, "Invalid Field Entries") ? _this.core.entity.entries : null;
                    _this.dom.session.controls = new Map(); // store the entry configs so that changes are not lost when the tabs are changed
                    _this._buildCustomSettings();
                    return resolve(true);
                });
            };
            _this.dom.proceed = function () {
                return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var primary;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (IsObject(this.scheme, true)) {
                                    this.asset.schemeFieldStorage = this.srv.field.getSchemeFieldSetting(this.scheme, +this.field.id);
                                    this.dom.state.hasScheme = IsObject(this.scheme, true) ? true : false;
                                    primary = this.srv.field.getSchemePrimary(this.scheme);
                                    this.dom.state.isPrimary = this.field.fieldgroup.name in primary && +primary[this.field.fieldgroup.name] == this.field.id ? true : false;
                                }
                                else {
                                    this.dom.state.hasScheme = false;
                                    this.dom.state.isPrimary = false;
                                }
                                return [4 /*yield*/, this._showEntries()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/, resolve(true)];
                        }
                    });
                }); });
            };
            return _this;
        }
        PopEntityFieldEntriesComponent.prototype.extendServiceContainer = function () {
            this.srv.field = this._fieldRepo;
            // delete this._fieldRepo;
        };
        /**
         * This component should have a specific purpose
         */
        PopEntityFieldEntriesComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * This allows the user to sort the list of options that this field uses
         * @param event
         */
        PopEntityFieldEntriesComponent.prototype.onOptionSortDrop = function (event) {
            var _this = this;
            dragDrop.moveItemInArray(this.ui.entries, event.previousIndex, event.currentIndex);
            this.dom.setTimeout("update-sort-order", function () { return __awaiter(_this, void 0, void 0, function () {
                var requests;
                var _this = this;
                return __generator(this, function (_a) {
                    requests = [];
                    this.ui.entries.map(function (entry, index) {
                        requests.push(exports.PopRequest.doPatch(_this.asset.basePath + "/" + entry.id, { sort_order: index, orphaned: -1 }, 1, false));
                        var session = _this.field.entries.find(function (e) { return +e.id === +entry.id; });
                        if (IsObject(session, true)) {
                            session.sort_order = index;
                        }
                        entry.increment = index + 1;
                    });
                    if (requests.length) {
                        this.srv.tab.showAsLoading(true);
                        this.dom.setSubscriber("update-sort-order", rxjs.forkJoin(requests).subscribe(function (res) {
                            _this.srv.field.triggerFieldPreviewUpdate();
                            _this.srv.tab.showAsLoading(false);
                        }, function (err) {
                            _this.dom.setError(err, true);
                            _this.srv.tab.showAsLoading(false);
                        }));
                    }
                    return [2 /*return*/];
                });
            }); }, 0);
            // this.triggerSaveFieldOptions( <PopBaseEventInterface>{ name: 'onChange' } );
        };
        /**
         * When the type of an entry is changed in the database, make sure the changes is updated locally
         * This is will  be removed since we don't want to do types
         * @param index
         * @param event
         */
        PopEntityFieldEntriesComponent.prototype.onEntryTypeChange = function (index, event) {
            var _this = this;
            if (IsValidFieldPatchEvent(this.core, event)) {
                var config = this.ui.entries[index];
                var entry = this.field.entries[index];
                var session = this.dom.session.controls.get(index);
                if (entry && session) {
                    entry.type = config.type.control.value;
                    this._updateEntryTypeSession(session.type, entry);
                    this.dom.session.controls.set(index, session);
                    this.setDomSession(index, session);
                }
                setTimeout(function () {
                    _this.srv.field.triggerFieldPreviewUpdate();
                }, 0);
            }
        };
        /**
         * When the display/label of an entry is changed in the database, make sure the changes is updated locally
         * @param index
         * @param event
         */
        PopEntityFieldEntriesComponent.prototype.onEntryDisplayChange = function (index, event) {
            var _this = this;
            if (index === 0)
                this.ui.label.control.setValue(event.config.control.value, { emitEvent: false });
            if (IsValidFieldPatchEvent(this.core, event)) {
                // PopTemplate.buffer();
                var entry = this.field.entries[index];
                var session = this.dom.session.controls.get(index);
                if (entry && session) {
                    entry.name = event.config.control.value;
                    this._updateEntryDisplaySession(session.display, entry);
                    this.dom.session.controls.set(index, session);
                    this.setDomSession(index, session);
                }
            }
            setTimeout(function () {
                _this.srv.field.triggerFieldPreviewUpdate();
            }, 0);
        };
        /**
         * When the display/label of an entry is changed in the database, make sure the changes is updated locally
         * @param index
         * @param event
         */
        PopEntityFieldEntriesComponent.prototype.onEntryActiveChange = function (index, event) {
            var _this = this;
            if (IsObject(this.scheme, ['id'])) {
                // here
            }
            else {
                var entry = this.field.entries[index];
                if (entry) {
                    if (event.config.control.value) {
                        entry.orphaned = false;
                        entry.orphaned_at = null;
                    }
                    else {
                        entry.orphaned = true;
                        entry.orphaned_at = exports.PopDate.toIso(new Date());
                    }
                }
                setTimeout(function () {
                    _this._handleMultipleEntries();
                    _this.srv.field.triggerFieldPreviewUpdate();
                }, 0);
                this.log.info("onEntryActiveChange", event);
            }
        };
        PopEntityFieldEntriesComponent.prototype.onEntryTraitChange = function (index, trait) {
            var _this = this;
            this.dom.setTimeout("entry-trait-" + index, function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.ui.entries.map(function (entry, entryIndex) {
                                var entryTrait = entry.traits.find(function (t) { return t.name === trait.name; });
                                if (IsObject(entryTrait, true)) {
                                    if (+entryIndex !== +index) {
                                        entryTrait.selected = false;
                                    }
                                    else {
                                        entryTrait.selected = true;
                                        if (IsObject(_this.scheme, ['mapping'])) {
                                            if (IsObject(_this.asset.schemeFieldStorage, ['trait_entry'])) {
                                                _this.asset.schemeFieldStorage.trait_entry[entryTrait.name] = entry.id;
                                            }
                                        }
                                    }
                                }
                            });
                            return [4 /*yield*/, this.srv.field.updateSchemeFieldMapping(this.scheme)];
                        case 1:
                            _a.sent();
                            this.log.info("onEntryTraitChange");
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        PopEntityFieldEntriesComponent.prototype._handleMultipleEntries = function () {
            this.log.info("_handleMultipleEntries");
            this.dom.session.multipleActiveEntries = this._isMultipleActiveEntries();
            if (!(this.dom.session.multipleActiveEntries)) {
                this._disableActiveEntries();
            }
            else {
                this._enableActiveEntries();
            }
        };
        /**
         * A User will be able to add as many labels as they like
         */
        PopEntityFieldEntriesComponent.prototype.onAddEntryValue = function () {
            var _this = this;
            this.dom.setTimeout("add-entry", function () { return __awaiter(_this, void 0, void 0, function () {
                var action, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            action = {
                                name: 'entry',
                                header: 'Add Entry',
                                facade: true,
                                // component: {
                                //   type: DemoOneComponent
                                // },
                                fields: {
                                    name: {
                                        form: 'input',
                                        pattern: 'Default',
                                        name: 'name',
                                        hint: true,
                                        label: 'Name',
                                        required: true,
                                        bubble: false,
                                        noInitialValue: true,
                                        transformation: 'toTitleCase',
                                        maxlength: 32,
                                        prevent: this.ui.entries.map(function (entry) {
                                            return StorageGetter(entry, ['display', 'control', 'value'], 'Undefined');
                                        })
                                    }
                                },
                                // onEvent: (core: CoreConfig, event: PopBaseEventInterface):Promise<boolean>=>{
                                //   return new Promise<boolean>((onEventResolver)=>{
                                //     return onEventResolver(true);
                                //   });
                                // },
                                bubbleAll: true,
                                blockEntity: true
                            };
                            return [4 /*yield*/, this.srv.action.do(this.core, action)];
                        case 1:
                            res = _a.sent();
                            if (!IsObject(res, ['name'])) return [3 /*break*/, 3];
                            return [4 /*yield*/, this._addEntry(res.name)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); }, 0);
        };
        PopEntityFieldEntriesComponent.prototype._addEntry = function (name) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.srv.tab.showAsLoading(true);
                _this.dom.state.pending = true;
                var sessionIndex = _this.field.entries.filter(function (x) { return x.type !== 'custom'; }).length;
                var increment = sessionIndex + 1;
                var session = _this.dom.session.controls.get(sessionIndex);
                if (!name) {
                    name = session ? session.display.value : TitleCase((_this.field.name ? _this.field.name : _this.asset.type) + " " + increment);
                }
                var entry = {
                    name: name,
                    type: _this.asset.typeOption.defaultValue,
                    orphaned_at: null,
                    sort_order: sessionIndex
                };
                _this._makeApiRequests([
                    _this.srv.request.doPost("" + _this.asset.basePath, entry, 1, false),
                    _this.srv.request.doPatch("fields/" + _this.field.id, { multiple_min: increment, multiple_max: increment }, 1, false),
                ]).then(function (res) {
                    _this._setEntrySessionControls(_this.field.entries.filter(function (x) { return x.type !== 'custom'; })).then(function (entries) {
                        _this._setEntries(entries).then(function () {
                            _this.dom.state.pending = false;
                            setTimeout(function () {
                                // For now I want the amount of field entries to dictate what min/max should be
                                _this.field.multiple_min = increment;
                                _this.field.multiple_max = increment;
                                _this.ui.minMax.minConfig.max = _this.field.entries.length;
                                _this.ui.minMax.minConfig.min = _this.field.entries.length;
                                _this.ui.minMax.minConfig.control.setValue(_this.field.entries.length);
                                _this.ui.minMax.maxConfig.max = _this.field.entries.length;
                                _this.ui.minMax.maxConfig.min = _this.field.entries.length;
                                _this.ui.minMax.maxConfig.control.setValue(_this.field.entries.length);
                                // this.ui.minMax.triggerOnChange();
                                _this.srv.field.triggerFieldPreviewUpdate();
                                _this.srv.tab.showAsLoading(false);
                                return resolve(true);
                            }, 0);
                        });
                    });
                }, function (err) {
                    _this.dom.setError(err, true);
                    _this.srv.tab.showAsLoading(false);
                    return resolve(false);
                });
            });
        };
        PopEntityFieldEntriesComponent.prototype._collectNewEntryName = function () {
            var _this = this;
            var fields = {
                client_id: {
                    form: 'select',
                    name: 'client_id',
                    label: 'Client',
                    bubble: true,
                    disabled: false,
                    required: true,
                    options: {
                        resource: 'clients',
                        child: 'account_id'
                    },
                },
            };
            var actionConfig = {
                header: 'Add New Field Entry',
                name: 'campaign',
                fields: Object.assign({}, fields),
                submitText: 'Submit',
                postUrl: null,
                blockEntity: true, // implies that fields should not be inherited from the original field.ts file
            };
            this.dom.setTimeout("collect-name", function () { return __awaiter(_this, void 0, void 0, function () {
                var setCampaign;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.srv.action.do(this.core, actionConfig)];
                        case 1:
                            setCampaign = _a.sent();
                            this.log.info('setCampaign', setCampaign);
                            this.srv.tab.showAsLoading(false);
                            return [2 /*return*/];
                    }
                });
            }); }, 0);
        };
        /**
         * A User will be able to remove labels as they like
         */
        PopEntityFieldEntriesComponent.prototype.onRemoveEntryValue = function (entry) {
            var _this = this;
            if (entry && entry.id) {
                this.srv.dialog.open(PopConfirmationDialogComponent, {
                    width: '500px',
                    data: {
                        option: null,
                        body: "Deleting " + entry.display.control.value + " will result in any collected values on this entry being permanently removed.<br><br>Do you wish to continue?",
                        align: 'left'
                    }
                }).afterClosed().subscribe(function (res) {
                    if (res && res.confirmed) {
                        // PopTemplate.buffer();
                        _this.dom.state.pending = true;
                        var decrement_1 = _this.field.entries.length - 1;
                        _this.srv.request.doDelete(_this.asset.basePath + "/" + entry.id);
                        _this._makeApiRequests([
                            _this.srv.request.doDelete(_this.asset.basePath + "/" + entry.id),
                            _this.srv.request.doPatch("fields/" + _this.field.id, { multiple_min: decrement_1, multiple_max: decrement_1 }, 1, false),
                        ]).then(function () {
                            _this._setEntrySessionControls(_this.field.entries.filter(function (x) { return x.type !== 'custom'; })).then(function (entries) {
                                _this._setEntries(entries).then(function () {
                                    _this.dom.state.pending = false;
                                    setTimeout(function () {
                                        // For now I want the amount of field entries to dictate what min/max should be
                                        _this.field.multiple_min = decrement_1;
                                        _this.field.multiple_max = decrement_1;
                                        _this.ui.minMax.minConfig.max = _this.field.entries.length;
                                        _this.ui.minMax.minConfig.min = _this.field.entries.length;
                                        _this.ui.minMax.minConfig.control.setValue(_this.field.entries.length);
                                        _this.ui.minMax.maxConfig.max = _this.field.entries.length;
                                        _this.ui.minMax.maxConfig.min = _this.field.entries.length;
                                        _this.ui.minMax.maxConfig.control.setValue(_this.field.entries.length);
                                        // Tmp Block ^
                                        _this.srv.field.triggerFieldPreviewUpdate();
                                    }, 0);
                                });
                            });
                        });
                    }
                });
            }
        };
        PopEntityFieldEntriesComponent.prototype.onMinMaxSetting = function (event) {
            if (IsValidFieldPatchEvent(this.core, event)) {
                this.srv.field.triggerFieldPreviewUpdate();
            }
        };
        /**
         * The dom destroy function manages all the clean up that is necessary if subscriptions, timeouts, etc are stored properly
         */
        PopEntityFieldEntriesComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Private Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        PopEntityFieldEntriesComponent.prototype._setCustomTraits = function () {
            this.field.trait.map(function (trait) {
                if (!trait.label)
                    trait.label = TitleCase(SnakeToPascal(trait.name));
            });
        };
        /**
         * Build the configs for the set of custom settings that this component uses
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._buildCustomSettings = function () {
            var _this = this;
            this.ui.minMax = new MinMaxConfig({
                bubble: true,
                helpText: 'Set the minimum values that this field should have, the maximum amount of values will be the total entries defined.',
                label: 'Entry Values',
                minRequired: true,
                maxRequired: true,
                minValue: this.field.entries.length,
                maxValue: this.field.entries.length,
                min: this.field.entries.length,
                max: this.field.entries.length,
                limit: 10,
                minLabel: 'Minimum',
                maxLabel: 'Maximum',
                maxColumn: 'multiple_max',
                minColumn: 'multiple_min',
                maxReadonly: true,
                patch: {
                    field: 'n/a',
                    path: "fields/" + this.field.id,
                    callback: function (core, event) {
                        var newValue = event.config.control.value;
                        Object.keys(newValue).map(function (key) {
                            _this.field[key] = newValue[key];
                        });
                    }
                }
            });
            this.ui.label = new InputConfig(// Piggy back off of the first entry label
            {
                label: 'Label',
                value: this.field.entries[0].name,
                facade: false,
                maxlength: 24,
                patch: {
                    field: "name",
                    path: "fields/" + this.field.id + "/entries/" + this.field.entries[0].id,
                    callback: function (core, event) {
                        _this.onEntryDisplayChange(0, event);
                    }
                }
            });
            // The edit label setting will determine if the end-user is able to change the the label
            var editLabelSetting = IsObject(this.field.custom_setting.edit_label, true) ? this.field.custom_setting.edit_label : null;
            if (editLabelSetting) {
                this.ui.editLabel = new SwitchConfig({
                    name: 'edit_label',
                    helpText: editLabelSetting.helpText,
                    label: editLabelSetting.label,
                    labelPosition: 'after',
                    value: editLabelSetting.value,
                    metadata: {
                        setting: editLabelSetting,
                    },
                    facade: true,
                    patch: {
                        field: 'value',
                        path: "",
                        callback: function (core, event) {
                            _this.srv.field.storeCustomSetting(_this.core, event).then(function (res) {
                                if (IsString(res)) {
                                    _this.ui.editLabel.message = res;
                                }
                                else {
                                    _this.srv.field.triggerFieldPreviewUpdate();
                                }
                            });
                        }
                    }
                });
            }
            // The custom label setting will allow the user to add their own custom label to fit their needs, should only show if edit label setting is true
            var customLabelSetting = IsObject(this.field.custom_setting.custom_label, true) ? this.field.custom_setting.custom_label : null;
            if (customLabelSetting) {
                this.ui.customLabel = new CheckboxConfig({
                    name: 'custom_label',
                    facade: true,
                    helpText: customLabelSetting.helpText,
                    label: customLabelSetting.label,
                    labelPosition: 'after',
                    value: customLabelSetting.value,
                    metadata: {
                        setting: customLabelSetting,
                    },
                    patch: {
                        field: 'value',
                        path: "",
                        callback: function (core, event) {
                            _this.srv.field.storeCustomSetting(_this.core, event).then(function (res) {
                                if (IsString(res)) {
                                    _this.ui.customLabel.message = res;
                                }
                                else {
                                    _this._onCustomLabelChange(_this.ui.customLabel.control.value).then(function () {
                                        _this.srv.field.triggerFieldPreviewUpdate();
                                    });
                                }
                            });
                        }
                    }
                });
            }
            // The unique label setting will force all of the field values to use a unique label, should only show if edit label setting is true
            var uniqueLabelSetting = IsObject(this.field.custom_setting.unique_label, true) ? this.field.custom_setting.unique_label : null;
            if (uniqueLabelSetting) {
                this.ui.uniqueLabel = new CheckboxConfig({
                    name: 'unique_label',
                    facade: true,
                    helpText: uniqueLabelSetting.helpText,
                    label: uniqueLabelSetting.label,
                    labelPosition: 'after',
                    value: uniqueLabelSetting.value,
                    metadata: {
                        setting: uniqueLabelSetting,
                    },
                    patch: {
                        field: 'value',
                        path: "",
                        callback: function (core, event) {
                            _this.srv.field.storeCustomSetting(_this.core, event).then(function (res) {
                                if (IsString(res)) {
                                    _this.ui.uniqueLabel.message = res;
                                }
                                else {
                                    _this.srv.field.triggerFieldPreviewUpdate();
                                }
                            });
                        }
                    }
                });
            }
        };
        /**
         * A User will be able to add as many labels as they like
         */
        PopEntityFieldEntriesComponent.prototype._onCustomLabelChange = function (value) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.dom.state.pending = true;
                if (value) {
                    var hasCustom_1 = false;
                    _this.field.entries.map(function (item) {
                        if (item.type == 'custom')
                            hasCustom_1 = true;
                    });
                    if (!hasCustom_1) {
                        var entry = {
                            name: 'Custom',
                            type: 'custom'
                        };
                        _this._makeApiRequests([_this.srv.request.doPost("" + _this.asset.basePath, entry, 1, false)]).then(function (res) {
                            _this._setEntrySessionControls(_this.field.entries.filter(function (x) { return x.type !== 'custom'; })).then(function (entries) {
                                _this._setEntries(entries).then(function () {
                                    _this.dom.state.pending = false;
                                    setTimeout(function () {
                                        _this.srv.field.triggerFieldPreviewUpdate();
                                        return resolve(true);
                                    }, 0);
                                });
                            });
                        });
                    }
                    else {
                        setTimeout(function () {
                            _this.dom.state.pending = false;
                            _this.srv.field.triggerFieldPreviewUpdate();
                            return resolve(true);
                        }, 0);
                    }
                }
                else {
                    var requests_1 = [];
                    _this.field.entries.filter(function (entry) {
                        if (entry.type === 'custom') {
                            requests_1.push(_this.srv.request.doDelete(_this.asset.basePath + "/" + entry.id, null, 1, false));
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                    if (requests_1.length) {
                        _this._makeApiRequests(requests_1).then(function (res) {
                            _this._setEntrySessionControls(_this.field.entries.filter(function (x) { return x.type !== 'custom'; })).then(function (entries) {
                                _this._setEntries(entries).then(function () {
                                    _this.dom.state.pending = false;
                                    setTimeout(function () {
                                        _this.srv.field.triggerFieldPreviewUpdate();
                                    }, 0);
                                });
                            });
                        });
                    }
                    return resolve(true);
                }
            });
        };
        /**
         * Produce a list of the entry values for this field
         */
        PopEntityFieldEntriesComponent.prototype._showEntries = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this._setValueEntries().then(function (entries) {
                        _this._setEntrySessionControls(entries).then(function (res) {
                            _this._setEntries(res).then(function () {
                                _this.dom.state.pending = false;
                                return resolve(true);
                            });
                        });
                    });
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Ensure that the database records match the min/max settings
         * This will remove any excess records in the database that exceed the multiple_min
         * This will create records for an entries that are needed in the database
         * @param patch
         */
        PopEntityFieldEntriesComponent.prototype._setValueEntries = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var provided = DeepCopy(_this.field.entries).filter(function (entry) {
                    return entry.type !== 'custom';
                });
                var entries = __spreadArray([], __read(provided));
                return resolve(entries);
            });
        };
        /**
         * Will make all of the needed api requests
         * @param requests
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._makeApiRequests = function (requests) {
            var _this = this;
            return new Promise(function (resolve) {
                // PopTemplate.buffer();
                rxjs.forkJoin(requests).subscribe(function () {
                    _this.srv.request.doGet(_this.asset.basePath).subscribe(function (res) {
                        res = res.data ? res.data : res;
                        _this.field.entries = IsArray(res, true) ? res : [];
                        _this.core.entity.entries = JSON.parse(JSON.stringify(_this.field.entries));
                        resolve(res);
                    });
                }, function (err) {
                    exports.PopLog.error(_this.name, "_makeApiRequests", GetHttpErrorMsg(err));
                    resolve([]);
                });
            });
        };
        /**
         * Store a set of controls that can store values as the user changes the settings
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._setEntrySessionControls = function (entries) {
            var _this = this;
            return new Promise(function (resolve) {
                var index = 0;
                entries.map(function (entry) {
                    if (entry.type !== 'custom') {
                        if (!(IsDefined(entry.orphaned)))
                            entry.orphaned = IsDefined(entry.orphaned_at, false);
                        var session = _this.dom.session.controls.has(index) ? _this.dom.session.controls.get(index) : {
                            id: entry ? entry.id : null,
                            type: _this._getEntryTypeConfig(entry),
                            display: _this._getEntryDisplayConfig(entry),
                            active: _this._getEntryActiveConfig(entry),
                            increment: index + 1,
                        };
                        _this._updateSessionControl(index, session, entry);
                        index++;
                    }
                });
                return resolve(entries);
            });
        };
        /**
         * Update the entry config to use the stored record, and update the sessions for it
         * @param index
         * @param session
         * @param entry
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._updateSessionControl = function (index, session, entry) {
            if (entry === void 0) { entry = null; }
            session.increment = index + 1;
            session.id = entry ? entry.id : null;
            this._updateEntryTypeSession(session.type, entry);
            this._updateEntryDisplaySession(session.display, entry);
            this.dom.session.controls.set(index, session);
            this.setDomSession(index, session);
            return session;
        };
        /**
         * Update the entry type config to use correct value and path
         * @param config
         * @param entry
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._updateEntryTypeSession = function (config, entry) {
            if (entry === void 0) { entry = null; }
            // config.value = entry ? entry.type : this.asset.type in this.asset.typeOption ? this.asset.typeOption[ this.asset.type ].defaultValue : 'n/a';
            // config.control.setValue( config.value, { emitEvent: false } );
            // config.patch.path = entry ? `${this.asset.basePath}/${entry.id}` : null;
        };
        /**
         * Update the entry display config to use correct value and path
         * @param config
         * @param entry
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._updateEntryDisplaySession = function (config, entry) {
            if (entry === void 0) { entry = null; }
            // config.value = entry ? entry.name : '';
            // config.control.setValue( config.value, { emitEvent: false } );
            // config.patch.path = entry ? `${this.asset.basePath}/${entry.id}` : null;
        };
        /**
         * Update the entry active config to use correct value and path
         * @param config
         * @param entry
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._updateEntryActiveSession = function (config, entry) {
            if (entry === void 0) { entry = null; }
        };
        /**
         * Store each entry config in a dom session so that it can be restored when the users is switching tabs
         * @param index
         * @param session
         */
        PopEntityFieldEntriesComponent.prototype.setDomSession = function (index, session) {
            var domStorage = StorageGetter(this.dom.repo, ['components', this.name, this.id + '', 'session']);
            if (IsObject(domStorage, ['controls'])) {
                var controls = domStorage.controls;
                controls.set(index, session);
            }
        };
        /**
         * Set entry config objects that will be used in the html template
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._setEntries = function (entries) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.ui.entries = [];
                            this.asset.entries = IsArray(entries, true) ? entries.filter(function (e) { return e.type !== 'custom'; }) : [];
                            this.asset.entriesMap = ArrayMapSetter(this.asset.entries, 'id');
                            this.dom.state.hasMultipleEntries = this.asset.entries.length > 1;
                            return [4 /*yield*/, this._checkFieldEntryTraits()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, resolve(true)];
                    }
                });
            }); });
        };
        /**
         * Manage the type of each entry
         * @param ind
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._getEntryTypeConfig = function (entry) {
            var disabled = false;
            var options = this.asset.type in this.asset.typeOption ? this.asset.typeOption[this.asset.type].options : [];
            if (!IsArray(options, true)) {
                options = [{ value: 'n/a', name: 'N/A' }];
                disabled = true;
            }
            return new SelectConfig({
                label: 'Type',
                options: { values: options },
                disabled: disabled,
                patch: {
                    field: 'type',
                    path: entry && entry.id ? this.asset.basePath + "/" + entry.id : null,
                }
            });
        };
        /**
         * Manage the type of each entry
         * @param ind
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._getSessionEntryTraits = function (entry) {
            var traits = [];
            if (IsObject(this.scheme, ['id', 'mapping'])) {
                var traitEntryMapping_1 = this.asset.schemeFieldStorage.trait_entry;
                var disabledEntries_1 = this.asset.schemeFieldStorage.disabled_entries;
                if (IsObject(this.field, true) && IsArray(this.field.trait, true)) {
                    this.field.trait.map(function (trait) {
                        traits.push({
                            name: trait.name,
                            disabled: disabledEntries_1.includes(entry.id),
                            selected: +traitEntryMapping_1[trait.name] === entry.id
                        });
                    });
                }
            }
            return traits;
        };
        PopEntityFieldEntriesComponent.prototype._checkFieldEntryTraits = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var updateNeeded_1, disabledEntries_2, activeEntry_1, traitEntryMapping_2;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.dom.state.isPrimary && IsArray(this.field.trait, true))) return [3 /*break*/, 3];
                            updateNeeded_1 = false;
                            disabledEntries_2 = this.asset.schemeFieldStorage.disabled_entries;
                            activeEntry_1 = IsArray(this.asset.entries, true) ? this.asset.entries.find(function (entry) {
                                return !(disabledEntries_2.includes(entry.id)) && !entry.orphaned_at;
                            }) : null;
                            if (!IsObject(activeEntry_1, ['id'])) return [3 /*break*/, 2];
                            traitEntryMapping_2 = this.asset.schemeFieldStorage.trait_entry;
                            this.field.trait.map(function (trait) {
                                if (IsUndefined(traitEntryMapping_2[trait.name]) || !(traitEntryMapping_2[trait.name] in _this.asset.entriesMap) || disabledEntries_2.includes(+traitEntryMapping_2[trait.name])) {
                                    traitEntryMapping_2[trait.name] = activeEntry_1.id;
                                    updateNeeded_1 = true;
                                }
                            });
                            if (!updateNeeded_1) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.srv.field.updateSchemeFieldMapping(this.scheme)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            if (this.dom.session.controls) {
                                this.ui.entries = [];
                                // this.dom.setTimeout( `reset-entries`, () => {
                                this.asset.entries.map(function (entry, index) {
                                    var sessionEntry = _this.dom.session.controls.get(index);
                                    if (_this.dom.state.isPrimary)
                                        sessionEntry.traits = _this._getSessionEntryTraits(entry);
                                    if (!_this.scheme || !entry.orphaned_at)
                                        _this.ui.entries.push(sessionEntry);
                                });
                                this._handleMultipleEntries();
                                return [2 /*return*/, resolve(true)];
                                // }, 0 );
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            if (this.dom.session.controls) {
                                this.ui.entries = [];
                                this.asset.entries.map(function (entry, index) {
                                    var sessionEntry = _this.dom.session.controls.get(index);
                                    if (!_this.scheme || !entry.orphaned_at)
                                        _this.ui.entries.push(sessionEntry);
                                });
                                this._handleMultipleEntries();
                            }
                            return [2 /*return*/, resolve(true)];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Manage the type of each entry
         * @param ind
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._getEntryActiveConfig = function (entry) {
            var _this = this;
            var value = !entry.orphaned;
            if (IsObject(this.scheme, true)) {
                if (this.asset.schemeFieldStorage.disabled_entries.includes(entry.id)) {
                    value = false;
                }
            }
            return new SwitchConfig({
                label: '',
                value: value,
                empty: 'ConvertEmptyToNull',
                tooltip: 'Toggle Visibility',
                facade: true,
                metadata: {
                    entry: entry
                },
                // disabled: this.dom.state.hasScheme ? true : false,
                patch: {
                    field: 'orphaned_at',
                    path: '',
                    duration: 0,
                    displayIndicator: false,
                    callback: function (core, event) { return __awaiter(_this, void 0, void 0, function () {
                        var orphaned;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.srv.tab.showAsLoading(true);
                                    if (!IsObject(this.scheme, ['id'])) return [3 /*break*/, 3];
                                    if (event.config.control.value) { // remove from disabled
                                        this.asset.schemeFieldStorage.disabled_entries.splice(this.asset.schemeFieldStorage.disabled_entries.indexOf(+entry.id), 1);
                                    }
                                    else { // add to disabled
                                        this.asset.schemeFieldStorage.disabled_entries.push(+entry.id);
                                    }
                                    console.log('here', entry.id, this.asset.schemeFieldStorage.disabled_entries);
                                    return [4 /*yield*/, this._checkFieldEntryTraits()];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, this.srv.field.updateSchemeFieldMapping(this.scheme)];
                                case 2:
                                    _a.sent();
                                    this.srv.tab.showAsLoading(false);
                                    return [3 /*break*/, 4];
                                case 3:
                                    orphaned = event.config.control.value ? null : true;
                                    this.dom.setTimeout("update-orphaned-at-" + entry.id, exports.PopRequest.doPatch(this.asset.basePath + "/" + entry.id, { orphaned: orphaned }, 1, false).subscribe(function (res) {
                                        res = GetHttpObjectResult(res);
                                        _this.log.info("_getEntryActiveConfig", res);
                                        _this.srv.tab.showAsLoading(false);
                                    }, function (err) {
                                        _this.dom.setError(err, true);
                                        _this.srv.tab.showAsLoading(false);
                                    }));
                                    _a.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); }
                }
            });
        };
        /**
         * Manage the display of each entry
         * @param index
         * @private
         */
        PopEntityFieldEntriesComponent.prototype._getEntryDisplayConfig = function (entry) {
            //     console.log( '_getEntryDisplayConfig', entry );
            return new InputConfig({
                label: 'Entry Name',
                value: entry && entry.name ? entry.name : '',
                transformation: 'toTitleCase',
                disabled: this.dom.state.hasScheme ? true : false,
                patch: {
                    field: 'name',
                    path: entry && entry.id ? this.asset.basePath + "/" + entry.id : null,
                    metadata: {
                        orphaned: -1
                    }
                },
                maxlength: 20,
                // validators: [ Validators.required ],
                // minimal: true
            });
        };
        PopEntityFieldEntriesComponent.prototype._isMultipleActiveEntries = function () {
            var active = 0;
            this.ui.entries.map(function (entry) {
                if (StorageGetter(entry, ['active', 'control', 'value'], false)) {
                    active++;
                }
            });
            this.log.info("_isMultipleActiveEntries", active);
            return active > 1;
        };
        PopEntityFieldEntriesComponent.prototype._disableActiveEntries = function () {
            this.log.info("_disableActiveEntries");
            this.ui.entries.map(function (entry) {
                if (StorageGetter(entry, ['active', 'control', 'value'], false)) {
                    entry.active.disabled = true;
                    entry.active.control.disable();
                }
            });
        };
        PopEntityFieldEntriesComponent.prototype._enableActiveEntries = function () {
            this.log.info("_enableActiveEntries");
            this.ui.entries.map(function (entry) {
                if (StorageGetter(entry, ['active', 'control', 'value'], false)) {
                    entry.active.disabled = false;
                    entry.active.control.enable();
                }
            });
        };
        return PopEntityFieldEntriesComponent;
    }(PopExtendComponent));
    PopEntityFieldEntriesComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-field-entries',
                    template: "<div class=\"entity-field-value-container\" *ngIf=\"dom.state.loaded\">\n  <div class=\"import-flex-row\">\n    <div class=\"import-flex-column import-flex-item-md\">\n      <!--<div class=\"import-flex-row import-field-border-btm import-flex-item-full\">-->\n      <!--&lt;!&ndash;<div class=\"entity-field-value-label import-flex-item-md import-flex-grow-md\">&ndash;&gt;-->\n      <!--&lt;!&ndash;Entries&ndash;&gt;-->\n      <!--&lt;!&ndash;</div>&ndash;&gt;-->\n      <!--<div class=\"import-flex-item-xs entity-field-value-icon import-flex-center\">-->\n      <!--<i class=\"material-icons sw-pointer sw-hover\"-->\n      <!--*ngIf=\"field.multiple\"-->\n      <!--matTooltip=\"Add\"-->\n      <!--[ngClass]=\"{'sw-disabled': dom.state.pending}\"-->\n      <!--(click)=\"onAddEntryValue();\">-->\n      <!--add-->\n      <!--</i>-->\n      <!--</div>-->\n      <!--</div>-->\n      <div class=\"entity-field-value-content\" *ngIf=\"!field.multiple && ui.entries[0]; let entry;\" [ngClass]=\"{'sw-disabled': dom.state.pending}\">\n        <div class=\"entity-field-value-row\" *ngIf=\"entry && entry.display\">\n          <!--<div class=\"import-flex-item-xs entity-field-value-icon import-flex-center\">-->\n          <!--<div>{{entry.increment}}.</div>-->\n          <!--</div>-->\n          <div class=\"import-flex-item-sm import-flex-grow-xs\">\n            <lib-pop-input class=\"import-flex-item-full\" [config]=\"entry.display\" (events)=\"onEntryDisplayChange(0, $event)\"></lib-pop-input>\n          </div>\n          <div class=\"import-flex-item-sm import-flex-grow-xs\" [style.maxWidth.px]=\"100\">\n            <!--<lib-pop-switch class=\"import-flex-item-full\" [config]=\"entry.active\" (events)=\"onEntryActiveChange(0, $event)\"></lib-pop-switch>-->\n          </div>\n        </div>\n      </div>\n      <div class=\"entity-field-value-content import-flex-item-md\" *ngIf=\"field.multiple\" [ngClass]=\"{'sw-disabled': dom.state.pending}\" cdkDropList (cdkDropListDropped)=\"onOptionSortDrop($event)\">\n\n        <div class=\"import-flex-row import-flex-item-full import-flex-space-between-center field-entries-section-label\">\n          <div class=\"import-flex-item-sm  import-flex-start-center\">\n            <label>Entries</label>\n          </div>\n          <div class=\"import-flex-item-sm import-flex-grow-xs\">\n          </div>\n          <div class=\"import-flex-item-sm import-flex-grow-xs import-flex-center\" [style.maxWidth.px]=\"75\">\n          </div>\n          <div class=\"import-flex-item-sm import-flex-grow-xs import-flex-center\" [style.maxWidth.px]=\"30\">\n            <i class=\"material-icons sw-pointer sw-hover\"\n               matTooltip=\"Add Field Entry\"\n               *ngIf=\"!dom.state.hasScheme\"\n               [ngClass]=\"{'sw-disabled': dom.state.pending}\"\n               (click)=\"onAddEntryValue();\">\n              add\n            </i>\n          </div>\n        </div>\n\n        <div class=\"field-entries-item\" *ngFor=\"let entry of ui.entries; let i = index; last as isLast\" cdkDrag cdkDragLockAxis=\"y\" cdkDragBoundary=\".entity-field-value-content\">\n          <div class=\"entity-field-value-row\" *ngIf=\"entry && entry.display\">\n            <div class=\"import-flex-item-xs entity-field-value-icon import-flex-center\" [ngClass]=\"{'sw-hidden': !dom.state.hasMultipleEntries}\" [style.maxWidth.px]=\"30\">\n              <div>{{entry.increment}}.</div>\n            </div>\n            <div class=\"field-entries-sort\" [ngClass]=\"{'sw-hidden': !dom.state.hasMultipleEntries || dom.state.hasScheme}\" [style.maxWidth.px]=\"50\">\n              <i class=\"material-icons\" cdkDragHandle>\n                drag_indicator\n              </i>\n            </div>\n            <div class=\"import-flex-item-sm import-flex-grow-xs\">\n              <lib-pop-input class=\"import-flex-item-full\" [config]=\"entry.display\" (events)=\"onEntryDisplayChange(i, $event)\"></lib-pop-input>\n            </div>\n            <div class=\"import-flex-item-sm import-flex-grow-xs import-flex-center\" [style.maxWidth.px]=\"75\">\n              <lib-pop-switch [ngClass]=\"{'sw-hidden': !dom.state.hasMultipleEntries}\" class=\"import-flex-item-full\" [config]=\"entry.active\" (events)=\"onEntryActiveChange(i, $event)\"></lib-pop-switch>\n            </div>\n            <div class=\"import-flex-item-sm import-flex-grow-xs import-flex-center\" [style.maxWidth.px]=\"30\">\n              <i class=\"material-icons  sw-pointer sw-hover\"\n                 [ngClass]=\"{'sw-hidden': !dom.state.hasMultipleEntries || dom.state.hasScheme}\"\n                 matTooltip=\"Remove\"\n                 (click)=\"onRemoveEntryValue(entry);\">\n                remove\n              </i>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"entity-field-value-content import-flex-item-md\">\n      <div class=\"import-flex-row import-flex-item-md\">\n        <div class=\"import-flex-column\" *ngIf=\"dom.state.isPrimary\">\n          <div class=\"import-flex-row import-flex-item-full import-flex-space-around-center field-entries-section-label\">\n            <div class=\"import-flex-item-sm entity-field-trait\" *ngFor=\"let trait of field.trait\">\n              <label>{{trait.label}}</label>\n            </div>\n          </div>\n          <div class=\"entity-field-value-row import-flex-space-around-center field-entries-section-label\" *ngFor=\"let entry of ui.entries; let i = index; last as isLast\">\n            <div class=\"import-flex-item-sm entity-field-trait\" *ngFor=\"let trait of entry.traits;\">\n              <div class=\"entity-field-trait-radio\">\n                <mat-icon [ngClass]=\"{'sw-hidden': trait.selected,'sw-disabled': trait.disabled,'sw-pointer': !trait.disabled}\" (click)=\"onEntryTraitChange(i,trait)\">\n                  radio_button_unchecked\n                </mat-icon>\n                <mat-icon class=\"entity-field-trait-checked\" [ngClass]=\"{'sw-hidden': !trait.selected, 'sw-disabled': trait.disabled, 'sw-pointer': !trait.disabled}\" (click)=\"onEntryTraitChange(i,trait)\">\n                  radio_button_checked\n                </mat-icon>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n\n\n<!--<div class=\"import-flex-row import-flex-item-full\" *ngIf=\"field.multiple && field.custom_setting.edit_label\">-->\n<!--<lib-pop-checkbox [config]=\"ui.editLabel\"></lib-pop-checkbox>-->\n<!--</div>-->\n\n<!--<div class=\"import-flex-row import-flex-item-full\" *ngIf=\"field.custom_setting.unique_label && field.setting.edit_label\">-->\n<!--<lib-pop-checkbox [config]=\"ui.customLabel\"></lib-pop-checkbox>-->\n<!--</div>-->\n",
                    styles: [".import-flex-row,.import-flex-row-wrap{display:flex;flex-direction:row}.import-flex-row-wrap{flex-wrap:wrap;padding:0;flex-basis:100%;box-sizing:border-box}.import-flex-row-break{flex-basis:100%;height:0}.import-flex-column-break{flex-basis:100%;width:0}.import-flex-item-icon{min-width:var(--field-icon-width);height:var(--field-icon-height);display:flex;justify-content:center;align-items:center}.import-flex-column-xs{display:flex;flex-direction:column;width:12.5%;min-height:30px}.import-flex-column-sm{flex:1;flex-direction:column;width:25%;min-height:30px}.import-flex-column-md{flex:1;flex-direction:column;width:50%}.import-flex-column-lg{flex:1;flex-direction:column;width:75%;min-height:30px}.import-flex-item-xs{flex-basis:12.5%}.import-flex-item-sm{flex-basis:25%}.import-flex-item-md{flex-basis:50%}.import-flex-item-full{flex-basis:100%}.import-flex-grow-xs{flex-grow:1}.import-flex-grow-sm{flex-grow:2}.import-flex-grow-md{flex-grow:3}.import-flex-grow-lg{flex-grow:4}.import-flex-column{display:flex;flex-direction:column}.import-flex-center{display:flex;align-items:center;justify-content:center}.import-flex-space-center{justify-content:space-around;align-items:center}.import-flex-space-between-center{justify-content:space-between;align-items:center}.import-flex-center-start{display:flex;justify-content:center;align-items:flex-start}.import-flex-start-center{display:flex;justify-content:flex-start;align-items:center}.import-flex-end-center{display:flex;justify-content:flex-end;align-items:center}.import-flex-end{display:flex;align-items:flex-end;justify-content:flex-end}.import-flex-align-end{display:flex;align-self:flex-end}.import-flex-stretch-center{display:flex;justify-content:stretch;align-items:center}.sw-mar-xs{margin:var(--xs)}.sw-mar-sm{margin:var(--sm)}.sw-mar-md{margin:var(--md)}.sw-mar-lg{margin:var(--lg)}.sw-mar-xlg{margin:var(--xlg)}.sw-mar-hrz-xs{margin-left:var(--xs);margin-right:var(--xs)}.sw-mar-hrz-md,.sw-mar-hrz-sm{margin-left:var(--md);margin-right:var(--md)}.sw-mar-hrz-lg{margin-left:var(--lg);margin-right:var(--lg)}.sw-mar-hrz-xlg{margin-left:var(--xlg);margin-right:var(--xlg)}.sw-mar-vrt-xs{margin-top:var(--xs);margin-bottom:var(--xs)}.sw-mar-vrt-md,.sw-mar-vrt-sm{margin-top:var(--md);margin-bottom:var(--md)}.sw-mar-vrt-lg{margin-top:var(--lg);margin-bottom:var(--lg)}.sw-mar-vrt-xlg{margin-top:var(--xlg);margin-bottom:var(--xlg)}.sw-mar-lft-xs{margin-left:var(--xs)}.sw-mar-lft-sm{margin-left:var(--sm)}.sw-mar-lft-md{margin-left:var(--md)}.sw-mar-lft-lg{margin-left:var(--lg)}.sw-mar-lft-xlg{margin-left:var(--xlg)}.sw-mar-rgt-xs{margin-right:var(--xs)}.sw-mar-rgt-sm{margin-right:var(--sm)}.sw-mar-rgt-md{margin-right:var(--md)}.sw-mar-rgt-lg{margin-right:var(--lg)}.sw-mar-rgt-xlg{margin-right:var(--xlg)}.sw-mar-btm-xs{margin-bottom:var(--xs)}.sw-mar-btm-sm{margin-bottom:var(--sm)}.sw-mar-btm-md{margin-bottom:var(--md)}.sw-mar-btm-lg{margin-bottom:var(--lg)}.sw-mar-btm-xlg{margin-bottom:var(--xlg)}.sw-mar-top-xs{margin-top:var(--xs)}.sw-mar-top-sm{margin-top:var(--sm)}.sw-mar-top-md{margin-top:var(--md)}.sw-mar-top-lg{margin-top:var(--lg)}.sw-mar-top-xlg{margin-top:var(--xlg)}.sw-pad-xs{padding:var(--xs)}.sw-pad-md,.sw-pad-sm{padding:var(--md)}.sw-pad-lg{padding:var(--lg)}.sw-pad-xlg{padding:var(--xlg)}.sw-pad-hrz-xs{padding-left:var(--xs);padding-right:var(--xs)}.sw-pad-hrz-sm{padding-left:var(--sm);padding-right:var(--sm)}.sw-pad-hrz-md{padding-left:var(--md);padding-right:var(--md)}.sw-pad-hrz-lg{padding-left:var(--lg);padding-right:var(--lg)}.sw-pad-hrz-xlg{padding-left:var(--xlg);padding-right:var(--xlg)}.sw-pad-vrt-xs{padding-top:var(--xs);padding-bottom:var(--xs)}.sw-pad-vrt-md,.sw-pad-vrt-sm{padding-top:var(--md);padding-bottom:var(--md)}.sw-pad-vrt-lg{padding-top:var(--lg);padding-bottom:var(--lg)}.sw-pad-vrt-xlg{padding-top:var(--xlg);padding-bottom:var(--xlg)}.sw-pad-lft-xs{padding-left:var(--xs)}.sw-pad-lft-sm{padding-left:var(--sm)}.sw-pad-lft-md{padding-left:var(--md)}.sw-pad-lft-lg{padding-left:var(--lg)}.sw-pad-lft-xlg{padding-left:var(--xlg)}.sw-pad-rgt-xs{padding-right:var(--xs)}.sw-pad-rgt-sm{padding-right:var(--sm)}.sw-pad-rgt-md{padding-right:var(--md)}.sw-pad-rgt-lg{padding-right:var(--lg)}.sw-pad-rgt-xlg{padding-right:var(--xlg)}.sw-pad-btm-xs{padding-bottom:var(--xs)}.sw-pad-btm-sm{padding-bottom:var(--sm)}.sw-pad-btm-md{padding-bottom:var(--md)}.sw-pad-btm-lg{padding-bottom:var(--lg)}.sw-pad-btm-xlg{padding-bottom:var(--xlg)}.sw-pad-top-xs{padding-top:var(--xs)}.sw-pad-top-sm{padding-top:var(--sm)}.sw-pad-top-md{padding-top:var(--md)}.sw-pad-top-lg{padding-top:var(--lg)}.sw-pad-top-xlg{padding-top:var(--xlg)}.import-field-border{border:1px solid var(--border)}.import-field-border-top{border-top:1px solid var(--border)}.import-field-border-rgt{border-right:1px solid var(--border)}.import-field-border-btm{border-bottom:1px solid var(--border)}.import-field-border-lft{border-left:1px solid var(--border)}.import-field-border-trans-top{border-top:1px solid transparent}.import-field-border-trans-rgt{border-right:1px solid transparent}.import-field-border-trans-btm{border-bottom:1px solid transparent}.import-field-border-trans-lft{border-left:1px solid transparent}.import-field-border-top-clr{border-top:0!important}.import-field-border-rgt-clr{border-right:0!important}.import-field-border-btm-clr{border-bottom:0!important}.import-field-border-lft-clr{border-left:0!important}:host{width:100%}.entity-field-value-container,.entity-field-value-content{display:flex;flex-direction:column;margin-bottom:5px}.entity-field-value-content{width:100%;position:relative;box-sizing:border-box;min-height:30px;padding-top:var(--gap-s);padding-bottom:var(--gap-s)}.entity-field-value-icon{display:flex;align-items:center;justify-content:center;height:35px;width:35px;font-size:.9em;padding-top:0}.entity-field-value-icon i{font-size:1.3em}.entity-field-value-row{display:flex;flex-direction:row;align-items:center;height:50px;margin-top:1px}.field-entries-section-label{min-height:30px}.entity-field-value-label{text-align:center}.entity-field-value-label,.field-entries-sort{display:flex;justify-content:center;align-items:center}.field-entries-sort{width:10%;cursor:move}.entity-field-trait{display:flex;justify-content:center;align-items:center;min-width:130px;text-align:center;min-height:25px}:host ::ng-deep .entity-field-trait-checked.mat-icon{color:var(--background-focused-button)!important}:host ::ng-deep .entity-field-value-row .import-field-item-container{margin:0!important}:host ::ng-deep .cdk-drag-preview .import-field-item-container{margin:0!important}"]
                },] }
    ];
    PopEntityFieldEntriesComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: PopDomService },
        { type: PopFieldEditorService },
        { type: PopTabMenuService }
    ]; };
    PopEntityFieldEntriesComponent.propDecorators = {
        field: [{ type: i0.Input }],
        scheme: [{ type: i0.Input }]
    };

    var PopEntityTabListComponent = /** @class */ (function (_super) {
        __extends(PopEntityTabListComponent, _super);
        function PopEntityTabListComponent(el, route, _domRepo, _tabRepo, APP_GLOBAL) {
            var _this = _super.call(this, el, route, _domRepo, APP_GLOBAL) || this;
            _this.el = el;
            _this.route = route;
            _this._domRepo = _domRepo;
            _this._tabRepo = _tabRepo;
            _this.APP_GLOBAL = APP_GLOBAL;
            _this.name = 'PopEntityTabListComponent';
            return _this;
        }
        /**
         * This component will display a list of entities that the user can interact with
         */
        PopEntityTabListComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * Clean up the dom of this component
         */
        PopEntityTabListComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        /************************************************************************************************
         *                                                                                              *
         *                                      Under The Hood                                          *
         *                                    ( Protected Method )                                        *
         *                                                                                              *
         ************************************************************************************************/
        /**
         * Allow for a CoreConfig to be passed in
         * If a CoreConfig does not exits this component needs to be able to create it for itself, uses the internal_name that comes directly for the route
         * or tries to extrapolate it from the current url of the app
         *
         */
        PopEntityTabListComponent.prototype._setCoreConfig = function () {
            var _this = this;
            // console.log(this.route);
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.srv.entity.getCoreConfig(this.internal_name, 0).then(function (core) {
                        _this.core = core;
                        _this.id = _this.parent + "_" + _this.core.params.internal_name;
                        _this.log.info("_setCore: initial", core);
                        return resolve(true);
                    }, function () {
                        return resolve(false);
                    });
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Setup basic config
         * Intended to be overridden
         * @private
         */
        PopEntityTabListComponent.prototype._setConfig = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var account;
                return __generator(this, function (_a) {
                    if (!this.parentId)
                        this.parentId = this.srv.entity.getRouteParentId(this.route);
                    if (!this.internal_name)
                        this.internal_name = this.srv.entity.getRouteInternalName(this.route);
                    if (this.parent === 'client') {
                        this.extension.client_id = +this.parentId;
                    }
                    else if (this.parent === 'account') {
                        account = this.srv.tab.getCore().entity;
                        this.extension.client_id = +account.client_id;
                        this.extension.account_id = +account.id;
                    }
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Manage the sessionStorage settings
         * @private
         */
        PopEntityTabListComponent.prototype._setSessionSettings = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    // Set session path for variables
                    this.asset.tabMenuSessionPath = "Entity." + TitleCase(this.core.params.internal_name) + ".Menu";
                    this.asset.showArchivedSessionPath = "Business." + exports.PopBusiness.id + ".Entity." + TitleCase(this.parent) + ".Table." + TitleCase(this.internal_name) + ".showArchived";
                    this.asset.searchValueSessionPath = "Business." + exports.PopBusiness.id + ".Entity." + TitleCase(this.parent) + ".Table." + TitleCase(this.internal_name) + ".searchValue";
                    // Set any session variables
                    // SetSessionSiteVar(this.asset.tabMenuSessionPath, null); // remove any menu session data for this entity
                    this.dom.state.showArchived = GetSessionSiteVar(this.asset.showArchivedSessionPath, false);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**z
         * Determine the height of the table
         * @private
         */
        PopEntityTabListComponent.prototype._setHeight = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var overhead;
                return __generator(this, function (_a) {
                    overhead = 50;
                    this.dom.setHeight(window.innerHeight - 200, overhead);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        PopEntityTabListComponent.prototype._fetchData = function (update) {
            var _this = this;
            if (update === void 0) { update = false; }
            if (!update)
                this.dom.setTimeout("lazy-load-fresh-data", null);
            return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var params;
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.dataFactory) {
                        this.dataFactory(this.parentId, this.dom.state.showArchived ? 1 : 0).then(function (data) {
                            // console.log('data', data);
                            data = _this._transformData(data);
                            if (update && _this.table.config && typeof _this.table.config.updateData === 'function') {
                                _this.table.config.updateData(data);
                            }
                            exports.PopTemplate.clear();
                            resolve(data);
                        }, function () {
                            reject([]);
                        });
                    }
                    else {
                        params = {};
                        params[this.parent + "_id"] = this.parentId;
                        // console.log(params);
                        this.core.repo.getEntities(Object.assign({ archived: (this.dom.state.showArchived ? 1 : 0) }, params)).then(function (list) {
                            list = _this._transformData(list);
                            // this.core.repo.setCache('table', this.internal_name, data, 5);
                            if (update && _this.table.config && typeof _this.table.config.updateData === 'function') {
                                _this.table.config.updateData(list);
                            }
                            exports.PopTemplate.clear();
                            resolve(list);
                        }, function () {
                            reject([]);
                        });
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        PopEntityTabListComponent.prototype._transformData = function (data) {
            if (!(IsObject(this.asset.fieldKeys, true)))
                this._setFieldKeys(data[0]);
            if (!(IsObject(this.asset.transformations, true)))
                this._setFieldTableTransformations();
            data = this._prepareTableData(data);
            this.core.repo.setCache('table', this.parent, data, 5);
            return data;
        };
        /**
         * Retrieves the data set that this view will represent
         * @param hardReset
         *
         */
        PopEntityTabListComponent.prototype._getTableData = function (hardReset) {
            var _this = this;
            if (hardReset === void 0) { hardReset = false; }
            return new Promise(function (resolve, reject) {
                if (_this.dom.delay.data)
                    clearTimeout(_this.dom.delay.data);
                _this.core.repo.getCache('table', _this.parent).then(function (cache) {
                    if (IsArray(cache, true)) {
                        _this._triggerDataFetch();
                        return resolve({ data: cache });
                    }
                    else {
                        _this._fetchData(false).then(function (data) {
                            return resolve({ data: data });
                        });
                    }
                });
            });
        };
        PopEntityTabListComponent.prototype._configureFilterBar = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.srv.filter.setActive(false);
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        /**
         * Generates a table config that will be used by the nested view component
         * @param reset
         *
         */
        PopEntityTabListComponent.prototype._configureTable = function (reset) {
            var _this = this;
            if (reset === void 0) { reset = false; }
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (!this.table.config) {
                        this._getTableData(reset).then(function (tableData) {
                            if (IsArray(tableData.data, true)) {
                                _this.asset.blueprint = tableData.data[0];
                            }
                            _this._getTableInterface().then(function () {
                                _this.asset.tableInterface.paginator = false;
                                _this.table.config = new TableConfig(Object.assign(Object.assign({}, _this.asset.tableInterface), tableData));
                            });
                        });
                    }
                    else {
                        this.table.config.loading = true;
                        this._getTableData().then(function (result) {
                            if (IsArray(result.data, true))
                                _this.asset.blueprint = result.data[0];
                            _this.table.config.buttons = _this._buildTableButtons();
                            if (reset) {
                                _this.table.config.reset(result.data);
                            }
                            else {
                                _this.table.config.updateData(result.data);
                            }
                            _this.table.config.loading = false;
                            _this.dom.state.refresh = false;
                            _this.core.params.refresh = false;
                        });
                    }
                    return [2 /*return*/, resolve(true)];
                });
            }); });
        };
        return PopEntityTabListComponent;
    }(PopEntityListComponent));
    PopEntityTabListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-tab-list',
                    template: "<div *ngIf=\"dom.state.loaded\" class=\"entity-tab-list-container\" [style.height.px]=\"dom.height.inner\">\n  <lib-pop-table #list *ngIf=\"table.config\" [core]=core [config]=\"table.config\" (events)=\"onTableEvent($event)\"></lib-pop-table>\n</div>\n<lib-pop-field-item-group *ngIf=\"ui.actionModal\" [config]=\"ui.actionModal\" (close)=\"onActionModalClose()\"></lib-pop-field-item-group>\n<lib-pop-errors *ngIf=\"dom.error?.message\" [error]=\"dom.error\"></lib-pop-errors>\n",
                    styles: [".entity-tab-list-container{position:relative;display:flex;width:auto;height:auto;flex-direction:column;box-sizing:border-box}.entity-tab-list-container lib-pop-table{position:absolute;left:0;top:0;right:0;bottom:10px}:host ::ng-deep tr{height:48px;max-height:48px}:host ::ng-deep td,:host ::ng-deep th{min-width:50px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;height:48px;max-height:48px}:host ::ng-deep th>.mat-sort-header-container{display:flex;min-width:50px}:host ::ng-deep .pop-table-button-control{margin-top:6px!important}:host ::ng-deep .checkbox-column{min-width:25px!important;width:25px!important;padding:0 5px!important;text-align:center!important}::ng-deep th[class*=fk],:host ::ng-deep td[class*=fk]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=fk]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=id],:host ::ng-deep th[class*=id]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=active]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=active],:host ::ng-deep th[class*=active]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=system]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=system],:host ::ng-deep th[class*=system]{text-align:center!important;justify-content:center}:host ::ng-deep th[class*=id]>.mat-sort-header-container{justify-content:center!important;text-align:center!important}:host ::ng-deep td[class*=-name],:host ::ng-deep th[class*=-name]{text-align:left!important;padding-left:20px!important;max-width:200px}:host ::ng-deep th[class*=-name] .mat-sort-header-container{padding-left:0!important;justify-content:left!important;max-width:500px}:host ::ng-deep td[class*=-first],:host ::ng-deep th[class*=-first]{text-align:left!important;padding-left:20px!important}:host ::ng-deep th[class*=-first] .mat-sort-header-container{min-width:50px!important;padding-left:0!important;justify-content:left!important}:host ::ng-deep td[class*=-last],:host ::ng-deep th[class*=-last]{text-align:left!important;padding-left:20px!important}:host ::ng-deep th[class*=-last] .mat-sort-header-container{padding-left:0!important;justify-content:left!important}:host ::ng-deep td[class*=-display],:host ::ng-deep th[class*=-display]{text-align:left!important;padding-left:20px!important}:host ::ng-deep th[class*=-display] .mat-sort-header-container{padding-left:0!important;justify-content:left!important}:host ::ng-deep td[class*=-description],:host ::ng-deep th[class*=-description]{text-align:left!important;padding-left:20px!important;max-width:500px}:host ::ng-deep th[class*=-description] .mat-sort-header-container{padding-left:0!important;justify-content:left!important;max-width:500px}:host ::ng-deep td[class*=email],:host ::ng-deep th[class*=email]{min-width:50px!important;text-align:left!important;padding-left:20px!important}:host ::ng-deep th[class*=email] .mat-sort-header-container{min-width:50px!important;padding-left:0!important;justify-content:left!important}"]
                },] }
    ];
    PopEntityTabListComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1.ActivatedRoute },
        { type: PopDomService },
        { type: PopTabMenuService },
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] }
    ]; };
    PopEntityTabListComponent.propDecorators = {
        internal_name: [{ type: i0.Input }],
        parentId: [{ type: i0.Input }],
        parent: [{ type: i0.Input }],
        param: [{ type: i0.Input }],
        extension: [{ type: i0.Input }]
    };

    var PopEntityAddressEditComponent = /** @class */ (function () {
        function PopEntityAddressEditComponent() {
        }
        PopEntityAddressEditComponent.prototype.ngOnInit = function () {
        };
        return PopEntityAddressEditComponent;
    }());
    PopEntityAddressEditComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-address-edit',
                    template: "<p>pop-entity-address-edit works!</p>\n",
                    styles: [""]
                },] }
    ];
    PopEntityAddressEditComponent.ctorParameters = function () { return []; };

    var PopEntitySchemeCustomSettingComponent = /** @class */ (function () {
        function PopEntitySchemeCustomSettingComponent() {
        }
        PopEntitySchemeCustomSettingComponent.prototype.ngOnInit = function () {
        };
        return PopEntitySchemeCustomSettingComponent;
    }());
    PopEntitySchemeCustomSettingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'lib-pop-entity-scheme-custom-setting',
                    template: "<p>pop-entity-scheme-custom-setting works!</p>\n",
                    styles: [""]
                },] }
    ];
    PopEntitySchemeCustomSettingComponent.ctorParameters = function () { return []; };

    var PopEntityModule = /** @class */ (function () {
        function PopEntityModule() {
        }
        return PopEntityModule;
    }());
    PopEntityModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        i1$1.HttpClientModule,
                        formField.MatFormFieldModule,
                        input.MatInputModule,
                        i1.RouterModule,
                        portal.PortalModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        MaterialModule,
                        dragDrop.DragDropModule,
                        PopErrorsModule,
                        PopFieldItemModule,
                        PopFieldItemGroupModule,
                        PopIndicatorsModule,
                        PopTableModule,
                        PopTabMenuModule,
                        core.MatNativeDateModule,
                        PopContextMenuModule,
                        PopDialogsModule
                    ],
                    declarations: [
                        PopEntityListComponent,
                        PopEntityTabListComponent,
                        PopEntityAdvancedSearchComponent,
                        PopEntityPortalMenuComponent,
                        PopEntityFieldGroupComponent,
                        PopEntityPortalMenuComponent,
                        PopEntityTabMenuComponent,
                        PopEntityTabComponent,
                        PopEntityTabColumnComponent,
                        PopEntityHistoryComponent,
                        PopEntityAssignmentsComponent,
                        PopEntityProviderDialogComponent,
                        PopEntityAccessComponent,
                        PopEntityFieldComponent,
                        PopEntityFieldActionBtnComponent,
                        PopEntityFieldEditIconComponent,
                        PopEntityFieldDashComponent,
                        PopEntityFieldSpacerComponent,
                        PopEntityFieldBoilerComponent,
                        PopEntityFieldModalComponent,
                        PopEntityEmailComponent,
                        PopEntityPhoneComponent,
                        PopEntityAddressComponent,
                        PopEntityAddressEditComponent,
                        PopEntityDatetimeComponent,
                        PopEntityInputComponent,
                        PopEntitySelectComponent,
                        PopEntitySelectMultiComponent,
                        PopEntityCheckboxComponent,
                        PopEntityRadioComponent,
                        PopEntitySwitchComponent,
                        PopEntityNameComponent,
                        PopEntityTextareaComponent,
                        PopEntityStatusComponent,
                        PopEntitySchemeComponent,
                        PopEntitySchemeDetailsComponent,
                        PopEntitySchemeAssetPoolComponent,
                        PopEntitySchemeAssetLayoutComponent,
                        EntitySchemeLayoutSectionComponent,
                        PopEntitySchemeFieldSettingComponent,
                        EntitySchemeFieldContentComponent,
                        EntitySchemeComponentContentComponent,
                        EntitySchemeTableContentComponent,
                        PopEntityAssetComponentModalComponent,
                        PopEntityAssetFieldModalComponent,
                        FieldInputSettingComponent,
                        FieldLabelSettingComponent,
                        FieldRadioSettingComponent,
                        FieldSelectSettingComponent,
                        FieldSwitchSettingComponent,
                        FieldTextareaSettingComponent,
                        PopEntitySchemeCustomComponent,
                        PopEntityFieldEditorComponent,
                        PopEntityFieldDetailsComponent,
                        PopEntityFieldSettingsComponent,
                        PopEntityFieldPreviewComponent,
                        PopEntityFieldItemsComponent,
                        PopEntityFieldValuesComponent,
                        PopEntityFieldEntriesComponent,
                        PopEntityFieldItemsComponent,
                        PopEntityFieldItemParamsComponent,
                        FieldInputParamComponent,
                        FieldSelectParamComponent,
                        FieldLabelParamComponent,
                        FieldSwitchParamComponent,
                        FieldTextareaParamComponent,
                        FieldRadioParamComponent,
                        FieldSliderParamComponent,
                        FieldNumberParamComponent,
                        PopEntitySchemeCustomSettingComponent,
                    ],
                    exports: [
                        PopEntityListComponent,
                        PopEntityTabListComponent,
                        PopEntityAdvancedSearchComponent,
                        PopEntityPortalMenuComponent,
                        PopEntityFieldGroupComponent,
                        PopEntityPortalMenuComponent,
                        PopEntityTabMenuComponent,
                        PopEntityTabComponent,
                        PopEntityTabColumnComponent,
                        PopEntityHistoryComponent,
                        PopEntityAssignmentsComponent,
                        PopEntityProviderDialogComponent,
                        PopEntityAccessComponent,
                        PopEntityFieldComponent,
                        PopEntityFieldActionBtnComponent,
                        PopEntityFieldEditIconComponent,
                        PopEntityFieldDashComponent,
                        PopEntityFieldSpacerComponent,
                        PopEntityEmailComponent,
                        PopEntityPhoneComponent,
                        PopEntityFieldModalComponent,
                        PopEntityAddressComponent,
                        PopEntityAddressEditComponent,
                        PopEntityDatetimeComponent,
                        PopEntityInputComponent,
                        PopEntitySelectComponent,
                        PopEntitySelectMultiComponent,
                        PopEntityCheckboxComponent,
                        PopEntityRadioComponent,
                        PopEntitySwitchComponent,
                        PopEntityNameComponent,
                        PopEntityTextareaComponent,
                        PopEntityStatusComponent,
                        PopEntitySchemeComponent,
                        PopEntitySchemeDetailsComponent,
                        PopEntitySchemeAssetPoolComponent,
                        PopEntitySchemeAssetLayoutComponent,
                        EntitySchemeLayoutSectionComponent,
                        PopEntitySchemeFieldSettingComponent,
                        EntitySchemeFieldContentComponent,
                        EntitySchemeComponentContentComponent,
                        EntitySchemeTableContentComponent,
                        PopEntityAssetComponentModalComponent,
                        PopEntityAssetFieldModalComponent,
                        FieldInputSettingComponent,
                        FieldLabelSettingComponent,
                        FieldRadioSettingComponent,
                        FieldSelectSettingComponent,
                        FieldSwitchSettingComponent,
                        FieldTextareaSettingComponent,
                        PopEntitySchemeCustomComponent,
                        PopEntityFieldEditorComponent,
                        PopEntityFieldDetailsComponent,
                        PopEntityFieldSettingsComponent,
                        PopEntityFieldPreviewComponent,
                        PopEntityFieldItemsComponent,
                        PopEntityFieldValuesComponent,
                        PopEntityFieldEntriesComponent,
                        PopEntityFieldItemsComponent,
                        PopEntityFieldItemParamsComponent,
                        PopEntityFieldItemParamsComponent,
                        FieldInputParamComponent,
                        FieldSelectParamComponent,
                        FieldLabelParamComponent,
                        FieldSwitchParamComponent,
                        FieldTextareaParamComponent,
                        FieldRadioParamComponent,
                        FieldSliderParamComponent,
                        FieldNumberParamComponent
                    ],
                },] }
    ];

    var PopAjaxDialogRequest = /** @class */ (function () {
        function PopAjaxDialogRequest(data) {
            var e_1, _a;
            var fields = Object.keys(data);
            try {
                for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                    var value = fields_1_1.value;
                    this[value] = data[value];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!data.body)
                this.body = {};
            if (!data.version)
                this.version = 1;
        }
        return PopAjaxDialogRequest;
    }());

    var PopPreferenceService = /** @class */ (function () {
        function PopPreferenceService(http, request) {
            this.http = http;
            this.request = request;
        }
        /**
         * Get preferences at specified level.
         *  - IE: getPreferences('admin', 'users', 'table');
         *
         * @param level1
         * @param level2
         * @param level3
         * @param level4
         * @returns
         */
        PopPreferenceService.prototype.getPreferences = function (level1, level2, level3, level4) {
            if (level2 === void 0) { level2 = ''; }
            if (level3 === void 0) { level3 = ''; }
            if (level4 === void 0) { level4 = ''; }
            var path = '/preferences/' + level1;
            if (level2)
                path += '/' + level2;
            if (level3)
                path += '/' + level3;
            if (level4)
                path += '/' + level4;
            return this.request.doGet(path, {}, 1);
        };
        /**
         * Saves a preferences at the specified level.
         *  - IE: savePreferences('TablePreferences', {some:object}, 'admin', 'users', 'table');
         *
         * @param name
         * @param data
         * @param level1
         * @param level2
         * @param level3
         * @param level4
         * @returns
         */
        PopPreferenceService.prototype.savePreferences = function (name, data, level1, level2, level3, level4) {
            if (level2 === void 0) { level2 = ''; }
            if (level3 === void 0) { level3 = ''; }
            if (level4 === void 0) { level4 = ''; }
            var path = '/preferences/' + level1;
            if (level2)
                path += '/' + level2;
            if (level3)
                path += '/' + level3;
            if (level4)
                path += '/' + level4;
            return this.request.doPost(path, { name: name, data: data });
        };
        /**
         * Deletes a specified preference. Typically used when resetting to default.
         *  - IE: deletePreferences('TablePreferences', 'admin', 'users', 'table');
         *
         * @param name
         * @param level1
         * @param level2
         * @param level3
         * @param level4
         * @returns
         */
        PopPreferenceService.prototype.deletePreferences = function (name, level1, level2, level3, level4) {
            if (level2 === void 0) { level2 = ''; }
            if (level3 === void 0) { level3 = ''; }
            if (level4 === void 0) { level4 = ''; }
            var path = '/preferences/' + level1;
            if (level2)
                path += '/' + level2;
            if (level3)
                path += '/' + level3;
            if (level4)
                path += '/' + level4;
            path += '/' + name;
            return this.request.doDelete(path);
        };
        return PopPreferenceService;
    }());
    PopPreferenceService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopPreferenceService_Factory() { return new PopPreferenceService(i0__namespace.ɵɵinject(i1__namespace.HttpClient), i0__namespace.ɵɵinject(PopRequestService)); }, token: PopPreferenceService, providedIn: "root" });
    PopPreferenceService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    PopPreferenceService.ctorParameters = function () { return [
        { type: i1$1.HttpClient },
        { type: PopRequestService }
    ]; };

    var PopAuthGuardService = /** @class */ (function () {
        function PopAuthGuardService(base, router) {
            this.base = base;
            this.router = router;
        }
        PopAuthGuardService.prototype.canActivate = function () {
            if (this.base.isAuthExpired()) {
                this.router.navigate(['login']).catch(function (e) { return console.log(e); });
                return false;
            }
            return true;
        };
        return PopAuthGuardService;
    }());
    PopAuthGuardService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopAuthGuardService_Factory() { return new PopAuthGuardService(i0__namespace.ɵɵinject(PopBaseService), i0__namespace.ɵɵinject(i1__namespace$1.Router)); }, token: PopAuthGuardService, providedIn: "root" });
    PopAuthGuardService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopAuthGuardService.ctorParameters = function () { return [
        { type: PopBaseService },
        { type: i1.Router }
    ]; };

    var PopRouteVerifiedGuard = /** @class */ (function () {
        function PopRouteVerifiedGuard(APP_GLOBAL) {
            this.APP_GLOBAL = APP_GLOBAL;
        }
        PopRouteVerifiedGuard.prototype.canActivate = function (route) {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var verified;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.APP_GLOBAL.isVerified()];
                        case 1:
                            verified = _a.sent();
                            return [2 /*return*/, resolve(verified)];
                    }
                });
            }); });
        };
        return PopRouteVerifiedGuard;
    }());
    PopRouteVerifiedGuard.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopRouteVerifiedGuard_Factory() { return new PopRouteVerifiedGuard(i0__namespace.ɵɵinject("APP_GLOBAL")); }, token: PopRouteVerifiedGuard, providedIn: "root" });
    PopRouteVerifiedGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PopRouteVerifiedGuard.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: ['APP_GLOBAL',] }] }
    ]; };

    var PopAccessGuardService = /** @class */ (function () {
        function PopAccessGuardService(router) {
            this.router = router;
        }
        PopAccessGuardService.prototype.canActivate = function (route) {
            var _a;
            if (IsObject(route, ['data']) && IsObject(exports.PopEntity, true) && route.data.can_read && !(exports.PopEntity.checkAccess(route.data.can_read, 'can_read'))) {
                this._exit();
            }
            if (IsObject(route, ['data']) && IsObject(exports.PopEntity, true) && route.data.can_update && !(exports.PopEntity.checkAccess(route.data.can_update, 'can_update'))) {
                this._exit();
            }
            // to check if the entity has entry access
            if (IsObject(route, ['data'])) {
                var internalName = (_a = route.data.internal_name) !== null && _a !== void 0 ? _a : route.data.can_read;
                var entityNames = exports.PopEntity.getEntityEntryAccess(internalName);
                if (IsArray(entityNames, true)) {
                    var inaccessible_1 = [];
                    entityNames.map(function (entityName) {
                        if (!exports.PopEntity.checkAccess(entityName, 'can_read')) {
                            inaccessible_1.push(TitleCase(entityName.split('_').join(" ")));
                        }
                    });
                    if (IsArray(inaccessible_1, true)) {
                        this._exitWithMessage(inaccessible_1.join(', '));
                        return false;
                    }
                }
                else {
                    return true;
                }
            }
            return true;
        };
        PopAccessGuardService.prototype._exit = function () {
            SetPopMessage('Access Denied.');
            this.router.navigateByUrl('system/error/403').then(function () { return true; });
        };
        PopAccessGuardService.prototype._exitWithMessage = function (entityName) {
            SetPopMessage("Access Denied. You need permission for " + entityName);
            this.router.navigateByUrl('system/error/403').then(function () { return true; });
        };
        return PopAccessGuardService;
    }());
    PopAccessGuardService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopAccessGuardService_Factory() { return new PopAccessGuardService(i0__namespace.ɵɵinject(i1__namespace$1.Router)); }, token: PopAccessGuardService, providedIn: "root" });
    PopAccessGuardService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    PopAccessGuardService.ctorParameters = function () { return [
        { type: i1.Router }
    ]; };

    var PopEntityExtendService = /** @class */ (function (_super) {
        __extends(PopEntityExtendService, _super);
        function PopEntityExtendService() {
            return _super.call(this) || this;
        }
        PopEntityExtendService.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
        };
        return PopEntityExtendService;
    }(PopExtendService));
    PopEntityExtendService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PopEntityExtendService_Factory() { return new PopEntityExtendService(); }, token: PopEntityExtendService, providedIn: "root" });
    PopEntityExtendService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    PopEntityExtendService.ctorParameters = function () { return []; };

    /*
     * Public API Surface of pop-common
     */
    // Pop Entity

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AbstractDomMixin = AbstractDomMixin;
    exports.AbstractTemplateMixin = AbstractTemplateMixin;
    exports.AbstractUiMixin = AbstractUiMixin;
    exports.AppGlobal = AppGlobal;
    exports.AppMenus = AppMenus;
    exports.AppTheme = AppTheme;
    exports.AppWidgets = AppWidgets;
    exports.ArrayContainsAll = ArrayContainsAll;
    exports.ArrayGroupBy = ArrayGroupBy;
    exports.ArrayKeyBy = ArrayKeyBy;
    exports.ArrayMapSetter = ArrayMapSetter;
    exports.ArrayOnlyUnique = ArrayOnlyUnique;
    exports.ArrayParentSort = ArrayParentSort;
    exports.ArrayParentTree = ArrayParentTree;
    exports.ArrayParentTreeFlatten = ArrayParentTreeFlatten;
    exports.ArrayRemoveDupliates = ArrayRemoveDupliates;
    exports.ArrayTreeList = ArrayTreeList;
    exports.ArraysMatch = ArraysMatch;
    exports.ButtonConfig = ButtonConfig;
    exports.Capitalize = Capitalize;
    exports.CheckboxConfig = CheckboxConfig;
    exports.CleanObject = CleanObject;
    exports.ClearEmptyValues = ClearEmptyValues;
    exports.ConvertArrayToOptionList = ConvertArrayToOptionList;
    exports.ConvertDateFormat = ConvertDateFormat;
    exports.ConvertDateToDateTimeFormat = ConvertDateToDateTimeFormat;
    exports.ConvertDateToTimeFormat = ConvertDateToTimeFormat;
    exports.ConvertObjectToUri = ConvertObjectToUri;
    exports.CoreConfig = CoreConfig;
    exports.CustomPanelComponent = CustomPanelComponent;
    exports.DateConfig = DateConfig;
    exports.DateRangeConfig = DateRangeConfig;
    exports.DateRangeExpansionItemsComponent = DateRangeExpansionItemsComponent;
    exports.DateRangePanelComponent = DateRangePanelComponent;
    exports.DeepCopy = DeepCopy;
    exports.DeepMerge = DeepMerge;
    exports.DestroyComponentDom = DestroyComponentDom;
    exports.DestroyComponentTemplate = DestroyComponentTemplate;
    exports.DestroyServiceDom = DestroyServiceDom;
    exports.DetermineEntityName = DetermineEntityName;
    exports.DynamicSort = DynamicSort;
    exports.EntityAssignmentTab = EntityAssignmentTab;
    exports.EntityExtendInterface = EntityExtendInterface;
    exports.EntityGeneralTab = EntityGeneralTab;
    exports.EntityHistoryTab = EntityHistoryTab;
    exports.EntityMenu = EntityMenu;
    exports.EntityParams = EntityParams;
    exports.EntitySchemeComponentContentComponent = EntitySchemeComponentContentComponent;
    exports.EntitySchemeFieldContentComponent = EntitySchemeFieldContentComponent;
    exports.EntitySchemeLayoutSectionComponent = EntitySchemeLayoutSectionComponent;
    exports.EntitySchemeSectionConfig = EntitySchemeSectionConfig;
    exports.EntitySchemeTab = EntitySchemeTab;
    exports.EntitySchemeTableContentComponent = EntitySchemeTableContentComponent;
    exports.EvaluateWhenCondition = EvaluateWhenCondition;
    exports.EvaluateWhenConditions = EvaluateWhenConditions;
    exports.ExpansionItemsComponent = ExpansionItemsComponent;
    exports.FIELD_CUSTOM_SETTING = FIELD_CUSTOM_SETTING;
    exports.FieldConfig = FieldConfig;
    exports.FieldEditorTab = FieldEditorTab;
    exports.FieldGroupConfig = FieldGroupConfig;
    exports.FieldInputParamComponent = FieldInputParamComponent;
    exports.FieldInputSettingComponent = FieldInputSettingComponent;
    exports.FieldItemArrayValue = FieldItemArrayValue;
    exports.FieldItemBooleanValue = FieldItemBooleanValue;
    exports.FieldItemConfig = FieldItemConfig;
    exports.FieldItemGroupConfig = FieldItemGroupConfig;
    exports.FieldItemInterface = FieldItemInterface;
    exports.FieldItemModel = FieldItemModel;
    exports.FieldItemModelConfig = FieldItemModelConfig;
    exports.FieldItemOptionValues = FieldItemOptionValues;
    exports.FieldItemRules = FieldItemRules;
    exports.FieldItemTextValue = FieldItemTextValue;
    exports.FieldItemView = FieldItemView;
    exports.FieldLabelParamComponent = FieldLabelParamComponent;
    exports.FieldLabelSettingComponent = FieldLabelSettingComponent;
    exports.FieldNumberParamComponent = FieldNumberParamComponent;
    exports.FieldRadioParamComponent = FieldRadioParamComponent;
    exports.FieldRadioSettingComponent = FieldRadioSettingComponent;
    exports.FieldSelectParamComponent = FieldSelectParamComponent;
    exports.FieldSelectSettingComponent = FieldSelectSettingComponent;
    exports.FieldSliderParamComponent = FieldSliderParamComponent;
    exports.FieldSwitchParamComponent = FieldSwitchParamComponent;
    exports.FieldSwitchSettingComponent = FieldSwitchSettingComponent;
    exports.FieldTextareaParamComponent = FieldTextareaParamComponent;
    exports.FieldTextareaSettingComponent = FieldTextareaSettingComponent;
    exports.GetAuthStorage = GetAuthStorage;
    exports.GetComponentAssetContainer = GetComponentAssetContainer;
    exports.GetComponentDomContainer = GetComponentDomContainer;
    exports.GetComponentTemplateContainer = GetComponentTemplateContainer;
    exports.GetComponentTraitContainer = GetComponentTraitContainer;
    exports.GetComponentUiContainer = GetComponentUiContainer;
    exports.GetCustomFieldSettings = GetCustomFieldSettings;
    exports.GetEncodedSessionSiteVar = GetEncodedSessionSiteVar;
    exports.GetHttpArrayResult = GetHttpArrayResult;
    exports.GetHttpErrorMsg = GetHttpErrorMsg;
    exports.GetHttpObjectResult = GetHttpObjectResult;
    exports.GetHttpResult = GetHttpResult;
    exports.GetObjectTransformations = GetObjectTransformations;
    exports.GetObjectVar = GetObjectVar;
    exports.GetPatternValidator = GetPatternValidator;
    exports.GetRouteAlias = GetRouteAlias;
    exports.GetServiceAssetContainer = GetServiceAssetContainer;
    exports.GetServiceContainer = GetServiceContainer;
    exports.GetServiceDom = GetServiceDom;
    exports.GetServiceUiContainer = GetServiceUiContainer;
    exports.GetSessionSiteVar = GetSessionSiteVar;
    exports.GetSingularName = GetSingularName;
    exports.GetSiteVar = GetSiteVar;
    exports.GetStringAbbrv = GetStringAbbrv;
    exports.GetTabMenuButtons = GetTabMenuButtons;
    exports.GetTabMenuConfig = GetTabMenuConfig;
    exports.GetVerbStateTheme = GetVerbStateTheme;
    exports.HeaderInterceptor = HeaderInterceptor;
    exports.HyphenToPascal = HyphenToPascal;
    exports.InputConfig = InputConfig;
    exports.InterpolateEntityRoute = InterpolateEntityRoute;
    exports.InterpolateEntityRoutes = InterpolateEntityRoutes;
    exports.InterpolateString = InterpolateString;
    exports.IsAliasable = IsAliasable;
    exports.IsArray = IsArray;
    exports.IsArrayThrowError = IsArrayThrowError;
    exports.IsCallableFunction = IsCallableFunction;
    exports.IsDefined = IsDefined;
    exports.IsEntity = IsEntity;
    exports.IsNumber = IsNumber;
    exports.IsObject = IsObject;
    exports.IsObjectThrowError = IsObjectThrowError;
    exports.IsString = IsString;
    exports.IsStringError = IsStringError;
    exports.IsUndefined = IsUndefined;
    exports.IsValidChangeEvent = IsValidChangeEvent;
    exports.IsValidCoreSignature = IsValidCoreSignature;
    exports.IsValidFieldPatchEvent = IsValidFieldPatchEvent;
    exports.JsonCopy = JsonCopy;
    exports.LabelConfig = LabelConfig;
    exports.LabelPipe = LabelPipe;
    exports.LibContainerDirective = LibContainerDirective;
    exports.LibOutsideClickDirective = LibOutsideClickDirective;
    exports.LibTrackCapsLockDirective = LibTrackCapsLockDirective;
    exports.MainSpinnerComponent = MainSpinnerComponent;
    exports.MatchEmail = MatchEmail;
    exports.MatchPassword = MatchPassword;
    exports.MaterialModule = MaterialModule;
    exports.MetadataConfig = MetadataConfig;
    exports.ModelOptionValues = ModelOptionValues;
    exports.NumberConfig = NumberConfig;
    exports.ObjectContainsTagSearch = ObjectContainsTagSearch;
    exports.ObjectsMatch = ObjectsMatch;
    exports.ParentHeightSetter = ParentHeightSetter;
    exports.ParseForAlias = ParseForAlias;
    exports.ParseLinkUrl = ParseLinkUrl;
    exports.ParseModelValue = ParseModelValue;
    exports.ParseModuleRoutes = ParseModuleRoutes;
    exports.ParseModuleRoutesForAliases = ParseModuleRoutesForAliases;
    exports.ParseObjectDefinitions = ParseObjectDefinitions;
    exports.ParseStringForEntityField = ParseStringForEntityField;
    exports.ParseStringForParams = ParseStringForParams;
    exports.ParseUrlForEntityFields = ParseUrlForEntityFields;
    exports.ParseUrlForParams = ParseUrlForParams;
    exports.PatternValidation = PatternValidation;
    exports.PhonePipe = PhonePipe;
    exports.PopAccessGuardService = PopAccessGuardService;
    exports.PopActionDialogComponent = PopActionDialogComponent;
    exports.PopAjaxDialogComponent = PopAjaxDialogComponent;
    exports.PopAjaxDialogModule = PopAjaxDialogModule;
    exports.PopAjaxDialogRequest = PopAjaxDialogRequest;
    exports.PopAuthGuardService = PopAuthGuardService;
    exports.PopBaseModule = PopBaseModule;
    exports.PopBaseService = PopBaseService;
    exports.PopButtonComponent = PopButtonComponent;
    exports.PopCacFilterComponent = PopCacFilterComponent;
    exports.PopCacFilterModule = PopCacFilterModule;
    exports.PopCacFilterViewComponent = PopCacFilterViewComponent;
    exports.PopCacheService = PopCacheService;
    exports.PopCheckboxComponent = PopCheckboxComponent;
    exports.PopCommonModule = PopCommonModule;
    exports.PopCommonService = PopCommonService;
    exports.PopConfirmationDialogComponent = PopConfirmationDialogComponent;
    exports.PopContainerService = PopContainerService;
    exports.PopContextMenuComponent = PopContextMenuComponent;
    exports.PopContextMenuConfig = PopContextMenuConfig;
    exports.PopContextMenuModule = PopContextMenuModule;
    exports.PopCredentialService = PopCredentialService;
    exports.PopDateComponent = PopDateComponent;
    exports.PopDatePickerComponent = PopDatePickerComponent;
    exports.PopDateRangeComponent = PopDateRangeComponent;
    exports.PopDatetimeService = PopDatetimeService;
    exports.PopDialogsModule = PopDialogsModule;
    exports.PopDisplayService = PopDisplayService;
    exports.PopDomService = PopDomService;
    exports.PopEntityAccessComponent = PopEntityAccessComponent;
    exports.PopEntityActionService = PopEntityActionService;
    exports.PopEntityAddressComponent = PopEntityAddressComponent;
    exports.PopEntityAddressEditComponent = PopEntityAddressEditComponent;
    exports.PopEntityAdvancedSearchComponent = PopEntityAdvancedSearchComponent;
    exports.PopEntityAssetComponentModalComponent = PopEntityAssetComponentModalComponent;
    exports.PopEntityAssetFieldModalComponent = PopEntityAssetFieldModalComponent;
    exports.PopEntityAssignmentsComponent = PopEntityAssignmentsComponent;
    exports.PopEntityCheckboxComponent = PopEntityCheckboxComponent;
    exports.PopEntityDatetimeComponent = PopEntityDatetimeComponent;
    exports.PopEntityEmailComponent = PopEntityEmailComponent;
    exports.PopEntityEventService = PopEntityEventService;
    exports.PopEntityExtendService = PopEntityExtendService;
    exports.PopEntityFieldActionBtnComponent = PopEntityFieldActionBtnComponent;
    exports.PopEntityFieldComponent = PopEntityFieldComponent;
    exports.PopEntityFieldDashComponent = PopEntityFieldDashComponent;
    exports.PopEntityFieldDetailsComponent = PopEntityFieldDetailsComponent;
    exports.PopEntityFieldEditIconComponent = PopEntityFieldEditIconComponent;
    exports.PopEntityFieldEditorComponent = PopEntityFieldEditorComponent;
    exports.PopEntityFieldEntriesComponent = PopEntityFieldEntriesComponent;
    exports.PopEntityFieldGroupComponent = PopEntityFieldGroupComponent;
    exports.PopEntityFieldItemParamsComponent = PopEntityFieldItemParamsComponent;
    exports.PopEntityFieldItemsComponent = PopEntityFieldItemsComponent;
    exports.PopEntityFieldModalComponent = PopEntityFieldModalComponent;
    exports.PopEntityFieldPreviewComponent = PopEntityFieldPreviewComponent;
    exports.PopEntityFieldSettingsComponent = PopEntityFieldSettingsComponent;
    exports.PopEntityFieldSpacerComponent = PopEntityFieldSpacerComponent;
    exports.PopEntityFieldValuesComponent = PopEntityFieldValuesComponent;
    exports.PopEntityHistoryComponent = PopEntityHistoryComponent;
    exports.PopEntityInputComponent = PopEntityInputComponent;
    exports.PopEntityListComponent = PopEntityListComponent;
    exports.PopEntityModule = PopEntityModule;
    exports.PopEntityNameComponent = PopEntityNameComponent;
    exports.PopEntityPhoneComponent = PopEntityPhoneComponent;
    exports.PopEntityPortalMenuComponent = PopEntityPortalMenuComponent;
    exports.PopEntityProviderDialogComponent = PopEntityProviderDialogComponent;
    exports.PopEntityRadioComponent = PopEntityRadioComponent;
    exports.PopEntityRepoService = PopEntityRepoService;
    exports.PopEntitySchemeAssetLayoutComponent = PopEntitySchemeAssetLayoutComponent;
    exports.PopEntitySchemeAssetPoolComponent = PopEntitySchemeAssetPoolComponent;
    exports.PopEntitySchemeComponent = PopEntitySchemeComponent;
    exports.PopEntitySchemeCustomComponent = PopEntitySchemeCustomComponent;
    exports.PopEntitySchemeDetailsComponent = PopEntitySchemeDetailsComponent;
    exports.PopEntitySchemeFieldSettingComponent = PopEntitySchemeFieldSettingComponent;
    exports.PopEntitySelectComponent = PopEntitySelectComponent;
    exports.PopEntitySelectMultiComponent = PopEntitySelectMultiComponent;
    exports.PopEntityService = PopEntityService;
    exports.PopEntityStatusComponent = PopEntityStatusComponent;
    exports.PopEntitySwitchComponent = PopEntitySwitchComponent;
    exports.PopEntityTabColumnComponent = PopEntityTabColumnComponent;
    exports.PopEntityTabComponent = PopEntityTabComponent;
    exports.PopEntityTabListComponent = PopEntityTabListComponent;
    exports.PopEntityTabMenuComponent = PopEntityTabMenuComponent;
    exports.PopEntityTextareaComponent = PopEntityTextareaComponent;
    exports.PopEntityUtilFieldService = PopEntityUtilFieldService;
    exports.PopEntityUtilParamService = PopEntityUtilParamService;
    exports.PopEntityUtilPortalService = PopEntityUtilPortalService;
    exports.PopErrorsComponent = PopErrorsComponent;
    exports.PopErrorsModule = PopErrorsModule;
    exports.PopExtendComponent = PopExtendComponent;
    exports.PopExtendDynamicComponent = PopExtendDynamicComponent;
    exports.PopExtendService = PopExtendService;
    exports.PopFieldEditorService = PopFieldEditorService;
    exports.PopFieldItemComponent = PopFieldItemComponent;
    exports.PopFieldItemErrorComponent = PopFieldItemErrorComponent;
    exports.PopFieldItemGroupComponent = PopFieldItemGroupComponent;
    exports.PopFieldItemGroupModule = PopFieldItemGroupModule;
    exports.PopFieldItemHelperComponent = PopFieldItemHelperComponent;
    exports.PopFieldItemLoaderComponent = PopFieldItemLoaderComponent;
    exports.PopFieldItemModule = PopFieldItemModule;
    exports.PopIndicatorsModule = PopIndicatorsModule;
    exports.PopInitializerModule = PopInitializerModule;
    exports.PopInputComponent = PopInputComponent;
    exports.PopLabelComponent = PopLabelComponent;
    exports.PopLeftMenuComponent = PopLeftMenuComponent;
    exports.PopLeftMenuModule = PopLeftMenuModule;
    exports.PopLogService = PopLogService;
    exports.PopMenuComponent = PopMenuComponent;
    exports.PopMenuModule = PopMenuModule;
    exports.PopMessageDialogComponent = PopMessageDialogComponent;
    exports.PopMinMaxComponent = PopMinMaxComponent;
    exports.PopNavigationDialogComponent = PopNavigationDialogComponent;
    exports.PopNumberComponent = PopNumberComponent;
    exports.PopPipeService = PopPipeService;
    exports.PopPreferenceService = PopPreferenceService;
    exports.PopRadioComponent = PopRadioComponent;
    exports.PopRequestExternalService = PopRequestExternalService;
    exports.PopRequestService = PopRequestService;
    exports.PopResourceService = PopResourceService;
    exports.PopRouteHistoryResolver = PopRouteHistoryResolver;
    exports.PopRouteVerifiedGuard = PopRouteVerifiedGuard;
    exports.PopSelectComponent = PopSelectComponent;
    exports.PopSelectFilterComponent = PopSelectFilterComponent;
    exports.PopSelectListComponent = PopSelectListComponent;
    exports.PopSelectModalComponent = PopSelectModalComponent;
    exports.PopSelectModalDialogComponent = PopSelectModalDialogComponent;
    exports.PopSelectMultiComponent = PopSelectMultiComponent;
    exports.PopSideBySideComponent = PopSideBySideComponent;
    exports.PopSideBySideModule = PopSideBySideModule;
    exports.PopSliderComponent = PopSliderComponent;
    exports.PopSuccessDialogComponent = PopSuccessDialogComponent;
    exports.PopSwitchComponent = PopSwitchComponent;
    exports.PopTabMenuComponent = PopTabMenuComponent;
    exports.PopTabMenuModule = PopTabMenuModule;
    exports.PopTabMenuSectionBarComponent = PopTabMenuSectionBarComponent;
    exports.PopTabMenuService = PopTabMenuService;
    exports.PopTableComponent = PopTableComponent;
    exports.PopTableDialogComponent = PopTableDialogComponent$1;
    exports.PopTableModule = PopTableModule;
    exports.PopTableViewComponent = PopTableViewComponent;
    exports.PopTemplateComponent = PopTemplateComponent;
    exports.PopTemplateModule = PopTemplateModule;
    exports.PopTextComponent = PopTextComponent;
    exports.PopTextareaComponent = PopTextareaComponent;
    exports.PopTimeComponent = PopTimeComponent;
    exports.PopTransform = PopTransform;
    exports.PopUid = PopUid;
    exports.PopWidgetBarComponent = PopWidgetBarComponent;
    exports.PopWidgetBarModule = PopWidgetBarModule;
    exports.RadioConfig = RadioConfig;
    exports.RandomArrayElement = RandomArrayElement;
    exports.RandomInt = RandomInt;
    exports.RegexPatterns = RegexPatterns;
    exports.ResourceConfig = ResourceConfig;
    exports.Response401Interceptor = Response401Interceptor;
    exports.SchemeComponentConfig = SchemeComponentConfig;
    exports.SchemeComponentParams = SchemeComponentParams;
    exports.SectionConfig = SectionConfig;
    exports.SelectConfig = SelectConfig;
    exports.SelectFilterConfig = SelectFilterConfig;
    exports.SelectListConfig = SelectListConfig;
    exports.SelectModalConfig = SelectModalConfig;
    exports.SelectMultiConfig = SelectMultiConfig;
    exports.SessionEntityFieldUpdate = SessionEntityFieldUpdate;
    exports.SetCoreValue = SetCoreValue;
    exports.SetPopAliasRouteMap = SetPopAliasRouteMap;
    exports.SetPopApp = SetPopApp;
    exports.SetPopAuth = SetPopAuth;
    exports.SetPopBusiness = SetPopBusiness;
    exports.SetPopCacheRedirectUrl = SetPopCacheRedirectUrl;
    exports.SetPopComponentResolver = SetPopComponentResolver;
    exports.SetPopDate = SetPopDate;
    exports.SetPopEntity = SetPopEntity;
    exports.SetPopEnv = SetPopEnv;
    exports.SetPopExternalApi = SetPopExternalApi;
    exports.SetPopFilter = SetPopFilter;
    exports.SetPopHistory = SetPopHistory;
    exports.SetPopHref = SetPopHref;
    exports.SetPopLogger = SetPopLogger;
    exports.SetPopMessage = SetPopMessage;
    exports.SetPopPipe = SetPopPipe;
    exports.SetPopPortal = SetPopPortal;
    exports.SetPopRequest = SetPopRequest;
    exports.SetPopRouteAliasMap = SetPopRouteAliasMap;
    exports.SetPopSchemeComponent = SetPopSchemeComponent;
    exports.SetPopTemplate = SetPopTemplate;
    exports.SetPopUser = SetPopUser;
    exports.SetServiceInjector = SetServiceInjector;
    exports.SetSessionSiteVar = SetSessionSiteVar;
    exports.SetSiteVar = SetSiteVar;
    exports.SideBySideConfig = SideBySideConfig;
    exports.Sleep = Sleep;
    exports.SnakeToPascal = SnakeToPascal;
    exports.SpaceToHyphenLower = SpaceToHyphenLower;
    exports.SpaceToSnake = SpaceToSnake;
    exports.StorageGetter = StorageGetter;
    exports.StorageSetter = StorageSetter;
    exports.StringReplaceAll = StringReplaceAll;
    exports.SwitchConfig = SwitchConfig;
    exports.TabConfig = TabConfig;
    exports.TabMenuConfig = TabMenuConfig;
    exports.TabSectionBarConfig = TabSectionBarConfig;
    exports.TableConfig = TableConfig;
    exports.TableOptionsConfig = TableOptionsConfig;
    exports.TextConfig = TextConfig;
    exports.TextareaConfig = TextareaConfig;
    exports.TimeConfig = TimeConfig;
    exports.TitleCase = TitleCase;
    exports.ToActiveOrArchivedPipe = ToActiveOrArchivedPipe;
    exports.ToArray = ToArray;
    exports.ToObject = ToObject;
    exports.ToYesNoPipe = ToYesNoPipe;
    exports.TruncatePipe = TruncatePipe;
    exports.ValidateAlpha = ValidateAlpha;
    exports.ValidateAlphaLowercaseNoSpace = ValidateAlphaLowercaseNoSpace;
    exports.ValidateAlphaNoSpace = ValidateAlphaNoSpace;
    exports.ValidateAlphaNumeric = ValidateAlphaNumeric;
    exports.ValidateAlphaNumericNoSpace = ValidateAlphaNumericNoSpace;
    exports.ValidateAlphaNumericNoUnderscore = ValidateAlphaNumericNoUnderscore;
    exports.ValidateBlacklist = ValidateBlacklist;
    exports.ValidateEmail = ValidateEmail;
    exports.ValidateNumeric = ValidateNumeric;
    exports.ValidateNumericNoSpace = ValidateNumericNoSpace;
    exports.ValidatePassword = ValidatePassword;
    exports.ValidatePhone = ValidatePhone;
    exports.ValidateUrl = ValidateUrl;
    exports.ValidateUsername = ValidateUsername;
    exports.ValidateZip = ValidateZip;
    exports.ValidationErrorMessages = ValidationErrorMessages;
    exports.fadeInOut = fadeInOut;
    exports.slideInOut = slideInOut;
    exports.ɵa = PopMenuService;
    exports.ɵb = ClickOutsideDirective;
    exports.ɵc = PopTemplateService;
    exports.ɵd = PopCacFilterBarService;
    exports.ɵe = PopTemplateAjaxLoaderComponent;
    exports.ɵf = PopTemplateWelcomeComponent;
    exports.ɵg = PopTemplateGoodByeComponent;
    exports.ɵh = PopTemplateErrorComponent;
    exports.ɵi = PopTemplateBufferComponent;
    exports.ɵj = PopRedirectsModule;
    exports.ɵk = PopErrorRedirectComponent;
    exports.ɵl = PopCacheRedirectComponent;
    exports.ɵm = PopGuardRedirectComponent;
    exports.ɵn = PopEntitySchemeComponentService;
    exports.ɵo = CustomDateAdapter;
    exports.ɵp = PopTableDialogComponent;
    exports.ɵq = ErrorComponent;
    exports.ɵr = InDialogComponent;
    exports.ɵs = GroupComponent;
    exports.ɵt = CharacterIconPipe;
    exports.ɵu = DialogComponent;
    exports.ɵv = PopEntityFieldBoilerComponent;
    exports.ɵw = PopEntitySchemeService;
    exports.ɵx = PopEntitySchemeCustomSettingComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pop-common.umd.js.map
